
BEAVIS-Combined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800d540  0800d540  0000e540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbd0  0800dbd0  0000f1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbd0  0800dbd0  0000ebd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbd8  0800dbd8  0000f1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbd8  0800dbd8  0000ebd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbdc  0800dbdc  0000ebdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800dbe0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1fc  2**0
                  CONTENTS
 10 .bss          00005080  200001fc  200001fc  0000f1fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000527c  2000527c  0000f1fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f70  00000000  00000000  0000f22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f49  00000000  00000000  0003119c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e90  00000000  00000000  000360e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017c2  00000000  00000000  00037f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cae  00000000  00000000  0003973a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028861  00000000  00000000  0005f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d563e  00000000  00000000  00087c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015d287  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009644  00000000  00000000  0015d2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00166910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d524 	.word	0x0800d524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800d524 	.word	0x0800d524

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <VL53L1X_StartRanging>:
	*pInterruptPolarity = !(Temp>>4);
	return status;
}

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	2240      	movs	r2, #64	@ 0x40
 8000ff6:	2187      	movs	r1, #135	@ 0x87
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 f90b 	bl	8002214 <VL53L1_WrByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4313      	orrs	r3, r2
 8001006:	73fb      	strb	r3, [r7, #15]
	return status;
 8001008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8001028:	f107 020e 	add.w	r2, r7, #14
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	21e5      	movs	r1, #229	@ 0xe5
 8001030:	4618      	mov	r0, r3
 8001032:	f001 f871 	bl	8002118 <VL53L1_RdByte>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	4313      	orrs	r3, r2
 800103e:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8001040:	7bba      	ldrb	r2, [r7, #14]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	701a      	strb	r2, [r3, #0]
	return status;
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 800105c:	1d39      	adds	r1, r7, #4
 800105e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001062:	2201      	movs	r2, #1
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <__io_putchar+0x20>)
 8001066:	f004 fda7 	bl	8005bb8 <HAL_UART_Transmit>
		return ch;
 800106a:	687b      	ldr	r3, [r7, #4]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000588 	.word	0x20000588

08001078 <bmi088_starting>:
};




void bmi088_starting(){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

	printf("BMI088 I2C Test\n");
 800107c:	485d      	ldr	r0, [pc, #372]	@ (80011f4 <bmi088_starting+0x17c>)
 800107e:	f008 fdd9 	bl	8009c34 <puts>
	printf("Bolgen Studio\n");
 8001082:	485d      	ldr	r0, [pc, #372]	@ (80011f8 <bmi088_starting+0x180>)
 8001084:	f008 fdd6 	bl	8009c34 <puts>

	/* Initializing the bmi088 sensors the below function will Initialize both accel and gyro sensors */
	rslt = bmi088_init(&dev);
 8001088:	485c      	ldr	r0, [pc, #368]	@ (80011fc <bmi088_starting+0x184>)
 800108a:	f001 f970 	bl	800236e <bmi088_init>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <bmi088_starting+0x188>)
 8001094:	701a      	strb	r2, [r3, #0]

	if(rslt == BMI08X_OK)
 8001096:	4b5a      	ldr	r3, [pc, #360]	@ (8001200 <bmi088_starting+0x188>)
 8001098:	f993 3000 	ldrsb.w	r3, [r3]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d12b      	bne.n	80010f8 <bmi088_starting+0x80>
	{

    /* Read accel chip id */
    rslt = bmi08a_get_regs(BMI08X_ACCEL_CHIP_ID_REG, &data, 1, &dev);
 80010a0:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <bmi088_starting+0x184>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	4957      	ldr	r1, [pc, #348]	@ (8001204 <bmi088_starting+0x18c>)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f001 f9bc 	bl	8002424 <bmi08a_get_regs>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b53      	ldr	r3, [pc, #332]	@ (8001200 <bmi088_starting+0x188>)
 80010b2:	701a      	strb	r2, [r3, #0]
		printf("Accel Initialization OK\n");
 80010b4:	4854      	ldr	r0, [pc, #336]	@ (8001208 <bmi088_starting+0x190>)
 80010b6:	f008 fdbd 	bl	8009c34 <puts>
		printf("Accel Chip ID: 0x%02X\n",data);
 80010ba:	4b52      	ldr	r3, [pc, #328]	@ (8001204 <bmi088_starting+0x18c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	4852      	ldr	r0, [pc, #328]	@ (800120c <bmi088_starting+0x194>)
 80010c2:	f008 fd47 	bl	8009b54 <iprintf>

		if(rslt == BMI08X_OK)
 80010c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001200 <bmi088_starting+0x188>)
 80010c8:	f993 3000 	ldrsb.w	r3, [r3]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d118      	bne.n	8001102 <bmi088_starting+0x8a>
		{
			/* Read gyro chip id */
			rslt = bmi08g_get_regs(BMI08X_GYRO_CHIP_ID_REG, &data, 1, &dev);
 80010d0:	4b4a      	ldr	r3, [pc, #296]	@ (80011fc <bmi088_starting+0x184>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	494b      	ldr	r1, [pc, #300]	@ (8001204 <bmi088_starting+0x18c>)
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 fcaf 	bl	8002a3a <bmi08g_get_regs>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	4b47      	ldr	r3, [pc, #284]	@ (8001200 <bmi088_starting+0x188>)
 80010e2:	701a      	strb	r2, [r3, #0]
			printf("GYRO Initialization OK\n");
 80010e4:	484a      	ldr	r0, [pc, #296]	@ (8001210 <bmi088_starting+0x198>)
 80010e6:	f008 fda5 	bl	8009c34 <puts>
			printf("GYRO Chip ID: 0x%02X\n",data);
 80010ea:	4b46      	ldr	r3, [pc, #280]	@ (8001204 <bmi088_starting+0x18c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4848      	ldr	r0, [pc, #288]	@ (8001214 <bmi088_starting+0x19c>)
 80010f2:	f008 fd2f 	bl	8009b54 <iprintf>
 80010f6:	e004      	b.n	8001102 <bmi088_starting+0x8a>
		}
	}
	else
	{

		printf("BMI088 Initialization Error\n");
 80010f8:	4847      	ldr	r0, [pc, #284]	@ (8001218 <bmi088_starting+0x1a0>)
 80010fa:	f008 fd9b 	bl	8009c34 <puts>
		while(1);
 80010fe:	bf00      	nop
 8001100:	e7fd      	b.n	80010fe <bmi088_starting+0x86>
	}

	/* Perform soft reset */
  rslt = bmi08a_soft_reset(&dev);
 8001102:	483e      	ldr	r0, [pc, #248]	@ (80011fc <bmi088_starting+0x184>)
 8001104:	f001 f9ba 	bl	800247c <bmi08a_soft_reset>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b3c      	ldr	r3, [pc, #240]	@ (8001200 <bmi088_starting+0x188>)
 800110e:	701a      	strb	r2, [r3, #0]
	if (rslt != BMI08X_OK)
 8001110:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <bmi088_starting+0x188>)
 8001112:	f993 3000 	ldrsb.w	r3, [r3]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <bmi088_starting+0xac>
	{
		printf("BMI088 Soft Reset Error\n");
 800111a:	4840      	ldr	r0, [pc, #256]	@ (800121c <bmi088_starting+0x1a4>)
 800111c:	f008 fd8a 	bl	8009c34 <puts>
		while(1);
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <bmi088_starting+0xa8>
	}
	/* Read the accel power mode */
	rslt = bmi08a_get_power_mode(&dev);
 8001124:	4835      	ldr	r0, [pc, #212]	@ (80011fc <bmi088_starting+0x184>)
 8001126:	f001 fa93 	bl	8002650 <bmi08a_get_power_mode>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <bmi088_starting+0x188>)
 8001130:	701a      	strb	r2, [r3, #0]
	/* Read the accel sensor config parameters (odr,bw,range) */
	rslt = bmi08a_get_meas_conf(&dev);
 8001132:	4832      	ldr	r0, [pc, #200]	@ (80011fc <bmi088_starting+0x184>)
 8001134:	f001 f9d5 	bl	80024e2 <bmi08a_get_meas_conf>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <bmi088_starting+0x188>)
 800113e:	701a      	strb	r2, [r3, #0]
	/* Initialize the device instance as per the initialization example */

/* Assign the desired configurations */
	dev.accel_cfg.bw = BMI08X_ACCEL_BW_NORMAL;
 8001140:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <bmi088_starting+0x184>)
 8001142:	2202      	movs	r2, #2
 8001144:	721a      	strb	r2, [r3, #8]
	dev.accel_cfg.odr = BMI08X_ACCEL_ODR_1600_HZ;
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <bmi088_starting+0x184>)
 8001148:	220c      	movs	r2, #12
 800114a:	725a      	strb	r2, [r3, #9]
	dev.accel_cfg.range = BMI088_ACCEL_RANGE_3G;
 800114c:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <bmi088_starting+0x184>)
 800114e:	2200      	movs	r2, #0
 8001150:	71da      	strb	r2, [r3, #7]
	dev.accel_cfg.power = BMI08X_ACCEL_PM_ACTIVE;
 8001152:	4b2a      	ldr	r3, [pc, #168]	@ (80011fc <bmi088_starting+0x184>)
 8001154:	2200      	movs	r2, #0
 8001156:	719a      	strb	r2, [r3, #6]

	rslt = bmi08a_set_power_mode(&dev);
 8001158:	4828      	ldr	r0, [pc, #160]	@ (80011fc <bmi088_starting+0x184>)
 800115a:	f001 fa9c 	bl	8002696 <bmi08a_set_power_mode>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <bmi088_starting+0x188>)
 8001164:	701a      	strb	r2, [r3, #0]

	/* Wait for 10ms to switch between the power modes - delay taken care inside the function */
	rslt = bmi08a_set_meas_conf(&dev);
 8001166:	4825      	ldr	r0, [pc, #148]	@ (80011fc <bmi088_starting+0x184>)
 8001168:	f001 f9ef 	bl	800254a <bmi08a_set_meas_conf>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <bmi088_starting+0x188>)
 8001172:	701a      	strb	r2, [r3, #0]

  /* Configuring the gyro	 */
	dev.gyro_cfg.power = BMI08X_GYRO_PM_NORMAL;
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <bmi088_starting+0x184>)
 8001176:	2200      	movs	r2, #0
 8001178:	729a      	strb	r2, [r3, #10]

	rslt = bmi08g_set_power_mode(&dev);
 800117a:	4820      	ldr	r0, [pc, #128]	@ (80011fc <bmi088_starting+0x184>)
 800117c:	f001 fd07 	bl	8002b8e <bmi08g_set_power_mode>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <bmi088_starting+0x188>)
 8001186:	701a      	strb	r2, [r3, #0]
	/* Wait for 30ms to switch between the power modes - delay taken care inside the function */

	/* Assign the desired configurations */
	dev.gyro_cfg.odr = BMI08X_GYRO_BW_23_ODR_200_HZ;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <bmi088_starting+0x184>)
 800118a:	2204      	movs	r2, #4
 800118c:	735a      	strb	r2, [r3, #13]
	dev.gyro_cfg.range = BMI08X_GYRO_RANGE_1000_DPS;
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <bmi088_starting+0x184>)
 8001190:	2201      	movs	r2, #1
 8001192:	72da      	strb	r2, [r3, #11]
	dev.gyro_cfg.bw = BMI08X_GYRO_BW_23_ODR_200_HZ;
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <bmi088_starting+0x184>)
 8001196:	2204      	movs	r2, #4
 8001198:	731a      	strb	r2, [r3, #12]

	rslt = bmi08g_set_meas_conf(&dev);
 800119a:	4818      	ldr	r0, [pc, #96]	@ (80011fc <bmi088_starting+0x184>)
 800119c:	f001 fc79 	bl	8002a92 <bmi08g_set_meas_conf>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <bmi088_starting+0x188>)
 80011a6:	701a      	strb	r2, [r3, #0]

	switch(dev.accel_cfg.range)
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <bmi088_starting+0x184>)
 80011aa:	79db      	ldrb	r3, [r3, #7]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d81b      	bhi.n	80011e8 <bmi088_starting+0x170>
 80011b0:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <bmi088_starting+0x140>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011d1 	.word	0x080011d1
 80011c0:	080011d9 	.word	0x080011d9
 80011c4:	080011e1 	.word	0x080011e1
	{
		case BMI088_ACCEL_RANGE_3G: accRange = 3000;break;
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <bmi088_starting+0x1a8>)
 80011ca:	4a16      	ldr	r2, [pc, #88]	@ (8001224 <bmi088_starting+0x1ac>)
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e00f      	b.n	80011f0 <bmi088_starting+0x178>
		case BMI088_ACCEL_RANGE_6G: accRange = 6000;break;
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <bmi088_starting+0x1a8>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <bmi088_starting+0x1b0>)
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e00b      	b.n	80011f0 <bmi088_starting+0x178>
		case BMI088_ACCEL_RANGE_12G: accRange = 12000;break;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <bmi088_starting+0x1a8>)
 80011da:	4a14      	ldr	r2, [pc, #80]	@ (800122c <bmi088_starting+0x1b4>)
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e007      	b.n	80011f0 <bmi088_starting+0x178>
		case BMI088_ACCEL_RANGE_24G: accRange = 24000;break;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <bmi088_starting+0x1a8>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	@ (8001230 <bmi088_starting+0x1b8>)
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e003      	b.n	80011f0 <bmi088_starting+0x178>
		default: accRange = 24000;break;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <bmi088_starting+0x1a8>)
 80011ea:	4a11      	ldr	r2, [pc, #68]	@ (8001230 <bmi088_starting+0x1b8>)
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	bf00      	nop
	}


}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0800d540 	.word	0x0800d540
 80011f8:	0800d550 	.word	0x0800d550
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000218 	.word	0x20000218
 8001204:	20000219 	.word	0x20000219
 8001208:	0800d560 	.word	0x0800d560
 800120c:	0800d578 	.word	0x0800d578
 8001210:	0800d590 	.word	0x0800d590
 8001214:	0800d5a8 	.word	0x0800d5a8
 8001218:	0800d5c0 	.word	0x0800d5c0
 800121c:	0800d5dc 	.word	0x0800d5dc
 8001220:	20000230 	.word	0x20000230
 8001224:	453b8000 	.word	0x453b8000
 8001228:	45bb8000 	.word	0x45bb8000
 800122c:	463b8000 	.word	0x463b8000
 8001230:	46bb8000 	.word	0x46bb8000

08001234 <stm32_i2c_write>:
typedef int8_t (*bmi08x_com_fptr_t)(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len);

int8_t stm32_i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
 800123a:	603a      	str	r2, [r7, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	460b      	mov	r3, r1
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	4613      	mov	r3, r2
 8001248:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, reg_addr, 1, data, len, 100);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	b29b      	uxth	r3, r3
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	b299      	uxth	r1, r3
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	b29a      	uxth	r2, r3
 8001256:	2364      	movs	r3, #100	@ 0x64
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	4807      	ldr	r0, [pc, #28]	@ (8001284 <stm32_i2c_write+0x50>)
 8001266:	f002 f9e5 	bl	8003634 <HAL_I2C_Mem_Write>
	while(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_BUSY);
 800126a:	bf00      	nop
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <stm32_i2c_write+0x50>)
 800126e:	f002 fd0d 	bl	8003c8c <HAL_I2C_GetState>
 8001272:	4603      	mov	r3, r0
 8001274:	2b24      	cmp	r3, #36	@ 0x24
 8001276:	d0f9      	beq.n	800126c <stm32_i2c_write+0x38>

	return 0;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000234 	.word	0x20000234

08001288 <stm32_i2c_read>:

int8_t stm32_i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af04      	add	r7, sp, #16
 800128e:	603a      	str	r2, [r7, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	460b      	mov	r3, r1
 8001298:	71bb      	strb	r3, [r7, #6]
 800129a:	4613      	mov	r3, r2
 800129c:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, reg_addr, 1, data, len, 100);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	b299      	uxth	r1, r3
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	2364      	movs	r3, #100	@ 0x64
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <stm32_i2c_read+0x40>)
 80012ba:	f002 fab5 	bl	8003828 <HAL_I2C_Mem_Read>

	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000234 	.word	0x20000234
 80012cc:	00000000 	.word	0x00000000

080012d0 <bmi088_read>:

void bmi088_read(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

	/*读取数据*/
		while(1){
			/* Read the sensor data into the sensor data instance */
			rslt = bmi08a_get_data(&user_accel_bmi088, &dev);
 80012d4:	4958      	ldr	r1, [pc, #352]	@ (8001438 <bmi088_read+0x168>)
 80012d6:	4859      	ldr	r0, [pc, #356]	@ (800143c <bmi088_read+0x16c>)
 80012d8:	f001 fa2c 	bl	8002734 <bmi08a_get_data>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <bmi088_read+0x170>)
 80012e2:	701a      	strb	r2, [r3, #0]
			/* Read the sensor data into the sensor data instance */
			rslt = bmi08g_get_data(&user_gyro_bmi088, &dev);
 80012e4:	4954      	ldr	r1, [pc, #336]	@ (8001438 <bmi088_read+0x168>)
 80012e6:	4857      	ldr	r0, [pc, #348]	@ (8001444 <bmi088_read+0x174>)
 80012e8:	f001 fc9d 	bl	8002c26 <bmi08g_get_data>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <bmi088_read+0x170>)
 80012f2:	701a      	strb	r2, [r3, #0]

	//		printf("x:%f",user_accel_bmi088.x * accRange / 32768 );
			printf("x:%.3f",user_accel_bmi088.x/ 10920.0 );
 80012f4:	4b51      	ldr	r3, [pc, #324]	@ (800143c <bmi088_read+0x16c>)
 80012f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f912 	bl	8000524 <__aeabi_i2d>
 8001300:	a349      	add	r3, pc, #292	@ (adr r3, 8001428 <bmi088_read+0x158>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff faa1 	bl	800084c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	484e      	ldr	r0, [pc, #312]	@ (8001448 <bmi088_read+0x178>)
 8001310:	f008 fc20 	bl	8009b54 <iprintf>
			printf("\t");
 8001314:	2009      	movs	r0, #9
 8001316:	f008 fc2f 	bl	8009b78 <putchar>
			printf("y:%.3f",user_accel_bmi088.y/ 10920.0 );
 800131a:	4b48      	ldr	r3, [pc, #288]	@ (800143c <bmi088_read+0x16c>)
 800131c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8ff 	bl	8000524 <__aeabi_i2d>
 8001326:	a340      	add	r3, pc, #256	@ (adr r3, 8001428 <bmi088_read+0x158>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff fa8e 	bl	800084c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4845      	ldr	r0, [pc, #276]	@ (800144c <bmi088_read+0x17c>)
 8001336:	f008 fc0d 	bl	8009b54 <iprintf>
			printf("\t");
 800133a:	2009      	movs	r0, #9
 800133c:	f008 fc1c 	bl	8009b78 <putchar>
			printf("z:%.3f",user_accel_bmi088.z/ 10920.0 );
 8001340:	4b3e      	ldr	r3, [pc, #248]	@ (800143c <bmi088_read+0x16c>)
 8001342:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8ec 	bl	8000524 <__aeabi_i2d>
 800134c:	a336      	add	r3, pc, #216	@ (adr r3, 8001428 <bmi088_read+0x158>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fa7b 	bl	800084c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	483d      	ldr	r0, [pc, #244]	@ (8001450 <bmi088_read+0x180>)
 800135c:	f008 fbfa 	bl	8009b54 <iprintf>
			printf("\t\t");
 8001360:	483c      	ldr	r0, [pc, #240]	@ (8001454 <bmi088_read+0x184>)
 8001362:	f008 fbf7 	bl	8009b54 <iprintf>
			printf("x:%.3f",user_gyro_bmi088.x / 32.768);
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <bmi088_read+0x174>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8d9 	bl	8000524 <__aeabi_i2d>
 8001372:	a32f      	add	r3, pc, #188	@ (adr r3, 8001430 <bmi088_read+0x160>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff fa68 	bl	800084c <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4831      	ldr	r0, [pc, #196]	@ (8001448 <bmi088_read+0x178>)
 8001382:	f008 fbe7 	bl	8009b54 <iprintf>
			printf("\t");
 8001386:	2009      	movs	r0, #9
 8001388:	f008 fbf6 	bl	8009b78 <putchar>
			printf("y:%.3f",user_gyro_bmi088.y / 32.768);
 800138c:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <bmi088_read+0x174>)
 800138e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8c6 	bl	8000524 <__aeabi_i2d>
 8001398:	a325      	add	r3, pc, #148	@ (adr r3, 8001430 <bmi088_read+0x160>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff fa55 	bl	800084c <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4829      	ldr	r0, [pc, #164]	@ (800144c <bmi088_read+0x17c>)
 80013a8:	f008 fbd4 	bl	8009b54 <iprintf>
			printf("\t");
 80013ac:	2009      	movs	r0, #9
 80013ae:	f008 fbe3 	bl	8009b78 <putchar>
			printf("z:%.3f",user_gyro_bmi088.z / 32.768);
 80013b2:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <bmi088_read+0x174>)
 80013b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8b3 	bl	8000524 <__aeabi_i2d>
 80013be:	a31c      	add	r3, pc, #112	@ (adr r3, 8001430 <bmi088_read+0x160>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff fa42 	bl	800084c <__aeabi_ddiv>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4820      	ldr	r0, [pc, #128]	@ (8001450 <bmi088_read+0x180>)
 80013ce:	f008 fbc1 	bl	8009b54 <iprintf>
			printf("\t");
 80013d2:	2009      	movs	r0, #9
 80013d4:	f008 fbd0 	bl	8009b78 <putchar>

			rslt = bmi08a_get_sensor_temperature(&dev,&bmi08x_sensor_temp);
 80013d8:	491f      	ldr	r1, [pc, #124]	@ (8001458 <bmi088_read+0x188>)
 80013da:	4817      	ldr	r0, [pc, #92]	@ (8001438 <bmi088_read+0x168>)
 80013dc:	f001 fa01 	bl	80027e2 <bmi08a_get_sensor_temperature>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <bmi088_read+0x170>)
 80013e6:	701a      	strb	r2, [r3, #0]
			if (rslt == BMI08X_OK)
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <bmi088_read+0x170>)
 80013ea:	f993 3000 	ldrsb.w	r3, [r3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <bmi088_read+0x142>
			{
				printf("Temp:%.3f", bmi08x_sensor_temp/1000.0);
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <bmi088_read+0x188>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f894 	bl	8000524 <__aeabi_i2d>
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <bmi088_read+0x18c>)
 8001402:	f7ff fa23 	bl	800084c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4815      	ldr	r0, [pc, #84]	@ (8001460 <bmi088_read+0x190>)
 800140c:	f008 fba2 	bl	8009b54 <iprintf>
 8001410:	e002      	b.n	8001418 <bmi088_read+0x148>
			}
			else
			{
					printf("BMI088 Get Sensor Temperature Error\n");
 8001412:	4814      	ldr	r0, [pc, #80]	@ (8001464 <bmi088_read+0x194>)
 8001414:	f008 fc0e 	bl	8009c34 <puts>
			}
			printf("\n");
 8001418:	200a      	movs	r0, #10
 800141a:	f008 fbad 	bl	8009b78 <putchar>

			HAL_Delay(1000);
 800141e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001422:	f001 fd07 	bl	8002e34 <HAL_Delay>
			rslt = bmi08a_get_data(&user_accel_bmi088, &dev);
 8001426:	e755      	b.n	80012d4 <bmi088_read+0x4>
 8001428:	00000000 	.word	0x00000000
 800142c:	40c55400 	.word	0x40c55400
 8001430:	d2f1a9fc 	.word	0xd2f1a9fc
 8001434:	4040624d 	.word	0x4040624d
 8001438:	20000000 	.word	0x20000000
 800143c:	20000220 	.word	0x20000220
 8001440:	20000218 	.word	0x20000218
 8001444:	20000228 	.word	0x20000228
 8001448:	0800d5f4 	.word	0x0800d5f4
 800144c:	0800d5fc 	.word	0x0800d5fc
 8001450:	0800d604 	.word	0x0800d604
 8001454:	0800d60c 	.word	0x0800d60c
 8001458:	2000021c 	.word	0x2000021c
 800145c:	408f4000 	.word	0x408f4000
 8001460:	0800d610 	.word	0x0800d610
 8001464:	0800d61c 	.word	0x0800d61c

08001468 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af02      	add	r7, sp, #8
  /* Create the thread(s) */
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(bmi088_read, "bmi088_read", 128, NULL, osPriorityNormal, NULL);
 800146e:	2300      	movs	r3, #0
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	2318      	movs	r3, #24
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	4908      	ldr	r1, [pc, #32]	@ (800149c <MX_FREERTOS_Init+0x34>)
 800147c:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <MX_FREERTOS_Init+0x38>)
 800147e:	f005 fe27 	bl	80070d0 <xTaskCreate>

  xTaskCreate(pmw3901_read, "pmw3901_read", 128, NULL, osPriorityNormal, NULL);
 8001482:	2300      	movs	r3, #0
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	2318      	movs	r3, #24
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	2280      	movs	r2, #128	@ 0x80
 800148e:	4905      	ldr	r1, [pc, #20]	@ (80014a4 <MX_FREERTOS_Init+0x3c>)
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <MX_FREERTOS_Init+0x40>)
 8001492:	f005 fe1d 	bl	80070d0 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0800d64c 	.word	0x0800d64c
 80014a0:	080012d1 	.word	0x080012d1
 80014a4:	0800d658 	.word	0x0800d658
 80014a8:	08001b5d 	.word	0x08001b5d

080014ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <MX_GPIO_Init+0xb4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a25      	ldr	r2, [pc, #148]	@ (8001560 <MX_GPIO_Init+0xb4>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <MX_GPIO_Init+0xb4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <MX_GPIO_Init+0xb4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001560 <MX_GPIO_Init+0xb4>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <MX_GPIO_Init+0xb4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_GPIO_Init+0xb4>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <MX_GPIO_Init+0xb4>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_GPIO_Init+0xb4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_XSHUT_Pin|PIN_CS_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f240 2101 	movw	r1, #513	@ 0x201
 800151c:	4811      	ldr	r0, [pc, #68]	@ (8001564 <MX_GPIO_Init+0xb8>)
 800151e:	f001 ff2b 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin|PIN_CS_Pin;
 8001522:	f240 2301 	movw	r3, #513	@ 0x201
 8001526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	480a      	ldr	r0, [pc, #40]	@ (8001564 <MX_GPIO_Init+0xb8>)
 800153c:	f001 fd80 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_GPIO_Pin;
 8001540:	2302      	movs	r3, #2
 8001542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_GPIO_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4619      	mov	r1, r3
 8001552:	4804      	ldr	r0, [pc, #16]	@ (8001564 <MX_GPIO_Init+0xb8>)
 8001554:	f001 fd74 	bl	8003040 <HAL_GPIO_Init>

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	40020400 	.word	0x40020400

08001568 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	@ (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f001 ff01 	bl	80033ac <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 f972 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000234 	.word	0x20000234
 80015bc:	40005400 	.word	0x40005400
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_I2C2_Init+0x50>)
 80015ca:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <MX_I2C2_Init+0x54>)
 80015cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_I2C2_Init+0x50>)
 80015d0:	4a12      	ldr	r2, [pc, #72]	@ (800161c <MX_I2C2_Init+0x58>)
 80015d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_I2C2_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_I2C2_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_I2C2_Init+0x50>)
 80015e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <MX_I2C2_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_I2C2_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <MX_I2C2_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_I2C2_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_I2C2_Init+0x50>)
 8001602:	f001 fed3 	bl	80033ac <HAL_I2C_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800160c:	f000 f944 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000288 	.word	0x20000288
 8001618:	40005800 	.word	0x40005800
 800161c:	000186a0 	.word	0x000186a0

08001620 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	@ 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a32      	ldr	r2, [pc, #200]	@ (8001708 <HAL_I2C_MspInit+0xe8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12c      	bne.n	800169c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <HAL_I2C_MspInit+0xec>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a30      	ldr	r2, [pc, #192]	@ (800170c <HAL_I2C_MspInit+0xec>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <HAL_I2C_MspInit+0xec>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165e:	23c0      	movs	r3, #192	@ 0xc0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001662:	2312      	movs	r3, #18
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166e:	2304      	movs	r3, #4
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4825      	ldr	r0, [pc, #148]	@ (8001710 <HAL_I2C_MspInit+0xf0>)
 800167a:	f001 fce1 	bl	8003040 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_I2C_MspInit+0xec>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a21      	ldr	r2, [pc, #132]	@ (800170c <HAL_I2C_MspInit+0xec>)
 8001688:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <HAL_I2C_MspInit+0xec>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800169a:	e031      	b.n	8001700 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001714 <HAL_I2C_MspInit+0xf4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12c      	bne.n	8001700 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_I2C_MspInit+0xec>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a17      	ldr	r2, [pc, #92]	@ (800170c <HAL_I2C_MspInit+0xec>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_I2C_MspInit+0xec>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TOF_SCL_Pin|TOF_SDA_Pin;
 80016c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c8:	2312      	movs	r3, #18
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016d4:	2304      	movs	r3, #4
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	480c      	ldr	r0, [pc, #48]	@ (8001710 <HAL_I2C_MspInit+0xf0>)
 80016e0:	f001 fcae 	bl	8003040 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_I2C_MspInit+0xec>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	4a07      	ldr	r2, [pc, #28]	@ (800170c <HAL_I2C_MspInit+0xec>)
 80016ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_I2C_MspInit+0xec>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	@ 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40005400 	.word	0x40005400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400
 8001714:	40005800 	.word	0x40005800

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171c:	f001 fb48 	bl	8002db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001720:	f000 f83e 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001724:	f7ff fec2 	bl	80014ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001728:	f7ff ff1e 	bl	8001568 <MX_I2C1_Init>
  MX_I2C2_Init();
 800172c:	f7ff ff4a 	bl	80015c4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001730:	f000 fa5c 	bl	8001bec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001734:	f000 fc7e 	bl	8002034 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //initialize BMI800
  bmi088_starting();
 8001738:	f7ff fc9e 	bl	8001078 <bmi088_starting>

  //initialize PMW3901
  error = PMW3901_init();
 800173c:	f000 f8b2 	bl	80018a4 <PMW3901_init>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <main+0x80>)
 8001746:	701a      	strb	r2, [r3, #0]
  if(error)
 8001748:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <main+0x80>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <main+0x3c>
  {
	  while(1);
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <main+0x38>
  }

  //Initialize VL53L1X
  status = VL53L1__Init();
 8001754:	f000 fdb0 	bl	80022b8 <VL53L1__Init>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <main+0x84>)
 800175e:	701a      	strb	r2, [r3, #0]
  if(status)
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <main+0x84>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <main+0x54>
  {
	  while(1);
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <main+0x50>
  }
  status = VL53L1X_StartRanging(VL53L1__ADDR);
 800176c:	2052      	movs	r0, #82	@ 0x52
 800176e:	f7ff fc39 	bl	8000fe4 <VL53L1X_StartRanging>
 8001772:	4603      	mov	r3, r0
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <main+0x84>)
 8001778:	701a      	strb	r2, [r3, #0]
  if(status)
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <main+0x84>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <main+0x6e>
  {
	  while(1);
 8001782:	bf00      	nop
 8001784:	e7fd      	b.n	8001782 <main+0x6a>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001786:	f004 fe17 	bl	80063b8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800178a:	f7ff fe6d 	bl	8001468 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800178e:	f004 fe37 	bl	8006400 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001792:	bf00      	nop
 8001794:	e7fd      	b.n	8001792 <main+0x7a>
 8001796:	bf00      	nop
 8001798:	200002dc 	.word	0x200002dc
 800179c:	200002dd 	.word	0x200002dd

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	@ 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	2230      	movs	r2, #48	@ 0x30
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f008 fb40 	bl	8009e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	4b28      	ldr	r3, [pc, #160]	@ (800186c <SystemClock_Config+0xcc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	4a27      	ldr	r2, [pc, #156]	@ (800186c <SystemClock_Config+0xcc>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d4:	4b25      	ldr	r3, [pc, #148]	@ (800186c <SystemClock_Config+0xcc>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <SystemClock_Config+0xd0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <SystemClock_Config+0xd0>)
 80017ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <SystemClock_Config+0xd0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001800:	2301      	movs	r3, #1
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001804:	2310      	movs	r3, #16
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001808:	2302      	movs	r3, #2
 800180a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800180c:	2300      	movs	r3, #0
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001810:	2308      	movs	r3, #8
 8001812:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001814:	23a8      	movs	r3, #168	@ 0xa8
 8001816:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001818:	2302      	movs	r3, #2
 800181a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800181c:	2304      	movs	r3, #4
 800181e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001820:	f107 0320 	add.w	r3, r7, #32
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fdf3 	bl	8004410 <HAL_RCC_OscConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001830:	f000 f832 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001834:	230f      	movs	r3, #15
 8001836:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001838:	2302      	movs	r3, #2
 800183a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001840:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2105      	movs	r1, #5
 8001852:	4618      	mov	r0, r3
 8001854:	f003 f854 	bl	8004900 <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800185e:	f000 f81b 	bl	8001898 <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	@ 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001886:	f001 fab5 	bl	8002df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40000800 	.word	0x40000800

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <Error_Handler+0x8>

080018a4 <PMW3901_init>:

uint8_t message[512] = {'\0'};



uint8_t PMW3901_init(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin,GPIO_PIN_SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b0:	4833      	ldr	r0, [pc, #204]	@ (8001980 <PMW3901_init+0xdc>)
 80018b2:	f001 fd61 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018b6:	200a      	movs	r0, #10
 80018b8:	f001 fabc 	bl	8002e34 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_CS_GPIO_Port,PIN_CS_Pin,GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018c2:	482f      	ldr	r0, [pc, #188]	@ (8001980 <PMW3901_init+0xdc>)
 80018c4:	f001 fd58 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018c8:	200a      	movs	r0, #10
 80018ca:	f001 fab3 	bl	8002e34 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin,GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018d4:	482a      	ldr	r0, [pc, #168]	@ (8001980 <PMW3901_init+0xdc>)
 80018d6:	f001 fd4f 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 80018da:	2028      	movs	r0, #40	@ 0x28
 80018dc:	f001 faaa 	bl	8002e34 <HAL_Delay>

	uint8_t error=0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	70fb      	strb	r3, [r7, #3]
	//POWER On RESET
	error = WriteReg(0x3A,0x5A);
 80018e4:	215a      	movs	r1, #90	@ 0x5a
 80018e6:	203a      	movs	r0, #58	@ 0x3a
 80018e8:	f000 f854 	bl	8001994 <WriteReg>
 80018ec:	4603      	mov	r3, r0
 80018ee:	70fb      	strb	r3, [r7, #3]
	if(error){
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d014      	beq.n	8001920 <PMW3901_init+0x7c>
		while(1){
			sprintf(message,"Write Failed 1");
 80018f6:	4923      	ldr	r1, [pc, #140]	@ (8001984 <PMW3901_init+0xe0>)
 80018f8:	4823      	ldr	r0, [pc, #140]	@ (8001988 <PMW3901_init+0xe4>)
 80018fa:	f008 f9a3 	bl	8009c44 <siprintf>
			HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80018fe:	4822      	ldr	r0, [pc, #136]	@ (8001988 <PMW3901_init+0xe4>)
 8001900:	f7fe fcb6 	bl	8000270 <strlen>
 8001904:	4603      	mov	r3, r0
 8001906:	b29a      	uxth	r2, r3
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	491e      	ldr	r1, [pc, #120]	@ (8001988 <PMW3901_init+0xe4>)
 800190e:	481f      	ldr	r0, [pc, #124]	@ (800198c <PMW3901_init+0xe8>)
 8001910:	f004 f952 	bl	8005bb8 <HAL_UART_Transmit>
			HAL_Delay(1000);
 8001914:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001918:	f001 fa8c 	bl	8002e34 <HAL_Delay>
			sprintf(message,"Write Failed 1");
 800191c:	bf00      	nop
 800191e:	e7ea      	b.n	80018f6 <PMW3901_init+0x52>
		}
		return error;
	}
	HAL_Delay(50);
 8001920:	2032      	movs	r0, #50	@ 0x32
 8001922:	f001 fa87 	bl	8002e34 <HAL_Delay>


	//Read PRODUCT_ID

	uint8_t chipID = 0x49;
 8001926:	2349      	movs	r3, #73	@ 0x49
 8001928:	70bb      	strb	r3, [r7, #2]
	int i=0;
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
	while(1){
		chipID = ReadReg(0x00);
 800192e:	2000      	movs	r0, #0
 8001930:	f000 f88a 	bl	8001a48 <ReadReg>
 8001934:	4603      	mov	r3, r0
 8001936:	70bb      	strb	r3, [r7, #2]
		if(chipID != 0x49){
 8001938:	78bb      	ldrb	r3, [r7, #2]
 800193a:	2b49      	cmp	r3, #73	@ 0x49
 800193c:	d017      	beq.n	800196e <PMW3901_init+0xca>
			//while(1){

	        	sprintf(message, "CHIP_ID: %X\tLoop: %d", chipID,i);
 800193e:	78ba      	ldrb	r2, [r7, #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4913      	ldr	r1, [pc, #76]	@ (8001990 <PMW3901_init+0xec>)
 8001944:	4810      	ldr	r0, [pc, #64]	@ (8001988 <PMW3901_init+0xe4>)
 8001946:	f008 f97d 	bl	8009c44 <siprintf>
	        	HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 800194a:	480f      	ldr	r0, [pc, #60]	@ (8001988 <PMW3901_init+0xe4>)
 800194c:	f7fe fc90 	bl	8000270 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	490b      	ldr	r1, [pc, #44]	@ (8001988 <PMW3901_init+0xe4>)
 800195a:	480c      	ldr	r0, [pc, #48]	@ (800198c <PMW3901_init+0xe8>)
 800195c:	f004 f92c 	bl	8005bb8 <HAL_UART_Transmit>
	        	i++;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
	        	HAL_Delay(500);
 8001966:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800196a:	f001 fa63 	bl	8002e34 <HAL_Delay>
			//}
		}
		if(i==60) return 1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b3c      	cmp	r3, #60	@ 0x3c
 8001972:	d1dc      	bne.n	800192e <PMW3901_init+0x8a>
 8001974:	2301      	movs	r3, #1
	}




}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020400 	.word	0x40020400
 8001984:	0800d668 	.word	0x0800d668
 8001988:	200002e4 	.word	0x200002e4
 800198c:	20000588 	.word	0x20000588
 8001990:	0800d678 	.word	0x0800d678

08001994 <WriteReg>:

uint8_t WriteReg(uint8_t reg, uint8_t value){
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	460a      	mov	r2, r1
 800199e:	71fb      	strb	r3, [r7, #7]
 80019a0:	4613      	mov	r3, r2
 80019a2:	71bb      	strb	r3, [r7, #6]
		uint8_t Error = 0x01;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]

	    // Select the SPI device by pulling CS pin low
	    HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ae:	4821      	ldr	r0, [pc, #132]	@ (8001a34 <WriteReg+0xa0>)
 80019b0:	f001 fce2 	bl	8003378 <HAL_GPIO_WritePin>

	    // Construct the data to be transmitted
	    uint8_t data[2] = {reg | 0x80, value}; // Address byte with write operation
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	733b      	strb	r3, [r7, #12]
 80019be:	79bb      	ldrb	r3, [r7, #6]
 80019c0:	737b      	strb	r3, [r7, #13]

	    // Transmit data over SPI
	    Error = HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 80019c2:	f107 010c 	add.w	r1, r7, #12
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	2202      	movs	r2, #2
 80019cc:	481a      	ldr	r0, [pc, #104]	@ (8001a38 <WriteReg+0xa4>)
 80019ce:	f003 fa32 	bl	8004e36 <HAL_SPI_Transmit>
 80019d2:	4603      	mov	r3, r0
 80019d4:	73fb      	strb	r3, [r7, #15]

	    HAL_Delay(5);
 80019d6:	2005      	movs	r0, #5
 80019d8:	f001 fa2c 	bl	8002e34 <HAL_Delay>
	    // Check for transmission error
	    if (Error != HAL_OK) {
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01c      	beq.n	8001a1c <WriteReg+0x88>
	        // SPI transmission failed
	        HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_SET); // Deselect SPI device
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e8:	4812      	ldr	r0, [pc, #72]	@ (8001a34 <WriteReg+0xa0>)
 80019ea:	f001 fcc5 	bl	8003378 <HAL_GPIO_WritePin>
	        // Handle error or log message
	        while(1){
	        	sprintf(message, "Write Failed: %d", Error);
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4912      	ldr	r1, [pc, #72]	@ (8001a3c <WriteReg+0xa8>)
 80019f4:	4812      	ldr	r0, [pc, #72]	@ (8001a40 <WriteReg+0xac>)
 80019f6:	f008 f925 	bl	8009c44 <siprintf>
	        	HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80019fa:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <WriteReg+0xac>)
 80019fc:	f7fe fc38 	bl	8000270 <strlen>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	490d      	ldr	r1, [pc, #52]	@ (8001a40 <WriteReg+0xac>)
 8001a0a:	480e      	ldr	r0, [pc, #56]	@ (8001a44 <WriteReg+0xb0>)
 8001a0c:	f004 f8d4 	bl	8005bb8 <HAL_UART_Transmit>
	        	HAL_Delay(1000);
 8001a10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a14:	f001 fa0e 	bl	8002e34 <HAL_Delay>
	        	sprintf(message, "Write Failed: %d", Error);
 8001a18:	bf00      	nop
 8001a1a:	e7e8      	b.n	80019ee <WriteReg+0x5a>

	        return 1;
	    }

	    // Deselect the SPI device by pulling CS pin high
	    HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a22:	4804      	ldr	r0, [pc, #16]	@ (8001a34 <WriteReg+0xa0>)
 8001a24:	f001 fca8 	bl	8003378 <HAL_GPIO_WritePin>

	    return 0; // Success
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40020400 	.word	0x40020400
 8001a38:	200004e4 	.word	0x200004e4
 8001a3c:	0800d690 	.word	0x0800d690
 8001a40:	200002e4 	.word	0x200002e4
 8001a44:	20000588 	.word	0x20000588

08001a48 <ReadReg>:

uint8_t ReadReg(uint8_t reg){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	@ 0x28
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
		uint8_t txData = reg & 0x7f; // Set MSB to 0 for read operation
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	77bb      	strb	r3, [r7, #30]
		uint8_t rxData ;
	    uint8_t dummy[16] = {0x00};
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
	    uint8_t Error = 0x01;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]

	    // Select the SPI device by pulling CS pin low
	    HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a76:	481f      	ldr	r0, [pc, #124]	@ (8001af4 <ReadReg+0xac>)
 8001a78:	f001 fc7e 	bl	8003378 <HAL_GPIO_WritePin>
	    HAL_Delay(5);
 8001a7c:	2005      	movs	r0, #5
 8001a7e:	f001 f9d9 	bl	8002e34 <HAL_Delay>


	    Error = HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, HAL_MAX_DELAY);
 8001a82:	f107 021d 	add.w	r2, r7, #29
 8001a86:	f107 011e 	add.w	r1, r7, #30
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2301      	movs	r3, #1
 8001a92:	4819      	ldr	r0, [pc, #100]	@ (8001af8 <ReadReg+0xb0>)
 8001a94:	f003 fb12 	bl	80050bc <HAL_SPI_TransmitReceive>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	77fb      	strb	r3, [r7, #31]
	    if (Error != HAL_OK) {
 8001a9c:	7ffb      	ldrb	r3, [r7, #31]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01c      	beq.n	8001adc <ReadReg+0x94>
	        // SPI reception failed
	        HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_SET); // Deselect SPI device
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aa8:	4812      	ldr	r0, [pc, #72]	@ (8001af4 <ReadReg+0xac>)
 8001aaa:	f001 fc65 	bl	8003378 <HAL_GPIO_WritePin>
	        while(1){
	        	sprintf(message, "Read Failed: Receive : %d", Error);
 8001aae:	7ffb      	ldrb	r3, [r7, #31]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4912      	ldr	r1, [pc, #72]	@ (8001afc <ReadReg+0xb4>)
 8001ab4:	4812      	ldr	r0, [pc, #72]	@ (8001b00 <ReadReg+0xb8>)
 8001ab6:	f008 f8c5 	bl	8009c44 <siprintf>
	        	HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8001aba:	4811      	ldr	r0, [pc, #68]	@ (8001b00 <ReadReg+0xb8>)
 8001abc:	f7fe fbd8 	bl	8000270 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	490d      	ldr	r1, [pc, #52]	@ (8001b00 <ReadReg+0xb8>)
 8001aca:	480e      	ldr	r0, [pc, #56]	@ (8001b04 <ReadReg+0xbc>)
 8001acc:	f004 f874 	bl	8005bb8 <HAL_UART_Transmit>
	        	HAL_Delay(1000);
 8001ad0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ad4:	f001 f9ae 	bl	8002e34 <HAL_Delay>
	        	sprintf(message, "Read Failed: Receive : %d", Error);
 8001ad8:	bf00      	nop
 8001ada:	e7e8      	b.n	8001aae <ReadReg+0x66>
	        }
	        return 0xff;
	    }

	    // Deselect the SPI device by pulling CS pin high
	    HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ae2:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <ReadReg+0xac>)
 8001ae4:	f001 fc48 	bl	8003378 <HAL_GPIO_WritePin>

	    return rxData;
 8001ae8:	7f7b      	ldrb	r3, [r7, #29]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40020400 	.word	0x40020400
 8001af8:	200004e4 	.word	0x200004e4
 8001afc:	0800d6a4 	.word	0x0800d6a4
 8001b00:	200002e4 	.word	0x200002e4
 8001b04:	20000588 	.word	0x20000588

08001b08 <ReadMotion>:

		return 0;
}


void ReadMotion(int16_t *deltax, int16_t *deltay){
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
	ReadReg(0x02);
 8001b12:	2002      	movs	r0, #2
 8001b14:	f7ff ff98 	bl	8001a48 <ReadReg>
	*deltax  =  ((int16_t)ReadReg(0x04) << 8) | ReadReg(0x03);
 8001b18:	2004      	movs	r0, #4
 8001b1a:	f7ff ff95 	bl	8001a48 <ReadReg>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	b21c      	sxth	r4, r3
 8001b24:	2003      	movs	r0, #3
 8001b26:	f7ff ff8f 	bl	8001a48 <ReadReg>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	4323      	orrs	r3, r4
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	801a      	strh	r2, [r3, #0]
	*deltay  =  ((int16_t)ReadReg(0x06) << 8) | ReadReg(0x05);
 8001b36:	2006      	movs	r0, #6
 8001b38:	f7ff ff86 	bl	8001a48 <ReadReg>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21c      	sxth	r4, r3
 8001b42:	2005      	movs	r0, #5
 8001b44:	f7ff ff80 	bl	8001a48 <ReadReg>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4323      	orrs	r3, r4
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	801a      	strh	r2, [r3, #0]

}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}

08001b5c <pmw3901_read>:

void pmw3901_read(){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	ReadMotion(&deltax,&deltay);
 8001b60:	491e      	ldr	r1, [pc, #120]	@ (8001bdc <pmw3901_read+0x80>)
 8001b62:	481f      	ldr	r0, [pc, #124]	@ (8001be0 <pmw3901_read+0x84>)
 8001b64:	f7ff ffd0 	bl	8001b08 <ReadMotion>
	if(deltax >= -32640 && deltax <-30000 ){
 8001b68:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <pmw3901_read+0x84>)
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	f513 4fff 	cmn.w	r3, #32640	@ 0x7f80
 8001b72:	db0f      	blt.n	8001b94 <pmw3901_read+0x38>
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <pmw3901_read+0x84>)
 8001b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001be4 <pmw3901_read+0x88>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	da09      	bge.n	8001b94 <pmw3901_read+0x38>
			deltax  = deltax + 32640;
 8001b80:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <pmw3901_read+0x84>)
 8001b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <pmw3901_read+0x84>)
 8001b92:	801a      	strh	r2, [r3, #0]

	}

	if(deltay >= -32640 && deltay <-30000 ){
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <pmw3901_read+0x80>)
 8001b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9a:	f513 4fff 	cmn.w	r3, #32640	@ 0x7f80
 8001b9e:	db0f      	blt.n	8001bc0 <pmw3901_read+0x64>
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <pmw3901_read+0x80>)
 8001ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8001be4 <pmw3901_read+0x88>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	da09      	bge.n	8001bc0 <pmw3901_read+0x64>
	  		deltay  = deltay + 32640;
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <pmw3901_read+0x80>)
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <pmw3901_read+0x80>)
 8001bbe:	801a      	strh	r2, [r3, #0]

	}
	printf("deltaX: %d \t deltaY: %d ",deltax,deltay);
 8001bc0:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <pmw3901_read+0x84>)
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <pmw3901_read+0x80>)
 8001bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <pmw3901_read+0x8c>)
 8001bd2:	f007 ffbf 	bl	8009b54 <iprintf>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200002e0 	.word	0x200002e0
 8001be0:	200002de 	.word	0x200002de
 8001be4:	ffff8ad0 	.word	0xffff8ad0
 8001be8:	0800d6c0 	.word	0x0800d6c0

08001bec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001bf2:	4a18      	ldr	r2, [pc, #96]	@ (8001c54 <MX_SPI1_Init+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bf6:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001bf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c04:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c30:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c38:	220a      	movs	r2, #10
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	@ (8001c50 <MX_SPI1_Init+0x64>)
 8001c3e:	f003 f871 	bl	8004d24 <HAL_SPI_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c48:	f7ff fe26 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200004e4 	.word	0x200004e4
 8001c54:	40013000 	.word	0x40013000

08001c58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	@ (8001cdc <HAL_SPI_MspInit+0x84>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d12b      	bne.n	8001cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001c84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cb2:	23e0      	movs	r3, #224	@ 0xe0
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <HAL_SPI_MspInit+0x8c>)
 8001cce:	f001 f9b7 	bl	8003040 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	@ 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40013000 	.word	0x40013000
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_MspInit+0x54>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	4a11      	ldr	r2, [pc, #68]	@ (8001d3c <HAL_MspInit+0x54>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <HAL_MspInit+0x54>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <HAL_MspInit+0x54>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <HAL_MspInit+0x54>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <HAL_MspInit+0x54>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	210f      	movs	r1, #15
 8001d2a:	f06f 0001 	mvn.w	r0, #1
 8001d2e:	f001 f95d 	bl	8002fec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	@ 0x38
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4b33      	ldr	r3, [pc, #204]	@ (8001e24 <HAL_InitTick+0xe4>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	4a32      	ldr	r2, [pc, #200]	@ (8001e24 <HAL_InitTick+0xe4>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d60:	4b30      	ldr	r3, [pc, #192]	@ (8001e24 <HAL_InitTick+0xe4>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d6c:	f107 0210 	add.w	r2, r7, #16
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 ffa2 	bl	8004cc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d103      	bne.n	8001d8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d86:	f002 ff73 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 8001d8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d8c:	e004      	b.n	8001d98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d8e:	f002 ff6f 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 8001d92:	4603      	mov	r3, r0
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d9a:	4a23      	ldr	r2, [pc, #140]	@ (8001e28 <HAL_InitTick+0xe8>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	3b01      	subs	r3, #1
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <HAL_InitTick+0xec>)
 8001da8:	4a21      	ldr	r2, [pc, #132]	@ (8001e30 <HAL_InitTick+0xf0>)
 8001daa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001db2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001db4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e2c <HAL_InitTick+0xec>)
 8001db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001dba:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001dcc:	4817      	ldr	r0, [pc, #92]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dce:	f003 fc01 	bl	80055d4 <HAL_TIM_Base_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d11b      	bne.n	8001e18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001de0:	4812      	ldr	r0, [pc, #72]	@ (8001e2c <HAL_InitTick+0xec>)
 8001de2:	f003 fc51 	bl	8005688 <HAL_TIM_Base_Start_IT>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001dec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d111      	bne.n	8001e18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001df4:	201e      	movs	r0, #30
 8001df6:	f001 f915 	bl	8003024 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d808      	bhi.n	8001e12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	201e      	movs	r0, #30
 8001e06:	f001 f8f1 	bl	8002fec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <HAL_InitTick+0xf4>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e002      	b.n	8001e18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3738      	adds	r7, #56	@ 0x38
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	431bde83 	.word	0x431bde83
 8001e2c:	2000053c 	.word	0x2000053c
 8001e30:	40000800 	.word	0x40000800
 8001e34:	20000028 	.word	0x20000028

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <NMI_Handler+0x4>

08001e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <MemManage_Handler+0x4>

08001e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <TIM4_IRQHandler+0x10>)
 8001e76:	f003 fc77 	bl	8005768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000053c 	.word	0x2000053c

08001e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return 1;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_kill>:

int _kill(int pid, int sig)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9e:	f008 f81b 	bl	8009ed8 <__errno>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2216      	movs	r2, #22
 8001ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_exit>:

void _exit (int status)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ffe7 	bl	8001e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec6:	bf00      	nop
 8001ec8:	e7fd      	b.n	8001ec6 <_exit+0x12>

08001eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e00a      	b.n	8001ef2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001edc:	f3af 8000 	nop.w
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	60ba      	str	r2, [r7, #8]
 8001ee8:	b2ca      	uxtb	r2, r1
 8001eea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dbf0      	blt.n	8001edc <_read+0x12>
  }

  return len;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e009      	b.n	8001f2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	60ba      	str	r2, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f898 	bl	8001054 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dbf1      	blt.n	8001f16 <_write+0x12>
  }
  return len;
 8001f32:	687b      	ldr	r3, [r7, #4]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_close>:

int _close(int file)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f64:	605a      	str	r2, [r3, #4]
  return 0;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_isatty>:

int _isatty(int file)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	@ (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f007 ff80 	bl	8009ed8 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20020000 	.word	0x20020000
 8002004:	00000400 	.word	0x00000400
 8002008:	20000584 	.word	0x20000584
 800200c:	20005280 	.word	0x20005280

08002010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	@ (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 800203a:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <MX_USART1_UART_Init+0x50>)
 800203c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 800205a:	220c      	movs	r2, #12
 800205c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <MX_USART1_UART_Init+0x4c>)
 800206c:	f003 fd54 	bl	8005b18 <HAL_UART_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002076:	f7ff fc0f 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000588 	.word	0x20000588
 8002084:	40011000 	.word	0x40011000

08002088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a19      	ldr	r2, [pc, #100]	@ (800210c <HAL_UART_MspInit+0x84>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12c      	bne.n	8002104 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <HAL_UART_MspInit+0x88>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HAL_UART_MspInit+0x88>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <HAL_UART_MspInit+0x88>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <HAL_UART_MspInit+0x88>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <HAL_UART_MspInit+0x88>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_UART_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f4:	2307      	movs	r3, #7
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <HAL_UART_MspInit+0x8c>)
 8002100:	f000 ff9e 	bl	8003040 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	@ 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40011000 	.word	0x40011000
 8002110:	40023800 	.word	0x40023800
 8002114:	40020000 	.word	0x40020000

08002118 <VL53L1_RdByte>:

extern I2C_HandleTypeDef VL53L1__PORT;

uint8_t amessage[521] = {'\0'};
uint8_t ret;
int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af04      	add	r7, sp, #16
 800211e:	4603      	mov	r3, r0
 8002120:	603a      	str	r2, [r7, #0]
 8002122:	80fb      	strh	r3, [r7, #6]
 8002124:	460b      	mov	r3, r1
 8002126:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(100);
 8002128:	2064      	movs	r0, #100	@ 0x64
 800212a:	f000 fe83 	bl	8002e34 <HAL_Delay>
	ret = HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT);
 800212e:	88ba      	ldrh	r2, [r7, #4]
 8002130:	88f9      	ldrh	r1, [r7, #6]
 8002132:	2314      	movs	r3, #20
 8002134:	9302      	str	r3, [sp, #8]
 8002136:	2301      	movs	r3, #1
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2310      	movs	r3, #16
 8002140:	482d      	ldr	r0, [pc, #180]	@ (80021f8 <VL53L1_RdByte+0xe0>)
 8002142:	f001 fb71 	bl	8003828 <HAL_I2C_Mem_Read>
 8002146:	4603      	mov	r3, r0
 8002148:	461a      	mov	r2, r3
 800214a:	4b2c      	ldr	r3, [pc, #176]	@ (80021fc <VL53L1_RdByte+0xe4>)
 800214c:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK) {
 800214e:	4b2b      	ldr	r3, [pc, #172]	@ (80021fc <VL53L1_RdByte+0xe4>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d04a      	beq.n	80021ec <VL53L1_RdByte+0xd4>
	        // 处理错误
	        if (ret == HAL_ERROR) {
 8002156:	4b29      	ldr	r3, [pc, #164]	@ (80021fc <VL53L1_RdByte+0xe4>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d114      	bne.n	8002188 <VL53L1_RdByte+0x70>
	        			  while(1){
	        				  sprintf(amessage,"I2C Error");
 800215e:	4928      	ldr	r1, [pc, #160]	@ (8002200 <VL53L1_RdByte+0xe8>)
 8002160:	4828      	ldr	r0, [pc, #160]	@ (8002204 <VL53L1_RdByte+0xec>)
 8002162:	f007 fd6f 	bl	8009c44 <siprintf>
	        				  HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 8002166:	4827      	ldr	r0, [pc, #156]	@ (8002204 <VL53L1_RdByte+0xec>)
 8002168:	f7fe f882 	bl	8000270 <strlen>
 800216c:	4603      	mov	r3, r0
 800216e:	b29a      	uxth	r2, r3
 8002170:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002174:	4923      	ldr	r1, [pc, #140]	@ (8002204 <VL53L1_RdByte+0xec>)
 8002176:	4824      	ldr	r0, [pc, #144]	@ (8002208 <VL53L1_RdByte+0xf0>)
 8002178:	f003 fd1e 	bl	8005bb8 <HAL_UART_Transmit>
	        				  HAL_Delay(1000);
 800217c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002180:	f000 fe58 	bl	8002e34 <HAL_Delay>
	        				  sprintf(amessage,"I2C Error");
 8002184:	bf00      	nop
 8002186:	e7ea      	b.n	800215e <VL53L1_RdByte+0x46>
	        			  }
	            // 错误处理
	            //printf("I2C Error\n");
	        } else if (ret == HAL_BUSY) {
 8002188:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <VL53L1_RdByte+0xe4>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d114      	bne.n	80021ba <VL53L1_RdByte+0xa2>
  			  while(1){
  				  sprintf(amessage,"I2C Busy");
 8002190:	491e      	ldr	r1, [pc, #120]	@ (800220c <VL53L1_RdByte+0xf4>)
 8002192:	481c      	ldr	r0, [pc, #112]	@ (8002204 <VL53L1_RdByte+0xec>)
 8002194:	f007 fd56 	bl	8009c44 <siprintf>
  				  HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 8002198:	481a      	ldr	r0, [pc, #104]	@ (8002204 <VL53L1_RdByte+0xec>)
 800219a:	f7fe f869 	bl	8000270 <strlen>
 800219e:	4603      	mov	r3, r0
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a6:	4917      	ldr	r1, [pc, #92]	@ (8002204 <VL53L1_RdByte+0xec>)
 80021a8:	4817      	ldr	r0, [pc, #92]	@ (8002208 <VL53L1_RdByte+0xf0>)
 80021aa:	f003 fd05 	bl	8005bb8 <HAL_UART_Transmit>
  				  HAL_Delay(1000);
 80021ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021b2:	f000 fe3f 	bl	8002e34 <HAL_Delay>
  				  sprintf(amessage,"I2C Busy");
 80021b6:	bf00      	nop
 80021b8:	e7ea      	b.n	8002190 <VL53L1_RdByte+0x78>
  			  }
	            // 处理忙状态
	            //printf("I2C Busy\n");
	        } else if (ret == HAL_TIMEOUT) {
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <VL53L1_RdByte+0xe4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d116      	bne.n	80021f0 <VL53L1_RdByte+0xd8>
  			  while(1){
  				  sprintf(amessage,"I2C Timeout");
 80021c2:	4913      	ldr	r1, [pc, #76]	@ (8002210 <VL53L1_RdByte+0xf8>)
 80021c4:	480f      	ldr	r0, [pc, #60]	@ (8002204 <VL53L1_RdByte+0xec>)
 80021c6:	f007 fd3d 	bl	8009c44 <siprintf>
  				  HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 80021ca:	480e      	ldr	r0, [pc, #56]	@ (8002204 <VL53L1_RdByte+0xec>)
 80021cc:	f7fe f850 	bl	8000270 <strlen>
 80021d0:	4603      	mov	r3, r0
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d8:	490a      	ldr	r1, [pc, #40]	@ (8002204 <VL53L1_RdByte+0xec>)
 80021da:	480b      	ldr	r0, [pc, #44]	@ (8002208 <VL53L1_RdByte+0xf0>)
 80021dc:	f003 fcec 	bl	8005bb8 <HAL_UART_Transmit>
  				  HAL_Delay(1000);
 80021e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021e4:	f000 fe26 	bl	8002e34 <HAL_Delay>
  				  sprintf(amessage,"I2C Timeout");
 80021e8:	bf00      	nop
 80021ea:	e7ea      	b.n	80021c2 <VL53L1_RdByte+0xaa>
//		  }
//		return VL53L1__IO_ERROR;
//	}

	else
		return 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e7ff      	b.n	80021f0 <VL53L1_RdByte+0xd8>
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000288 	.word	0x20000288
 80021fc:	200007d9 	.word	0x200007d9
 8002200:	0800d6dc 	.word	0x0800d6dc
 8002204:	200005d0 	.word	0x200005d0
 8002208:	20000588 	.word	0x20000588
 800220c:	0800d6e8 	.word	0x0800d6e8
 8002210:	0800d6f4 	.word	0x0800d6f4

08002214 <VL53L1_WrByte>:
		return VL53L1__IO_ERROR;
	else
		return 0;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af04      	add	r7, sp, #16
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	460b      	mov	r3, r1
 8002220:	80bb      	strh	r3, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 8002226:	88ba      	ldrh	r2, [r7, #4]
 8002228:	88f9      	ldrh	r1, [r7, #6]
 800222a:	2314      	movs	r3, #20
 800222c:	9302      	str	r3, [sp, #8]
 800222e:	2301      	movs	r3, #1
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	1cfb      	adds	r3, r7, #3
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2310      	movs	r3, #16
 8002238:	4806      	ldr	r0, [pc, #24]	@ (8002254 <VL53L1_WrByte+0x40>)
 800223a:	f001 f9fb 	bl	8003634 <HAL_I2C_Mem_Write>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <VL53L1_WrByte+0x36>
		return VL53L1__IO_ERROR;
 8002244:	f06f 030c 	mvn.w	r3, #12
 8002248:	e000      	b.n	800224c <VL53L1_WrByte+0x38>
	else
		return 0;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000288 	.word	0x20000288

08002258 <VL53L1__Xshut>:
 * @brief 		set the VL53L1 Xshutdown pin
 * 				waiting for a complete boot sequence
 * @param 	1	VL53L1 enabled, wait for boot
 * 			0	VL53L1 disabled
 ****************************************************/
uint8_t VL53L1__Xshut(uint8_t level){
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
	uint8_t sensorStatus =0;
 8002262:	2300      	movs	r3, #0
 8002264:	73bb      	strb	r3, [r7, #14]
	uint8_t status =0;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, level);
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	461a      	mov	r2, r3
 800226e:	2101      	movs	r1, #1
 8002270:	4810      	ldr	r0, [pc, #64]	@ (80022b4 <VL53L1__Xshut+0x5c>)
 8002272:	f001 f881 	bl	8003378 <HAL_GPIO_WritePin>
	if (level) {
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d015      	beq.n	80022a8 <VL53L1__Xshut+0x50>
		while (!(sensorStatus & 0x01)) {
 800227c:	e00f      	b.n	800229e <VL53L1__Xshut+0x46>
			HAL_Delay(2);
 800227e:	2002      	movs	r0, #2
 8002280:	f000 fdd8 	bl	8002e34 <HAL_Delay>
			status |= VL53L1X_BootState(VL53L1__ADDR, &sensorStatus);
 8002284:	f107 030e 	add.w	r3, r7, #14
 8002288:	4619      	mov	r1, r3
 800228a:	2052      	movs	r0, #82	@ 0x52
 800228c:	f7fe fec2 	bl	8001014 <VL53L1X_BootState>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002298:	4313      	orrs	r3, r2
 800229a:	b25b      	sxtb	r3, r3
 800229c:	73fb      	strb	r3, [r7, #15]
		while (!(sensorStatus & 0x01)) {
 800229e:	7bbb      	ldrb	r3, [r7, #14]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ea      	beq.n	800227e <VL53L1__Xshut+0x26>
		}
	}
	return (status);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40020400 	.word	0x40020400

080022b8 <VL53L1__Init>:
 * 				test VL53L1 presence, initialize the sensor, and
 * 				set it the default Distance Mode, Timing Budget
 * 				and Intermeasurement time
 * @return:	0	if no errors detected in setting up VL53L1X
 ************************************************************/
uint8_t VL53L1__Init(){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
	uint8_t refRegs[4] = {0,0,0,0};
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
	uint8_t status =0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]

	// Enable VL53L1 sensor waiting for a complete boot sequence
#ifdef	VL53L1__USING_XSHUT
	status |= VL53L1__Xshut(1);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff ffc6 	bl	8002258 <VL53L1__Xshut>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	71fb      	strb	r3, [r7, #7]
	if (status){
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d014      	beq.n	8002306 <VL53L1__Init+0x4e>
		  while(1){
			  sprintf(amessage,"Xshut failed");
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <VL53L1__Init+0x58>)
 80022de:	480d      	ldr	r0, [pc, #52]	@ (8002314 <VL53L1__Init+0x5c>)
 80022e0:	f007 fcb0 	bl	8009c44 <siprintf>
			  HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 80022e4:	480b      	ldr	r0, [pc, #44]	@ (8002314 <VL53L1__Init+0x5c>)
 80022e6:	f7fd ffc3 	bl	8000270 <strlen>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <VL53L1__Init+0x5c>)
 80022f4:	4808      	ldr	r0, [pc, #32]	@ (8002318 <VL53L1__Init+0x60>)
 80022f6:	f003 fc5f 	bl	8005bb8 <HAL_UART_Transmit>
			  HAL_Delay(1000);
 80022fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022fe:	f000 fd99 	bl	8002e34 <HAL_Delay>
			  sprintf(amessage,"Xshut failed");
 8002302:	bf00      	nop
 8002304:	e7ea      	b.n	80022dc <VL53L1__Init+0x24>
		  }
	}
		return (status);
 8002306:	79fb      	ldrb	r3, [r7, #7]
	status |= VL53L1X_SetTimingBudgetInMs(VL53L1__ADDR, VL53L1__TIMING_BUDGET);
	status |= VL53L1X_SetInterMeasurementInMs(VL53L1__ADDR, VL53L1__INTERMEASUREMENT);
	status |= VL53L1X_SetDistanceThreshold(VL53L1__ADDR,VL53L1__LOWER_THRESHOLD, VL53L1__UPPER_THRESHOLD, VL53L1__WINDOW_MODE, 0);

	return (status);
};
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	0800d700 	.word	0x0800d700
 8002314:	200005d0 	.word	0x200005d0
 8002318:	20000588 	.word	0x20000588

0800231c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800231c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002354 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002320:	f7ff fe76 	bl	8002010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002324:	480c      	ldr	r0, [pc, #48]	@ (8002358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002326:	490d      	ldr	r1, [pc, #52]	@ (800235c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002328:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800232c:	e002      	b.n	8002334 <LoopCopyDataInit>

0800232e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002332:	3304      	adds	r3, #4

08002334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002338:	d3f9      	bcc.n	800232e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233a:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800233c:	4c0a      	ldr	r4, [pc, #40]	@ (8002368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002340:	e001      	b.n	8002346 <LoopFillZerobss>

08002342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002344:	3204      	adds	r2, #4

08002346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002348:	d3fb      	bcc.n	8002342 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800234a:	f007 fdcb 	bl	8009ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234e:	f7ff f9e3 	bl	8001718 <main>
  bx  lr    
 8002352:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002354:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800235c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002360:	0800dbe0 	.word	0x0800dbe0
  ldr r2, =_sbss
 8002364:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002368:	2000527c 	.word	0x2000527c

0800236c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC_IRQHandler>

0800236e <bmi088_init>:
 *  @brief This API is the entry point for bmi088 sensors.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel & gyro sensors.
 */
int8_t bmi088_init(struct bmi08x_dev *dev)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Initialize bmi088 accel sensor */
    rslt = bmi08a_init(dev);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f811 	bl	800239e <bmi08a_init>
 800237c:	4603      	mov	r3, r0
 800237e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8002380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d104      	bne.n	8002392 <bmi088_init+0x24>
    {
        /* Initialize bmi088 gyro sensor */
        rslt = bmi08g_init(dev);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fb2b 	bl	80029e4 <bmi08g_init>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08x_dev *dev)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa65 	bl	800287a <null_ptr_check>
 80023b0:	4603      	mov	r3, r0
 80023b2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80023b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d12d      	bne.n	8002418 <bmi08a_init+0x7a>
    {
        if (dev->intf == BMI08X_SPI_INTF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	791b      	ldrb	r3, [r3, #4]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10c      	bne.n	80023de <bmi08a_init+0x40>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08X_ENABLE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	715a      	strb	r2, [r3, #5]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08X_ACCEL_CHIP_ID_REG, &chip_id, 1, dev);
 80023ca:	f107 010e 	add.w	r1, r7, #14
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	2000      	movs	r0, #0
 80023d4:	f000 fa71 	bl	80028ba <get_regs>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e002      	b.n	80023e4 <bmi08a_init+0x46>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08X_DISABLE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	715a      	strb	r2, [r3, #5]
        }
        if (rslt == BMI08X_OK)
 80023e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d115      	bne.n	8002418 <bmi08a_init+0x7a>
        {
            rslt = get_regs(BMI08X_ACCEL_CHIP_ID_REG, &chip_id, 1, dev);
 80023ec:	f107 010e 	add.w	r1, r7, #14
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	2000      	movs	r0, #0
 80023f6:	f000 fa60 	bl	80028ba <get_regs>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d108      	bne.n	8002418 <bmi08a_init+0x7a>
            {
                /* Check for chip id validity */
                if (chip_id == BMI08X_ACCEL_CHIP_ID)
 8002406:	7bbb      	ldrb	r3, [r7, #14]
 8002408:	2b1e      	cmp	r3, #30
 800240a:	d103      	bne.n	8002414 <bmi08a_init+0x76>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 800240c:	7bba      	ldrb	r2, [r7, #14]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e001      	b.n	8002418 <bmi08a_init+0x7a>
                }
                else
                {
                    rslt = BMI08X_E_DEV_NOT_FOUND;
 8002414:	23fd      	movs	r3, #253	@ 0xfd
 8002416:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4603      	mov	r3, r0
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	4613      	mov	r3, r2
 8002434:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa1f 	bl	800287a <null_ptr_check>
 800243c:	4603      	mov	r3, r0
 800243e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8002440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d111      	bne.n	800246c <bmi08a_get_regs+0x48>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00e      	beq.n	800246c <bmi08a_get_regs+0x48>
    {
        if (len > 0)
 800244e:	89bb      	ldrh	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <bmi08a_get_regs+0x42>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8002454:	89ba      	ldrh	r2, [r7, #12]
 8002456:	7bf8      	ldrb	r0, [r7, #15]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	f000 fa2d 	bl	80028ba <get_regs>
 8002460:	4603      	mov	r3, r0
 8002462:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8002464:	e004      	b.n	8002470 <bmi08a_get_regs+0x4c>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8002466:	23f9      	movs	r3, #249	@ 0xf9
 8002468:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800246a:	e001      	b.n	8002470 <bmi08a_get_regs+0x4c>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800246c:	23ff      	movs	r3, #255	@ 0xff
 800246e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002470:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <bmi08a_soft_reset>:

/*!
 *  @brief This API resets the accel sensor.
 */
int8_t bmi08a_soft_reset(const struct bmi08x_dev *dev)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f9f8 	bl	800287a <null_ptr_check>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 800248e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11f      	bne.n	80024d6 <bmi08a_soft_reset+0x5a>
    {
        data = BMI08X_SOFT_RESET_CMD;
 8002496:	23b6      	movs	r3, #182	@ 0xb6
 8002498:	73bb      	strb	r3, [r7, #14]

        /* Reset accel device */
        rslt = set_regs(BMI08X_ACCEL_SOFTRESET_REG, &data, 1, dev);
 800249a:	f107 010e 	add.w	r1, r7, #14
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	207e      	movs	r0, #126	@ 0x7e
 80024a4:	f000 fa77 	bl	8002996 <set_regs>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 80024ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d110      	bne.n	80024d6 <bmi08a_soft_reset+0x5a>
        {
            /* Delay 1 ms after reset value is written to its register */
            dev->delay_ms(BMI08X_ACCEL_SOFTRESET_DELAY_MS);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	2001      	movs	r0, #1
 80024ba:	4798      	blx	r3

            /* After soft reset SPI mode in the initialization phase, need to  perform a dummy SPI read
             * operation, The soft-reset performs a fundamental reset to the device,
             * which is largely equivalent to a power cycle. */
            if (dev->intf == BMI08X_SPI_INTF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	791b      	ldrb	r3, [r3, #4]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d108      	bne.n	80024d6 <bmi08a_soft_reset+0x5a>
            {
                /* Dummy SPI read operation of Chip-ID */
                rslt = get_regs(BMI08X_ACCEL_CHIP_ID_REG, &data, 1, dev);
 80024c4:	f107 010e 	add.w	r1, r7, #14
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	2000      	movs	r0, #0
 80024ce:	f000 f9f4 	bl	80028ba <get_regs>
 80024d2:	4603      	mov	r3, r0
 80024d4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <bmi08a_get_meas_conf>:
 * @brief This API reads the accel config value i.e. odr, band width and range from the sensor,
 * store it in the bmi08x_dev structure instance passed by the user.
 *
 */
int8_t bmi08a_get_meas_conf(struct bmi08x_dev *dev)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2];

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f9c5 	bl	800287a <null_ptr_check>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80024f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d120      	bne.n	800253e <bmi08a_get_meas_conf+0x5c>
    {
        rslt = get_regs(BMI08X_ACCEL_CONF_REG, data, 2, dev);
 80024fc:	f107 010c 	add.w	r1, r7, #12
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	2040      	movs	r0, #64	@ 0x40
 8002506:	f000 f9d8 	bl	80028ba <get_regs>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d113      	bne.n	800253e <bmi08a_get_meas_conf+0x5c>
        {
            dev->accel_cfg.odr = data[0] & BMI08X_ACCEL_ODR_MASK;
 8002516:	7b3b      	ldrb	r3, [r7, #12]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	b2da      	uxtb	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	725a      	strb	r2, [r3, #9]
            dev->accel_cfg.bw = (data[0] & BMI08X_ACCEL_BW_MASK) >> 4;
 8002522:	7b3b      	ldrb	r3, [r7, #12]
 8002524:	111b      	asrs	r3, r3, #4
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	b2da      	uxtb	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	721a      	strb	r2, [r3, #8]
            dev->accel_cfg.range = data[1] & BMI08X_ACCEL_RANGE_MASK;
 8002532:	7b7b      	ldrb	r3, [r7, #13]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	b2da      	uxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	71da      	strb	r2, [r3, #7]
        }
    }

    return rslt;
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(const struct bmi08x_dev *dev)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8002552:	2300      	movs	r3, #0
 8002554:	81bb      	strh	r3, [r7, #12]
    uint8_t bw, range, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE, is_range_invalid = FALSE;
 8002556:	2300      	movs	r3, #0
 8002558:	75bb      	strb	r3, [r7, #22]
 800255a:	2300      	movs	r3, #0
 800255c:	757b      	strb	r3, [r7, #21]
 800255e:	2300      	movs	r3, #0
 8002560:	753b      	strb	r3, [r7, #20]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f989 	bl	800287a <null_ptr_check>
 8002568:	4603      	mov	r3, r0
 800256a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 800256c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d167      	bne.n	8002644 <bmi08a_set_meas_conf+0xfa>
    {
        odr = dev->accel_cfg.odr;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7a5b      	ldrb	r3, [r3, #9]
 8002578:	74fb      	strb	r3, [r7, #19]
        bw = dev->accel_cfg.bw;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7a1b      	ldrb	r3, [r3, #8]
 800257e:	74bb      	strb	r3, [r7, #18]
        range = dev->accel_cfg.range;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	79db      	ldrb	r3, [r3, #7]
 8002584:	747b      	strb	r3, [r7, #17]

        /* Check for valid ODR */
        if ((odr < BMI08X_ACCEL_ODR_12_5_HZ) || (odr > BMI08X_ACCEL_ODR_1600_HZ))
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	2b04      	cmp	r3, #4
 800258a:	d902      	bls.n	8002592 <bmi08a_set_meas_conf+0x48>
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d901      	bls.n	8002596 <bmi08a_set_meas_conf+0x4c>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8002592:	2301      	movs	r3, #1
 8002594:	75bb      	strb	r3, [r7, #22]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08X_ACCEL_BW_NORMAL)
 8002596:	7cbb      	ldrb	r3, [r7, #18]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <bmi08a_set_meas_conf+0x56>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 800259c:	2301      	movs	r3, #1
 800259e:	757b      	strb	r3, [r7, #21]
        }

#elif BMI08X_FEATURE_BMI088 == 1

        /* Check for valid Range */
        if (range > BMI088_ACCEL_RANGE_24G)
 80025a0:	7c7b      	ldrb	r3, [r7, #17]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d901      	bls.n	80025aa <bmi08a_set_meas_conf+0x60>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	753b      	strb	r3, [r7, #20]
        }

#endif

        /* If ODR, BW and Range are valid, write it to accel config. registers */
        if ((!is_odr_invalid) && (!is_bw_invalid) && (!is_range_invalid))
 80025aa:	7dbb      	ldrb	r3, [r7, #22]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d147      	bne.n	8002640 <bmi08a_set_meas_conf+0xf6>
 80025b0:	7d7b      	ldrb	r3, [r7, #21]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d144      	bne.n	8002640 <bmi08a_set_meas_conf+0xf6>
 80025b6:	7d3b      	ldrb	r3, [r7, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d141      	bne.n	8002640 <bmi08a_set_meas_conf+0xf6>
        {
            /* Read accel config. register */
            rslt = get_regs(BMI08X_ACCEL_CONF_REG, data, 2, dev);
 80025bc:	f107 010c 	add.w	r1, r7, #12
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	2040      	movs	r0, #64	@ 0x40
 80025c6:	f000 f978 	bl	80028ba <get_regs>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 80025ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d136      	bne.n	8002644 <bmi08a_set_meas_conf+0xfa>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_ACCEL_ODR, odr);
 80025d6:	7b3b      	ldrb	r3, [r7, #12]
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	f023 030f 	bic.w	r3, r3, #15
 80025de:	b25a      	sxtb	r2, r3
 80025e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	733b      	strb	r3, [r7, #12]
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_ACCEL_BW, bw);
 80025f2:	7b3b      	ldrb	r3, [r7, #12]
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fa:	b25a      	sxtb	r2, r3
 80025fc:	7cbb      	ldrb	r3, [r7, #18]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	b25b      	sxtb	r3, r3
 8002602:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002606:	b25b      	sxtb	r3, r3
 8002608:	4313      	orrs	r3, r2
 800260a:	b25b      	sxtb	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	733b      	strb	r3, [r7, #12]

                /* Update data with current range values */
                data[1] = BMI08X_SET_BITS_POS_0(data[1], BMI08X_ACCEL_RANGE, range);
 8002610:	7b7b      	ldrb	r3, [r7, #13]
 8002612:	b25b      	sxtb	r3, r3
 8002614:	f023 0303 	bic.w	r3, r3, #3
 8002618:	b25a      	sxtb	r2, r3
 800261a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	b25b      	sxtb	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b25b      	sxtb	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	737b      	strb	r3, [r7, #13]

                /* write to range register */
                rslt = set_regs(BMI08X_ACCEL_CONF_REG, data, 2, dev);
 800262c:	f107 010c 	add.w	r1, r7, #12
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	2040      	movs	r0, #64	@ 0x40
 8002636:	f000 f9ae 	bl	8002996 <set_regs>
 800263a:	4603      	mov	r3, r0
 800263c:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 800263e:	e001      	b.n	8002644 <bmi08a_set_meas_conf+0xfa>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8002640:	23f8      	movs	r3, #248	@ 0xf8
 8002642:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8002644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <bmi08a_get_power_mode>:
/*!
 * @brief This API reads the accel power mode from the sensor, store it in the bmi08x_dev structure
 * instance passed by the user.
 */
int8_t bmi08a_get_power_mode(struct bmi08x_dev *dev)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f90e 	bl	800287a <null_ptr_check>
 800265e:	4603      	mov	r3, r0
 8002660:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <bmi08a_get_power_mode+0x3a>
    {
        rslt = get_regs(BMI08X_ACCEL_PWR_CONF_REG, &data, 1, dev);
 800266a:	f107 010e 	add.w	r1, r7, #14
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	207c      	movs	r0, #124	@ 0x7c
 8002674:	f000 f921 	bl	80028ba <get_regs>
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 800267c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <bmi08a_get_power_mode+0x3a>
        {
            /* Updating the current power mode */
            dev->accel_cfg.power = data;
 8002684:	7bba      	ldrb	r2, [r7, #14]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	719a      	strb	r2, [r3, #6]
        }
    }

    return rslt;
 800268a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(const struct bmi08x_dev *dev)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2];

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8eb 	bl	800287a <null_ptr_check>
 80026a4:	4603      	mov	r3, r0
 80026a6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80026a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d13b      	bne.n	8002728 <bmi08a_set_power_mode+0x92>
    {
        power_mode = dev->accel_cfg.power;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	799b      	ldrb	r3, [r3, #6]
 80026b4:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08X_ACCEL_PM_ACTIVE)
 80026b6:	7bbb      	ldrb	r3, [r7, #14]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <bmi08a_set_power_mode+0x30>
        {
            data[0] = BMI08X_ACCEL_PM_ACTIVE;
 80026bc:	2300      	movs	r3, #0
 80026be:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_ENABLE;
 80026c0:	2304      	movs	r3, #4
 80026c2:	737b      	strb	r3, [r7, #13]
 80026c4:	e009      	b.n	80026da <bmi08a_set_power_mode+0x44>
        }
        else if (power_mode == BMI08X_ACCEL_PM_SUSPEND)
 80026c6:	7bbb      	ldrb	r3, [r7, #14]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d104      	bne.n	80026d6 <bmi08a_set_power_mode+0x40>
        {
            data[0] = BMI08X_ACCEL_PM_SUSPEND;
 80026cc:	2303      	movs	r3, #3
 80026ce:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	737b      	strb	r3, [r7, #13]
 80026d4:	e001      	b.n	80026da <bmi08a_set_power_mode+0x44>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08X_E_INVALID_INPUT;
 80026d6:	23fb      	movs	r3, #251	@ 0xfb
 80026d8:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08X_OK)
 80026da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d122      	bne.n	8002728 <bmi08a_set_power_mode+0x92>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08X_ACCEL_PWR_CONF_REG, &data[0], 1, dev);
 80026e2:	f107 010c 	add.w	r1, r7, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	207c      	movs	r0, #124	@ 0x7c
 80026ec:	f000 f953 	bl	8002996 <set_regs>
 80026f0:	4603      	mov	r3, r0
 80026f2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80026f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d115      	bne.n	8002728 <bmi08a_set_power_mode+0x92>
            {
                /*delay between power ctrl and power config*/
                dev->delay_ms(BMI08X_POWER_CONFIG_DELAY);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	2005      	movs	r0, #5
 8002702:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08X_ACCEL_PWR_CTRL_REG, &data[1], 1, dev);
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	1c59      	adds	r1, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	207d      	movs	r0, #125	@ 0x7d
 8002710:	f000 f941 	bl	8002996 <set_regs>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d103      	bne.n	8002728 <bmi08a_set_power_mode+0x92>
                {
                    /*delay required to switch power modes*/
                    dev->delay_ms(BMI08X_POWER_CONFIG_DELAY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	2005      	movs	r0, #5
 8002726:	4798      	blx	r3
            }

        }
    }

    return rslt;
 8002728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08x_sensor_data *accel, const struct bmi08x_dev *dev)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800273e:	6838      	ldr	r0, [r7, #0]
 8002740:	f000 f89b 	bl	800287a <null_ptr_check>
 8002744:	4603      	mov	r3, r0
 8002746:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (accel != NULL))
 8002748:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d140      	bne.n	80027d2 <bmi08a_get_data+0x9e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d03d      	beq.n	80027d2 <bmi08a_get_data+0x9e>
    {
        /* Read accel sensor data */
        rslt = get_regs(BMI08X_ACCEL_X_LSB_REG, data, 6, dev);
 8002756:	f107 010c 	add.w	r1, r7, #12
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2206      	movs	r2, #6
 800275e:	2012      	movs	r0, #18
 8002760:	f000 f8ab 	bl	80028ba <get_regs>
 8002764:	4603      	mov	r3, r0
 8002766:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8002768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d132      	bne.n	80027d6 <bmi08a_get_data+0xa2>
        {
            lsb = data[0];
 8002770:	7b3b      	ldrb	r3, [r7, #12]
 8002772:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8002774:	7b7b      	ldrb	r3, [r7, #13]
 8002776:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8002778:	7d7b      	ldrb	r3, [r7, #21]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	b21a      	sxth	r2, r3
 800277e:	7dbb      	ldrb	r3, [r7, #22]
 8002780:	b21b      	sxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b21b      	sxth	r3, r3
 8002786:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 8002788:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8002790:	7bbb      	ldrb	r3, [r7, #14]
 8002792:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8002798:	7d7b      	ldrb	r3, [r7, #21]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	b21a      	sxth	r2, r3
 800279e:	7dbb      	ldrb	r3, [r7, #22]
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b21b      	sxth	r3, r3
 80027a6:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 80027a8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 80027b0:	7c3b      	ldrb	r3, [r7, #16]
 80027b2:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 80027b4:	7c7b      	ldrb	r3, [r7, #17]
 80027b6:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80027b8:	7d7b      	ldrb	r3, [r7, #21]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b21a      	sxth	r2, r3
 80027be:	7dbb      	ldrb	r3, [r7, #22]
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 80027c8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 80027d0:	e001      	b.n	80027d6 <bmi08a_get_data+0xa2>
        }

    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80027d2:	23ff      	movs	r3, #255	@ 0xff
 80027d4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80027d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <bmi08a_get_sensor_temperature>:

/*!
 * @brief This API reads the temperature of the sensor in degree Celcius.
 */
int8_t bmi08a_get_sensor_temperature(const struct bmi08x_dev *dev, int32_t *sensor_temp)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80027ec:	2300      	movs	r3, #0
 80027ee:	81bb      	strh	r3, [r7, #12]
    uint16_t msb, lsb;
    uint16_t msblsb;
    int16_t temp;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f842 	bl	800287a <null_ptr_check>
 80027f6:	4603      	mov	r3, r0
 80027f8:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (sensor_temp != NULL))
 80027fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d133      	bne.n	800286a <bmi08a_get_sensor_temperature+0x88>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d030      	beq.n	800286a <bmi08a_get_sensor_temperature+0x88>
    {
        /* Read sensor temperature */
        rslt = get_regs(BMI08X_TEMP_MSB_REG, data, 2, dev);
 8002808:	f107 010c 	add.w	r1, r7, #12
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	2022      	movs	r0, #34	@ 0x22
 8002812:	f000 f852 	bl	80028ba <get_regs>
 8002816:	4603      	mov	r3, r0
 8002818:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 800281a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d125      	bne.n	800286e <bmi08a_get_sensor_temperature+0x8c>
        {
            msb = (data[0] << 3); /* MSB data */
 8002822:	7b3b      	ldrb	r3, [r7, #12]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	827b      	strh	r3, [r7, #18]
            lsb = (data[1] >> 5); /* LSB data */
 8002828:	7b7b      	ldrb	r3, [r7, #13]
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	b2db      	uxtb	r3, r3
 800282e:	823b      	strh	r3, [r7, #16]
            msblsb = (uint16_t) (msb + lsb);
 8002830:	8a7a      	ldrh	r2, [r7, #18]
 8002832:	8a3b      	ldrh	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	81fb      	strh	r3, [r7, #14]

            if (msblsb > 1023)
 8002838:	89fb      	ldrh	r3, [r7, #14]
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283e:	d305      	bcc.n	800284c <bmi08a_get_sensor_temperature+0x6a>
            {
                /* Updating the msblsb */
                temp = (int16_t) (msblsb - 2048);
 8002840:	89fb      	ldrh	r3, [r7, #14]
 8002842:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002846:	b29b      	uxth	r3, r3
 8002848:	82bb      	strh	r3, [r7, #20]
 800284a:	e001      	b.n	8002850 <bmi08a_get_sensor_temperature+0x6e>
            }
            else
            {
                temp = (int16_t) msblsb;
 800284c:	89fb      	ldrh	r3, [r7, #14]
 800284e:	82bb      	strh	r3, [r7, #20]
            }

            /* sensor temperature */
            *sensor_temp = (temp * 125) + 23000;
 8002850:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002854:	4613      	mov	r3, r2
 8002856:	015b      	lsls	r3, r3, #5
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	f503 43b3 	add.w	r3, r3, #22912	@ 0x5980
 8002862:	3358      	adds	r3, #88	@ 0x58
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	6013      	str	r3, [r2, #0]
        if (rslt == BMI08X_OK)
 8002868:	e001      	b.n	800286e <bmi08a_get_sensor_temperature+0x8c>
        }

    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800286a:	23ff      	movs	r3, #255	@ 0xff
 800286c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800286e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <null_ptr_check+0x26>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <null_ptr_check+0x26>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <null_ptr_check+0x26>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 80028a0:	23ff      	movs	r3, #255	@ 0xff
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e001      	b.n	80028aa <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 80028ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028be:	b089      	sub	sp, #36	@ 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	4613      	mov	r3, r2
 80028cc:	81bb      	strh	r3, [r7, #12]
 80028ce:	466b      	mov	r3, sp
 80028d0:	461e      	mov	r6, r3
    int8_t rslt;
    uint16_t index;
    uint16_t temp_len = len + dev->dummy_byte;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	795b      	ldrb	r3, [r3, #5]
 80028d6:	461a      	mov	r2, r3
 80028d8:	89bb      	ldrh	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	837b      	strh	r3, [r7, #26]
    uint8_t temp_buff[temp_len];
 80028de:	8b79      	ldrh	r1, [r7, #26]
 80028e0:	460b      	mov	r3, r1
 80028e2:	3b01      	subs	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	b28b      	uxth	r3, r1
 80028e8:	2200      	movs	r2, #0
 80028ea:	4698      	mov	r8, r3
 80028ec:	4691      	mov	r9, r2
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002902:	b28b      	uxth	r3, r1
 8002904:	2200      	movs	r2, #0
 8002906:	461c      	mov	r4, r3
 8002908:	4615      	mov	r5, r2
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	00eb      	lsls	r3, r5, #3
 8002914:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002918:	00e2      	lsls	r2, r4, #3
 800291a:	460b      	mov	r3, r1
 800291c:	3307      	adds	r3, #7
 800291e:	08db      	lsrs	r3, r3, #3
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	ebad 0d03 	sub.w	sp, sp, r3
 8002926:	466b      	mov	r3, sp
 8002928:	3300      	adds	r3, #0
 800292a:	613b      	str	r3, [r7, #16]

    if (dev->intf == BMI08X_SPI_INTF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	791b      	ldrb	r3, [r3, #4]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d103      	bne.n	800293c <get_regs+0x82>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08X_SPI_RD_MASK;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800293a:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    rslt = dev->read(dev->accel_id, reg_addr, temp_buff, temp_len);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699c      	ldr	r4, [r3, #24]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7898      	ldrb	r0, [r3, #2]
 8002944:	8b7b      	ldrh	r3, [r7, #26]
 8002946:	7bf9      	ldrb	r1, [r7, #15]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	47a0      	blx	r4
 800294c:	4603      	mov	r3, r0
 800294e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI08X_OK)
 8002950:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d114      	bne.n	8002982 <get_regs+0xc8>
    {
        for (index = 0; index < len; index++)
 8002958:	2300      	movs	r3, #0
 800295a:	83bb      	strh	r3, [r7, #28]
 800295c:	e00c      	b.n	8002978 <get_regs+0xbe>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 800295e:	8bbb      	ldrh	r3, [r7, #28]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	7952      	ldrb	r2, [r2, #5]
 8002964:	441a      	add	r2, r3
 8002966:	8bbb      	ldrh	r3, [r7, #28]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	440b      	add	r3, r1
 800296c:	6939      	ldr	r1, [r7, #16]
 800296e:	5c8a      	ldrb	r2, [r1, r2]
 8002970:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 8002972:	8bbb      	ldrh	r3, [r7, #28]
 8002974:	3301      	adds	r3, #1
 8002976:	83bb      	strh	r3, [r7, #28]
 8002978:	8bba      	ldrh	r2, [r7, #28]
 800297a:	89bb      	ldrh	r3, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d3ee      	bcc.n	800295e <get_regs+0xa4>
 8002980:	e001      	b.n	8002986 <get_regs+0xcc>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08X_E_COM_FAIL;
 8002982:	23fe      	movs	r3, #254	@ 0xfe
 8002984:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002986:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800298a:	46b5      	mov	sp, r6
}
 800298c:	4618      	mov	r0, r3
 800298e:	3724      	adds	r7, #36	@ 0x24
 8002990:	46bd      	mov	sp, r7
 8002992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002996 <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 8002996:	b590      	push	{r4, r7, lr}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	4613      	mov	r3, r2
 80029a6:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    if (dev->intf == BMI08X_SPI_INTF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	791b      	ldrb	r3, [r3, #4]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d103      	bne.n	80029b8 <set_regs+0x22>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029b6:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    rslt = dev->write(dev->accel_id, reg_addr, reg_data, len);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69dc      	ldr	r4, [r3, #28]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7898      	ldrb	r0, [r3, #2]
 80029c0:	89bb      	ldrh	r3, [r7, #12]
 80029c2:	7bf9      	ldrb	r1, [r7, #15]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	47a0      	blx	r4
 80029c8:	4603      	mov	r3, r0
 80029ca:	75fb      	strb	r3, [r7, #23]

    if (rslt != BMI08X_OK)
 80029cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <set_regs+0x42>
    {
        /* Updating the error status */
        rslt = BMI08X_E_COM_FAIL;
 80029d4:	23fe      	movs	r3, #254	@ 0xfe
 80029d6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80029d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd90      	pop	{r4, r7, pc}

080029e4 <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08x_dev *dev)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f96f 	bl	8002cd4 <null_ptr_check>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d115      	bne.n	8002a2e <bmi08g_init+0x4a>
    {
        /* Read gyro chip id */
        rslt = get_regs(BMI08X_GYRO_CHIP_ID_REG, &chip_id, 1, dev);
 8002a02:	f107 010e 	add.w	r1, r7, #14
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f000 f982 	bl	8002d14 <get_regs>
 8002a10:	4603      	mov	r3, r0
 8002a12:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8002a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d108      	bne.n	8002a2e <bmi08g_init+0x4a>
        {
            if (chip_id == BMI08X_GYRO_CHIP_ID)
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	d103      	bne.n	8002a2a <bmi08g_init+0x46>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 8002a22:	7bba      	ldrb	r2, [r7, #14]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	705a      	strb	r2, [r3, #1]
 8002a28:	e001      	b.n	8002a2e <bmi08g_init+0x4a>
            }
            else
            {
                rslt = BMI08X_E_DEV_NOT_FOUND;
 8002a2a:	23fd      	movs	r3, #253	@ 0xfd
 8002a2c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	4603      	mov	r3, r0
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f941 	bl	8002cd4 <null_ptr_check>
 8002a52:	4603      	mov	r3, r0
 8002a54:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8002a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d111      	bne.n	8002a82 <bmi08g_get_regs+0x48>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00e      	beq.n	8002a82 <bmi08g_get_regs+0x48>
    {
        if (len > 0)
 8002a64:	89bb      	ldrh	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <bmi08g_get_regs+0x42>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8002a6a:	89ba      	ldrh	r2, [r7, #12]
 8002a6c:	7bf8      	ldrb	r0, [r7, #15]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	f000 f94f 	bl	8002d14 <get_regs>
 8002a76:	4603      	mov	r3, r0
 8002a78:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8002a7a:	e004      	b.n	8002a86 <bmi08g_get_regs+0x4c>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8002a7c:	23f9      	movs	r3, #249	@ 0xf9
 8002a7e:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8002a80:	e001      	b.n	8002a86 <bmi08g_get_regs+0x4c>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8002a82:	23ff      	movs	r3, #255	@ 0xff
 8002a84:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(const struct bmi08x_dev *dev)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73bb      	strb	r3, [r7, #14]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f916 	bl	8002cd4 <null_ptr_check>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8002aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d166      	bne.n	8002b82 <bmi08g_set_meas_conf+0xf0>
    {
        odr = dev->gyro_cfg.odr;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7b5b      	ldrb	r3, [r3, #13]
 8002ab8:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7adb      	ldrb	r3, [r3, #11]
 8002abe:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08X_GYRO_BW_32_ODR_100_HZ)
 8002ac0:	7b3b      	ldrb	r3, [r7, #12]
 8002ac2:	2b07      	cmp	r3, #7
 8002ac4:	d901      	bls.n	8002aca <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08X_GYRO_RANGE_125_DPS)
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d901      	bls.n	8002ad4 <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 8002ad4:	7b7b      	ldrb	r3, [r7, #13]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d14f      	bne.n	8002b7a <bmi08g_set_meas_conf+0xe8>
 8002ada:	7bbb      	ldrb	r3, [r7, #14]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d14c      	bne.n	8002b7a <bmi08g_set_meas_conf+0xe8>
        {
            /* Read range value from the range register */
            rslt = get_regs(BMI08X_GYRO_BANDWIDTH_REG, &data, 1, dev);
 8002ae0:	f107 010a 	add.w	r1, r7, #10
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2010      	movs	r0, #16
 8002aea:	f000 f913 	bl	8002d14 <get_regs>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d142      	bne.n	8002b80 <bmi08g_set_meas_conf+0xee>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_BW, odr);
 8002afa:	7abb      	ldrb	r3, [r7, #10]
 8002afc:	b25b      	sxtb	r3, r3
 8002afe:	f023 030f 	bic.w	r3, r3, #15
 8002b02:	b25a      	sxtb	r2, r3
 8002b04:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = set_regs(BMI08X_GYRO_BANDWIDTH_REG, &data, 1, dev);
 8002b16:	f107 010a 	add.w	r1, r7, #10
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2010      	movs	r0, #16
 8002b20:	f000 f91f 	bl	8002d62 <set_regs>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d127      	bne.n	8002b80 <bmi08g_set_meas_conf+0xee>
                {
                    /* Read range value from the range register */
                    rslt = get_regs(BMI08X_GYRO_RANGE_REG, &data, 1, dev);
 8002b30:	f107 010a 	add.w	r1, r7, #10
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	200f      	movs	r0, #15
 8002b3a:	f000 f8eb 	bl	8002d14 <get_regs>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08X_OK)
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d11a      	bne.n	8002b80 <bmi08g_set_meas_conf+0xee>
                    {
                        data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_RANGE, range);
 8002b4a:	7abb      	ldrb	r3, [r7, #10]
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	f023 0307 	bic.w	r3, r3, #7
 8002b52:	b25a      	sxtb	r2, r3
 8002b54:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	72bb      	strb	r3, [r7, #10]

                        /* Write range value to range register */
                        rslt = set_regs(BMI08X_GYRO_RANGE_REG, &data, 1, dev);
 8002b66:	f107 010a 	add.w	r1, r7, #10
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	200f      	movs	r0, #15
 8002b70:	f000 f8f7 	bl	8002d62 <set_regs>
 8002b74:	4603      	mov	r3, r0
 8002b76:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08X_OK)
 8002b78:	e002      	b.n	8002b80 <bmi08g_set_meas_conf+0xee>

        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8002b7a:	23f8      	movs	r3, #248	@ 0xf8
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	e000      	b.n	8002b82 <bmi08g_set_meas_conf+0xf0>
            if (rslt == BMI08X_OK)
 8002b80:	bf00      	nop
        }
    }

    return rslt;
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(const struct bmi08x_dev *dev)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f89a 	bl	8002cd4 <null_ptr_check>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8002ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d136      	bne.n	8002c1a <bmi08g_set_power_mode+0x8c>
    {
        /*read the previous power state*/
        rslt = get_regs(BMI08X_GYRO_LPM1_REG, &data, 1, dev);
 8002bac:	f107 010c 	add.w	r1, r7, #12
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2011      	movs	r0, #17
 8002bb6:	f000 f8ad 	bl	8002d14 <get_regs>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8002bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d129      	bne.n	8002c1a <bmi08g_set_power_mode+0x8c>
        {
            power_mode = dev->gyro_cfg.power;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7a9b      	ldrb	r3, [r3, #10]
 8002bca:	737b      	strb	r3, [r7, #13]

            /*switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching (i.e)
             * deep suspend to suspend */
            if ((power_mode == BMI08X_GYRO_PM_SUSPEND) && (data == BMI08X_GYRO_PM_DEEP_SUSPEND))
 8002bcc:	7b7b      	ldrb	r3, [r7, #13]
 8002bce:	2b80      	cmp	r3, #128	@ 0x80
 8002bd0:	d104      	bne.n	8002bdc <bmi08g_set_power_mode+0x4e>
 8002bd2:	7b3b      	ldrb	r3, [r7, #12]
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d101      	bne.n	8002bdc <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08X_GYRO_PM_DEEP_SUSPEND) && (data == BMI08X_GYRO_PM_SUSPEND))
 8002bdc:	7b7b      	ldrb	r3, [r7, #13]
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d104      	bne.n	8002bec <bmi08g_set_power_mode+0x5e>
 8002be2:	7b3b      	ldrb	r3, [r7, #12]
 8002be4:	2b80      	cmp	r3, #128	@ 0x80
 8002be6:	d101      	bne.n	8002bec <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 8002bec:	7bbb      	ldrb	r3, [r7, #14]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d011      	beq.n	8002c16 <bmi08g_set_power_mode+0x88>
            {
                /* Write power to power register */
                rslt = set_regs(BMI08X_GYRO_LPM1_REG, &power_mode, 1, dev);
 8002bf2:	f107 010d 	add.w	r1, r7, #13
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2011      	movs	r0, #17
 8002bfc:	f000 f8b1 	bl	8002d62 <set_regs>
 8002c00:	4603      	mov	r3, r0
 8002c02:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <bmi08g_set_power_mode+0x8c>
                {
                    /* Time required to switch the power mode */
                    dev->delay_ms(BMI08X_GYRO_POWER_MODE_CONFIG_DELAY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	201e      	movs	r0, #30
 8002c12:	4798      	blx	r3
 8002c14:	e001      	b.n	8002c1a <bmi08g_set_power_mode+0x8c>

            }
            else
            {
                /* Updating the error */
                rslt = BMI08X_E_INVALID_INPUT;
 8002c16:	23fb      	movs	r3, #251	@ 0xfb
 8002c18:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08x_sensor_data *gyro, const struct bmi08x_dev *dev)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002c30:	6838      	ldr	r0, [r7, #0]
 8002c32:	f000 f84f 	bl	8002cd4 <null_ptr_check>
 8002c36:	4603      	mov	r3, r0
 8002c38:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (gyro != NULL))
 8002c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d140      	bne.n	8002cc4 <bmi08g_get_data+0x9e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d03d      	beq.n	8002cc4 <bmi08g_get_data+0x9e>
    {
        /* read gyro sensor data */
        rslt = get_regs(BMI08X_GYRO_X_LSB_REG, data, 6, dev);
 8002c48:	f107 010c 	add.w	r1, r7, #12
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2206      	movs	r2, #6
 8002c50:	2002      	movs	r0, #2
 8002c52:	f000 f85f 	bl	8002d14 <get_regs>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8002c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d132      	bne.n	8002cc8 <bmi08g_get_data+0xa2>
        {
            lsb = data[0];
 8002c62:	7b3b      	ldrb	r3, [r7, #12]
 8002c64:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8002c66:	7b7b      	ldrb	r3, [r7, #13]
 8002c68:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8002c6a:	7d7b      	ldrb	r3, [r7, #21]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	7dbb      	ldrb	r3, [r7, #22]
 8002c72:	b21b      	sxth	r3, r3
 8002c74:	4313      	orrs	r3, r2
 8002c76:	b21b      	sxth	r3, r3
 8002c78:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 8002c7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8002c82:	7bbb      	ldrb	r3, [r7, #14]
 8002c84:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8002c8a:	7d7b      	ldrb	r3, [r7, #21]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	b21a      	sxth	r2, r3
 8002c90:	7dbb      	ldrb	r3, [r7, #22]
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 8002c9a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8002ca2:	7c3b      	ldrb	r3, [r7, #16]
 8002ca4:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8002ca6:	7c7b      	ldrb	r3, [r7, #17]
 8002ca8:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8002caa:	7d7b      	ldrb	r3, [r7, #21]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	b21a      	sxth	r2, r3
 8002cb0:	7dbb      	ldrb	r3, [r7, #22]
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 8002cba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8002cc2:	e001      	b.n	8002cc8 <bmi08g_get_data+0xa2>
        }

    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8002cc4:	23ff      	movs	r3, #255	@ 0xff
 8002cc6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <null_ptr_check+0x26>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <null_ptr_check+0x26>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <null_ptr_check+0x26>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8002cfa:	23ff      	movs	r3, #255	@ 0xff
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	e001      	b.n	8002d04 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	4613      	mov	r3, r2
 8002d24:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    if (dev->intf == BMI08X_SPI_INTF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	791b      	ldrb	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d103      	bne.n	8002d36 <get_regs+0x22>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08X_SPI_RD_MASK);
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d34:	73fb      	strb	r3, [r7, #15]
    }

    /* read a gyro register */
    rslt = dev->read(dev->gyro_id, reg_addr, reg_data, len);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699c      	ldr	r4, [r3, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	78d8      	ldrb	r0, [r3, #3]
 8002d3e:	89bb      	ldrh	r3, [r7, #12]
 8002d40:	7bf9      	ldrb	r1, [r7, #15]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	47a0      	blx	r4
 8002d46:	4603      	mov	r3, r0
 8002d48:	75fb      	strb	r3, [r7, #23]

    if (rslt != BMI08X_OK)
 8002d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <get_regs+0x42>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8002d52:	23fe      	movs	r3, #254	@ 0xfe
 8002d54:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd90      	pop	{r4, r7, pc}

08002d62 <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 8002d62:	b590      	push	{r4, r7, lr}
 8002d64:	b087      	sub	sp, #28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	4613      	mov	r3, r2
 8002d72:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    if (dev->intf == BMI08X_SPI_INTF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	791b      	ldrb	r3, [r3, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d103      	bne.n	8002d84 <set_regs+0x22>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d82:	73fb      	strb	r3, [r7, #15]
    }

    /* write to a gyro register */
    rslt = dev->write(dev->gyro_id, reg_addr, reg_data, len);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69dc      	ldr	r4, [r3, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	78d8      	ldrb	r0, [r3, #3]
 8002d8c:	89bb      	ldrh	r3, [r7, #12]
 8002d8e:	7bf9      	ldrb	r1, [r7, #15]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	47a0      	blx	r4
 8002d94:	4603      	mov	r3, r0
 8002d96:	75fb      	strb	r3, [r7, #23]

    if (rslt != BMI08X_OK)
 8002d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <set_regs+0x42>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8002da0:	23fe      	movs	r3, #254	@ 0xfe
 8002da2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}

08002db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <HAL_Init+0x40>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <HAL_Init+0x40>)
 8002dc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dcc:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a07      	ldr	r2, [pc, #28]	@ (8002df0 <HAL_Init+0x40>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f000 f8fc 	bl	8002fd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dde:	200f      	movs	r0, #15
 8002de0:	f7fe ffae 	bl	8001d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de4:	f7fe ff80 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023c00 	.word	0x40023c00

08002df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_IncTick+0x20>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	2000002c 	.word	0x2000002c
 8002e18:	200007dc 	.word	0x200007dc

08002e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <HAL_GetTick+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	200007dc 	.word	0x200007dc

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff ffee 	bl	8002e1c <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <HAL_Delay+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e5a:	bf00      	nop
 8002e5c:	f7ff ffde 	bl	8002e1c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000002c 	.word	0x2000002c

08002e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eae:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	60d3      	str	r3, [r2, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <__NVIC_GetPriorityGrouping+0x18>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	f003 0307 	and.w	r3, r3, #7
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	db0b      	blt.n	8002f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4907      	ldr	r1, [pc, #28]	@ (8002f18 <__NVIC_EnableIRQ+0x38>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2001      	movs	r0, #1
 8002f02:	fa00 f202 	lsl.w	r2, r0, r2
 8002f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100

08002f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	6039      	str	r1, [r7, #0]
 8002f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	db0a      	blt.n	8002f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	490c      	ldr	r1, [pc, #48]	@ (8002f68 <__NVIC_SetPriority+0x4c>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f44:	e00a      	b.n	8002f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4908      	ldr	r1, [pc, #32]	@ (8002f6c <__NVIC_SetPriority+0x50>)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	3b04      	subs	r3, #4
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	440b      	add	r3, r1
 8002f5a:	761a      	strb	r2, [r3, #24]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000e100 	.word	0xe000e100
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	@ 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f1c3 0307 	rsb	r3, r3, #7
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	bf28      	it	cs
 8002f8e:	2304      	movcs	r3, #4
 8002f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <NVIC_EncodePriority+0x30>
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3b03      	subs	r3, #3
 8002f9e:	e000      	b.n	8002fa2 <NVIC_EncodePriority+0x32>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	43d9      	mvns	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	4313      	orrs	r3, r2
         );
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	@ 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff4c 	bl	8002e7c <__NVIC_SetPriorityGrouping>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffe:	f7ff ff61 	bl	8002ec4 <__NVIC_GetPriorityGrouping>
 8003002:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	6978      	ldr	r0, [r7, #20]
 800300a:	f7ff ffb1 	bl	8002f70 <NVIC_EncodePriority>
 800300e:	4602      	mov	r2, r0
 8003010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff80 	bl	8002f1c <__NVIC_SetPriority>
}
 800301c:	bf00      	nop
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ff54 	bl	8002ee0 <__NVIC_EnableIRQ>
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	@ 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	e16b      	b.n	8003334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800305c:	2201      	movs	r2, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	f040 815a 	bne.w	800332e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d005      	beq.n	8003092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800308e:	2b02      	cmp	r3, #2
 8003090:	d130      	bne.n	80030f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2203      	movs	r2, #3
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c8:	2201      	movs	r2, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 0201 	and.w	r2, r3, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d017      	beq.n	8003130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	2203      	movs	r2, #3
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d123      	bne.n	8003184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	08da      	lsrs	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3208      	adds	r2, #8
 8003144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	08da      	lsrs	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3208      	adds	r2, #8
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0203 	and.w	r2, r3, #3
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80b4 	beq.w	800332e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b60      	ldr	r3, [pc, #384]	@ (800334c <HAL_GPIO_Init+0x30c>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	4a5f      	ldr	r2, [pc, #380]	@ (800334c <HAL_GPIO_Init+0x30c>)
 80031d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d6:	4b5d      	ldr	r3, [pc, #372]	@ (800334c <HAL_GPIO_Init+0x30c>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003350 <HAL_GPIO_Init+0x310>)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	3302      	adds	r3, #2
 80031ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	220f      	movs	r2, #15
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a52      	ldr	r2, [pc, #328]	@ (8003354 <HAL_GPIO_Init+0x314>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d02b      	beq.n	8003266 <HAL_GPIO_Init+0x226>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a51      	ldr	r2, [pc, #324]	@ (8003358 <HAL_GPIO_Init+0x318>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d025      	beq.n	8003262 <HAL_GPIO_Init+0x222>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a50      	ldr	r2, [pc, #320]	@ (800335c <HAL_GPIO_Init+0x31c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01f      	beq.n	800325e <HAL_GPIO_Init+0x21e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4f      	ldr	r2, [pc, #316]	@ (8003360 <HAL_GPIO_Init+0x320>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d019      	beq.n	800325a <HAL_GPIO_Init+0x21a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4e      	ldr	r2, [pc, #312]	@ (8003364 <HAL_GPIO_Init+0x324>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_GPIO_Init+0x216>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4d      	ldr	r2, [pc, #308]	@ (8003368 <HAL_GPIO_Init+0x328>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00d      	beq.n	8003252 <HAL_GPIO_Init+0x212>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4c      	ldr	r2, [pc, #304]	@ (800336c <HAL_GPIO_Init+0x32c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d007      	beq.n	800324e <HAL_GPIO_Init+0x20e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4b      	ldr	r2, [pc, #300]	@ (8003370 <HAL_GPIO_Init+0x330>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_GPIO_Init+0x20a>
 8003246:	2307      	movs	r3, #7
 8003248:	e00e      	b.n	8003268 <HAL_GPIO_Init+0x228>
 800324a:	2308      	movs	r3, #8
 800324c:	e00c      	b.n	8003268 <HAL_GPIO_Init+0x228>
 800324e:	2306      	movs	r3, #6
 8003250:	e00a      	b.n	8003268 <HAL_GPIO_Init+0x228>
 8003252:	2305      	movs	r3, #5
 8003254:	e008      	b.n	8003268 <HAL_GPIO_Init+0x228>
 8003256:	2304      	movs	r3, #4
 8003258:	e006      	b.n	8003268 <HAL_GPIO_Init+0x228>
 800325a:	2303      	movs	r3, #3
 800325c:	e004      	b.n	8003268 <HAL_GPIO_Init+0x228>
 800325e:	2302      	movs	r3, #2
 8003260:	e002      	b.n	8003268 <HAL_GPIO_Init+0x228>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_GPIO_Init+0x228>
 8003266:	2300      	movs	r3, #0
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	f002 0203 	and.w	r2, r2, #3
 800326e:	0092      	lsls	r2, r2, #2
 8003270:	4093      	lsls	r3, r2
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003278:	4935      	ldr	r1, [pc, #212]	@ (8003350 <HAL_GPIO_Init+0x310>)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003286:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <HAL_GPIO_Init+0x334>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032aa:	4a32      	ldr	r2, [pc, #200]	@ (8003374 <HAL_GPIO_Init+0x334>)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b0:	4b30      	ldr	r3, [pc, #192]	@ (8003374 <HAL_GPIO_Init+0x334>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d4:	4a27      	ldr	r2, [pc, #156]	@ (8003374 <HAL_GPIO_Init+0x334>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032da:	4b26      	ldr	r3, [pc, #152]	@ (8003374 <HAL_GPIO_Init+0x334>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003374 <HAL_GPIO_Init+0x334>)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003304:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_GPIO_Init+0x334>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003328:	4a12      	ldr	r2, [pc, #72]	@ (8003374 <HAL_GPIO_Init+0x334>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3301      	adds	r3, #1
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b0f      	cmp	r3, #15
 8003338:	f67f ae90 	bls.w	800305c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3724      	adds	r7, #36	@ 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	40013800 	.word	0x40013800
 8003354:	40020000 	.word	0x40020000
 8003358:	40020400 	.word	0x40020400
 800335c:	40020800 	.word	0x40020800
 8003360:	40020c00 	.word	0x40020c00
 8003364:	40021000 	.word	0x40021000
 8003368:	40021400 	.word	0x40021400
 800336c:	40021800 	.word	0x40021800
 8003370:	40021c00 	.word	0x40021c00
 8003374:	40013c00 	.word	0x40013c00

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e12b      	b.n	8003616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe f924 	bl	8001620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	@ 0x24
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800340e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003410:	f001 fc2e 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 8003414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a81      	ldr	r2, [pc, #516]	@ (8003620 <HAL_I2C_Init+0x274>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d807      	bhi.n	8003430 <HAL_I2C_Init+0x84>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a80      	ldr	r2, [pc, #512]	@ (8003624 <HAL_I2C_Init+0x278>)
 8003424:	4293      	cmp	r3, r2
 8003426:	bf94      	ite	ls
 8003428:	2301      	movls	r3, #1
 800342a:	2300      	movhi	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e006      	b.n	800343e <HAL_I2C_Init+0x92>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a7d      	ldr	r2, [pc, #500]	@ (8003628 <HAL_I2C_Init+0x27c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	bf94      	ite	ls
 8003438:	2301      	movls	r3, #1
 800343a:	2300      	movhi	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0e7      	b.n	8003616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a78      	ldr	r2, [pc, #480]	@ (800362c <HAL_I2C_Init+0x280>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0c9b      	lsrs	r3, r3, #18
 8003450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a6a      	ldr	r2, [pc, #424]	@ (8003620 <HAL_I2C_Init+0x274>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d802      	bhi.n	8003480 <HAL_I2C_Init+0xd4>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3301      	adds	r3, #1
 800347e:	e009      	b.n	8003494 <HAL_I2C_Init+0xe8>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	4a69      	ldr	r2, [pc, #420]	@ (8003630 <HAL_I2C_Init+0x284>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	3301      	adds	r3, #1
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	430b      	orrs	r3, r1
 800349a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	495c      	ldr	r1, [pc, #368]	@ (8003620 <HAL_I2C_Init+0x274>)
 80034b0:	428b      	cmp	r3, r1
 80034b2:	d819      	bhi.n	80034e8 <HAL_I2C_Init+0x13c>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e59      	subs	r1, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c2:	1c59      	adds	r1, r3, #1
 80034c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034c8:	400b      	ands	r3, r1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_I2C_Init+0x138>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e59      	subs	r1, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e2:	e051      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 80034e4:	2304      	movs	r3, #4
 80034e6:	e04f      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d111      	bne.n	8003514 <HAL_I2C_Init+0x168>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	440b      	add	r3, r1
 80034fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e012      	b.n	800353a <HAL_I2C_Init+0x18e>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1e58      	subs	r0, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	0099      	lsls	r1, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	fbb0 f3f3 	udiv	r3, r0, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Init+0x196>
 800353e:	2301      	movs	r3, #1
 8003540:	e022      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10e      	bne.n	8003568 <HAL_I2C_Init+0x1bc>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1e58      	subs	r0, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	440b      	add	r3, r1
 8003558:	fbb0 f3f3 	udiv	r3, r0, r3
 800355c:	3301      	adds	r3, #1
 800355e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003566:	e00f      	b.n	8003588 <HAL_I2C_Init+0x1dc>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1e58      	subs	r0, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	0099      	lsls	r1, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	fbb0 f3f3 	udiv	r3, r0, r3
 800357e:	3301      	adds	r3, #1
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	6809      	ldr	r1, [r1, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6911      	ldr	r1, [r2, #16]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68d2      	ldr	r2, [r2, #12]
 80035c2:	4311      	orrs	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	000186a0 	.word	0x000186a0
 8003624:	001e847f 	.word	0x001e847f
 8003628:	003d08ff 	.word	0x003d08ff
 800362c:	431bde83 	.word	0x431bde83
 8003630:	10624dd3 	.word	0x10624dd3

08003634 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	4608      	mov	r0, r1
 800363e:	4611      	mov	r1, r2
 8003640:	461a      	mov	r2, r3
 8003642:	4603      	mov	r3, r0
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	460b      	mov	r3, r1
 8003648:	813b      	strh	r3, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800364e:	f7ff fbe5 	bl	8002e1c <HAL_GetTick>
 8003652:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b20      	cmp	r3, #32
 800365e:	f040 80d9 	bne.w	8003814 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	2319      	movs	r3, #25
 8003668:	2201      	movs	r2, #1
 800366a:	496d      	ldr	r1, [pc, #436]	@ (8003820 <HAL_I2C_Mem_Write+0x1ec>)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fc99 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003678:	2302      	movs	r3, #2
 800367a:	e0cc      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_I2C_Mem_Write+0x56>
 8003686:	2302      	movs	r3, #2
 8003688:	e0c5      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d007      	beq.n	80036b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2221      	movs	r2, #33	@ 0x21
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2240      	movs	r2, #64	@ 0x40
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a3a      	ldr	r2, [r7, #32]
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003824 <HAL_I2C_Mem_Write+0x1f0>)
 80036f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036f2:	88f8      	ldrh	r0, [r7, #6]
 80036f4:	893a      	ldrh	r2, [r7, #8]
 80036f6:	8979      	ldrh	r1, [r7, #10]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	4603      	mov	r3, r0
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fad0 	bl	8003ca8 <I2C_RequestMemoryWrite>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d052      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e081      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fd5e 	bl	80041d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2b04      	cmp	r3, #4
 8003728:	d107      	bne.n	800373a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e06b      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d11b      	bne.n	80037b4 <HAL_I2C_Mem_Write+0x180>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1aa      	bne.n	8003712 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fd51 	bl	8004268 <I2C_WaitOnBTFFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d107      	bne.n	80037e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e016      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	00100002 	.word	0x00100002
 8003824:	ffff0000 	.word	0xffff0000

08003828 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	@ 0x30
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	4608      	mov	r0, r1
 8003832:	4611      	mov	r1, r2
 8003834:	461a      	mov	r2, r3
 8003836:	4603      	mov	r3, r0
 8003838:	817b      	strh	r3, [r7, #10]
 800383a:	460b      	mov	r3, r1
 800383c:	813b      	strh	r3, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003842:	f7ff faeb 	bl	8002e1c <HAL_GetTick>
 8003846:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b20      	cmp	r3, #32
 8003852:	f040 8214 	bne.w	8003c7e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	2319      	movs	r3, #25
 800385c:	2201      	movs	r2, #1
 800385e:	497b      	ldr	r1, [pc, #492]	@ (8003a4c <HAL_I2C_Mem_Read+0x224>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fb9f 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	e207      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_I2C_Mem_Read+0x56>
 800387a:	2302      	movs	r3, #2
 800387c:	e200      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d007      	beq.n	80038a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2222      	movs	r2, #34	@ 0x22
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2240      	movs	r2, #64	@ 0x40
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a50 <HAL_I2C_Mem_Read+0x228>)
 80038e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038e6:	88f8      	ldrh	r0, [r7, #6]
 80038e8:	893a      	ldrh	r2, [r7, #8]
 80038ea:	8979      	ldrh	r1, [r7, #10]
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4603      	mov	r3, r0
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fa6c 	bl	8003dd4 <I2C_RequestMemoryRead>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e1bc      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d113      	bne.n	8003936 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390e:	2300      	movs	r3, #0
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	623b      	str	r3, [r7, #32]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	623b      	str	r3, [r7, #32]
 8003922:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e190      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393a:	2b01      	cmp	r3, #1
 800393c:	d11b      	bne.n	8003976 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e170      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397a:	2b02      	cmp	r3, #2
 800397c:	d11b      	bne.n	80039b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800398c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800399c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	e150      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039cc:	e144      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	f200 80f1 	bhi.w	8003bba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d123      	bne.n	8003a28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fc87 	bl	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e145      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a26:	e117      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d14e      	bne.n	8003ace <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a36:	2200      	movs	r2, #0
 8003a38:	4906      	ldr	r1, [pc, #24]	@ (8003a54 <HAL_I2C_Mem_Read+0x22c>)
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fab2 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e11a      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
 8003a4a:	bf00      	nop
 8003a4c:	00100002 	.word	0x00100002
 8003a50:	ffff0000 	.word	0xffff0000
 8003a54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003acc:	e0c4      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	496c      	ldr	r1, [pc, #432]	@ (8003c88 <HAL_I2C_Mem_Read+0x460>)
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fa63 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0cb      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	2200      	movs	r2, #0
 8003b32:	4955      	ldr	r1, [pc, #340]	@ (8003c88 <HAL_I2C_Mem_Read+0x460>)
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fa35 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e09d      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bb8:	e04e      	b.n	8003c58 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fb9a 	bl	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e058      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d124      	bne.n	8003c58 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d107      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c24:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f aeb6 	bne.w	80039ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	@ 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	00010004 	.word	0x00010004

08003c8c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	817b      	strh	r3, [r7, #10]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	813b      	strh	r3, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f960 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00d      	beq.n	8003d06 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf8:	d103      	bne.n	8003d02 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e05f      	b.n	8003dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	6a3a      	ldr	r2, [r7, #32]
 8003d1a:	492d      	ldr	r1, [pc, #180]	@ (8003dd0 <I2C_RequestMemoryWrite+0x128>)
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f9bb 	bl	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e04c      	b.n	8003dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d44:	6a39      	ldr	r1, [r7, #32]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fa46 	bl	80041d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d107      	bne.n	8003d6a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e02b      	b.n	8003dc6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d105      	bne.n	8003d80 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d74:	893b      	ldrh	r3, [r7, #8]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	e021      	b.n	8003dc4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	6a39      	ldr	r1, [r7, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fa20 	bl	80041d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00d      	beq.n	8003dba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d107      	bne.n	8003db6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e005      	b.n	8003dc6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	00010002 	.word	0x00010002

08003dd4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4603      	mov	r3, r0
 8003de4:	817b      	strh	r3, [r7, #10]
 8003de6:	460b      	mov	r3, r1
 8003de8:	813b      	strh	r3, [r7, #8]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f8c2 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e34:	d103      	bne.n	8003e3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0aa      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e42:	897b      	ldrh	r3, [r7, #10]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	4952      	ldr	r1, [pc, #328]	@ (8003fa0 <I2C_RequestMemoryRead+0x1cc>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f91d 	bl	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e097      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e80:	6a39      	ldr	r1, [r7, #32]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f9a8 	bl	80041d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d107      	bne.n	8003ea6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e076      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb0:	893b      	ldrh	r3, [r7, #8]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]
 8003eba:	e021      	b.n	8003f00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f982 	bl	80041d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e050      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef6:	893b      	ldrh	r3, [r7, #8]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f02:	6a39      	ldr	r1, [r7, #32]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f967 	bl	80041d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d107      	bne.n	8003f28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e035      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f82b 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00d      	beq.n	8003f70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f62:	d103      	bne.n	8003f6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e013      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f70:	897b      	ldrh	r3, [r7, #10]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	6a3a      	ldr	r2, [r7, #32]
 8003f84:	4906      	ldr	r1, [pc, #24]	@ (8003fa0 <I2C_RequestMemoryRead+0x1cc>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f886 	bl	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	00010002 	.word	0x00010002

08003fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb4:	e048      	b.n	8004048 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d044      	beq.n	8004048 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7fe ff2d 	bl	8002e1c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d139      	bne.n	8004048 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	0c1b      	lsrs	r3, r3, #16
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d10d      	bne.n	8003ffa <I2C_WaitOnFlagUntilTimeout+0x56>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	e00c      	b.n	8004014 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf0c      	ite	eq
 800400c:	2301      	moveq	r3, #1
 800400e:	2300      	movne	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	429a      	cmp	r2, r3
 8004018:	d116      	bne.n	8004048 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e023      	b.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d10d      	bne.n	800406e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	43da      	mvns	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	e00c      	b.n	8004088 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	43da      	mvns	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	429a      	cmp	r2, r3
 800408c:	d093      	beq.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040a6:	e071      	b.n	800418c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b6:	d123      	bne.n	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e067      	b.n	80041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d041      	beq.n	800418c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004108:	f7fe fe88 	bl	8002e1c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	429a      	cmp	r2, r3
 8004116:	d302      	bcc.n	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d136      	bne.n	800418c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d10c      	bne.n	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	43da      	mvns	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4013      	ands	r3, r2
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf14      	ite	ne
 800413a:	2301      	movne	r3, #1
 800413c:	2300      	moveq	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	e00b      	b.n	800415a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	43da      	mvns	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e021      	b.n	80041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d10c      	bne.n	80041b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	43da      	mvns	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	e00b      	b.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	43da      	mvns	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf14      	ite	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	2300      	moveq	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f47f af6d 	bne.w	80040a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e4:	e034      	b.n	8004250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f8e3 	bl	80043b2 <I2C_IsAcknowledgeFailed>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e034      	b.n	8004260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d028      	beq.n	8004250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fe:	f7fe fe0d 	bl	8002e1c <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	429a      	cmp	r2, r3
 800420c:	d302      	bcc.n	8004214 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d11d      	bne.n	8004250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421e:	2b80      	cmp	r3, #128	@ 0x80
 8004220:	d016      	beq.n	8004250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e007      	b.n	8004260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425a:	2b80      	cmp	r3, #128	@ 0x80
 800425c:	d1c3      	bne.n	80041e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004274:	e034      	b.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f89b 	bl	80043b2 <I2C_IsAcknowledgeFailed>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e034      	b.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d028      	beq.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7fe fdc5 	bl	8002e1c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d11d      	bne.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d016      	beq.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e007      	b.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d1c3      	bne.n	8004276 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004304:	e049      	b.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b10      	cmp	r3, #16
 8004312:	d119      	bne.n	8004348 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0210 	mvn.w	r2, #16
 800431c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e030      	b.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7fe fd68 	bl	8002e1c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d11d      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d016      	beq.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e007      	b.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a4:	2b40      	cmp	r3, #64	@ 0x40
 80043a6:	d1ae      	bne.n	8004306 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c8:	d11b      	bne.n	8004402 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	f043 0204 	orr.w	r2, r3, #4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e267      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d075      	beq.n	800451a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442e:	4b88      	ldr	r3, [pc, #544]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b04      	cmp	r3, #4
 8004438:	d00c      	beq.n	8004454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443a:	4b85      	ldr	r3, [pc, #532]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004442:	2b08      	cmp	r3, #8
 8004444:	d112      	bne.n	800446c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004446:	4b82      	ldr	r3, [pc, #520]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800444e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004452:	d10b      	bne.n	800446c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	4b7e      	ldr	r3, [pc, #504]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d05b      	beq.n	8004518 <HAL_RCC_OscConfig+0x108>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d157      	bne.n	8004518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e242      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004474:	d106      	bne.n	8004484 <HAL_RCC_OscConfig+0x74>
 8004476:	4b76      	ldr	r3, [pc, #472]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a75      	ldr	r2, [pc, #468]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e01d      	b.n	80044c0 <HAL_RCC_OscConfig+0xb0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x98>
 800448e:	4b70      	ldr	r3, [pc, #448]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a6f      	ldr	r2, [pc, #444]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b6d      	ldr	r3, [pc, #436]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6c      	ldr	r2, [pc, #432]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e00b      	b.n	80044c0 <HAL_RCC_OscConfig+0xb0>
 80044a8:	4b69      	ldr	r3, [pc, #420]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a68      	ldr	r2, [pc, #416]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80044ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b66      	ldr	r3, [pc, #408]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a65      	ldr	r2, [pc, #404]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80044ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d013      	beq.n	80044f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe fca8 	bl	8002e1c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fe fca4 	bl	8002e1c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e207      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0xc0>
 80044ee:	e014      	b.n	800451a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fe fc94 	bl	8002e1c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f8:	f7fe fc90 	bl	8002e1c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	@ 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1f3      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450a:	4b51      	ldr	r3, [pc, #324]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0xe8>
 8004516:	e000      	b.n	800451a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d063      	beq.n	80045ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004526:	4b4a      	ldr	r3, [pc, #296]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b47      	ldr	r3, [pc, #284]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800453a:	2b08      	cmp	r3, #8
 800453c:	d11c      	bne.n	8004578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b44      	ldr	r3, [pc, #272]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	4b41      	ldr	r3, [pc, #260]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_RCC_OscConfig+0x152>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d001      	beq.n	8004562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e1c7      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004562:	4b3b      	ldr	r3, [pc, #236]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4937      	ldr	r1, [pc, #220]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	e03a      	b.n	80045ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004580:	4b34      	ldr	r3, [pc, #208]	@ (8004654 <HAL_RCC_OscConfig+0x244>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fe fc49 	bl	8002e1c <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458e:	f7fe fc45 	bl	8002e1c <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e1a8      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b28      	ldr	r3, [pc, #160]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4925      	ldr	r1, [pc, #148]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c2:	4b24      	ldr	r3, [pc, #144]	@ (8004654 <HAL_RCC_OscConfig+0x244>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe fc28 	bl	8002e1c <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d0:	f7fe fc24 	bl	8002e1c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e187      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d036      	beq.n	8004668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d016      	beq.n	8004630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004602:	4b15      	ldr	r3, [pc, #84]	@ (8004658 <HAL_RCC_OscConfig+0x248>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004608:	f7fe fc08 	bl	8002e1c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004610:	f7fe fc04 	bl	8002e1c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e167      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004622:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <HAL_RCC_OscConfig+0x240>)
 8004624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x200>
 800462e:	e01b      	b.n	8004668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004630:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <HAL_RCC_OscConfig+0x248>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004636:	f7fe fbf1 	bl	8002e1c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	e00e      	b.n	800465c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800463e:	f7fe fbed 	bl	8002e1c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d907      	bls.n	800465c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e150      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
 8004650:	40023800 	.word	0x40023800
 8004654:	42470000 	.word	0x42470000
 8004658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	4b88      	ldr	r3, [pc, #544]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800465e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ea      	bne.n	800463e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8097 	beq.w	80047a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467a:	4b81      	ldr	r3, [pc, #516]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	4b7d      	ldr	r3, [pc, #500]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	4a7c      	ldr	r2, [pc, #496]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	@ 0x40
 8004696:	4b7a      	ldr	r3, [pc, #488]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a6:	4b77      	ldr	r3, [pc, #476]	@ (8004884 <HAL_RCC_OscConfig+0x474>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d118      	bne.n	80046e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b2:	4b74      	ldr	r3, [pc, #464]	@ (8004884 <HAL_RCC_OscConfig+0x474>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a73      	ldr	r2, [pc, #460]	@ (8004884 <HAL_RCC_OscConfig+0x474>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046be:	f7fe fbad 	bl	8002e1c <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c6:	f7fe fba9 	bl	8002e1c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e10c      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004884 <HAL_RCC_OscConfig+0x474>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x2ea>
 80046ec:	4b64      	ldr	r3, [pc, #400]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f0:	4a63      	ldr	r2, [pc, #396]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f8:	e01c      	b.n	8004734 <HAL_RCC_OscConfig+0x324>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d10c      	bne.n	800471c <HAL_RCC_OscConfig+0x30c>
 8004702:	4b5f      	ldr	r3, [pc, #380]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004706:	4a5e      	ldr	r2, [pc, #376]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6713      	str	r3, [r2, #112]	@ 0x70
 800470e:	4b5c      	ldr	r3, [pc, #368]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	4a5b      	ldr	r2, [pc, #364]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	@ 0x70
 800471a:	e00b      	b.n	8004734 <HAL_RCC_OscConfig+0x324>
 800471c:	4b58      	ldr	r3, [pc, #352]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004720:	4a57      	ldr	r2, [pc, #348]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	6713      	str	r3, [r2, #112]	@ 0x70
 8004728:	4b55      	ldr	r3, [pc, #340]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472c:	4a54      	ldr	r2, [pc, #336]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d015      	beq.n	8004768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fe fb6e 	bl	8002e1c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fe fb6a 	bl	8002e1c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0cb      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475a:	4b49      	ldr	r3, [pc, #292]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0ee      	beq.n	8004744 <HAL_RCC_OscConfig+0x334>
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004768:	f7fe fb58 	bl	8002e1c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fe fb54 	bl	8002e1c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0b5      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004786:	4b3e      	ldr	r3, [pc, #248]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ee      	bne.n	8004770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004798:	4b39      	ldr	r3, [pc, #228]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	4a38      	ldr	r2, [pc, #224]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80a1 	beq.w	80048f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ae:	4b34      	ldr	r3, [pc, #208]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d05c      	beq.n	8004874 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d141      	bne.n	8004846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <HAL_RCC_OscConfig+0x478>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fe fb28 	bl	8002e1c <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fe fb24 	bl	8002e1c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e087      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e2:	4b27      	ldr	r3, [pc, #156]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	019b      	lsls	r3, r3, #6
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	085b      	lsrs	r3, r3, #1
 8004806:	3b01      	subs	r3, #1
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	491b      	ldr	r1, [pc, #108]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <HAL_RCC_OscConfig+0x478>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481e:	f7fe fafd 	bl	8002e1c <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004826:	f7fe faf9 	bl	8002e1c <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e05c      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004838:	4b11      	ldr	r3, [pc, #68]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x416>
 8004844:	e054      	b.n	80048f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <HAL_RCC_OscConfig+0x478>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fe fae6 	bl	8002e1c <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004854:	f7fe fae2 	bl	8002e1c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e045      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_RCC_OscConfig+0x470>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x444>
 8004872:	e03d      	b.n	80048f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e038      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
 8004880:	40023800 	.word	0x40023800
 8004884:	40007000 	.word	0x40007000
 8004888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800488c:	4b1b      	ldr	r3, [pc, #108]	@ (80048fc <HAL_RCC_OscConfig+0x4ec>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d028      	beq.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d121      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d11a      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048bc:	4013      	ands	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d111      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	3b01      	subs	r3, #1
 80048d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d107      	bne.n	80048ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800

08004900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0cc      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004914:	4b68      	ldr	r3, [pc, #416]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d90c      	bls.n	800493c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b65      	ldr	r3, [pc, #404]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b63      	ldr	r3, [pc, #396]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0b8      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d020      	beq.n	800498a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004954:	4b59      	ldr	r3, [pc, #356]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4a58      	ldr	r2, [pc, #352]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800495e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800496c:	4b53      	ldr	r3, [pc, #332]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4a52      	ldr	r2, [pc, #328]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004978:	4b50      	ldr	r3, [pc, #320]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	494d      	ldr	r1, [pc, #308]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d044      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	4b47      	ldr	r3, [pc, #284]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d119      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e07f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d003      	beq.n	80049be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d107      	bne.n	80049ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049be:	4b3f      	ldr	r3, [pc, #252]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e06f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ce:	4b3b      	ldr	r3, [pc, #236]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e067      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049de:	4b37      	ldr	r3, [pc, #220]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 0203 	bic.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4934      	ldr	r1, [pc, #208]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f0:	f7fe fa14 	bl	8002e1c <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7fe fa10 	bl	8002e1c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e04f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 020c 	and.w	r2, r3, #12
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d1eb      	bne.n	80049f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a20:	4b25      	ldr	r3, [pc, #148]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d20c      	bcs.n	8004a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b22      	ldr	r3, [pc, #136]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b20      	ldr	r3, [pc, #128]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e032      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a54:	4b19      	ldr	r3, [pc, #100]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4916      	ldr	r1, [pc, #88]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a72:	4b12      	ldr	r3, [pc, #72]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	490e      	ldr	r1, [pc, #56]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a86:	f000 f821 	bl	8004acc <HAL_RCC_GetSysClockFreq>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	490a      	ldr	r1, [pc, #40]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	5ccb      	ldrb	r3, [r1, r3]
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	4a09      	ldr	r2, [pc, #36]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aa2:	4b09      	ldr	r3, [pc, #36]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fd f94a 	bl	8001d40 <HAL_InitTick>

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023c00 	.word	0x40023c00
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	0800d788 	.word	0x0800d788
 8004ac4:	20000024 	.word	0x20000024
 8004ac8:	20000028 	.word	0x20000028

08004acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b090      	sub	sp, #64	@ 0x40
 8004ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004adc:	2300      	movs	r3, #0
 8004ade:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae4:	4b59      	ldr	r3, [pc, #356]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 030c 	and.w	r3, r3, #12
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d00d      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x40>
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	f200 80a1 	bhi.w	8004c38 <HAL_RCC_GetSysClockFreq+0x16c>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0x34>
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d003      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004afe:	e09b      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b00:	4b53      	ldr	r3, [pc, #332]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b02:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004b04:	e09b      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b06:	4b53      	ldr	r3, [pc, #332]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b0a:	e098      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b0c:	4b4f      	ldr	r3, [pc, #316]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b14:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b16:	4b4d      	ldr	r3, [pc, #308]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d028      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b22:	4b4a      	ldr	r3, [pc, #296]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	2200      	movs	r2, #0
 8004b2a:	623b      	str	r3, [r7, #32]
 8004b2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b34:	2100      	movs	r1, #0
 8004b36:	4b47      	ldr	r3, [pc, #284]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b38:	fb03 f201 	mul.w	r2, r3, r1
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	fb00 f303 	mul.w	r3, r0, r3
 8004b42:	4413      	add	r3, r2
 8004b44:	4a43      	ldr	r2, [pc, #268]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b46:	fba0 1202 	umull	r1, r2, r0, r2
 8004b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b4c:	460a      	mov	r2, r1
 8004b4e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b52:	4413      	add	r3, r2
 8004b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b58:	2200      	movs	r2, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	61fa      	str	r2, [r7, #28]
 8004b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b66:	f7fc f88f 	bl	8000c88 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4613      	mov	r3, r2
 8004b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b72:	e053      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b74:	4b35      	ldr	r3, [pc, #212]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	099b      	lsrs	r3, r3, #6
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	617a      	str	r2, [r7, #20]
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b86:	f04f 0b00 	mov.w	fp, #0
 8004b8a:	4652      	mov	r2, sl
 8004b8c:	465b      	mov	r3, fp
 8004b8e:	f04f 0000 	mov.w	r0, #0
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	0159      	lsls	r1, r3, #5
 8004b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b9c:	0150      	lsls	r0, r2, #5
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	ebb2 080a 	subs.w	r8, r2, sl
 8004ba6:	eb63 090b 	sbc.w	r9, r3, fp
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bbe:	ebb2 0408 	subs.w	r4, r2, r8
 8004bc2:	eb63 0509 	sbc.w	r5, r3, r9
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	00eb      	lsls	r3, r5, #3
 8004bd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bd4:	00e2      	lsls	r2, r4, #3
 8004bd6:	4614      	mov	r4, r2
 8004bd8:	461d      	mov	r5, r3
 8004bda:	eb14 030a 	adds.w	r3, r4, sl
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	eb45 030b 	adc.w	r3, r5, fp
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	028b      	lsls	r3, r1, #10
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	028a      	lsls	r2, r1, #10
 8004c00:	4610      	mov	r0, r2
 8004c02:	4619      	mov	r1, r3
 8004c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c06:	2200      	movs	r2, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	60fa      	str	r2, [r7, #12]
 8004c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c10:	f7fc f83a 	bl	8000c88 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4613      	mov	r3, r2
 8004c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	3301      	adds	r3, #1
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004c2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c36:	e002      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c38:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3740      	adds	r7, #64	@ 0x40
 8004c44:	46bd      	mov	sp, r7
 8004c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	00f42400 	.word	0x00f42400
 8004c54:	017d7840 	.word	0x017d7840

08004c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c5c:	4b03      	ldr	r3, [pc, #12]	@ (8004c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000024 	.word	0x20000024

08004c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c74:	f7ff fff0 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	0a9b      	lsrs	r3, r3, #10
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4903      	ldr	r1, [pc, #12]	@ (8004c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40023800 	.word	0x40023800
 8004c94:	0800d798 	.word	0x0800d798

08004c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c9c:	f7ff ffdc 	bl	8004c58 <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	0b5b      	lsrs	r3, r3, #13
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	@ (8004cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	0800d798 	.word	0x0800d798

08004cc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	220f      	movs	r2, #15
 8004cce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cd0:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <HAL_RCC_GetClockConfig+0x5c>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0203 	and.w	r2, r3, #3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8004d1c <HAL_RCC_GetClockConfig+0x5c>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d1c <HAL_RCC_GetClockConfig+0x5c>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004cf4:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <HAL_RCC_GetClockConfig+0x5c>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	08db      	lsrs	r3, r3, #3
 8004cfa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <HAL_RCC_GetClockConfig+0x60>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0207 	and.w	r2, r3, #7
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	601a      	str	r2, [r3, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40023c00 	.word	0x40023c00

08004d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e07b      	b.n	8004e2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d108      	bne.n	8004d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d46:	d009      	beq.n	8004d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61da      	str	r2, [r3, #28]
 8004d4e:	e005      	b.n	8004d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc ff6e 	bl	8001c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de0:	ea42 0103 	orr.w	r1, r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f003 0104 	and.w	r1, r3, #4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	f003 0210 	and.w	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b088      	sub	sp, #32
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_SPI_Transmit+0x22>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e12d      	b.n	80050b4 <HAL_SPI_Transmit+0x27e>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e60:	f7fd ffdc 	bl	8002e1c <HAL_GetTick>
 8004e64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d002      	beq.n	8004e7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
 8004e78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e7a:	e116      	b.n	80050aa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_Transmit+0x52>
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e8c:	e10d      	b.n	80050aa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2203      	movs	r2, #3
 8004e92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88fa      	ldrh	r2, [r7, #6]
 8004ea6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ed4:	d10f      	bne.n	8004ef6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ee4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ef4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d007      	beq.n	8004f14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f1c:	d14f      	bne.n	8004fbe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_SPI_Transmit+0xf6>
 8004f26:	8afb      	ldrh	r3, [r7, #22]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d142      	bne.n	8004fb2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	881a      	ldrh	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	1c9a      	adds	r2, r3, #2
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f50:	e02f      	b.n	8004fb2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d112      	bne.n	8004f86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f64:	881a      	ldrh	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	1c9a      	adds	r2, r3, #2
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f84:	e015      	b.n	8004fb2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f86:	f7fd ff49 	bl	8002e1c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d803      	bhi.n	8004f9e <HAL_SPI_Transmit+0x168>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d102      	bne.n	8004fa4 <HAL_SPI_Transmit+0x16e>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004fb0:	e07b      	b.n	80050aa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1ca      	bne.n	8004f52 <HAL_SPI_Transmit+0x11c>
 8004fbc:	e050      	b.n	8005060 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_SPI_Transmit+0x196>
 8004fc6:	8afb      	ldrh	r3, [r7, #22]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d144      	bne.n	8005056 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	7812      	ldrb	r2, [r2, #0]
 8004fd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ff2:	e030      	b.n	8005056 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d113      	bne.n	800502a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005028:	e015      	b.n	8005056 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502a:	f7fd fef7 	bl	8002e1c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d803      	bhi.n	8005042 <HAL_SPI_Transmit+0x20c>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005040:	d102      	bne.n	8005048 <HAL_SPI_Transmit+0x212>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005054:	e029      	b.n	80050aa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1c9      	bne.n	8004ff4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fa61 	bl	800552c <SPI_EndRxTxTransaction>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e003      	b.n	80050aa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80050b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	@ 0x30
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050ca:	2301      	movs	r3, #1
 80050cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x26>
 80050de:	2302      	movs	r3, #2
 80050e0:	e198      	b.n	8005414 <HAL_SPI_TransmitReceive+0x358>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050ea:	f7fd fe97 	bl	8002e1c <HAL_GetTick>
 80050ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005108:	2b01      	cmp	r3, #1
 800510a:	d00f      	beq.n	800512c <HAL_SPI_TransmitReceive+0x70>
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005112:	d107      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x68>
 800511c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005120:	2b04      	cmp	r3, #4
 8005122:	d003      	beq.n	800512c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005124:	2302      	movs	r3, #2
 8005126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800512a:	e16d      	b.n	8005408 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_SPI_TransmitReceive+0x82>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_TransmitReceive+0x82>
 8005138:	887b      	ldrh	r3, [r7, #2]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d103      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005144:	e160      	b.n	8005408 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b04      	cmp	r3, #4
 8005150:	d003      	beq.n	800515a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2205      	movs	r2, #5
 8005156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	887a      	ldrh	r2, [r7, #2]
 800516a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	887a      	ldrh	r2, [r7, #2]
 8005170:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	887a      	ldrh	r2, [r7, #2]
 8005182:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519a:	2b40      	cmp	r3, #64	@ 0x40
 800519c:	d007      	beq.n	80051ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051b6:	d17c      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x10a>
 80051c0:	8b7b      	ldrh	r3, [r7, #26]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d16a      	bne.n	800529c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ca:	881a      	ldrh	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	1c9a      	adds	r2, r3, #2
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ea:	e057      	b.n	800529c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d11b      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x176>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d016      	beq.n	8005232 <HAL_SPI_TransmitReceive+0x176>
 8005204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d113      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	881a      	ldrh	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	1c9a      	adds	r2, r3, #2
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d119      	bne.n	8005274 <HAL_SPI_TransmitReceive+0x1b8>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d014      	beq.n	8005274 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	b292      	uxth	r2, r2
 8005256:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	1c9a      	adds	r2, r3, #2
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005270:	2301      	movs	r3, #1
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005274:	f7fd fdd2 	bl	8002e1c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005280:	429a      	cmp	r2, r3
 8005282:	d80b      	bhi.n	800529c <HAL_SPI_TransmitReceive+0x1e0>
 8005284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d007      	beq.n	800529c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800529a:	e0b5      	b.n	8005408 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1a2      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x130>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d19d      	bne.n	80051ec <HAL_SPI_TransmitReceive+0x130>
 80052b0:	e080      	b.n	80053b4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x204>
 80052ba:	8b7b      	ldrh	r3, [r7, #26]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d16f      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e6:	e05b      	b.n	80053a0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d11c      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x274>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d017      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x274>
 8005300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005302:	2b01      	cmp	r3, #1
 8005304:	d114      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	7812      	ldrb	r2, [r2, #0]
 8005312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d119      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x2b6>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d014      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800536e:	2301      	movs	r3, #1
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005372:	f7fd fd53 	bl	8002e1c <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800537e:	429a      	cmp	r2, r3
 8005380:	d803      	bhi.n	800538a <HAL_SPI_TransmitReceive+0x2ce>
 8005382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d102      	bne.n	8005390 <HAL_SPI_TransmitReceive+0x2d4>
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d107      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800539e:	e033      	b.n	8005408 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d19e      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x22c>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d199      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f8b7 	bl	800552c <SPI_EndRxTxTransaction>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80053d0:	e01a      	b.n	8005408 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fe:	e003      	b.n	8005408 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005410:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005414:	4618      	mov	r0, r3
 8005416:	3730      	adds	r7, #48	@ 0x30
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800542c:	f7fd fcf6 	bl	8002e1c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	4413      	add	r3, r2
 800543a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800543c:	f7fd fcee 	bl	8002e1c <HAL_GetTick>
 8005440:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005442:	4b39      	ldr	r3, [pc, #228]	@ (8005528 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	015b      	lsls	r3, r3, #5
 8005448:	0d1b      	lsrs	r3, r3, #20
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	fb02 f303 	mul.w	r3, r2, r3
 8005450:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005452:	e054      	b.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d050      	beq.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800545c:	f7fd fcde 	bl	8002e1c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	429a      	cmp	r2, r3
 800546a:	d902      	bls.n	8005472 <SPI_WaitFlagStateUntilTimeout+0x56>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d13d      	bne.n	80054ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800548a:	d111      	bne.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005494:	d004      	beq.n	80054a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800549e:	d107      	bne.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054b8:	d10f      	bne.n	80054da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e017      	b.n	800551e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4013      	ands	r3, r2
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	bf0c      	ite	eq
 800550e:	2301      	moveq	r3, #1
 8005510:	2300      	movne	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	429a      	cmp	r2, r3
 800551a:	d19b      	bne.n	8005454 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000024 	.word	0x20000024

0800552c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2201      	movs	r2, #1
 8005540:	2102      	movs	r1, #2
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff ff6a 	bl	800541c <SPI_WaitFlagStateUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e032      	b.n	80055c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800555e:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <SPI_EndRxTxTransaction+0xa0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1b      	ldr	r2, [pc, #108]	@ (80055d0 <SPI_EndRxTxTransaction+0xa4>)
 8005564:	fba2 2303 	umull	r2, r3, r2, r3
 8005568:	0d5b      	lsrs	r3, r3, #21
 800556a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800556e:	fb02 f303 	mul.w	r3, r2, r3
 8005572:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800557c:	d112      	bne.n	80055a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2200      	movs	r2, #0
 8005586:	2180      	movs	r1, #128	@ 0x80
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff ff47 	bl	800541c <SPI_WaitFlagStateUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d016      	beq.n	80055c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005598:	f043 0220 	orr.w	r2, r3, #32
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e00f      	b.n	80055c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ba:	2b80      	cmp	r3, #128	@ 0x80
 80055bc:	d0f2      	beq.n	80055a4 <SPI_EndRxTxTransaction+0x78>
 80055be:	e000      	b.n	80055c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80055c0:	bf00      	nop
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000024 	.word	0x20000024
 80055d0:	165e9f81 	.word	0x165e9f81

080055d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e041      	b.n	800566a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f839 	bl	8005672 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f000 f9c0 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e04e      	b.n	800573e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a23      	ldr	r2, [pc, #140]	@ (800574c <HAL_TIM_Base_Start_IT+0xc4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d022      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d01d      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005750 <HAL_TIM_Base_Start_IT+0xc8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d018      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1e      	ldr	r2, [pc, #120]	@ (8005754 <HAL_TIM_Base_Start_IT+0xcc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005758 <HAL_TIM_Base_Start_IT+0xd0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00e      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1b      	ldr	r2, [pc, #108]	@ (800575c <HAL_TIM_Base_Start_IT+0xd4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a19      	ldr	r2, [pc, #100]	@ (8005760 <HAL_TIM_Base_Start_IT+0xd8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a18      	ldr	r2, [pc, #96]	@ (8005764 <HAL_TIM_Base_Start_IT+0xdc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d111      	bne.n	800572c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b06      	cmp	r3, #6
 8005718:	d010      	beq.n	800573c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572a:	e007      	b.n	800573c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40001800 	.word	0x40001800

08005768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d020      	beq.n	80057cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01b      	beq.n	80057cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0202 	mvn.w	r2, #2
 800579c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8d2 	bl	800595c <HAL_TIM_IC_CaptureCallback>
 80057b8:	e005      	b.n	80057c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f8c4 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f8d5 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d020      	beq.n	8005818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01b      	beq.n	8005818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0204 	mvn.w	r2, #4
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f8ac 	bl	800595c <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f89e 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f8af 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d020      	beq.n	8005864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01b      	beq.n	8005864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0208 	mvn.w	r2, #8
 8005834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2204      	movs	r2, #4
 800583a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f886 	bl	800595c <HAL_TIM_IC_CaptureCallback>
 8005850:	e005      	b.n	800585e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f878 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f889 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b00      	cmp	r3, #0
 800586c:	d020      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01b      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0210 	mvn.w	r2, #16
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2208      	movs	r2, #8
 8005886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f860 	bl	800595c <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f852 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f863 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00c      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0201 	mvn.w	r2, #1
 80058cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb ffd0 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f906 	bl	8005b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f834 	bl	8005984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00c      	beq.n	8005940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0220 	mvn.w	r2, #32
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f8d8 	bl	8005af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a46      	ldr	r2, [pc, #280]	@ (8005ac4 <TIM_Base_SetConfig+0x12c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d013      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b6:	d00f      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a43      	ldr	r2, [pc, #268]	@ (8005ac8 <TIM_Base_SetConfig+0x130>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a42      	ldr	r2, [pc, #264]	@ (8005acc <TIM_Base_SetConfig+0x134>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a41      	ldr	r2, [pc, #260]	@ (8005ad0 <TIM_Base_SetConfig+0x138>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a40      	ldr	r2, [pc, #256]	@ (8005ad4 <TIM_Base_SetConfig+0x13c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d108      	bne.n	80059ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a35      	ldr	r2, [pc, #212]	@ (8005ac4 <TIM_Base_SetConfig+0x12c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f8:	d027      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a32      	ldr	r2, [pc, #200]	@ (8005ac8 <TIM_Base_SetConfig+0x130>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d023      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a31      	ldr	r2, [pc, #196]	@ (8005acc <TIM_Base_SetConfig+0x134>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01f      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a30      	ldr	r2, [pc, #192]	@ (8005ad0 <TIM_Base_SetConfig+0x138>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d01b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2f      	ldr	r2, [pc, #188]	@ (8005ad4 <TIM_Base_SetConfig+0x13c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d017      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad8 <TIM_Base_SetConfig+0x140>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2d      	ldr	r2, [pc, #180]	@ (8005adc <TIM_Base_SetConfig+0x144>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00f      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae0 <TIM_Base_SetConfig+0x148>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2b      	ldr	r2, [pc, #172]	@ (8005ae4 <TIM_Base_SetConfig+0x14c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae8 <TIM_Base_SetConfig+0x150>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a29      	ldr	r2, [pc, #164]	@ (8005aec <TIM_Base_SetConfig+0x154>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a10      	ldr	r2, [pc, #64]	@ (8005ac4 <TIM_Base_SetConfig+0x12c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_Base_SetConfig+0xf8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a12      	ldr	r2, [pc, #72]	@ (8005ad4 <TIM_Base_SetConfig+0x13c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d103      	bne.n	8005a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d105      	bne.n	8005ab6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	611a      	str	r2, [r3, #16]
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40010400 	.word	0x40010400
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40014400 	.word	0x40014400
 8005ae0:	40014800 	.word	0x40014800
 8005ae4:	40001800 	.word	0x40001800
 8005ae8:	40001c00 	.word	0x40001c00
 8005aec:	40002000 	.word	0x40002000

08005af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e042      	b.n	8005bb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc faa2 	bl	8002088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	@ 0x24
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f973 	bl	8005e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	@ 0x28
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d175      	bne.n	8005cc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_UART_Transmit+0x2c>
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e06e      	b.n	8005cc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2221      	movs	r2, #33	@ 0x21
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf6:	f7fd f911 	bl	8002e1c <HAL_GetTick>
 8005bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	88fa      	ldrh	r2, [r7, #6]
 8005c00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c10:	d108      	bne.n	8005c24 <HAL_UART_Transmit+0x6c>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	e003      	b.n	8005c2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c2c:	e02e      	b.n	8005c8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2180      	movs	r1, #128	@ 0x80
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f848 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e03a      	b.n	8005cc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	3302      	adds	r3, #2
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e007      	b.n	8005c7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1cb      	bne.n	8005c2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2140      	movs	r1, #64	@ 0x40
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f814 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e006      	b.n	8005cc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cde:	e03b      	b.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d037      	beq.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce8:	f7fd f898 	bl	8002e1c <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	6a3a      	ldr	r2, [r7, #32]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d302      	bcc.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e03a      	b.n	8005d78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d023      	beq.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b80      	cmp	r3, #128	@ 0x80
 8005d14:	d020      	beq.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b40      	cmp	r3, #64	@ 0x40
 8005d1a:	d01d      	beq.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d116      	bne.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f81d 	bl	8005d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2208      	movs	r2, #8
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e00f      	b.n	8005d78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4013      	ands	r3, r2
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d0b4      	beq.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b095      	sub	sp, #84	@ 0x54
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	330c      	adds	r3, #12
 8005da6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005da8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e5      	bne.n	8005d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3314      	adds	r3, #20
 8005dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e5      	bne.n	8005dbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d119      	bne.n	8005e2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f023 0310 	bic.w	r3, r3, #16
 8005e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	330c      	adds	r3, #12
 8005e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e18:	61ba      	str	r2, [r7, #24]
 8005e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	6979      	ldr	r1, [r7, #20]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	613b      	str	r3, [r7, #16]
   return(result);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e5      	bne.n	8005df8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e3a:	bf00      	nop
 8005e3c:	3754      	adds	r7, #84	@ 0x54
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e4c:	b0c0      	sub	sp, #256	@ 0x100
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e64:	68d9      	ldr	r1, [r3, #12]
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	ea40 0301 	orr.w	r3, r0, r1
 8005e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	431a      	orrs	r2, r3
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ea0:	f021 010c 	bic.w	r1, r1, #12
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec2:	6999      	ldr	r1, [r3, #24]
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	ea40 0301 	orr.w	r3, r0, r1
 8005ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8006114 <UART_SetConfig+0x2cc>)
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d005      	beq.n	8005ee8 <UART_SetConfig+0xa0>
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8006118 <UART_SetConfig+0x2d0>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d104      	bne.n	8005ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fe fed6 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 8005eec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ef0:	e003      	b.n	8005efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ef2:	f7fe febd 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 8005ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f04:	f040 810c 	bne.w	8006120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	1891      	adds	r1, r2, r2
 8005f20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f22:	415b      	adcs	r3, r3
 8005f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	eb12 0801 	adds.w	r8, r2, r1
 8005f30:	4629      	mov	r1, r5
 8005f32:	eb43 0901 	adc.w	r9, r3, r1
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f4a:	4690      	mov	r8, r2
 8005f4c:	4699      	mov	r9, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	eb18 0303 	adds.w	r3, r8, r3
 8005f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f58:	462b      	mov	r3, r5
 8005f5a:	eb49 0303 	adc.w	r3, r9, r3
 8005f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f76:	460b      	mov	r3, r1
 8005f78:	18db      	adds	r3, r3, r3
 8005f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	eb42 0303 	adc.w	r3, r2, r3
 8005f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f8c:	f7fa fe7c 	bl	8000c88 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4b61      	ldr	r3, [pc, #388]	@ (800611c <UART_SetConfig+0x2d4>)
 8005f96:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	011c      	lsls	r4, r3, #4
 8005f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	1891      	adds	r1, r2, r2
 8005fb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fb8:	415b      	adcs	r3, r3
 8005fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fc0:	4641      	mov	r1, r8
 8005fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe0:	4692      	mov	sl, r2
 8005fe2:	469b      	mov	fp, r3
 8005fe4:	4643      	mov	r3, r8
 8005fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8005fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fee:	464b      	mov	r3, r9
 8005ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006004:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800600c:	460b      	mov	r3, r1
 800600e:	18db      	adds	r3, r3, r3
 8006010:	643b      	str	r3, [r7, #64]	@ 0x40
 8006012:	4613      	mov	r3, r2
 8006014:	eb42 0303 	adc.w	r3, r2, r3
 8006018:	647b      	str	r3, [r7, #68]	@ 0x44
 800601a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800601e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006022:	f7fa fe31 	bl	8000c88 <__aeabi_uldivmod>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4611      	mov	r1, r2
 800602c:	4b3b      	ldr	r3, [pc, #236]	@ (800611c <UART_SetConfig+0x2d4>)
 800602e:	fba3 2301 	umull	r2, r3, r3, r1
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	2264      	movs	r2, #100	@ 0x64
 8006036:	fb02 f303 	mul.w	r3, r2, r3
 800603a:	1acb      	subs	r3, r1, r3
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006042:	4b36      	ldr	r3, [pc, #216]	@ (800611c <UART_SetConfig+0x2d4>)
 8006044:	fba3 2302 	umull	r2, r3, r3, r2
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006050:	441c      	add	r4, r3
 8006052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800605c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006064:	4642      	mov	r2, r8
 8006066:	464b      	mov	r3, r9
 8006068:	1891      	adds	r1, r2, r2
 800606a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800606c:	415b      	adcs	r3, r3
 800606e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006074:	4641      	mov	r1, r8
 8006076:	1851      	adds	r1, r2, r1
 8006078:	6339      	str	r1, [r7, #48]	@ 0x30
 800607a:	4649      	mov	r1, r9
 800607c:	414b      	adcs	r3, r1
 800607e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	f04f 0300 	mov.w	r3, #0
 8006088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800608c:	4659      	mov	r1, fp
 800608e:	00cb      	lsls	r3, r1, #3
 8006090:	4651      	mov	r1, sl
 8006092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006096:	4651      	mov	r1, sl
 8006098:	00ca      	lsls	r2, r1, #3
 800609a:	4610      	mov	r0, r2
 800609c:	4619      	mov	r1, r3
 800609e:	4603      	mov	r3, r0
 80060a0:	4642      	mov	r2, r8
 80060a2:	189b      	adds	r3, r3, r2
 80060a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060a8:	464b      	mov	r3, r9
 80060aa:	460a      	mov	r2, r1
 80060ac:	eb42 0303 	adc.w	r3, r2, r3
 80060b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060c8:	460b      	mov	r3, r1
 80060ca:	18db      	adds	r3, r3, r3
 80060cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ce:	4613      	mov	r3, r2
 80060d0:	eb42 0303 	adc.w	r3, r2, r3
 80060d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060de:	f7fa fdd3 	bl	8000c88 <__aeabi_uldivmod>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4b0d      	ldr	r3, [pc, #52]	@ (800611c <UART_SetConfig+0x2d4>)
 80060e8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	2164      	movs	r1, #100	@ 0x64
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	3332      	adds	r3, #50	@ 0x32
 80060fa:	4a08      	ldr	r2, [pc, #32]	@ (800611c <UART_SetConfig+0x2d4>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	f003 0207 	and.w	r2, r3, #7
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4422      	add	r2, r4
 800610e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006110:	e106      	b.n	8006320 <UART_SetConfig+0x4d8>
 8006112:	bf00      	nop
 8006114:	40011000 	.word	0x40011000
 8006118:	40011400 	.word	0x40011400
 800611c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800612a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800612e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006132:	4642      	mov	r2, r8
 8006134:	464b      	mov	r3, r9
 8006136:	1891      	adds	r1, r2, r2
 8006138:	6239      	str	r1, [r7, #32]
 800613a:	415b      	adcs	r3, r3
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
 800613e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006142:	4641      	mov	r1, r8
 8006144:	1854      	adds	r4, r2, r1
 8006146:	4649      	mov	r1, r9
 8006148:	eb43 0501 	adc.w	r5, r3, r1
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	00eb      	lsls	r3, r5, #3
 8006156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800615a:	00e2      	lsls	r2, r4, #3
 800615c:	4614      	mov	r4, r2
 800615e:	461d      	mov	r5, r3
 8006160:	4643      	mov	r3, r8
 8006162:	18e3      	adds	r3, r4, r3
 8006164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006168:	464b      	mov	r3, r9
 800616a:	eb45 0303 	adc.w	r3, r5, r3
 800616e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800617e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800618e:	4629      	mov	r1, r5
 8006190:	008b      	lsls	r3, r1, #2
 8006192:	4621      	mov	r1, r4
 8006194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006198:	4621      	mov	r1, r4
 800619a:	008a      	lsls	r2, r1, #2
 800619c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061a0:	f7fa fd72 	bl	8000c88 <__aeabi_uldivmod>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4b60      	ldr	r3, [pc, #384]	@ (800632c <UART_SetConfig+0x4e4>)
 80061aa:	fba3 2302 	umull	r2, r3, r3, r2
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	011c      	lsls	r4, r3, #4
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	61b9      	str	r1, [r7, #24]
 80061cc:	415b      	adcs	r3, r3
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d4:	4641      	mov	r1, r8
 80061d6:	1851      	adds	r1, r2, r1
 80061d8:	6139      	str	r1, [r7, #16]
 80061da:	4649      	mov	r1, r9
 80061dc:	414b      	adcs	r3, r1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061ec:	4659      	mov	r1, fp
 80061ee:	00cb      	lsls	r3, r1, #3
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f6:	4651      	mov	r1, sl
 80061f8:	00ca      	lsls	r2, r1, #3
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	4642      	mov	r2, r8
 8006202:	189b      	adds	r3, r3, r2
 8006204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006208:	464b      	mov	r3, r9
 800620a:	460a      	mov	r2, r1
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800621e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800622c:	4649      	mov	r1, r9
 800622e:	008b      	lsls	r3, r1, #2
 8006230:	4641      	mov	r1, r8
 8006232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006236:	4641      	mov	r1, r8
 8006238:	008a      	lsls	r2, r1, #2
 800623a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800623e:	f7fa fd23 	bl	8000c88 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4611      	mov	r1, r2
 8006248:	4b38      	ldr	r3, [pc, #224]	@ (800632c <UART_SetConfig+0x4e4>)
 800624a:	fba3 2301 	umull	r2, r3, r3, r1
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	2264      	movs	r2, #100	@ 0x64
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	1acb      	subs	r3, r1, r3
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	3332      	adds	r3, #50	@ 0x32
 800625c:	4a33      	ldr	r2, [pc, #204]	@ (800632c <UART_SetConfig+0x4e4>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006268:	441c      	add	r4, r3
 800626a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800626e:	2200      	movs	r2, #0
 8006270:	673b      	str	r3, [r7, #112]	@ 0x70
 8006272:	677a      	str	r2, [r7, #116]	@ 0x74
 8006274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006278:	4642      	mov	r2, r8
 800627a:	464b      	mov	r3, r9
 800627c:	1891      	adds	r1, r2, r2
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	415b      	adcs	r3, r3
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006288:	4641      	mov	r1, r8
 800628a:	1851      	adds	r1, r2, r1
 800628c:	6039      	str	r1, [r7, #0]
 800628e:	4649      	mov	r1, r9
 8006290:	414b      	adcs	r3, r1
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062a0:	4659      	mov	r1, fp
 80062a2:	00cb      	lsls	r3, r1, #3
 80062a4:	4651      	mov	r1, sl
 80062a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062aa:	4651      	mov	r1, sl
 80062ac:	00ca      	lsls	r2, r1, #3
 80062ae:	4610      	mov	r0, r2
 80062b0:	4619      	mov	r1, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	4642      	mov	r2, r8
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ba:	464b      	mov	r3, r9
 80062bc:	460a      	mov	r2, r1
 80062be:	eb42 0303 	adc.w	r3, r2, r3
 80062c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80062ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062dc:	4649      	mov	r1, r9
 80062de:	008b      	lsls	r3, r1, #2
 80062e0:	4641      	mov	r1, r8
 80062e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e6:	4641      	mov	r1, r8
 80062e8:	008a      	lsls	r2, r1, #2
 80062ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062ee:	f7fa fccb 	bl	8000c88 <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <UART_SetConfig+0x4e4>)
 80062f8:	fba3 1302 	umull	r1, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	2164      	movs	r1, #100	@ 0x64
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	3332      	adds	r3, #50	@ 0x32
 800630a:	4a08      	ldr	r2, [pc, #32]	@ (800632c <UART_SetConfig+0x4e4>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	f003 020f 	and.w	r2, r3, #15
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4422      	add	r2, r4
 800631e:	609a      	str	r2, [r3, #8]
}
 8006320:	bf00      	nop
 8006322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006326:	46bd      	mov	sp, r7
 8006328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632c:	51eb851f 	.word	0x51eb851f

08006330 <__NVIC_SetPriority>:
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	6039      	str	r1, [r7, #0]
 800633a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800633c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006340:	2b00      	cmp	r3, #0
 8006342:	db0a      	blt.n	800635a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	490c      	ldr	r1, [pc, #48]	@ (800637c <__NVIC_SetPriority+0x4c>)
 800634a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800634e:	0112      	lsls	r2, r2, #4
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	440b      	add	r3, r1
 8006354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006358:	e00a      	b.n	8006370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	b2da      	uxtb	r2, r3
 800635e:	4908      	ldr	r1, [pc, #32]	@ (8006380 <__NVIC_SetPriority+0x50>)
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	3b04      	subs	r3, #4
 8006368:	0112      	lsls	r2, r2, #4
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	440b      	add	r3, r1
 800636e:	761a      	strb	r2, [r3, #24]
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	e000e100 	.word	0xe000e100
 8006380:	e000ed00 	.word	0xe000ed00

08006384 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006388:	4b05      	ldr	r3, [pc, #20]	@ (80063a0 <SysTick_Handler+0x1c>)
 800638a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800638c:	f001 fc34 	bl	8007bf8 <xTaskGetSchedulerState>
 8006390:	4603      	mov	r3, r0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d001      	beq.n	800639a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006396:	f002 fa2f 	bl	80087f8 <xPortSysTickHandler>
  }
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	e000e010 	.word	0xe000e010

080063a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80063a8:	2100      	movs	r1, #0
 80063aa:	f06f 0004 	mvn.w	r0, #4
 80063ae:	f7ff ffbf 	bl	8006330 <__NVIC_SetPriority>
#endif
}
 80063b2:	bf00      	nop
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	603b      	str	r3, [r7, #0]
  return(result);
 80063c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80063ca:	f06f 0305 	mvn.w	r3, #5
 80063ce:	607b      	str	r3, [r7, #4]
 80063d0:	e00c      	b.n	80063ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063d2:	4b0a      	ldr	r3, [pc, #40]	@ (80063fc <osKernelInitialize+0x44>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d105      	bne.n	80063e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80063da:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <osKernelInitialize+0x44>)
 80063dc:	2201      	movs	r2, #1
 80063de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	e002      	b.n	80063ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80063e6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063ec:	687b      	ldr	r3, [r7, #4]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	200007e0 	.word	0x200007e0

08006400 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006406:	f3ef 8305 	mrs	r3, IPSR
 800640a:	603b      	str	r3, [r7, #0]
  return(result);
 800640c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006412:	f06f 0305 	mvn.w	r3, #5
 8006416:	607b      	str	r3, [r7, #4]
 8006418:	e010      	b.n	800643c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800641a:	4b0b      	ldr	r3, [pc, #44]	@ (8006448 <osKernelStart+0x48>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d109      	bne.n	8006436 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006422:	f7ff ffbf 	bl	80063a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006426:	4b08      	ldr	r3, [pc, #32]	@ (8006448 <osKernelStart+0x48>)
 8006428:	2202      	movs	r2, #2
 800642a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800642c:	f000 ff96 	bl	800735c <vTaskStartScheduler>
      stat = osOK;
 8006430:	2300      	movs	r3, #0
 8006432:	607b      	str	r3, [r7, #4]
 8006434:	e002      	b.n	800643c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006436:	f04f 33ff 	mov.w	r3, #4294967295
 800643a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800643c:	687b      	ldr	r3, [r7, #4]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	200007e0 	.word	0x200007e0

0800644c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a07      	ldr	r2, [pc, #28]	@ (8006478 <vApplicationGetIdleTaskMemory+0x2c>)
 800645c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4a06      	ldr	r2, [pc, #24]	@ (800647c <vApplicationGetIdleTaskMemory+0x30>)
 8006462:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2280      	movs	r2, #128	@ 0x80
 8006468:	601a      	str	r2, [r3, #0]
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	200007e4 	.word	0x200007e4
 800647c:	20000840 	.word	0x20000840

08006480 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a07      	ldr	r2, [pc, #28]	@ (80064ac <vApplicationGetTimerTaskMemory+0x2c>)
 8006490:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4a06      	ldr	r2, [pc, #24]	@ (80064b0 <vApplicationGetTimerTaskMemory+0x30>)
 8006496:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800649e:	601a      	str	r2, [r3, #0]
}
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	20000a40 	.word	0x20000a40
 80064b0:	20000a9c 	.word	0x20000a9c

080064b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f103 0208 	add.w	r2, r3, #8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295
 80064cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f103 0208 	add.w	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f103 0208 	add.w	r2, r3, #8
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	601a      	str	r2, [r3, #0]
}
 800654a:	bf00      	nop
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d103      	bne.n	8006576 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e00c      	b.n	8006590 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3308      	adds	r3, #8
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	e002      	b.n	8006584 <vListInsert+0x2e>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	429a      	cmp	r2, r3
 800658e:	d2f6      	bcs.n	800657e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	601a      	str	r2, [r3, #0]
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6892      	ldr	r2, [r2, #8]
 80065de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6852      	ldr	r2, [r2, #4]
 80065e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d103      	bne.n	80065fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	1e5a      	subs	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10b      	bne.n	8006648 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	e7fd      	b.n	8006644 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006648:	f002 f846 	bl	80086d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006654:	68f9      	ldr	r1, [r7, #12]
 8006656:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	441a      	add	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006678:	3b01      	subs	r3, #1
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800667e:	fb01 f303 	mul.w	r3, r1, r3
 8006682:	441a      	add	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	22ff      	movs	r2, #255	@ 0xff
 800668c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	22ff      	movs	r2, #255	@ 0xff
 8006694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d114      	bne.n	80066c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d01a      	beq.n	80066dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3310      	adds	r3, #16
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 f8e4 	bl	8007878 <xTaskRemoveFromEventList>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d012      	beq.n	80066dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066b6:	4b0d      	ldr	r3, [pc, #52]	@ (80066ec <xQueueGenericReset+0xd0>)
 80066b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	e009      	b.n	80066dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3310      	adds	r3, #16
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff fef1 	bl	80064b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3324      	adds	r3, #36	@ 0x24
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff feec 	bl	80064b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066dc:	f002 f82e 	bl	800873c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066e0:	2301      	movs	r3, #1
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	e000ed04 	.word	0xe000ed04

080066f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08e      	sub	sp, #56	@ 0x38
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10b      	bne.n	800673a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	e7fd      	b.n	8006736 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <xQueueGenericCreateStatic+0x56>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <xQueueGenericCreateStatic+0x5a>
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <xQueueGenericCreateStatic+0x5c>
 800674a:	2300      	movs	r3, #0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	623b      	str	r3, [r7, #32]
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <xQueueGenericCreateStatic+0x84>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <xQueueGenericCreateStatic+0x88>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <xQueueGenericCreateStatic+0x8a>
 8006778:	2300      	movs	r3, #0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	61fb      	str	r3, [r7, #28]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006796:	2350      	movs	r3, #80	@ 0x50
 8006798:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b50      	cmp	r3, #80	@ 0x50
 800679e:	d00b      	beq.n	80067b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	61bb      	str	r3, [r7, #24]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80067be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00d      	beq.n	80067e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80067d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f805 	bl	80067ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3730      	adds	r7, #48	@ 0x30
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
 80067f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	e002      	b.n	800680c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006818:	2101      	movs	r1, #1
 800681a:	69b8      	ldr	r0, [r7, #24]
 800681c:	f7ff fefe 	bl	800661c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006828:	bf00      	nop
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08e      	sub	sp, #56	@ 0x38
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800683e:	2300      	movs	r3, #0
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10b      	bne.n	8006864 <xQueueGenericSend+0x34>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	e7fd      	b.n	8006860 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <xQueueGenericSend+0x42>
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <xQueueGenericSend+0x46>
 8006872:	2301      	movs	r3, #1
 8006874:	e000      	b.n	8006878 <xQueueGenericSend+0x48>
 8006876:	2300      	movs	r3, #0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10b      	bne.n	8006894 <xQueueGenericSend+0x64>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	e7fd      	b.n	8006890 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d103      	bne.n	80068a2 <xQueueGenericSend+0x72>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <xQueueGenericSend+0x76>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <xQueueGenericSend+0x78>
 80068a6:	2300      	movs	r3, #0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <xQueueGenericSend+0x94>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	623b      	str	r3, [r7, #32]
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	e7fd      	b.n	80068c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068c4:	f001 f998 	bl	8007bf8 <xTaskGetSchedulerState>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <xQueueGenericSend+0xa4>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <xQueueGenericSend+0xa8>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <xQueueGenericSend+0xaa>
 80068d8:	2300      	movs	r3, #0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	61fb      	str	r3, [r7, #28]
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	e7fd      	b.n	80068f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068f6:	f001 feef 	bl	80086d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006902:	429a      	cmp	r2, r3
 8006904:	d302      	bcc.n	800690c <xQueueGenericSend+0xdc>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d129      	bne.n	8006960 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006912:	f000 fa0f 	bl	8006d34 <prvCopyDataToQueue>
 8006916:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d010      	beq.n	8006942 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	3324      	adds	r3, #36	@ 0x24
 8006924:	4618      	mov	r0, r3
 8006926:	f000 ffa7 	bl	8007878 <xTaskRemoveFromEventList>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d013      	beq.n	8006958 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006930:	4b3f      	ldr	r3, [pc, #252]	@ (8006a30 <xQueueGenericSend+0x200>)
 8006932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	e00a      	b.n	8006958 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d007      	beq.n	8006958 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006948:	4b39      	ldr	r3, [pc, #228]	@ (8006a30 <xQueueGenericSend+0x200>)
 800694a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006958:	f001 fef0 	bl	800873c <vPortExitCritical>
				return pdPASS;
 800695c:	2301      	movs	r3, #1
 800695e:	e063      	b.n	8006a28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006966:	f001 fee9 	bl	800873c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800696a:	2300      	movs	r3, #0
 800696c:	e05c      	b.n	8006a28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800696e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006970:	2b00      	cmp	r3, #0
 8006972:	d106      	bne.n	8006982 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006974:	f107 0314 	add.w	r3, r7, #20
 8006978:	4618      	mov	r0, r3
 800697a:	f000 ffe1 	bl	8007940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800697e:	2301      	movs	r3, #1
 8006980:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006982:	f001 fedb 	bl	800873c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006986:	f000 fd51 	bl	800742c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800698a:	f001 fea5 	bl	80086d8 <vPortEnterCritical>
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006994:	b25b      	sxtb	r3, r3
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699a:	d103      	bne.n	80069a4 <xQueueGenericSend+0x174>
 800699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069aa:	b25b      	sxtb	r3, r3
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d103      	bne.n	80069ba <xQueueGenericSend+0x18a>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069ba:	f001 febf 	bl	800873c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069be:	1d3a      	adds	r2, r7, #4
 80069c0:	f107 0314 	add.w	r3, r7, #20
 80069c4:	4611      	mov	r1, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 ffd0 	bl	800796c <xTaskCheckForTimeOut>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d124      	bne.n	8006a1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069d4:	f000 faa6 	bl	8006f24 <prvIsQueueFull>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d018      	beq.n	8006a10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	3310      	adds	r3, #16
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4611      	mov	r1, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fef4 	bl	80077d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069ee:	f000 fa31 	bl	8006e54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069f2:	f000 fd29 	bl	8007448 <xTaskResumeAll>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f47f af7c 	bne.w	80068f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80069fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <xQueueGenericSend+0x200>)
 8006a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	e772      	b.n	80068f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a12:	f000 fa1f 	bl	8006e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a16:	f000 fd17 	bl	8007448 <xTaskResumeAll>
 8006a1a:	e76c      	b.n	80068f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a1e:	f000 fa19 	bl	8006e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a22:	f000 fd11 	bl	8007448 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3738      	adds	r7, #56	@ 0x38
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b090      	sub	sp, #64	@ 0x40
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10b      	bne.n	8006a64 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
 8006a62:	e7fd      	b.n	8006a60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d103      	bne.n	8006a72 <xQueueGenericSendFromISR+0x3e>
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <xQueueGenericSendFromISR+0x42>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <xQueueGenericSendFromISR+0x44>
 8006a76:	2300      	movs	r3, #0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10b      	bne.n	8006a94 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d103      	bne.n	8006aa2 <xQueueGenericSendFromISR+0x6e>
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <xQueueGenericSendFromISR+0x72>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <xQueueGenericSendFromISR+0x74>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	623b      	str	r3, [r7, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ac4:	f001 fee8 	bl	8008898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ac8:	f3ef 8211 	mrs	r2, BASEPRI
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	61fa      	str	r2, [r7, #28]
 8006ade:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ae2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d302      	bcc.n	8006af6 <xQueueGenericSendFromISR+0xc2>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d12f      	bne.n	8006b56 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006afc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b0c:	f000 f912 	bl	8006d34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b10:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b18:	d112      	bne.n	8006b40 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d016      	beq.n	8006b50 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	3324      	adds	r3, #36	@ 0x24
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fea6 	bl	8007878 <xTaskRemoveFromEventList>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00e      	beq.n	8006b50 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00b      	beq.n	8006b50 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e007      	b.n	8006b50 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b44:	3301      	adds	r3, #1
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	b25a      	sxtb	r2, r3
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b50:	2301      	movs	r3, #1
 8006b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b54:	e001      	b.n	8006b5a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3740      	adds	r7, #64	@ 0x40
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08c      	sub	sp, #48	@ 0x30
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10b      	bne.n	8006ba2 <xQueueReceive+0x32>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	623b      	str	r3, [r7, #32]
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	e7fd      	b.n	8006b9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <xQueueReceive+0x40>
 8006ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <xQueueReceive+0x44>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <xQueueReceive+0x46>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10b      	bne.n	8006bd2 <xQueueReceive+0x62>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	61fb      	str	r3, [r7, #28]
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	e7fd      	b.n	8006bce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bd2:	f001 f811 	bl	8007bf8 <xTaskGetSchedulerState>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <xQueueReceive+0x72>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <xQueueReceive+0x76>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <xQueueReceive+0x78>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <xQueueReceive+0x94>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	61bb      	str	r3, [r7, #24]
}
 8006bfe:	bf00      	nop
 8006c00:	bf00      	nop
 8006c02:	e7fd      	b.n	8006c00 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c04:	f001 fd68 	bl	80086d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01f      	beq.n	8006c54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c18:	f000 f8f6 	bl	8006e08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	1e5a      	subs	r2, r3, #1
 8006c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00f      	beq.n	8006c4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	3310      	adds	r3, #16
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fe21 	bl	8007878 <xTaskRemoveFromEventList>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d30 <xQueueReceive+0x1c0>)
 8006c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c4c:	f001 fd76 	bl	800873c <vPortExitCritical>
				return pdPASS;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e069      	b.n	8006d28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d103      	bne.n	8006c62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c5a:	f001 fd6f 	bl	800873c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e062      	b.n	8006d28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c68:	f107 0310 	add.w	r3, r7, #16
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fe67 	bl	8007940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c72:	2301      	movs	r3, #1
 8006c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c76:	f001 fd61 	bl	800873c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c7a:	f000 fbd7 	bl	800742c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c7e:	f001 fd2b 	bl	80086d8 <vPortEnterCritical>
 8006c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c88:	b25b      	sxtb	r3, r3
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d103      	bne.n	8006c98 <xQueueReceive+0x128>
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c9e:	b25b      	sxtb	r3, r3
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d103      	bne.n	8006cae <xQueueReceive+0x13e>
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cae:	f001 fd45 	bl	800873c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cb2:	1d3a      	adds	r2, r7, #4
 8006cb4:	f107 0310 	add.w	r3, r7, #16
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fe56 	bl	800796c <xTaskCheckForTimeOut>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d123      	bne.n	8006d0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc8:	f000 f916 	bl	8006ef8 <prvIsQueueEmpty>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d017      	beq.n	8006d02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	3324      	adds	r3, #36	@ 0x24
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fd7a 	bl	80077d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce2:	f000 f8b7 	bl	8006e54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ce6:	f000 fbaf 	bl	8007448 <xTaskResumeAll>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d189      	bne.n	8006c04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d30 <xQueueReceive+0x1c0>)
 8006cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	e780      	b.n	8006c04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d04:	f000 f8a6 	bl	8006e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d08:	f000 fb9e 	bl	8007448 <xTaskResumeAll>
 8006d0c:	e77a      	b.n	8006c04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d10:	f000 f8a0 	bl	8006e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d14:	f000 fb98 	bl	8007448 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d1a:	f000 f8ed 	bl	8006ef8 <prvIsQueueEmpty>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f43f af6f 	beq.w	8006c04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3730      	adds	r7, #48	@ 0x30
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10d      	bne.n	8006d6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d14d      	bne.n	8006df6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 ff68 	bl	8007c34 <xTaskPriorityDisinherit>
 8006d64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	609a      	str	r2, [r3, #8]
 8006d6c:	e043      	b.n	8006df6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d119      	bne.n	8006da8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6858      	ldr	r0, [r3, #4]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68b9      	ldr	r1, [r7, #8]
 8006d80:	f003 f8d7 	bl	8009f32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8c:	441a      	add	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d32b      	bcc.n	8006df6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	e026      	b.n	8006df6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68d8      	ldr	r0, [r3, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db0:	461a      	mov	r2, r3
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	f003 f8bd 	bl	8009f32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc0:	425b      	negs	r3, r3
 8006dc2:	441a      	add	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d207      	bcs.n	8006de4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ddc:	425b      	negs	r3, r3
 8006dde:	441a      	add	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d105      	bne.n	8006df6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006dfe:	697b      	ldr	r3, [r7, #20]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d018      	beq.n	8006e4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	441a      	add	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d303      	bcc.n	8006e3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68d9      	ldr	r1, [r3, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e44:	461a      	mov	r2, r3
 8006e46:	6838      	ldr	r0, [r7, #0]
 8006e48:	f003 f873 	bl	8009f32 <memcpy>
	}
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e5c:	f001 fc3c 	bl	80086d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e68:	e011      	b.n	8006e8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d012      	beq.n	8006e98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3324      	adds	r3, #36	@ 0x24
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fcfe 	bl	8007878 <xTaskRemoveFromEventList>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e82:	f000 fdd7 	bl	8007a34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dce9      	bgt.n	8006e6a <prvUnlockQueue+0x16>
 8006e96:	e000      	b.n	8006e9a <prvUnlockQueue+0x46>
					break;
 8006e98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	22ff      	movs	r2, #255	@ 0xff
 8006e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006ea2:	f001 fc4b 	bl	800873c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ea6:	f001 fc17 	bl	80086d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eb2:	e011      	b.n	8006ed8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d012      	beq.n	8006ee2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3310      	adds	r3, #16
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fcd9 	bl	8007878 <xTaskRemoveFromEventList>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ecc:	f000 fdb2 	bl	8007a34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dce9      	bgt.n	8006eb4 <prvUnlockQueue+0x60>
 8006ee0:	e000      	b.n	8006ee4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ee2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	22ff      	movs	r2, #255	@ 0xff
 8006ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006eec:	f001 fc26 	bl	800873c <vPortExitCritical>
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f00:	f001 fbea 	bl	80086d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e001      	b.n	8006f16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f16:	f001 fc11 	bl	800873c <vPortExitCritical>

	return xReturn;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f2c:	f001 fbd4 	bl	80086d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d102      	bne.n	8006f42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e001      	b.n	8006f46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f46:	f001 fbf9 	bl	800873c <vPortExitCritical>

	return xReturn;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	e014      	b.n	8006f8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f64:	4a0f      	ldr	r2, [pc, #60]	@ (8006fa4 <vQueueAddToRegistry+0x50>)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10b      	bne.n	8006f88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f70:	490c      	ldr	r1, [pc, #48]	@ (8006fa4 <vQueueAddToRegistry+0x50>)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa4 <vQueueAddToRegistry+0x50>)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	4413      	add	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f86:	e006      	b.n	8006f96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b07      	cmp	r3, #7
 8006f92:	d9e7      	bls.n	8006f64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20000e9c 	.word	0x20000e9c

08006fa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fb8:	f001 fb8e 	bl	80086d8 <vPortEnterCritical>
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d103      	bne.n	8006fd2 <vQueueWaitForMessageRestricted+0x2a>
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fd8:	b25b      	sxtb	r3, r3
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d103      	bne.n	8006fe8 <vQueueWaitForMessageRestricted+0x40>
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fe8:	f001 fba8 	bl	800873c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d106      	bne.n	8007002 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	3324      	adds	r3, #36	@ 0x24
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fc0f 	bl	8007820 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007002:	6978      	ldr	r0, [r7, #20]
 8007004:	f7ff ff26 	bl	8006e54 <prvUnlockQueue>
	}
 8007008:	bf00      	nop
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08e      	sub	sp, #56	@ 0x38
 8007014:	af04      	add	r7, sp, #16
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800701e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10b      	bne.n	800703c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	623b      	str	r3, [r7, #32]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800703c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	61fb      	str	r3, [r7, #28]
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	e7fd      	b.n	8007056 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800705a:	235c      	movs	r3, #92	@ 0x5c
 800705c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b5c      	cmp	r3, #92	@ 0x5c
 8007062:	d00b      	beq.n	800707c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	61bb      	str	r3, [r7, #24]
}
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	e7fd      	b.n	8007078 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800707c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01e      	beq.n	80070c2 <xTaskCreateStatic+0xb2>
 8007084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007086:	2b00      	cmp	r3, #0
 8007088:	d01b      	beq.n	80070c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007092:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	2202      	movs	r2, #2
 8007098:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800709c:	2300      	movs	r3, #0
 800709e:	9303      	str	r3, [sp, #12]
 80070a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a2:	9302      	str	r3, [sp, #8]
 80070a4:	f107 0314 	add.w	r3, r7, #20
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f850 	bl	800715a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070bc:	f000 f8de 	bl	800727c <prvAddNewTaskToReadyList>
 80070c0:	e001      	b.n	80070c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070c6:	697b      	ldr	r3, [r7, #20]
	}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3728      	adds	r7, #40	@ 0x28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08c      	sub	sp, #48	@ 0x30
 80070d4:	af04      	add	r7, sp, #16
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070e0:	88fb      	ldrh	r3, [r7, #6]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 fc19 	bl	800891c <pvPortMalloc>
 80070ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00e      	beq.n	8007110 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070f2:	205c      	movs	r0, #92	@ 0x5c
 80070f4:	f001 fc12 	bl	800891c <pvPortMalloc>
 80070f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	631a      	str	r2, [r3, #48]	@ 0x30
 8007106:	e005      	b.n	8007114 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007108:	6978      	ldr	r0, [r7, #20]
 800710a:	f001 fcd5 	bl	8008ab8 <vPortFree>
 800710e:	e001      	b.n	8007114 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d017      	beq.n	800714a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007122:	88fa      	ldrh	r2, [r7, #6]
 8007124:	2300      	movs	r3, #0
 8007126:	9303      	str	r3, [sp, #12]
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 f80e 	bl	800715a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800713e:	69f8      	ldr	r0, [r7, #28]
 8007140:	f000 f89c 	bl	800727c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007144:	2301      	movs	r3, #1
 8007146:	61bb      	str	r3, [r7, #24]
 8007148:	e002      	b.n	8007150 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800714a:	f04f 33ff 	mov.w	r3, #4294967295
 800714e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007150:	69bb      	ldr	r3, [r7, #24]
	}
 8007152:	4618      	mov	r0, r3
 8007154:	3720      	adds	r7, #32
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b088      	sub	sp, #32
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	461a      	mov	r2, r3
 8007172:	21a5      	movs	r1, #165	@ 0xa5
 8007174:	f002 fe5e 	bl	8009e34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007182:	3b01      	subs	r3, #1
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	f023 0307 	bic.w	r3, r3, #7
 8007190:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00b      	beq.n	80071b4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	617b      	str	r3, [r7, #20]
}
 80071ae:	bf00      	nop
 80071b0:	bf00      	nop
 80071b2:	e7fd      	b.n	80071b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d01f      	beq.n	80071fa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ba:	2300      	movs	r3, #0
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	e012      	b.n	80071e6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	7819      	ldrb	r1, [r3, #0]
 80071c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	3334      	adds	r3, #52	@ 0x34
 80071d0:	460a      	mov	r2, r1
 80071d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d006      	beq.n	80071ee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	3301      	adds	r3, #1
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	2b0f      	cmp	r3, #15
 80071ea:	d9e9      	bls.n	80071c0 <prvInitialiseNewTask+0x66>
 80071ec:	e000      	b.n	80071f0 <prvInitialiseNewTask+0x96>
			{
				break;
 80071ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071f8:	e003      	b.n	8007202 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007204:	2b37      	cmp	r3, #55	@ 0x37
 8007206:	d901      	bls.n	800720c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007208:	2337      	movs	r3, #55	@ 0x37
 800720a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800720c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007210:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007216:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	2200      	movs	r2, #0
 800721c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	3304      	adds	r3, #4
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff f966 	bl	80064f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722a:	3318      	adds	r3, #24
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff f961 	bl	80064f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007236:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800723e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007240:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007246:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	2200      	movs	r2, #0
 800724c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	68f9      	ldr	r1, [r7, #12]
 800725a:	69b8      	ldr	r0, [r7, #24]
 800725c:	f001 f908 	bl	8008470 <pxPortInitialiseStack>
 8007260:	4602      	mov	r2, r0
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800726c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007272:	bf00      	nop
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007284:	f001 fa28 	bl	80086d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007288:	4b2d      	ldr	r3, [pc, #180]	@ (8007340 <prvAddNewTaskToReadyList+0xc4>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	4a2c      	ldr	r2, [pc, #176]	@ (8007340 <prvAddNewTaskToReadyList+0xc4>)
 8007290:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007292:	4b2c      	ldr	r3, [pc, #176]	@ (8007344 <prvAddNewTaskToReadyList+0xc8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800729a:	4a2a      	ldr	r2, [pc, #168]	@ (8007344 <prvAddNewTaskToReadyList+0xc8>)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072a0:	4b27      	ldr	r3, [pc, #156]	@ (8007340 <prvAddNewTaskToReadyList+0xc4>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d110      	bne.n	80072ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072a8:	f000 fbe8 	bl	8007a7c <prvInitialiseTaskLists>
 80072ac:	e00d      	b.n	80072ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072ae:	4b26      	ldr	r3, [pc, #152]	@ (8007348 <prvAddNewTaskToReadyList+0xcc>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d109      	bne.n	80072ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072b6:	4b23      	ldr	r3, [pc, #140]	@ (8007344 <prvAddNewTaskToReadyList+0xc8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d802      	bhi.n	80072ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007344 <prvAddNewTaskToReadyList+0xc8>)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072ca:	4b20      	ldr	r3, [pc, #128]	@ (800734c <prvAddNewTaskToReadyList+0xd0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3301      	adds	r3, #1
 80072d0:	4a1e      	ldr	r2, [pc, #120]	@ (800734c <prvAddNewTaskToReadyList+0xd0>)
 80072d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072d4:	4b1d      	ldr	r3, [pc, #116]	@ (800734c <prvAddNewTaskToReadyList+0xd0>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007350 <prvAddNewTaskToReadyList+0xd4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d903      	bls.n	80072f0 <prvAddNewTaskToReadyList+0x74>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ec:	4a18      	ldr	r2, [pc, #96]	@ (8007350 <prvAddNewTaskToReadyList+0xd4>)
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4a15      	ldr	r2, [pc, #84]	@ (8007354 <prvAddNewTaskToReadyList+0xd8>)
 80072fe:	441a      	add	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3304      	adds	r3, #4
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f7ff f901 	bl	800650e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800730c:	f001 fa16 	bl	800873c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007310:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <prvAddNewTaskToReadyList+0xcc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00e      	beq.n	8007336 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007318:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <prvAddNewTaskToReadyList+0xc8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007322:	429a      	cmp	r2, r3
 8007324:	d207      	bcs.n	8007336 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007326:	4b0c      	ldr	r3, [pc, #48]	@ (8007358 <prvAddNewTaskToReadyList+0xdc>)
 8007328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	200013b0 	.word	0x200013b0
 8007344:	20000edc 	.word	0x20000edc
 8007348:	200013bc 	.word	0x200013bc
 800734c:	200013cc 	.word	0x200013cc
 8007350:	200013b8 	.word	0x200013b8
 8007354:	20000ee0 	.word	0x20000ee0
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	@ 0x28
 8007360:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800736a:	463a      	mov	r2, r7
 800736c:	1d39      	adds	r1, r7, #4
 800736e:	f107 0308 	add.w	r3, r7, #8
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff f86a 	bl	800644c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	9202      	str	r2, [sp, #8]
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	2300      	movs	r3, #0
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	2300      	movs	r3, #0
 8007388:	460a      	mov	r2, r1
 800738a:	4922      	ldr	r1, [pc, #136]	@ (8007414 <vTaskStartScheduler+0xb8>)
 800738c:	4822      	ldr	r0, [pc, #136]	@ (8007418 <vTaskStartScheduler+0xbc>)
 800738e:	f7ff fe3f 	bl	8007010 <xTaskCreateStatic>
 8007392:	4603      	mov	r3, r0
 8007394:	4a21      	ldr	r2, [pc, #132]	@ (800741c <vTaskStartScheduler+0xc0>)
 8007396:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007398:	4b20      	ldr	r3, [pc, #128]	@ (800741c <vTaskStartScheduler+0xc0>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073a0:	2301      	movs	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	e001      	b.n	80073aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d102      	bne.n	80073b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073b0:	f000 fd04 	bl	8007dbc <xTimerCreateTimerTask>
 80073b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d116      	bne.n	80073ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	613b      	str	r3, [r7, #16]
}
 80073ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073d0:	4b13      	ldr	r3, [pc, #76]	@ (8007420 <vTaskStartScheduler+0xc4>)
 80073d2:	f04f 32ff 	mov.w	r2, #4294967295
 80073d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073d8:	4b12      	ldr	r3, [pc, #72]	@ (8007424 <vTaskStartScheduler+0xc8>)
 80073da:	2201      	movs	r2, #1
 80073dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073de:	4b12      	ldr	r3, [pc, #72]	@ (8007428 <vTaskStartScheduler+0xcc>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073e4:	f001 f8d4 	bl	8008590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073e8:	e00f      	b.n	800740a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f0:	d10b      	bne.n	800740a <vTaskStartScheduler+0xae>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60fb      	str	r3, [r7, #12]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <vTaskStartScheduler+0xaa>
}
 800740a:	bf00      	nop
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	0800d770 	.word	0x0800d770
 8007418:	08007a4d 	.word	0x08007a4d
 800741c:	200013d4 	.word	0x200013d4
 8007420:	200013d0 	.word	0x200013d0
 8007424:	200013bc 	.word	0x200013bc
 8007428:	200013b4 	.word	0x200013b4

0800742c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007430:	4b04      	ldr	r3, [pc, #16]	@ (8007444 <vTaskSuspendAll+0x18>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3301      	adds	r3, #1
 8007436:	4a03      	ldr	r2, [pc, #12]	@ (8007444 <vTaskSuspendAll+0x18>)
 8007438:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800743a:	bf00      	nop
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	200013d8 	.word	0x200013d8

08007448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007452:	2300      	movs	r3, #0
 8007454:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007456:	4b42      	ldr	r3, [pc, #264]	@ (8007560 <xTaskResumeAll+0x118>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10b      	bne.n	8007476 <xTaskResumeAll+0x2e>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	603b      	str	r3, [r7, #0]
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	e7fd      	b.n	8007472 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007476:	f001 f92f 	bl	80086d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800747a:	4b39      	ldr	r3, [pc, #228]	@ (8007560 <xTaskResumeAll+0x118>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3b01      	subs	r3, #1
 8007480:	4a37      	ldr	r2, [pc, #220]	@ (8007560 <xTaskResumeAll+0x118>)
 8007482:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007484:	4b36      	ldr	r3, [pc, #216]	@ (8007560 <xTaskResumeAll+0x118>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d162      	bne.n	8007552 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800748c:	4b35      	ldr	r3, [pc, #212]	@ (8007564 <xTaskResumeAll+0x11c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d05e      	beq.n	8007552 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007494:	e02f      	b.n	80074f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007496:	4b34      	ldr	r3, [pc, #208]	@ (8007568 <xTaskResumeAll+0x120>)
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3318      	adds	r3, #24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff f890 	bl	80065c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff f88b 	bl	80065c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b6:	4b2d      	ldr	r3, [pc, #180]	@ (800756c <xTaskResumeAll+0x124>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d903      	bls.n	80074c6 <xTaskResumeAll+0x7e>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c2:	4a2a      	ldr	r2, [pc, #168]	@ (800756c <xTaskResumeAll+0x124>)
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4a27      	ldr	r2, [pc, #156]	@ (8007570 <xTaskResumeAll+0x128>)
 80074d4:	441a      	add	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3304      	adds	r3, #4
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f7ff f816 	bl	800650e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e6:	4b23      	ldr	r3, [pc, #140]	@ (8007574 <xTaskResumeAll+0x12c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d302      	bcc.n	80074f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80074f0:	4b21      	ldr	r3, [pc, #132]	@ (8007578 <xTaskResumeAll+0x130>)
 80074f2:	2201      	movs	r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007568 <xTaskResumeAll+0x120>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1cb      	bne.n	8007496 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007504:	f000 fb58 	bl	8007bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007508:	4b1c      	ldr	r3, [pc, #112]	@ (800757c <xTaskResumeAll+0x134>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d010      	beq.n	8007536 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007514:	f000 f846 	bl	80075a4 <xTaskIncrementTick>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800751e:	4b16      	ldr	r3, [pc, #88]	@ (8007578 <xTaskResumeAll+0x130>)
 8007520:	2201      	movs	r2, #1
 8007522:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3b01      	subs	r3, #1
 8007528:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f1      	bne.n	8007514 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007530:	4b12      	ldr	r3, [pc, #72]	@ (800757c <xTaskResumeAll+0x134>)
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007536:	4b10      	ldr	r3, [pc, #64]	@ (8007578 <xTaskResumeAll+0x130>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d009      	beq.n	8007552 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800753e:	2301      	movs	r3, #1
 8007540:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007542:	4b0f      	ldr	r3, [pc, #60]	@ (8007580 <xTaskResumeAll+0x138>)
 8007544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007552:	f001 f8f3 	bl	800873c <vPortExitCritical>

	return xAlreadyYielded;
 8007556:	68bb      	ldr	r3, [r7, #8]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	200013d8 	.word	0x200013d8
 8007564:	200013b0 	.word	0x200013b0
 8007568:	20001370 	.word	0x20001370
 800756c:	200013b8 	.word	0x200013b8
 8007570:	20000ee0 	.word	0x20000ee0
 8007574:	20000edc 	.word	0x20000edc
 8007578:	200013c4 	.word	0x200013c4
 800757c:	200013c0 	.word	0x200013c0
 8007580:	e000ed04 	.word	0xe000ed04

08007584 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800758a:	4b05      	ldr	r3, [pc, #20]	@ (80075a0 <xTaskGetTickCount+0x1c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007590:	687b      	ldr	r3, [r7, #4]
}
 8007592:	4618      	mov	r0, r3
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	200013b4 	.word	0x200013b4

080075a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ae:	4b4f      	ldr	r3, [pc, #316]	@ (80076ec <xTaskIncrementTick+0x148>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f040 8090 	bne.w	80076d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075b8:	4b4d      	ldr	r3, [pc, #308]	@ (80076f0 <xTaskIncrementTick+0x14c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3301      	adds	r3, #1
 80075be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075c0:	4a4b      	ldr	r2, [pc, #300]	@ (80076f0 <xTaskIncrementTick+0x14c>)
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d121      	bne.n	8007610 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80075cc:	4b49      	ldr	r3, [pc, #292]	@ (80076f4 <xTaskIncrementTick+0x150>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00b      	beq.n	80075ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	603b      	str	r3, [r7, #0]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <xTaskIncrementTick+0x46>
 80075ee:	4b41      	ldr	r3, [pc, #260]	@ (80076f4 <xTaskIncrementTick+0x150>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	4b40      	ldr	r3, [pc, #256]	@ (80076f8 <xTaskIncrementTick+0x154>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a3e      	ldr	r2, [pc, #248]	@ (80076f4 <xTaskIncrementTick+0x150>)
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	4a3e      	ldr	r2, [pc, #248]	@ (80076f8 <xTaskIncrementTick+0x154>)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	4b3e      	ldr	r3, [pc, #248]	@ (80076fc <xTaskIncrementTick+0x158>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3301      	adds	r3, #1
 8007608:	4a3c      	ldr	r2, [pc, #240]	@ (80076fc <xTaskIncrementTick+0x158>)
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	f000 fad4 	bl	8007bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007610:	4b3b      	ldr	r3, [pc, #236]	@ (8007700 <xTaskIncrementTick+0x15c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	429a      	cmp	r2, r3
 8007618:	d349      	bcc.n	80076ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761a:	4b36      	ldr	r3, [pc, #216]	@ (80076f4 <xTaskIncrementTick+0x150>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007624:	4b36      	ldr	r3, [pc, #216]	@ (8007700 <xTaskIncrementTick+0x15c>)
 8007626:	f04f 32ff 	mov.w	r2, #4294967295
 800762a:	601a      	str	r2, [r3, #0]
					break;
 800762c:	e03f      	b.n	80076ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800762e:	4b31      	ldr	r3, [pc, #196]	@ (80076f4 <xTaskIncrementTick+0x150>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	429a      	cmp	r2, r3
 8007644:	d203      	bcs.n	800764e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007646:	4a2e      	ldr	r2, [pc, #184]	@ (8007700 <xTaskIncrementTick+0x15c>)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800764c:	e02f      	b.n	80076ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe ffb8 	bl	80065c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765c:	2b00      	cmp	r3, #0
 800765e:	d004      	beq.n	800766a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	3318      	adds	r3, #24
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe ffaf 	bl	80065c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766e:	4b25      	ldr	r3, [pc, #148]	@ (8007704 <xTaskIncrementTick+0x160>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d903      	bls.n	800767e <xTaskIncrementTick+0xda>
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767a:	4a22      	ldr	r2, [pc, #136]	@ (8007704 <xTaskIncrementTick+0x160>)
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4a1f      	ldr	r2, [pc, #124]	@ (8007708 <xTaskIncrementTick+0x164>)
 800768c:	441a      	add	r2, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3304      	adds	r3, #4
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f7fe ff3a 	bl	800650e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769e:	4b1b      	ldr	r3, [pc, #108]	@ (800770c <xTaskIncrementTick+0x168>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d3b8      	bcc.n	800761a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ac:	e7b5      	b.n	800761a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076ae:	4b17      	ldr	r3, [pc, #92]	@ (800770c <xTaskIncrementTick+0x168>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b4:	4914      	ldr	r1, [pc, #80]	@ (8007708 <xTaskIncrementTick+0x164>)
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d901      	bls.n	80076ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076ca:	4b11      	ldr	r3, [pc, #68]	@ (8007710 <xTaskIncrementTick+0x16c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d007      	beq.n	80076e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80076d2:	2301      	movs	r3, #1
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e004      	b.n	80076e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007714 <xTaskIncrementTick+0x170>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3301      	adds	r3, #1
 80076de:	4a0d      	ldr	r2, [pc, #52]	@ (8007714 <xTaskIncrementTick+0x170>)
 80076e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076e2:	697b      	ldr	r3, [r7, #20]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	200013d8 	.word	0x200013d8
 80076f0:	200013b4 	.word	0x200013b4
 80076f4:	20001368 	.word	0x20001368
 80076f8:	2000136c 	.word	0x2000136c
 80076fc:	200013c8 	.word	0x200013c8
 8007700:	200013d0 	.word	0x200013d0
 8007704:	200013b8 	.word	0x200013b8
 8007708:	20000ee0 	.word	0x20000ee0
 800770c:	20000edc 	.word	0x20000edc
 8007710:	200013c4 	.word	0x200013c4
 8007714:	200013c0 	.word	0x200013c0

08007718 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800771e:	4b28      	ldr	r3, [pc, #160]	@ (80077c0 <vTaskSwitchContext+0xa8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007726:	4b27      	ldr	r3, [pc, #156]	@ (80077c4 <vTaskSwitchContext+0xac>)
 8007728:	2201      	movs	r2, #1
 800772a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800772c:	e042      	b.n	80077b4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800772e:	4b25      	ldr	r3, [pc, #148]	@ (80077c4 <vTaskSwitchContext+0xac>)
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007734:	4b24      	ldr	r3, [pc, #144]	@ (80077c8 <vTaskSwitchContext+0xb0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	e011      	b.n	8007760 <vTaskSwitchContext+0x48>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <vTaskSwitchContext+0x42>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	607b      	str	r3, [r7, #4]
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	e7fd      	b.n	8007756 <vTaskSwitchContext+0x3e>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3b01      	subs	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	491a      	ldr	r1, [pc, #104]	@ (80077cc <vTaskSwitchContext+0xb4>)
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0e3      	beq.n	800773c <vTaskSwitchContext+0x24>
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4a13      	ldr	r2, [pc, #76]	@ (80077cc <vTaskSwitchContext+0xb4>)
 8007780:	4413      	add	r3, r2
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	3308      	adds	r3, #8
 8007796:	429a      	cmp	r2, r3
 8007798:	d104      	bne.n	80077a4 <vTaskSwitchContext+0x8c>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	605a      	str	r2, [r3, #4]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	4a09      	ldr	r2, [pc, #36]	@ (80077d0 <vTaskSwitchContext+0xb8>)
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	4a06      	ldr	r2, [pc, #24]	@ (80077c8 <vTaskSwitchContext+0xb0>)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6013      	str	r3, [r2, #0]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	200013d8 	.word	0x200013d8
 80077c4:	200013c4 	.word	0x200013c4
 80077c8:	200013b8 	.word	0x200013b8
 80077cc:	20000ee0 	.word	0x20000ee0
 80077d0:	20000edc 	.word	0x20000edc

080077d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60fb      	str	r3, [r7, #12]
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077fc:	4b07      	ldr	r3, [pc, #28]	@ (800781c <vTaskPlaceOnEventList+0x48>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3318      	adds	r3, #24
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fe fea6 	bl	8006556 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800780a:	2101      	movs	r1, #1
 800780c:	6838      	ldr	r0, [r7, #0]
 800780e:	f000 fa81 	bl	8007d14 <prvAddCurrentTaskToDelayedList>
}
 8007812:	bf00      	nop
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000edc 	.word	0x20000edc

08007820 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	617b      	str	r3, [r7, #20]
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800784a:	4b0a      	ldr	r3, [pc, #40]	@ (8007874 <vTaskPlaceOnEventListRestricted+0x54>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3318      	adds	r3, #24
 8007850:	4619      	mov	r1, r3
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7fe fe5b 	bl	800650e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800785e:	f04f 33ff 	mov.w	r3, #4294967295
 8007862:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	68b8      	ldr	r0, [r7, #8]
 8007868:	f000 fa54 	bl	8007d14 <prvAddCurrentTaskToDelayedList>
	}
 800786c:	bf00      	nop
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20000edc 	.word	0x20000edc

08007878 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60fb      	str	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3318      	adds	r3, #24
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fe8c 	bl	80065c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007928 <xTaskRemoveFromEventList+0xb0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11d      	bne.n	80078f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fe83 	bl	80065c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c6:	4b19      	ldr	r3, [pc, #100]	@ (800792c <xTaskRemoveFromEventList+0xb4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d903      	bls.n	80078d6 <xTaskRemoveFromEventList+0x5e>
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d2:	4a16      	ldr	r2, [pc, #88]	@ (800792c <xTaskRemoveFromEventList+0xb4>)
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4a13      	ldr	r2, [pc, #76]	@ (8007930 <xTaskRemoveFromEventList+0xb8>)
 80078e4:	441a      	add	r2, r3
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f7fe fe0e 	bl	800650e <vListInsertEnd>
 80078f2:	e005      	b.n	8007900 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	3318      	adds	r3, #24
 80078f8:	4619      	mov	r1, r3
 80078fa:	480e      	ldr	r0, [pc, #56]	@ (8007934 <xTaskRemoveFromEventList+0xbc>)
 80078fc:	f7fe fe07 	bl	800650e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007904:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <xTaskRemoveFromEventList+0xc0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	429a      	cmp	r2, r3
 800790c:	d905      	bls.n	800791a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800790e:	2301      	movs	r3, #1
 8007910:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007912:	4b0a      	ldr	r3, [pc, #40]	@ (800793c <xTaskRemoveFromEventList+0xc4>)
 8007914:	2201      	movs	r2, #1
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e001      	b.n	800791e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800791e:	697b      	ldr	r3, [r7, #20]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	200013d8 	.word	0x200013d8
 800792c:	200013b8 	.word	0x200013b8
 8007930:	20000ee0 	.word	0x20000ee0
 8007934:	20001370 	.word	0x20001370
 8007938:	20000edc 	.word	0x20000edc
 800793c:	200013c4 	.word	0x200013c4

08007940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007948:	4b06      	ldr	r3, [pc, #24]	@ (8007964 <vTaskInternalSetTimeOutState+0x24>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007950:	4b05      	ldr	r3, [pc, #20]	@ (8007968 <vTaskInternalSetTimeOutState+0x28>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	605a      	str	r2, [r3, #4]
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	200013c8 	.word	0x200013c8
 8007968:	200013b4 	.word	0x200013b4

0800796c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	613b      	str	r3, [r7, #16]
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	60fb      	str	r3, [r7, #12]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80079b2:	f000 fe91 	bl	80086d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079b6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a2c <xTaskCheckForTimeOut+0xc0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d102      	bne.n	80079d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	e023      	b.n	8007a1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b15      	ldr	r3, [pc, #84]	@ (8007a30 <xTaskCheckForTimeOut+0xc4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d007      	beq.n	80079f2 <xTaskCheckForTimeOut+0x86>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	e015      	b.n	8007a1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d20b      	bcs.n	8007a14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff ff99 	bl	8007940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61fb      	str	r3, [r7, #28]
 8007a12:	e004      	b.n	8007a1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a1e:	f000 fe8d 	bl	800873c <vPortExitCritical>

	return xReturn;
 8007a22:	69fb      	ldr	r3, [r7, #28]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	200013b4 	.word	0x200013b4
 8007a30:	200013c8 	.word	0x200013c8

08007a34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a38:	4b03      	ldr	r3, [pc, #12]	@ (8007a48 <vTaskMissedYield+0x14>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]
}
 8007a3e:	bf00      	nop
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	200013c4 	.word	0x200013c4

08007a4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a54:	f000 f852 	bl	8007afc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a58:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <prvIdleTask+0x28>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d9f9      	bls.n	8007a54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a60:	4b05      	ldr	r3, [pc, #20]	@ (8007a78 <prvIdleTask+0x2c>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a70:	e7f0      	b.n	8007a54 <prvIdleTask+0x8>
 8007a72:	bf00      	nop
 8007a74:	20000ee0 	.word	0x20000ee0
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a82:	2300      	movs	r3, #0
 8007a84:	607b      	str	r3, [r7, #4]
 8007a86:	e00c      	b.n	8007aa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4a12      	ldr	r2, [pc, #72]	@ (8007adc <prvInitialiseTaskLists+0x60>)
 8007a94:	4413      	add	r3, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fd0c 	bl	80064b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	607b      	str	r3, [r7, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b37      	cmp	r3, #55	@ 0x37
 8007aa6:	d9ef      	bls.n	8007a88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aa8:	480d      	ldr	r0, [pc, #52]	@ (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aaa:	f7fe fd03 	bl	80064b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aae:	480d      	ldr	r0, [pc, #52]	@ (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ab0:	f7fe fd00 	bl	80064b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ab4:	480c      	ldr	r0, [pc, #48]	@ (8007ae8 <prvInitialiseTaskLists+0x6c>)
 8007ab6:	f7fe fcfd 	bl	80064b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007aba:	480c      	ldr	r0, [pc, #48]	@ (8007aec <prvInitialiseTaskLists+0x70>)
 8007abc:	f7fe fcfa 	bl	80064b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ac0:	480b      	ldr	r0, [pc, #44]	@ (8007af0 <prvInitialiseTaskLists+0x74>)
 8007ac2:	f7fe fcf7 	bl	80064b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8007af4 <prvInitialiseTaskLists+0x78>)
 8007ac8:	4a05      	ldr	r2, [pc, #20]	@ (8007ae0 <prvInitialiseTaskLists+0x64>)
 8007aca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	@ (8007af8 <prvInitialiseTaskLists+0x7c>)
 8007ace:	4a05      	ldr	r2, [pc, #20]	@ (8007ae4 <prvInitialiseTaskLists+0x68>)
 8007ad0:	601a      	str	r2, [r3, #0]
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000ee0 	.word	0x20000ee0
 8007ae0:	20001340 	.word	0x20001340
 8007ae4:	20001354 	.word	0x20001354
 8007ae8:	20001370 	.word	0x20001370
 8007aec:	20001384 	.word	0x20001384
 8007af0:	2000139c 	.word	0x2000139c
 8007af4:	20001368 	.word	0x20001368
 8007af8:	2000136c 	.word	0x2000136c

08007afc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b02:	e019      	b.n	8007b38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b04:	f000 fde8 	bl	80086d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b08:	4b10      	ldr	r3, [pc, #64]	@ (8007b4c <prvCheckTasksWaitingTermination+0x50>)
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fd57 	bl	80065c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	4a0b      	ldr	r2, [pc, #44]	@ (8007b50 <prvCheckTasksWaitingTermination+0x54>)
 8007b22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b24:	4b0b      	ldr	r3, [pc, #44]	@ (8007b54 <prvCheckTasksWaitingTermination+0x58>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8007b54 <prvCheckTasksWaitingTermination+0x58>)
 8007b2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b2e:	f000 fe05 	bl	800873c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f810 	bl	8007b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b38:	4b06      	ldr	r3, [pc, #24]	@ (8007b54 <prvCheckTasksWaitingTermination+0x58>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e1      	bne.n	8007b04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20001384 	.word	0x20001384
 8007b50:	200013b0 	.word	0x200013b0
 8007b54:	20001398 	.word	0x20001398

08007b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d108      	bne.n	8007b7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 ffa2 	bl	8008ab8 <vPortFree>
				vPortFree( pxTCB );
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 ff9f 	bl	8008ab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b7a:	e019      	b.n	8007bb0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d103      	bne.n	8007b8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 ff96 	bl	8008ab8 <vPortFree>
	}
 8007b8c:	e010      	b.n	8007bb0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d00b      	beq.n	8007bb0 <prvDeleteTCB+0x58>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	60fb      	str	r3, [r7, #12]
}
 8007baa:	bf00      	nop
 8007bac:	bf00      	nop
 8007bae:	e7fd      	b.n	8007bac <prvDeleteTCB+0x54>
	}
 8007bb0:	bf00      	nop
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf0 <prvResetNextTaskUnblockTime+0x38>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8007bca:	f04f 32ff 	mov.w	r2, #4294967295
 8007bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bd0:	e008      	b.n	8007be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd2:	4b07      	ldr	r3, [pc, #28]	@ (8007bf0 <prvResetNextTaskUnblockTime+0x38>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	4a04      	ldr	r2, [pc, #16]	@ (8007bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8007be2:	6013      	str	r3, [r2, #0]
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	20001368 	.word	0x20001368
 8007bf4:	200013d0 	.word	0x200013d0

08007bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007c2c <xTaskGetSchedulerState+0x34>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c06:	2301      	movs	r3, #1
 8007c08:	607b      	str	r3, [r7, #4]
 8007c0a:	e008      	b.n	8007c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0c:	4b08      	ldr	r3, [pc, #32]	@ (8007c30 <xTaskGetSchedulerState+0x38>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c14:	2302      	movs	r3, #2
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e001      	b.n	8007c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c1e:	687b      	ldr	r3, [r7, #4]
	}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	200013bc 	.word	0x200013bc
 8007c30:	200013d8 	.word	0x200013d8

08007c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d058      	beq.n	8007cfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d08 <xTaskPriorityDisinherit+0xd4>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d00b      	beq.n	8007c6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60fb      	str	r3, [r7, #12]
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	e7fd      	b.n	8007c68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10b      	bne.n	8007c8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	60bb      	str	r3, [r7, #8]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c90:	1e5a      	subs	r2, r3, #1
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d02c      	beq.n	8007cfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d128      	bne.n	8007cfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fc8a 	bl	80065c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d0c <xTaskPriorityDisinherit+0xd8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d903      	bls.n	8007cdc <xTaskPriorityDisinherit+0xa8>
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8007d0c <xTaskPriorityDisinherit+0xd8>)
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4a09      	ldr	r2, [pc, #36]	@ (8007d10 <xTaskPriorityDisinherit+0xdc>)
 8007cea:	441a      	add	r2, r3
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	f7fe fc0b 	bl	800650e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cfc:	697b      	ldr	r3, [r7, #20]
	}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000edc 	.word	0x20000edc
 8007d0c:	200013b8 	.word	0x200013b8
 8007d10:	20000ee0 	.word	0x20000ee0

08007d14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d1e:	4b21      	ldr	r3, [pc, #132]	@ (8007da4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d24:	4b20      	ldr	r3, [pc, #128]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fc4c 	bl	80065c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d10a      	bne.n	8007d4e <prvAddCurrentTaskToDelayedList+0x3a>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d007      	beq.n	8007d4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4819      	ldr	r0, [pc, #100]	@ (8007dac <prvAddCurrentTaskToDelayedList+0x98>)
 8007d48:	f7fe fbe1 	bl	800650e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d4c:	e026      	b.n	8007d9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4413      	add	r3, r2
 8007d54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d56:	4b14      	ldr	r3, [pc, #80]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d209      	bcs.n	8007d7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d66:	4b12      	ldr	r3, [pc, #72]	@ (8007db0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f7fe fbef 	bl	8006556 <vListInsert>
}
 8007d78:	e010      	b.n	8007d9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007db4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7fe fbe5 	bl	8006556 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007db8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d202      	bcs.n	8007d9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d96:	4a08      	ldr	r2, [pc, #32]	@ (8007db8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	6013      	str	r3, [r2, #0]
}
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	200013b4 	.word	0x200013b4
 8007da8:	20000edc 	.word	0x20000edc
 8007dac:	2000139c 	.word	0x2000139c
 8007db0:	2000136c 	.word	0x2000136c
 8007db4:	20001368 	.word	0x20001368
 8007db8:	200013d0 	.word	0x200013d0

08007dbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	@ 0x28
 8007dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dc6:	f000 fb13 	bl	80083f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dca:	4b1d      	ldr	r3, [pc, #116]	@ (8007e40 <xTimerCreateTimerTask+0x84>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d021      	beq.n	8007e16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dda:	1d3a      	adds	r2, r7, #4
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	f107 030c 	add.w	r3, r7, #12
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fb4b 	bl	8006480 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	9202      	str	r2, [sp, #8]
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	2302      	movs	r3, #2
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	460a      	mov	r2, r1
 8007dfc:	4911      	ldr	r1, [pc, #68]	@ (8007e44 <xTimerCreateTimerTask+0x88>)
 8007dfe:	4812      	ldr	r0, [pc, #72]	@ (8007e48 <xTimerCreateTimerTask+0x8c>)
 8007e00:	f7ff f906 	bl	8007010 <xTaskCreateStatic>
 8007e04:	4603      	mov	r3, r0
 8007e06:	4a11      	ldr	r2, [pc, #68]	@ (8007e4c <xTimerCreateTimerTask+0x90>)
 8007e08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e0a:	4b10      	ldr	r3, [pc, #64]	@ (8007e4c <xTimerCreateTimerTask+0x90>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e12:	2301      	movs	r3, #1
 8007e14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10b      	bne.n	8007e34 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	613b      	str	r3, [r7, #16]
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	e7fd      	b.n	8007e30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e34:	697b      	ldr	r3, [r7, #20]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	2000140c 	.word	0x2000140c
 8007e44:	0800d778 	.word	0x0800d778
 8007e48:	08007f89 	.word	0x08007f89
 8007e4c:	20001410 	.word	0x20001410

08007e50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	@ 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10b      	bne.n	8007e80 <xTimerGenericCommand+0x30>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	623b      	str	r3, [r7, #32]
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	e7fd      	b.n	8007e7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e80:	4b19      	ldr	r3, [pc, #100]	@ (8007ee8 <xTimerGenericCommand+0x98>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d02a      	beq.n	8007ede <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b05      	cmp	r3, #5
 8007e98:	dc18      	bgt.n	8007ecc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e9a:	f7ff fead 	bl	8007bf8 <xTaskGetSchedulerState>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d109      	bne.n	8007eb8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ea4:	4b10      	ldr	r3, [pc, #64]	@ (8007ee8 <xTimerGenericCommand+0x98>)
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	f107 0110 	add.w	r1, r7, #16
 8007eac:	2300      	movs	r3, #0
 8007eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eb0:	f7fe fcbe 	bl	8006830 <xQueueGenericSend>
 8007eb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007eb6:	e012      	b.n	8007ede <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee8 <xTimerGenericCommand+0x98>)
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	f107 0110 	add.w	r1, r7, #16
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f7fe fcb4 	bl	8006830 <xQueueGenericSend>
 8007ec8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007eca:	e008      	b.n	8007ede <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ecc:	4b06      	ldr	r3, [pc, #24]	@ (8007ee8 <xTimerGenericCommand+0x98>)
 8007ece:	6818      	ldr	r0, [r3, #0]
 8007ed0:	f107 0110 	add.w	r1, r7, #16
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	f7fe fdac 	bl	8006a34 <xQueueGenericSendFromISR>
 8007edc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3728      	adds	r7, #40	@ 0x28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	2000140c 	.word	0x2000140c

08007eec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef6:	4b23      	ldr	r3, [pc, #140]	@ (8007f84 <prvProcessExpiredTimer+0x98>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fb5f 	bl	80065c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d023      	beq.n	8007f60 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	699a      	ldr	r2, [r3, #24]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	18d1      	adds	r1, r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	6978      	ldr	r0, [r7, #20]
 8007f26:	f000 f8d5 	bl	80080d4 <prvInsertTimerInActiveList>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d020      	beq.n	8007f72 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f30:	2300      	movs	r3, #0
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6978      	ldr	r0, [r7, #20]
 8007f3c:	f7ff ff88 	bl	8007e50 <xTimerGenericCommand>
 8007f40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d114      	bne.n	8007f72 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	60fb      	str	r3, [r7, #12]
}
 8007f5a:	bf00      	nop
 8007f5c:	bf00      	nop
 8007f5e:	e7fd      	b.n	8007f5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	6978      	ldr	r0, [r7, #20]
 8007f78:	4798      	blx	r3
}
 8007f7a:	bf00      	nop
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20001404 	.word	0x20001404

08007f88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f90:	f107 0308 	add.w	r3, r7, #8
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 f859 	bl	800804c <prvGetNextExpireTime>
 8007f9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f805 	bl	8007fb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fa6:	f000 f8d7 	bl	8008158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007faa:	bf00      	nop
 8007fac:	e7f0      	b.n	8007f90 <prvTimerTask+0x8>
	...

08007fb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fba:	f7ff fa37 	bl	800742c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fbe:	f107 0308 	add.w	r3, r7, #8
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f866 	bl	8008094 <prvSampleTimeNow>
 8007fc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d130      	bne.n	8008032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <prvProcessTimerOrBlockTask+0x3c>
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d806      	bhi.n	8007fec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fde:	f7ff fa33 	bl	8007448 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff81 	bl	8007eec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fea:	e024      	b.n	8008036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d008      	beq.n	8008004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ff2:	4b13      	ldr	r3, [pc, #76]	@ (8008040 <prvProcessTimerOrBlockTask+0x90>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <prvProcessTimerOrBlockTask+0x50>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e000      	b.n	8008002 <prvProcessTimerOrBlockTask+0x52>
 8008000:	2300      	movs	r3, #0
 8008002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008004:	4b0f      	ldr	r3, [pc, #60]	@ (8008044 <prvProcessTimerOrBlockTask+0x94>)
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4619      	mov	r1, r3
 8008012:	f7fe ffc9 	bl	8006fa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008016:	f7ff fa17 	bl	8007448 <xTaskResumeAll>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008020:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <prvProcessTimerOrBlockTask+0x98>)
 8008022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
}
 8008030:	e001      	b.n	8008036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008032:	f7ff fa09 	bl	8007448 <xTaskResumeAll>
}
 8008036:	bf00      	nop
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20001408 	.word	0x20001408
 8008044:	2000140c 	.word	0x2000140c
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008054:	4b0e      	ldr	r3, [pc, #56]	@ (8008090 <prvGetNextExpireTime+0x44>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <prvGetNextExpireTime+0x16>
 800805e:	2201      	movs	r2, #1
 8008060:	e000      	b.n	8008064 <prvGetNextExpireTime+0x18>
 8008062:	2200      	movs	r2, #0
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d105      	bne.n	800807c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008070:	4b07      	ldr	r3, [pc, #28]	@ (8008090 <prvGetNextExpireTime+0x44>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	e001      	b.n	8008080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008080:	68fb      	ldr	r3, [r7, #12]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20001404 	.word	0x20001404

08008094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800809c:	f7ff fa72 	bl	8007584 <xTaskGetTickCount>
 80080a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080a2:	4b0b      	ldr	r3, [pc, #44]	@ (80080d0 <prvSampleTimeNow+0x3c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d205      	bcs.n	80080b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080ac:	f000 f93a 	bl	8008324 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	e002      	b.n	80080be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080be:	4a04      	ldr	r2, [pc, #16]	@ (80080d0 <prvSampleTimeNow+0x3c>)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080c4:	68fb      	ldr	r3, [r7, #12]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20001414 	.word	0x20001414

080080d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d812      	bhi.n	8008120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	d302      	bcc.n	800810e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008108:	2301      	movs	r3, #1
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e01b      	b.n	8008146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800810e:	4b10      	ldr	r3, [pc, #64]	@ (8008150 <prvInsertTimerInActiveList+0x7c>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3304      	adds	r3, #4
 8008116:	4619      	mov	r1, r3
 8008118:	4610      	mov	r0, r2
 800811a:	f7fe fa1c 	bl	8006556 <vListInsert>
 800811e:	e012      	b.n	8008146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	429a      	cmp	r2, r3
 8008126:	d206      	bcs.n	8008136 <prvInsertTimerInActiveList+0x62>
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d302      	bcc.n	8008136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e007      	b.n	8008146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008136:	4b07      	ldr	r3, [pc, #28]	@ (8008154 <prvInsertTimerInActiveList+0x80>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3304      	adds	r3, #4
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f7fe fa08 	bl	8006556 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008146:	697b      	ldr	r3, [r7, #20]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20001408 	.word	0x20001408
 8008154:	20001404 	.word	0x20001404

08008158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08e      	sub	sp, #56	@ 0x38
 800815c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800815e:	e0ce      	b.n	80082fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	da19      	bge.n	800819a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	3304      	adds	r3, #4
 800816a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800816c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10b      	bne.n	800818a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	61fb      	str	r3, [r7, #28]
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	e7fd      	b.n	8008186 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800818a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008190:	6850      	ldr	r0, [r2, #4]
 8008192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008194:	6892      	ldr	r2, [r2, #8]
 8008196:	4611      	mov	r1, r2
 8008198:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	f2c0 80ae 	blt.w	80082fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d004      	beq.n	80081b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b0:	3304      	adds	r3, #4
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fa08 	bl	80065c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081b8:	463b      	mov	r3, r7
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7ff ff6a 	bl	8008094 <prvSampleTimeNow>
 80081c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	f200 8097 	bhi.w	80082f8 <prvProcessReceivedCommands+0x1a0>
 80081ca:	a201      	add	r2, pc, #4	@ (adr r2, 80081d0 <prvProcessReceivedCommands+0x78>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	080081f9 	.word	0x080081f9
 80081d4:	080081f9 	.word	0x080081f9
 80081d8:	080081f9 	.word	0x080081f9
 80081dc:	0800826f 	.word	0x0800826f
 80081e0:	08008283 	.word	0x08008283
 80081e4:	080082cf 	.word	0x080082cf
 80081e8:	080081f9 	.word	0x080081f9
 80081ec:	080081f9 	.word	0x080081f9
 80081f0:	0800826f 	.word	0x0800826f
 80081f4:	08008283 	.word	0x08008283
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081fe:	f043 0301 	orr.w	r3, r3, #1
 8008202:	b2da      	uxtb	r2, r3
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	18d1      	adds	r1, r2, r3
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008218:	f7ff ff5c 	bl	80080d4 <prvInsertTimerInActiveList>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d06c      	beq.n	80082fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008228:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800822a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b00      	cmp	r3, #0
 8008236:	d061      	beq.n	80082fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	441a      	add	r2, r3
 8008240:	2300      	movs	r3, #0
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	2300      	movs	r3, #0
 8008246:	2100      	movs	r1, #0
 8008248:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800824a:	f7ff fe01 	bl	8007e50 <xTimerGenericCommand>
 800824e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d152      	bne.n	80082fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	61bb      	str	r3, [r7, #24]
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	e7fd      	b.n	800826a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008274:	f023 0301 	bic.w	r3, r3, #1
 8008278:	b2da      	uxtb	r2, r3
 800827a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008280:	e03d      	b.n	80082fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008288:	f043 0301 	orr.w	r3, r3, #1
 800828c:	b2da      	uxtb	r2, r3
 800828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008290:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008298:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10b      	bne.n	80082ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	617b      	str	r3, [r7, #20]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	18d1      	adds	r1, r2, r3
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082c8:	f7ff ff04 	bl	80080d4 <prvInsertTimerInActiveList>
					break;
 80082cc:	e017      	b.n	80082fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80082dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082de:	f000 fbeb 	bl	8008ab8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082e2:	e00c      	b.n	80082fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082ea:	f023 0301 	bic.w	r3, r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80082f6:	e002      	b.n	80082fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80082f8:	bf00      	nop
 80082fa:	e000      	b.n	80082fe <prvProcessReceivedCommands+0x1a6>
					break;
 80082fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082fe:	4b08      	ldr	r3, [pc, #32]	@ (8008320 <prvProcessReceivedCommands+0x1c8>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	1d39      	adds	r1, r7, #4
 8008304:	2200      	movs	r2, #0
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fc32 	bl	8006b70 <xQueueReceive>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	f47f af26 	bne.w	8008160 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	3730      	adds	r7, #48	@ 0x30
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	2000140c 	.word	0x2000140c

08008324 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b088      	sub	sp, #32
 8008328:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800832a:	e049      	b.n	80083c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800832c:	4b2e      	ldr	r3, [pc, #184]	@ (80083e8 <prvSwitchTimerLists+0xc4>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008336:	4b2c      	ldr	r3, [pc, #176]	@ (80083e8 <prvSwitchTimerLists+0xc4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3304      	adds	r3, #4
 8008344:	4618      	mov	r0, r3
 8008346:	f7fe f93f 	bl	80065c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d02f      	beq.n	80083c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4413      	add	r3, r2
 8008368:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	429a      	cmp	r2, r3
 8008370:	d90e      	bls.n	8008390 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800837e:	4b1a      	ldr	r3, [pc, #104]	@ (80083e8 <prvSwitchTimerLists+0xc4>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3304      	adds	r3, #4
 8008386:	4619      	mov	r1, r3
 8008388:	4610      	mov	r0, r2
 800838a:	f7fe f8e4 	bl	8006556 <vListInsert>
 800838e:	e017      	b.n	80083c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008390:	2300      	movs	r3, #0
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	2300      	movs	r3, #0
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	2100      	movs	r1, #0
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f7ff fd58 	bl	8007e50 <xTimerGenericCommand>
 80083a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10b      	bne.n	80083c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	603b      	str	r3, [r7, #0]
}
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	e7fd      	b.n	80083bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083c0:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <prvSwitchTimerLists+0xc4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1b0      	bne.n	800832c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083ca:	4b07      	ldr	r3, [pc, #28]	@ (80083e8 <prvSwitchTimerLists+0xc4>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083d0:	4b06      	ldr	r3, [pc, #24]	@ (80083ec <prvSwitchTimerLists+0xc8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a04      	ldr	r2, [pc, #16]	@ (80083e8 <prvSwitchTimerLists+0xc4>)
 80083d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083d8:	4a04      	ldr	r2, [pc, #16]	@ (80083ec <prvSwitchTimerLists+0xc8>)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	6013      	str	r3, [r2, #0]
}
 80083de:	bf00      	nop
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20001404 	.word	0x20001404
 80083ec:	20001408 	.word	0x20001408

080083f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083f6:	f000 f96f 	bl	80086d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083fa:	4b15      	ldr	r3, [pc, #84]	@ (8008450 <prvCheckForValidListAndQueue+0x60>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d120      	bne.n	8008444 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008402:	4814      	ldr	r0, [pc, #80]	@ (8008454 <prvCheckForValidListAndQueue+0x64>)
 8008404:	f7fe f856 	bl	80064b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008408:	4813      	ldr	r0, [pc, #76]	@ (8008458 <prvCheckForValidListAndQueue+0x68>)
 800840a:	f7fe f853 	bl	80064b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800840e:	4b13      	ldr	r3, [pc, #76]	@ (800845c <prvCheckForValidListAndQueue+0x6c>)
 8008410:	4a10      	ldr	r2, [pc, #64]	@ (8008454 <prvCheckForValidListAndQueue+0x64>)
 8008412:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008414:	4b12      	ldr	r3, [pc, #72]	@ (8008460 <prvCheckForValidListAndQueue+0x70>)
 8008416:	4a10      	ldr	r2, [pc, #64]	@ (8008458 <prvCheckForValidListAndQueue+0x68>)
 8008418:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800841a:	2300      	movs	r3, #0
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	4b11      	ldr	r3, [pc, #68]	@ (8008464 <prvCheckForValidListAndQueue+0x74>)
 8008420:	4a11      	ldr	r2, [pc, #68]	@ (8008468 <prvCheckForValidListAndQueue+0x78>)
 8008422:	2110      	movs	r1, #16
 8008424:	200a      	movs	r0, #10
 8008426:	f7fe f963 	bl	80066f0 <xQueueGenericCreateStatic>
 800842a:	4603      	mov	r3, r0
 800842c:	4a08      	ldr	r2, [pc, #32]	@ (8008450 <prvCheckForValidListAndQueue+0x60>)
 800842e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008430:	4b07      	ldr	r3, [pc, #28]	@ (8008450 <prvCheckForValidListAndQueue+0x60>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008438:	4b05      	ldr	r3, [pc, #20]	@ (8008450 <prvCheckForValidListAndQueue+0x60>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	490b      	ldr	r1, [pc, #44]	@ (800846c <prvCheckForValidListAndQueue+0x7c>)
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe fd88 	bl	8006f54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008444:	f000 f97a 	bl	800873c <vPortExitCritical>
}
 8008448:	bf00      	nop
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	2000140c 	.word	0x2000140c
 8008454:	200013dc 	.word	0x200013dc
 8008458:	200013f0 	.word	0x200013f0
 800845c:	20001404 	.word	0x20001404
 8008460:	20001408 	.word	0x20001408
 8008464:	200014b8 	.word	0x200014b8
 8008468:	20001418 	.word	0x20001418
 800846c:	0800d780 	.word	0x0800d780

08008470 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3b04      	subs	r3, #4
 8008480:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3b04      	subs	r3, #4
 800848e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f023 0201 	bic.w	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3b04      	subs	r3, #4
 800849e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084a0:	4a0c      	ldr	r2, [pc, #48]	@ (80084d4 <pxPortInitialiseStack+0x64>)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3b14      	subs	r3, #20
 80084aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3b04      	subs	r3, #4
 80084b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f06f 0202 	mvn.w	r2, #2
 80084be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3b20      	subs	r3, #32
 80084c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084c6:	68fb      	ldr	r3, [r7, #12]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	080084d9 	.word	0x080084d9

080084d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084e2:	4b13      	ldr	r3, [pc, #76]	@ (8008530 <prvTaskExitError+0x58>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d00b      	beq.n	8008504 <prvTaskExitError+0x2c>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	60fb      	str	r3, [r7, #12]
}
 80084fe:	bf00      	nop
 8008500:	bf00      	nop
 8008502:	e7fd      	b.n	8008500 <prvTaskExitError+0x28>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	60bb      	str	r3, [r7, #8]
}
 8008516:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008518:	bf00      	nop
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d0fc      	beq.n	800851a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000030 	.word	0x20000030
	...

08008540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008540:	4b07      	ldr	r3, [pc, #28]	@ (8008560 <pxCurrentTCBConst2>)
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	f380 8809 	msr	PSP, r0
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8811 	msr	BASEPRI, r0
 800855a:	4770      	bx	lr
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst2>:
 8008560:	20000edc 	.word	0x20000edc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008568:	4808      	ldr	r0, [pc, #32]	@ (800858c <prvPortStartFirstTask+0x24>)
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f380 8808 	msr	MSP, r0
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8814 	msr	CONTROL, r0
 800857a:	b662      	cpsie	i
 800857c:	b661      	cpsie	f
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	df00      	svc	0
 8008588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800858a:	bf00      	nop
 800858c:	e000ed08 	.word	0xe000ed08

08008590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008596:	4b47      	ldr	r3, [pc, #284]	@ (80086b4 <xPortStartScheduler+0x124>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a47      	ldr	r2, [pc, #284]	@ (80086b8 <xPortStartScheduler+0x128>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10b      	bne.n	80085b8 <xPortStartScheduler+0x28>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	bf00      	nop
 80085b6:	e7fd      	b.n	80085b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085b8:	4b3e      	ldr	r3, [pc, #248]	@ (80086b4 <xPortStartScheduler+0x124>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a3f      	ldr	r2, [pc, #252]	@ (80086bc <xPortStartScheduler+0x12c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d10b      	bne.n	80085da <xPortStartScheduler+0x4a>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	60fb      	str	r3, [r7, #12]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085da:	4b39      	ldr	r3, [pc, #228]	@ (80086c0 <xPortStartScheduler+0x130>)
 80085dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	22ff      	movs	r2, #255	@ 0xff
 80085ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	4b31      	ldr	r3, [pc, #196]	@ (80086c4 <xPortStartScheduler+0x134>)
 8008600:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008602:	4b31      	ldr	r3, [pc, #196]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008604:	2207      	movs	r2, #7
 8008606:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008608:	e009      	b.n	800861e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800860a:	4b2f      	ldr	r3, [pc, #188]	@ (80086c8 <xPortStartScheduler+0x138>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3b01      	subs	r3, #1
 8008610:	4a2d      	ldr	r2, [pc, #180]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008612:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	b2db      	uxtb	r3, r3
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	b2db      	uxtb	r3, r3
 800861c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008626:	2b80      	cmp	r3, #128	@ 0x80
 8008628:	d0ef      	beq.n	800860a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800862a:	4b27      	ldr	r3, [pc, #156]	@ (80086c8 <xPortStartScheduler+0x138>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f1c3 0307 	rsb	r3, r3, #7
 8008632:	2b04      	cmp	r3, #4
 8008634:	d00b      	beq.n	800864e <xPortStartScheduler+0xbe>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	60bb      	str	r3, [r7, #8]
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	e7fd      	b.n	800864a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800864e:	4b1e      	ldr	r3, [pc, #120]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	4a1c      	ldr	r2, [pc, #112]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008656:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008658:	4b1b      	ldr	r3, [pc, #108]	@ (80086c8 <xPortStartScheduler+0x138>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008660:	4a19      	ldr	r2, [pc, #100]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008662:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800866c:	4b17      	ldr	r3, [pc, #92]	@ (80086cc <xPortStartScheduler+0x13c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a16      	ldr	r2, [pc, #88]	@ (80086cc <xPortStartScheduler+0x13c>)
 8008672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008676:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008678:	4b14      	ldr	r3, [pc, #80]	@ (80086cc <xPortStartScheduler+0x13c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a13      	ldr	r2, [pc, #76]	@ (80086cc <xPortStartScheduler+0x13c>)
 800867e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008682:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008684:	f000 f8da 	bl	800883c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008688:	4b11      	ldr	r3, [pc, #68]	@ (80086d0 <xPortStartScheduler+0x140>)
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800868e:	f000 f8f9 	bl	8008884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008692:	4b10      	ldr	r3, [pc, #64]	@ (80086d4 <xPortStartScheduler+0x144>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a0f      	ldr	r2, [pc, #60]	@ (80086d4 <xPortStartScheduler+0x144>)
 8008698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800869c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800869e:	f7ff ff63 	bl	8008568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086a2:	f7ff f839 	bl	8007718 <vTaskSwitchContext>
	prvTaskExitError();
 80086a6:	f7ff ff17 	bl	80084d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	e000ed00 	.word	0xe000ed00
 80086b8:	410fc271 	.word	0x410fc271
 80086bc:	410fc270 	.word	0x410fc270
 80086c0:	e000e400 	.word	0xe000e400
 80086c4:	20001508 	.word	0x20001508
 80086c8:	2000150c 	.word	0x2000150c
 80086cc:	e000ed20 	.word	0xe000ed20
 80086d0:	20000030 	.word	0x20000030
 80086d4:	e000ef34 	.word	0xe000ef34

080086d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	607b      	str	r3, [r7, #4]
}
 80086f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086f2:	4b10      	ldr	r3, [pc, #64]	@ (8008734 <vPortEnterCritical+0x5c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3301      	adds	r3, #1
 80086f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008734 <vPortEnterCritical+0x5c>)
 80086fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008734 <vPortEnterCritical+0x5c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d110      	bne.n	8008726 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008704:	4b0c      	ldr	r3, [pc, #48]	@ (8008738 <vPortEnterCritical+0x60>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <vPortEnterCritical+0x4e>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	603b      	str	r3, [r7, #0]
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	e7fd      	b.n	8008722 <vPortEnterCritical+0x4a>
	}
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000030 	.word	0x20000030
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008742:	4b12      	ldr	r3, [pc, #72]	@ (800878c <vPortExitCritical+0x50>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10b      	bne.n	8008762 <vPortExitCritical+0x26>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	607b      	str	r3, [r7, #4]
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	e7fd      	b.n	800875e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008762:	4b0a      	ldr	r3, [pc, #40]	@ (800878c <vPortExitCritical+0x50>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3b01      	subs	r3, #1
 8008768:	4a08      	ldr	r2, [pc, #32]	@ (800878c <vPortExitCritical+0x50>)
 800876a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800876c:	4b07      	ldr	r3, [pc, #28]	@ (800878c <vPortExitCritical+0x50>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d105      	bne.n	8008780 <vPortExitCritical+0x44>
 8008774:	2300      	movs	r3, #0
 8008776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f383 8811 	msr	BASEPRI, r3
}
 800877e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000030 	.word	0x20000030

08008790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008790:	f3ef 8009 	mrs	r0, PSP
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4b15      	ldr	r3, [pc, #84]	@ (80087f0 <pxCurrentTCBConst>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f01e 0f10 	tst.w	lr, #16
 80087a0:	bf08      	it	eq
 80087a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087b4:	f380 8811 	msr	BASEPRI, r0
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f7fe ffaa 	bl	8007718 <vTaskSwitchContext>
 80087c4:	f04f 0000 	mov.w	r0, #0
 80087c8:	f380 8811 	msr	BASEPRI, r0
 80087cc:	bc09      	pop	{r0, r3}
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	6808      	ldr	r0, [r1, #0]
 80087d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d6:	f01e 0f10 	tst.w	lr, #16
 80087da:	bf08      	it	eq
 80087dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087e0:	f380 8809 	msr	PSP, r0
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst>:
 80087f0:	20000edc 	.word	0x20000edc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008812:	f7fe fec7 	bl	80075a4 <xTaskIncrementTick>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <xPortSysTickHandler+0x40>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008840:	4b0b      	ldr	r3, [pc, #44]	@ (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008846:	4b0b      	ldr	r3, [pc, #44]	@ (8008874 <vPortSetupTimerInterrupt+0x38>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800884c:	4b0a      	ldr	r3, [pc, #40]	@ (8008878 <vPortSetupTimerInterrupt+0x3c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a0a      	ldr	r2, [pc, #40]	@ (800887c <vPortSetupTimerInterrupt+0x40>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	4a09      	ldr	r2, [pc, #36]	@ (8008880 <vPortSetupTimerInterrupt+0x44>)
 800885a:	3b01      	subs	r3, #1
 800885c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885e:	4b04      	ldr	r3, [pc, #16]	@ (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	e000e010 	.word	0xe000e010
 8008874:	e000e018 	.word	0xe000e018
 8008878:	20000024 	.word	0x20000024
 800887c:	10624dd3 	.word	0x10624dd3
 8008880:	e000e014 	.word	0xe000e014

08008884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008884:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008894 <vPortEnableVFP+0x10>
 8008888:	6801      	ldr	r1, [r0, #0]
 800888a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800888e:	6001      	str	r1, [r0, #0]
 8008890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008892:	bf00      	nop
 8008894:	e000ed88 	.word	0xe000ed88

08008898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800889e:	f3ef 8305 	mrs	r3, IPSR
 80088a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b0f      	cmp	r3, #15
 80088a8:	d915      	bls.n	80088d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088aa:	4a18      	ldr	r2, [pc, #96]	@ (800890c <vPortValidateInterruptPriority+0x74>)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088b4:	4b16      	ldr	r3, [pc, #88]	@ (8008910 <vPortValidateInterruptPriority+0x78>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	7afa      	ldrb	r2, [r7, #11]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d20b      	bcs.n	80088d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	607b      	str	r3, [r7, #4]
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	e7fd      	b.n	80088d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008914 <vPortValidateInterruptPriority+0x7c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80088de:	4b0e      	ldr	r3, [pc, #56]	@ (8008918 <vPortValidateInterruptPriority+0x80>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d90b      	bls.n	80088fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	603b      	str	r3, [r7, #0]
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	e7fd      	b.n	80088fa <vPortValidateInterruptPriority+0x62>
	}
 80088fe:	bf00      	nop
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	e000e3f0 	.word	0xe000e3f0
 8008910:	20001508 	.word	0x20001508
 8008914:	e000ed0c 	.word	0xe000ed0c
 8008918:	2000150c 	.word	0x2000150c

0800891c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	@ 0x28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008928:	f7fe fd80 	bl	800742c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800892c:	4b5c      	ldr	r3, [pc, #368]	@ (8008aa0 <pvPortMalloc+0x184>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008934:	f000 f924 	bl	8008b80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008938:	4b5a      	ldr	r3, [pc, #360]	@ (8008aa4 <pvPortMalloc+0x188>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4013      	ands	r3, r2
 8008940:	2b00      	cmp	r3, #0
 8008942:	f040 8095 	bne.w	8008a70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01e      	beq.n	800898a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800894c:	2208      	movs	r2, #8
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b00      	cmp	r3, #0
 800895c:	d015      	beq.n	800898a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f023 0307 	bic.w	r3, r3, #7
 8008964:	3308      	adds	r3, #8
 8008966:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <pvPortMalloc+0x6e>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	617b      	str	r3, [r7, #20]
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	e7fd      	b.n	8008986 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d06f      	beq.n	8008a70 <pvPortMalloc+0x154>
 8008990:	4b45      	ldr	r3, [pc, #276]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	429a      	cmp	r2, r3
 8008998:	d86a      	bhi.n	8008a70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800899a:	4b44      	ldr	r3, [pc, #272]	@ (8008aac <pvPortMalloc+0x190>)
 800899c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800899e:	4b43      	ldr	r3, [pc, #268]	@ (8008aac <pvPortMalloc+0x190>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089a4:	e004      	b.n	80089b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d903      	bls.n	80089c2 <pvPortMalloc+0xa6>
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1f1      	bne.n	80089a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089c2:	4b37      	ldr	r3, [pc, #220]	@ (8008aa0 <pvPortMalloc+0x184>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d051      	beq.n	8008a70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2208      	movs	r2, #8
 80089d2:	4413      	add	r3, r2
 80089d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	1ad2      	subs	r2, r2, r3
 80089e6:	2308      	movs	r3, #8
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d920      	bls.n	8008a30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <pvPortMalloc+0xfc>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	613b      	str	r3, [r7, #16]
}
 8008a12:	bf00      	nop
 8008a14:	bf00      	nop
 8008a16:	e7fd      	b.n	8008a14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a2a:	69b8      	ldr	r0, [r7, #24]
 8008a2c:	f000 f90a 	bl	8008c44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a30:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008a3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4b1b      	ldr	r3, [pc, #108]	@ (8008ab0 <pvPortMalloc+0x194>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d203      	bcs.n	8008a52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a4a:	4b17      	ldr	r3, [pc, #92]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a18      	ldr	r2, [pc, #96]	@ (8008ab0 <pvPortMalloc+0x194>)
 8008a50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	4b13      	ldr	r3, [pc, #76]	@ (8008aa4 <pvPortMalloc+0x188>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a66:	4b13      	ldr	r3, [pc, #76]	@ (8008ab4 <pvPortMalloc+0x198>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	4a11      	ldr	r2, [pc, #68]	@ (8008ab4 <pvPortMalloc+0x198>)
 8008a6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a70:	f7fe fcea 	bl	8007448 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <pvPortMalloc+0x17a>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	60fb      	str	r3, [r7, #12]
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	e7fd      	b.n	8008a92 <pvPortMalloc+0x176>
	return pvReturn;
 8008a96:	69fb      	ldr	r3, [r7, #28]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3728      	adds	r7, #40	@ 0x28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	20005118 	.word	0x20005118
 8008aa4:	2000512c 	.word	0x2000512c
 8008aa8:	2000511c 	.word	0x2000511c
 8008aac:	20005110 	.word	0x20005110
 8008ab0:	20005120 	.word	0x20005120
 8008ab4:	20005124 	.word	0x20005124

08008ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d04f      	beq.n	8008b6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aca:	2308      	movs	r3, #8
 8008acc:	425b      	negs	r3, r3
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	4b25      	ldr	r3, [pc, #148]	@ (8008b74 <vPortFree+0xbc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10b      	bne.n	8008afe <vPortFree+0x46>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	60fb      	str	r3, [r7, #12]
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	e7fd      	b.n	8008afa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00b      	beq.n	8008b1e <vPortFree+0x66>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60bb      	str	r3, [r7, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	4b14      	ldr	r3, [pc, #80]	@ (8008b74 <vPortFree+0xbc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4013      	ands	r3, r2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01e      	beq.n	8008b6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d11a      	bne.n	8008b6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	4b0e      	ldr	r3, [pc, #56]	@ (8008b74 <vPortFree+0xbc>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	401a      	ands	r2, r3
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b44:	f7fe fc72 	bl	800742c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b78 <vPortFree+0xc0>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4413      	add	r3, r2
 8008b52:	4a09      	ldr	r2, [pc, #36]	@ (8008b78 <vPortFree+0xc0>)
 8008b54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b56:	6938      	ldr	r0, [r7, #16]
 8008b58:	f000 f874 	bl	8008c44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b5c:	4b07      	ldr	r3, [pc, #28]	@ (8008b7c <vPortFree+0xc4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3301      	adds	r3, #1
 8008b62:	4a06      	ldr	r2, [pc, #24]	@ (8008b7c <vPortFree+0xc4>)
 8008b64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b66:	f7fe fc6f 	bl	8007448 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b6a:	bf00      	nop
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	2000512c 	.word	0x2000512c
 8008b78:	2000511c 	.word	0x2000511c
 8008b7c:	20005128 	.word	0x20005128

08008b80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008b8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b8c:	4b27      	ldr	r3, [pc, #156]	@ (8008c2c <prvHeapInit+0xac>)
 8008b8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00c      	beq.n	8008bb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3307      	adds	r3, #7
 8008b9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0307 	bic.w	r3, r3, #7
 8008ba6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	4a1f      	ldr	r2, [pc, #124]	@ (8008c2c <prvHeapInit+0xac>)
 8008bb0:	4413      	add	r3, r2
 8008bb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c30 <prvHeapInit+0xb0>)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8008c30 <prvHeapInit+0xb0>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	4413      	add	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bcc:	2208      	movs	r2, #8
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 0307 	bic.w	r3, r3, #7
 8008bda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4a15      	ldr	r2, [pc, #84]	@ (8008c34 <prvHeapInit+0xb4>)
 8008be0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008be2:	4b14      	ldr	r3, [pc, #80]	@ (8008c34 <prvHeapInit+0xb4>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bea:	4b12      	ldr	r3, [pc, #72]	@ (8008c34 <prvHeapInit+0xb4>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	1ad2      	subs	r2, r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c00:	4b0c      	ldr	r3, [pc, #48]	@ (8008c34 <prvHeapInit+0xb4>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c38 <prvHeapInit+0xb8>)
 8008c0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	4a09      	ldr	r2, [pc, #36]	@ (8008c3c <prvHeapInit+0xbc>)
 8008c16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c18:	4b09      	ldr	r3, [pc, #36]	@ (8008c40 <prvHeapInit+0xc0>)
 8008c1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c1e:	601a      	str	r2, [r3, #0]
}
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	20001510 	.word	0x20001510
 8008c30:	20005110 	.word	0x20005110
 8008c34:	20005118 	.word	0x20005118
 8008c38:	20005120 	.word	0x20005120
 8008c3c:	2000511c 	.word	0x2000511c
 8008c40:	2000512c 	.word	0x2000512c

08008c44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c4c:	4b28      	ldr	r3, [pc, #160]	@ (8008cf0 <prvInsertBlockIntoFreeList+0xac>)
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	e002      	b.n	8008c58 <prvInsertBlockIntoFreeList+0x14>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d8f7      	bhi.n	8008c52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d108      	bne.n	8008c86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	441a      	add	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	441a      	add	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d118      	bne.n	8008ccc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4b15      	ldr	r3, [pc, #84]	@ (8008cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d00d      	beq.n	8008cc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	441a      	add	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	e008      	b.n	8008cd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	e003      	b.n	8008cd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d002      	beq.n	8008ce2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ce2:	bf00      	nop
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20005110 	.word	0x20005110
 8008cf4:	20005118 	.word	0x20005118

08008cf8 <__cvt>:
 8008cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfc:	ec57 6b10 	vmov	r6, r7, d0
 8008d00:	2f00      	cmp	r7, #0
 8008d02:	460c      	mov	r4, r1
 8008d04:	4619      	mov	r1, r3
 8008d06:	463b      	mov	r3, r7
 8008d08:	bfbb      	ittet	lt
 8008d0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008d0e:	461f      	movlt	r7, r3
 8008d10:	2300      	movge	r3, #0
 8008d12:	232d      	movlt	r3, #45	@ 0x2d
 8008d14:	700b      	strb	r3, [r1, #0]
 8008d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008d1c:	4691      	mov	r9, r2
 8008d1e:	f023 0820 	bic.w	r8, r3, #32
 8008d22:	bfbc      	itt	lt
 8008d24:	4632      	movlt	r2, r6
 8008d26:	4616      	movlt	r6, r2
 8008d28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d2c:	d005      	beq.n	8008d3a <__cvt+0x42>
 8008d2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008d32:	d100      	bne.n	8008d36 <__cvt+0x3e>
 8008d34:	3401      	adds	r4, #1
 8008d36:	2102      	movs	r1, #2
 8008d38:	e000      	b.n	8008d3c <__cvt+0x44>
 8008d3a:	2103      	movs	r1, #3
 8008d3c:	ab03      	add	r3, sp, #12
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	ab02      	add	r3, sp, #8
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	ec47 6b10 	vmov	d0, r6, r7
 8008d48:	4653      	mov	r3, sl
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	f001 f990 	bl	800a070 <_dtoa_r>
 8008d50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d54:	4605      	mov	r5, r0
 8008d56:	d119      	bne.n	8008d8c <__cvt+0x94>
 8008d58:	f019 0f01 	tst.w	r9, #1
 8008d5c:	d00e      	beq.n	8008d7c <__cvt+0x84>
 8008d5e:	eb00 0904 	add.w	r9, r0, r4
 8008d62:	2200      	movs	r2, #0
 8008d64:	2300      	movs	r3, #0
 8008d66:	4630      	mov	r0, r6
 8008d68:	4639      	mov	r1, r7
 8008d6a:	f7f7 fead 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d6e:	b108      	cbz	r0, 8008d74 <__cvt+0x7c>
 8008d70:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d74:	2230      	movs	r2, #48	@ 0x30
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	454b      	cmp	r3, r9
 8008d7a:	d31e      	bcc.n	8008dba <__cvt+0xc2>
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d80:	1b5b      	subs	r3, r3, r5
 8008d82:	4628      	mov	r0, r5
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	b004      	add	sp, #16
 8008d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d90:	eb00 0904 	add.w	r9, r0, r4
 8008d94:	d1e5      	bne.n	8008d62 <__cvt+0x6a>
 8008d96:	7803      	ldrb	r3, [r0, #0]
 8008d98:	2b30      	cmp	r3, #48	@ 0x30
 8008d9a:	d10a      	bne.n	8008db2 <__cvt+0xba>
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da8:	b918      	cbnz	r0, 8008db2 <__cvt+0xba>
 8008daa:	f1c4 0401 	rsb	r4, r4, #1
 8008dae:	f8ca 4000 	str.w	r4, [sl]
 8008db2:	f8da 3000 	ldr.w	r3, [sl]
 8008db6:	4499      	add	r9, r3
 8008db8:	e7d3      	b.n	8008d62 <__cvt+0x6a>
 8008dba:	1c59      	adds	r1, r3, #1
 8008dbc:	9103      	str	r1, [sp, #12]
 8008dbe:	701a      	strb	r2, [r3, #0]
 8008dc0:	e7d9      	b.n	8008d76 <__cvt+0x7e>

08008dc2 <__exponent>:
 8008dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	bfba      	itte	lt
 8008dc8:	4249      	neglt	r1, r1
 8008dca:	232d      	movlt	r3, #45	@ 0x2d
 8008dcc:	232b      	movge	r3, #43	@ 0x2b
 8008dce:	2909      	cmp	r1, #9
 8008dd0:	7002      	strb	r2, [r0, #0]
 8008dd2:	7043      	strb	r3, [r0, #1]
 8008dd4:	dd29      	ble.n	8008e2a <__exponent+0x68>
 8008dd6:	f10d 0307 	add.w	r3, sp, #7
 8008dda:	461d      	mov	r5, r3
 8008ddc:	270a      	movs	r7, #10
 8008dde:	461a      	mov	r2, r3
 8008de0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008de4:	fb07 1416 	mls	r4, r7, r6, r1
 8008de8:	3430      	adds	r4, #48	@ 0x30
 8008dea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008dee:	460c      	mov	r4, r1
 8008df0:	2c63      	cmp	r4, #99	@ 0x63
 8008df2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008df6:	4631      	mov	r1, r6
 8008df8:	dcf1      	bgt.n	8008dde <__exponent+0x1c>
 8008dfa:	3130      	adds	r1, #48	@ 0x30
 8008dfc:	1e94      	subs	r4, r2, #2
 8008dfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e02:	1c41      	adds	r1, r0, #1
 8008e04:	4623      	mov	r3, r4
 8008e06:	42ab      	cmp	r3, r5
 8008e08:	d30a      	bcc.n	8008e20 <__exponent+0x5e>
 8008e0a:	f10d 0309 	add.w	r3, sp, #9
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	42ac      	cmp	r4, r5
 8008e12:	bf88      	it	hi
 8008e14:	2300      	movhi	r3, #0
 8008e16:	3302      	adds	r3, #2
 8008e18:	4403      	add	r3, r0
 8008e1a:	1a18      	subs	r0, r3, r0
 8008e1c:	b003      	add	sp, #12
 8008e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008e24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008e28:	e7ed      	b.n	8008e06 <__exponent+0x44>
 8008e2a:	2330      	movs	r3, #48	@ 0x30
 8008e2c:	3130      	adds	r1, #48	@ 0x30
 8008e2e:	7083      	strb	r3, [r0, #2]
 8008e30:	70c1      	strb	r1, [r0, #3]
 8008e32:	1d03      	adds	r3, r0, #4
 8008e34:	e7f1      	b.n	8008e1a <__exponent+0x58>
	...

08008e38 <_printf_float>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	b08d      	sub	sp, #52	@ 0x34
 8008e3e:	460c      	mov	r4, r1
 8008e40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e44:	4616      	mov	r6, r2
 8008e46:	461f      	mov	r7, r3
 8008e48:	4605      	mov	r5, r0
 8008e4a:	f000 fffb 	bl	8009e44 <_localeconv_r>
 8008e4e:	6803      	ldr	r3, [r0, #0]
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7f7 fa0c 	bl	8000270 <strlen>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e60:	9005      	str	r0, [sp, #20]
 8008e62:	3307      	adds	r3, #7
 8008e64:	f023 0307 	bic.w	r3, r3, #7
 8008e68:	f103 0208 	add.w	r2, r3, #8
 8008e6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e70:	f8d4 b000 	ldr.w	fp, [r4]
 8008e74:	f8c8 2000 	str.w	r2, [r8]
 8008e78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e80:	9307      	str	r3, [sp, #28]
 8008e82:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e8e:	4b9c      	ldr	r3, [pc, #624]	@ (8009100 <_printf_float+0x2c8>)
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295
 8008e94:	f7f7 fe4a 	bl	8000b2c <__aeabi_dcmpun>
 8008e98:	bb70      	cbnz	r0, 8008ef8 <_printf_float+0xc0>
 8008e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e9e:	4b98      	ldr	r3, [pc, #608]	@ (8009100 <_printf_float+0x2c8>)
 8008ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea4:	f7f7 fe24 	bl	8000af0 <__aeabi_dcmple>
 8008ea8:	bb30      	cbnz	r0, 8008ef8 <_printf_float+0xc0>
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2300      	movs	r3, #0
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	f7f7 fe13 	bl	8000adc <__aeabi_dcmplt>
 8008eb6:	b110      	cbz	r0, 8008ebe <_printf_float+0x86>
 8008eb8:	232d      	movs	r3, #45	@ 0x2d
 8008eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ebe:	4a91      	ldr	r2, [pc, #580]	@ (8009104 <_printf_float+0x2cc>)
 8008ec0:	4b91      	ldr	r3, [pc, #580]	@ (8009108 <_printf_float+0x2d0>)
 8008ec2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008ec6:	bf94      	ite	ls
 8008ec8:	4690      	movls	r8, r2
 8008eca:	4698      	movhi	r8, r3
 8008ecc:	2303      	movs	r3, #3
 8008ece:	6123      	str	r3, [r4, #16]
 8008ed0:	f02b 0304 	bic.w	r3, fp, #4
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	f04f 0900 	mov.w	r9, #0
 8008eda:	9700      	str	r7, [sp, #0]
 8008edc:	4633      	mov	r3, r6
 8008ede:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 f9d2 	bl	800928c <_printf_common>
 8008ee8:	3001      	adds	r0, #1
 8008eea:	f040 808d 	bne.w	8009008 <_printf_float+0x1d0>
 8008eee:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef2:	b00d      	add	sp, #52	@ 0x34
 8008ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef8:	4642      	mov	r2, r8
 8008efa:	464b      	mov	r3, r9
 8008efc:	4640      	mov	r0, r8
 8008efe:	4649      	mov	r1, r9
 8008f00:	f7f7 fe14 	bl	8000b2c <__aeabi_dcmpun>
 8008f04:	b140      	cbz	r0, 8008f18 <_printf_float+0xe0>
 8008f06:	464b      	mov	r3, r9
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bfbc      	itt	lt
 8008f0c:	232d      	movlt	r3, #45	@ 0x2d
 8008f0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008f12:	4a7e      	ldr	r2, [pc, #504]	@ (800910c <_printf_float+0x2d4>)
 8008f14:	4b7e      	ldr	r3, [pc, #504]	@ (8009110 <_printf_float+0x2d8>)
 8008f16:	e7d4      	b.n	8008ec2 <_printf_float+0x8a>
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008f1e:	9206      	str	r2, [sp, #24]
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	d13b      	bne.n	8008f9c <_printf_float+0x164>
 8008f24:	2306      	movs	r3, #6
 8008f26:	6063      	str	r3, [r4, #4]
 8008f28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	6022      	str	r2, [r4, #0]
 8008f30:	9303      	str	r3, [sp, #12]
 8008f32:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008f38:	ab09      	add	r3, sp, #36	@ 0x24
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	6861      	ldr	r1, [r4, #4]
 8008f3e:	ec49 8b10 	vmov	d0, r8, r9
 8008f42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f46:	4628      	mov	r0, r5
 8008f48:	f7ff fed6 	bl	8008cf8 <__cvt>
 8008f4c:	9b06      	ldr	r3, [sp, #24]
 8008f4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f50:	2b47      	cmp	r3, #71	@ 0x47
 8008f52:	4680      	mov	r8, r0
 8008f54:	d129      	bne.n	8008faa <_printf_float+0x172>
 8008f56:	1cc8      	adds	r0, r1, #3
 8008f58:	db02      	blt.n	8008f60 <_printf_float+0x128>
 8008f5a:	6863      	ldr	r3, [r4, #4]
 8008f5c:	4299      	cmp	r1, r3
 8008f5e:	dd41      	ble.n	8008fe4 <_printf_float+0x1ac>
 8008f60:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f64:	fa5f fa8a 	uxtb.w	sl, sl
 8008f68:	3901      	subs	r1, #1
 8008f6a:	4652      	mov	r2, sl
 8008f6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f70:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f72:	f7ff ff26 	bl	8008dc2 <__exponent>
 8008f76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f78:	1813      	adds	r3, r2, r0
 8008f7a:	2a01      	cmp	r2, #1
 8008f7c:	4681      	mov	r9, r0
 8008f7e:	6123      	str	r3, [r4, #16]
 8008f80:	dc02      	bgt.n	8008f88 <_printf_float+0x150>
 8008f82:	6822      	ldr	r2, [r4, #0]
 8008f84:	07d2      	lsls	r2, r2, #31
 8008f86:	d501      	bpl.n	8008f8c <_printf_float+0x154>
 8008f88:	3301      	adds	r3, #1
 8008f8a:	6123      	str	r3, [r4, #16]
 8008f8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0a2      	beq.n	8008eda <_printf_float+0xa2>
 8008f94:	232d      	movs	r3, #45	@ 0x2d
 8008f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f9a:	e79e      	b.n	8008eda <_printf_float+0xa2>
 8008f9c:	9a06      	ldr	r2, [sp, #24]
 8008f9e:	2a47      	cmp	r2, #71	@ 0x47
 8008fa0:	d1c2      	bne.n	8008f28 <_printf_float+0xf0>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1c0      	bne.n	8008f28 <_printf_float+0xf0>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e7bd      	b.n	8008f26 <_printf_float+0xee>
 8008faa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fae:	d9db      	bls.n	8008f68 <_printf_float+0x130>
 8008fb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008fb4:	d118      	bne.n	8008fe8 <_printf_float+0x1b0>
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	6863      	ldr	r3, [r4, #4]
 8008fba:	dd0b      	ble.n	8008fd4 <_printf_float+0x19c>
 8008fbc:	6121      	str	r1, [r4, #16]
 8008fbe:	b913      	cbnz	r3, 8008fc6 <_printf_float+0x18e>
 8008fc0:	6822      	ldr	r2, [r4, #0]
 8008fc2:	07d0      	lsls	r0, r2, #31
 8008fc4:	d502      	bpl.n	8008fcc <_printf_float+0x194>
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	440b      	add	r3, r1
 8008fca:	6123      	str	r3, [r4, #16]
 8008fcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008fce:	f04f 0900 	mov.w	r9, #0
 8008fd2:	e7db      	b.n	8008f8c <_printf_float+0x154>
 8008fd4:	b913      	cbnz	r3, 8008fdc <_printf_float+0x1a4>
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	07d2      	lsls	r2, r2, #31
 8008fda:	d501      	bpl.n	8008fe0 <_printf_float+0x1a8>
 8008fdc:	3302      	adds	r3, #2
 8008fde:	e7f4      	b.n	8008fca <_printf_float+0x192>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e7f2      	b.n	8008fca <_printf_float+0x192>
 8008fe4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fea:	4299      	cmp	r1, r3
 8008fec:	db05      	blt.n	8008ffa <_printf_float+0x1c2>
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	6121      	str	r1, [r4, #16]
 8008ff2:	07d8      	lsls	r0, r3, #31
 8008ff4:	d5ea      	bpl.n	8008fcc <_printf_float+0x194>
 8008ff6:	1c4b      	adds	r3, r1, #1
 8008ff8:	e7e7      	b.n	8008fca <_printf_float+0x192>
 8008ffa:	2900      	cmp	r1, #0
 8008ffc:	bfd4      	ite	le
 8008ffe:	f1c1 0202 	rsble	r2, r1, #2
 8009002:	2201      	movgt	r2, #1
 8009004:	4413      	add	r3, r2
 8009006:	e7e0      	b.n	8008fca <_printf_float+0x192>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	055a      	lsls	r2, r3, #21
 800900c:	d407      	bmi.n	800901e <_printf_float+0x1e6>
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	4642      	mov	r2, r8
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	d12b      	bne.n	8009074 <_printf_float+0x23c>
 800901c:	e767      	b.n	8008eee <_printf_float+0xb6>
 800901e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009022:	f240 80dd 	bls.w	80091e0 <_printf_float+0x3a8>
 8009026:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800902a:	2200      	movs	r2, #0
 800902c:	2300      	movs	r3, #0
 800902e:	f7f7 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009032:	2800      	cmp	r0, #0
 8009034:	d033      	beq.n	800909e <_printf_float+0x266>
 8009036:	4a37      	ldr	r2, [pc, #220]	@ (8009114 <_printf_float+0x2dc>)
 8009038:	2301      	movs	r3, #1
 800903a:	4631      	mov	r1, r6
 800903c:	4628      	mov	r0, r5
 800903e:	47b8      	blx	r7
 8009040:	3001      	adds	r0, #1
 8009042:	f43f af54 	beq.w	8008eee <_printf_float+0xb6>
 8009046:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800904a:	4543      	cmp	r3, r8
 800904c:	db02      	blt.n	8009054 <_printf_float+0x21c>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	07d8      	lsls	r0, r3, #31
 8009052:	d50f      	bpl.n	8009074 <_printf_float+0x23c>
 8009054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	f43f af45 	beq.w	8008eee <_printf_float+0xb6>
 8009064:	f04f 0900 	mov.w	r9, #0
 8009068:	f108 38ff 	add.w	r8, r8, #4294967295
 800906c:	f104 0a1a 	add.w	sl, r4, #26
 8009070:	45c8      	cmp	r8, r9
 8009072:	dc09      	bgt.n	8009088 <_printf_float+0x250>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	079b      	lsls	r3, r3, #30
 8009078:	f100 8103 	bmi.w	8009282 <_printf_float+0x44a>
 800907c:	68e0      	ldr	r0, [r4, #12]
 800907e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009080:	4298      	cmp	r0, r3
 8009082:	bfb8      	it	lt
 8009084:	4618      	movlt	r0, r3
 8009086:	e734      	b.n	8008ef2 <_printf_float+0xba>
 8009088:	2301      	movs	r3, #1
 800908a:	4652      	mov	r2, sl
 800908c:	4631      	mov	r1, r6
 800908e:	4628      	mov	r0, r5
 8009090:	47b8      	blx	r7
 8009092:	3001      	adds	r0, #1
 8009094:	f43f af2b 	beq.w	8008eee <_printf_float+0xb6>
 8009098:	f109 0901 	add.w	r9, r9, #1
 800909c:	e7e8      	b.n	8009070 <_printf_float+0x238>
 800909e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	dc39      	bgt.n	8009118 <_printf_float+0x2e0>
 80090a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009114 <_printf_float+0x2dc>)
 80090a6:	2301      	movs	r3, #1
 80090a8:	4631      	mov	r1, r6
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	3001      	adds	r0, #1
 80090b0:	f43f af1d 	beq.w	8008eee <_printf_float+0xb6>
 80090b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80090b8:	ea59 0303 	orrs.w	r3, r9, r3
 80090bc:	d102      	bne.n	80090c4 <_printf_float+0x28c>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	07d9      	lsls	r1, r3, #31
 80090c2:	d5d7      	bpl.n	8009074 <_printf_float+0x23c>
 80090c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090c8:	4631      	mov	r1, r6
 80090ca:	4628      	mov	r0, r5
 80090cc:	47b8      	blx	r7
 80090ce:	3001      	adds	r0, #1
 80090d0:	f43f af0d 	beq.w	8008eee <_printf_float+0xb6>
 80090d4:	f04f 0a00 	mov.w	sl, #0
 80090d8:	f104 0b1a 	add.w	fp, r4, #26
 80090dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090de:	425b      	negs	r3, r3
 80090e0:	4553      	cmp	r3, sl
 80090e2:	dc01      	bgt.n	80090e8 <_printf_float+0x2b0>
 80090e4:	464b      	mov	r3, r9
 80090e6:	e793      	b.n	8009010 <_printf_float+0x1d8>
 80090e8:	2301      	movs	r3, #1
 80090ea:	465a      	mov	r2, fp
 80090ec:	4631      	mov	r1, r6
 80090ee:	4628      	mov	r0, r5
 80090f0:	47b8      	blx	r7
 80090f2:	3001      	adds	r0, #1
 80090f4:	f43f aefb 	beq.w	8008eee <_printf_float+0xb6>
 80090f8:	f10a 0a01 	add.w	sl, sl, #1
 80090fc:	e7ee      	b.n	80090dc <_printf_float+0x2a4>
 80090fe:	bf00      	nop
 8009100:	7fefffff 	.word	0x7fefffff
 8009104:	0800d7a0 	.word	0x0800d7a0
 8009108:	0800d7a4 	.word	0x0800d7a4
 800910c:	0800d7a8 	.word	0x0800d7a8
 8009110:	0800d7ac 	.word	0x0800d7ac
 8009114:	0800d7b0 	.word	0x0800d7b0
 8009118:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800911a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800911e:	4553      	cmp	r3, sl
 8009120:	bfa8      	it	ge
 8009122:	4653      	movge	r3, sl
 8009124:	2b00      	cmp	r3, #0
 8009126:	4699      	mov	r9, r3
 8009128:	dc36      	bgt.n	8009198 <_printf_float+0x360>
 800912a:	f04f 0b00 	mov.w	fp, #0
 800912e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009132:	f104 021a 	add.w	r2, r4, #26
 8009136:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009138:	9306      	str	r3, [sp, #24]
 800913a:	eba3 0309 	sub.w	r3, r3, r9
 800913e:	455b      	cmp	r3, fp
 8009140:	dc31      	bgt.n	80091a6 <_printf_float+0x36e>
 8009142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009144:	459a      	cmp	sl, r3
 8009146:	dc3a      	bgt.n	80091be <_printf_float+0x386>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	07da      	lsls	r2, r3, #31
 800914c:	d437      	bmi.n	80091be <_printf_float+0x386>
 800914e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009150:	ebaa 0903 	sub.w	r9, sl, r3
 8009154:	9b06      	ldr	r3, [sp, #24]
 8009156:	ebaa 0303 	sub.w	r3, sl, r3
 800915a:	4599      	cmp	r9, r3
 800915c:	bfa8      	it	ge
 800915e:	4699      	movge	r9, r3
 8009160:	f1b9 0f00 	cmp.w	r9, #0
 8009164:	dc33      	bgt.n	80091ce <_printf_float+0x396>
 8009166:	f04f 0800 	mov.w	r8, #0
 800916a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800916e:	f104 0b1a 	add.w	fp, r4, #26
 8009172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009174:	ebaa 0303 	sub.w	r3, sl, r3
 8009178:	eba3 0309 	sub.w	r3, r3, r9
 800917c:	4543      	cmp	r3, r8
 800917e:	f77f af79 	ble.w	8009074 <_printf_float+0x23c>
 8009182:	2301      	movs	r3, #1
 8009184:	465a      	mov	r2, fp
 8009186:	4631      	mov	r1, r6
 8009188:	4628      	mov	r0, r5
 800918a:	47b8      	blx	r7
 800918c:	3001      	adds	r0, #1
 800918e:	f43f aeae 	beq.w	8008eee <_printf_float+0xb6>
 8009192:	f108 0801 	add.w	r8, r8, #1
 8009196:	e7ec      	b.n	8009172 <_printf_float+0x33a>
 8009198:	4642      	mov	r2, r8
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	d1c2      	bne.n	800912a <_printf_float+0x2f2>
 80091a4:	e6a3      	b.n	8008eee <_printf_float+0xb6>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4631      	mov	r1, r6
 80091aa:	4628      	mov	r0, r5
 80091ac:	9206      	str	r2, [sp, #24]
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	f43f ae9c 	beq.w	8008eee <_printf_float+0xb6>
 80091b6:	9a06      	ldr	r2, [sp, #24]
 80091b8:	f10b 0b01 	add.w	fp, fp, #1
 80091bc:	e7bb      	b.n	8009136 <_printf_float+0x2fe>
 80091be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091c2:	4631      	mov	r1, r6
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b8      	blx	r7
 80091c8:	3001      	adds	r0, #1
 80091ca:	d1c0      	bne.n	800914e <_printf_float+0x316>
 80091cc:	e68f      	b.n	8008eee <_printf_float+0xb6>
 80091ce:	9a06      	ldr	r2, [sp, #24]
 80091d0:	464b      	mov	r3, r9
 80091d2:	4442      	add	r2, r8
 80091d4:	4631      	mov	r1, r6
 80091d6:	4628      	mov	r0, r5
 80091d8:	47b8      	blx	r7
 80091da:	3001      	adds	r0, #1
 80091dc:	d1c3      	bne.n	8009166 <_printf_float+0x32e>
 80091de:	e686      	b.n	8008eee <_printf_float+0xb6>
 80091e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091e4:	f1ba 0f01 	cmp.w	sl, #1
 80091e8:	dc01      	bgt.n	80091ee <_printf_float+0x3b6>
 80091ea:	07db      	lsls	r3, r3, #31
 80091ec:	d536      	bpl.n	800925c <_printf_float+0x424>
 80091ee:	2301      	movs	r3, #1
 80091f0:	4642      	mov	r2, r8
 80091f2:	4631      	mov	r1, r6
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	f43f ae78 	beq.w	8008eee <_printf_float+0xb6>
 80091fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	f43f ae70 	beq.w	8008eee <_printf_float+0xb6>
 800920e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009212:	2200      	movs	r2, #0
 8009214:	2300      	movs	r3, #0
 8009216:	f10a 3aff 	add.w	sl, sl, #4294967295
 800921a:	f7f7 fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800921e:	b9c0      	cbnz	r0, 8009252 <_printf_float+0x41a>
 8009220:	4653      	mov	r3, sl
 8009222:	f108 0201 	add.w	r2, r8, #1
 8009226:	4631      	mov	r1, r6
 8009228:	4628      	mov	r0, r5
 800922a:	47b8      	blx	r7
 800922c:	3001      	adds	r0, #1
 800922e:	d10c      	bne.n	800924a <_printf_float+0x412>
 8009230:	e65d      	b.n	8008eee <_printf_float+0xb6>
 8009232:	2301      	movs	r3, #1
 8009234:	465a      	mov	r2, fp
 8009236:	4631      	mov	r1, r6
 8009238:	4628      	mov	r0, r5
 800923a:	47b8      	blx	r7
 800923c:	3001      	adds	r0, #1
 800923e:	f43f ae56 	beq.w	8008eee <_printf_float+0xb6>
 8009242:	f108 0801 	add.w	r8, r8, #1
 8009246:	45d0      	cmp	r8, sl
 8009248:	dbf3      	blt.n	8009232 <_printf_float+0x3fa>
 800924a:	464b      	mov	r3, r9
 800924c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009250:	e6df      	b.n	8009012 <_printf_float+0x1da>
 8009252:	f04f 0800 	mov.w	r8, #0
 8009256:	f104 0b1a 	add.w	fp, r4, #26
 800925a:	e7f4      	b.n	8009246 <_printf_float+0x40e>
 800925c:	2301      	movs	r3, #1
 800925e:	4642      	mov	r2, r8
 8009260:	e7e1      	b.n	8009226 <_printf_float+0x3ee>
 8009262:	2301      	movs	r3, #1
 8009264:	464a      	mov	r2, r9
 8009266:	4631      	mov	r1, r6
 8009268:	4628      	mov	r0, r5
 800926a:	47b8      	blx	r7
 800926c:	3001      	adds	r0, #1
 800926e:	f43f ae3e 	beq.w	8008eee <_printf_float+0xb6>
 8009272:	f108 0801 	add.w	r8, r8, #1
 8009276:	68e3      	ldr	r3, [r4, #12]
 8009278:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800927a:	1a5b      	subs	r3, r3, r1
 800927c:	4543      	cmp	r3, r8
 800927e:	dcf0      	bgt.n	8009262 <_printf_float+0x42a>
 8009280:	e6fc      	b.n	800907c <_printf_float+0x244>
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	f104 0919 	add.w	r9, r4, #25
 800928a:	e7f4      	b.n	8009276 <_printf_float+0x43e>

0800928c <_printf_common>:
 800928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	4616      	mov	r6, r2
 8009292:	4698      	mov	r8, r3
 8009294:	688a      	ldr	r2, [r1, #8]
 8009296:	690b      	ldr	r3, [r1, #16]
 8009298:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800929c:	4293      	cmp	r3, r2
 800929e:	bfb8      	it	lt
 80092a0:	4613      	movlt	r3, r2
 80092a2:	6033      	str	r3, [r6, #0]
 80092a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80092a8:	4607      	mov	r7, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	b10a      	cbz	r2, 80092b2 <_printf_common+0x26>
 80092ae:	3301      	adds	r3, #1
 80092b0:	6033      	str	r3, [r6, #0]
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	0699      	lsls	r1, r3, #26
 80092b6:	bf42      	ittt	mi
 80092b8:	6833      	ldrmi	r3, [r6, #0]
 80092ba:	3302      	addmi	r3, #2
 80092bc:	6033      	strmi	r3, [r6, #0]
 80092be:	6825      	ldr	r5, [r4, #0]
 80092c0:	f015 0506 	ands.w	r5, r5, #6
 80092c4:	d106      	bne.n	80092d4 <_printf_common+0x48>
 80092c6:	f104 0a19 	add.w	sl, r4, #25
 80092ca:	68e3      	ldr	r3, [r4, #12]
 80092cc:	6832      	ldr	r2, [r6, #0]
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	42ab      	cmp	r3, r5
 80092d2:	dc26      	bgt.n	8009322 <_printf_common+0x96>
 80092d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092d8:	6822      	ldr	r2, [r4, #0]
 80092da:	3b00      	subs	r3, #0
 80092dc:	bf18      	it	ne
 80092de:	2301      	movne	r3, #1
 80092e0:	0692      	lsls	r2, r2, #26
 80092e2:	d42b      	bmi.n	800933c <_printf_common+0xb0>
 80092e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092e8:	4641      	mov	r1, r8
 80092ea:	4638      	mov	r0, r7
 80092ec:	47c8      	blx	r9
 80092ee:	3001      	adds	r0, #1
 80092f0:	d01e      	beq.n	8009330 <_printf_common+0xa4>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	6922      	ldr	r2, [r4, #16]
 80092f6:	f003 0306 	and.w	r3, r3, #6
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	bf02      	ittt	eq
 80092fe:	68e5      	ldreq	r5, [r4, #12]
 8009300:	6833      	ldreq	r3, [r6, #0]
 8009302:	1aed      	subeq	r5, r5, r3
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	bf0c      	ite	eq
 8009308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800930c:	2500      	movne	r5, #0
 800930e:	4293      	cmp	r3, r2
 8009310:	bfc4      	itt	gt
 8009312:	1a9b      	subgt	r3, r3, r2
 8009314:	18ed      	addgt	r5, r5, r3
 8009316:	2600      	movs	r6, #0
 8009318:	341a      	adds	r4, #26
 800931a:	42b5      	cmp	r5, r6
 800931c:	d11a      	bne.n	8009354 <_printf_common+0xc8>
 800931e:	2000      	movs	r0, #0
 8009320:	e008      	b.n	8009334 <_printf_common+0xa8>
 8009322:	2301      	movs	r3, #1
 8009324:	4652      	mov	r2, sl
 8009326:	4641      	mov	r1, r8
 8009328:	4638      	mov	r0, r7
 800932a:	47c8      	blx	r9
 800932c:	3001      	adds	r0, #1
 800932e:	d103      	bne.n	8009338 <_printf_common+0xac>
 8009330:	f04f 30ff 	mov.w	r0, #4294967295
 8009334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009338:	3501      	adds	r5, #1
 800933a:	e7c6      	b.n	80092ca <_printf_common+0x3e>
 800933c:	18e1      	adds	r1, r4, r3
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	2030      	movs	r0, #48	@ 0x30
 8009342:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009346:	4422      	add	r2, r4
 8009348:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800934c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009350:	3302      	adds	r3, #2
 8009352:	e7c7      	b.n	80092e4 <_printf_common+0x58>
 8009354:	2301      	movs	r3, #1
 8009356:	4622      	mov	r2, r4
 8009358:	4641      	mov	r1, r8
 800935a:	4638      	mov	r0, r7
 800935c:	47c8      	blx	r9
 800935e:	3001      	adds	r0, #1
 8009360:	d0e6      	beq.n	8009330 <_printf_common+0xa4>
 8009362:	3601      	adds	r6, #1
 8009364:	e7d9      	b.n	800931a <_printf_common+0x8e>
	...

08009368 <_printf_i>:
 8009368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800936c:	7e0f      	ldrb	r7, [r1, #24]
 800936e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009370:	2f78      	cmp	r7, #120	@ 0x78
 8009372:	4691      	mov	r9, r2
 8009374:	4680      	mov	r8, r0
 8009376:	460c      	mov	r4, r1
 8009378:	469a      	mov	sl, r3
 800937a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800937e:	d807      	bhi.n	8009390 <_printf_i+0x28>
 8009380:	2f62      	cmp	r7, #98	@ 0x62
 8009382:	d80a      	bhi.n	800939a <_printf_i+0x32>
 8009384:	2f00      	cmp	r7, #0
 8009386:	f000 80d2 	beq.w	800952e <_printf_i+0x1c6>
 800938a:	2f58      	cmp	r7, #88	@ 0x58
 800938c:	f000 80b9 	beq.w	8009502 <_printf_i+0x19a>
 8009390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009394:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009398:	e03a      	b.n	8009410 <_printf_i+0xa8>
 800939a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800939e:	2b15      	cmp	r3, #21
 80093a0:	d8f6      	bhi.n	8009390 <_printf_i+0x28>
 80093a2:	a101      	add	r1, pc, #4	@ (adr r1, 80093a8 <_printf_i+0x40>)
 80093a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093a8:	08009401 	.word	0x08009401
 80093ac:	08009415 	.word	0x08009415
 80093b0:	08009391 	.word	0x08009391
 80093b4:	08009391 	.word	0x08009391
 80093b8:	08009391 	.word	0x08009391
 80093bc:	08009391 	.word	0x08009391
 80093c0:	08009415 	.word	0x08009415
 80093c4:	08009391 	.word	0x08009391
 80093c8:	08009391 	.word	0x08009391
 80093cc:	08009391 	.word	0x08009391
 80093d0:	08009391 	.word	0x08009391
 80093d4:	08009515 	.word	0x08009515
 80093d8:	0800943f 	.word	0x0800943f
 80093dc:	080094cf 	.word	0x080094cf
 80093e0:	08009391 	.word	0x08009391
 80093e4:	08009391 	.word	0x08009391
 80093e8:	08009537 	.word	0x08009537
 80093ec:	08009391 	.word	0x08009391
 80093f0:	0800943f 	.word	0x0800943f
 80093f4:	08009391 	.word	0x08009391
 80093f8:	08009391 	.word	0x08009391
 80093fc:	080094d7 	.word	0x080094d7
 8009400:	6833      	ldr	r3, [r6, #0]
 8009402:	1d1a      	adds	r2, r3, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6032      	str	r2, [r6, #0]
 8009408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800940c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009410:	2301      	movs	r3, #1
 8009412:	e09d      	b.n	8009550 <_printf_i+0x1e8>
 8009414:	6833      	ldr	r3, [r6, #0]
 8009416:	6820      	ldr	r0, [r4, #0]
 8009418:	1d19      	adds	r1, r3, #4
 800941a:	6031      	str	r1, [r6, #0]
 800941c:	0606      	lsls	r6, r0, #24
 800941e:	d501      	bpl.n	8009424 <_printf_i+0xbc>
 8009420:	681d      	ldr	r5, [r3, #0]
 8009422:	e003      	b.n	800942c <_printf_i+0xc4>
 8009424:	0645      	lsls	r5, r0, #25
 8009426:	d5fb      	bpl.n	8009420 <_printf_i+0xb8>
 8009428:	f9b3 5000 	ldrsh.w	r5, [r3]
 800942c:	2d00      	cmp	r5, #0
 800942e:	da03      	bge.n	8009438 <_printf_i+0xd0>
 8009430:	232d      	movs	r3, #45	@ 0x2d
 8009432:	426d      	negs	r5, r5
 8009434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009438:	4859      	ldr	r0, [pc, #356]	@ (80095a0 <_printf_i+0x238>)
 800943a:	230a      	movs	r3, #10
 800943c:	e011      	b.n	8009462 <_printf_i+0xfa>
 800943e:	6821      	ldr	r1, [r4, #0]
 8009440:	6833      	ldr	r3, [r6, #0]
 8009442:	0608      	lsls	r0, r1, #24
 8009444:	f853 5b04 	ldr.w	r5, [r3], #4
 8009448:	d402      	bmi.n	8009450 <_printf_i+0xe8>
 800944a:	0649      	lsls	r1, r1, #25
 800944c:	bf48      	it	mi
 800944e:	b2ad      	uxthmi	r5, r5
 8009450:	2f6f      	cmp	r7, #111	@ 0x6f
 8009452:	4853      	ldr	r0, [pc, #332]	@ (80095a0 <_printf_i+0x238>)
 8009454:	6033      	str	r3, [r6, #0]
 8009456:	bf14      	ite	ne
 8009458:	230a      	movne	r3, #10
 800945a:	2308      	moveq	r3, #8
 800945c:	2100      	movs	r1, #0
 800945e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009462:	6866      	ldr	r6, [r4, #4]
 8009464:	60a6      	str	r6, [r4, #8]
 8009466:	2e00      	cmp	r6, #0
 8009468:	bfa2      	ittt	ge
 800946a:	6821      	ldrge	r1, [r4, #0]
 800946c:	f021 0104 	bicge.w	r1, r1, #4
 8009470:	6021      	strge	r1, [r4, #0]
 8009472:	b90d      	cbnz	r5, 8009478 <_printf_i+0x110>
 8009474:	2e00      	cmp	r6, #0
 8009476:	d04b      	beq.n	8009510 <_printf_i+0x1a8>
 8009478:	4616      	mov	r6, r2
 800947a:	fbb5 f1f3 	udiv	r1, r5, r3
 800947e:	fb03 5711 	mls	r7, r3, r1, r5
 8009482:	5dc7      	ldrb	r7, [r0, r7]
 8009484:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009488:	462f      	mov	r7, r5
 800948a:	42bb      	cmp	r3, r7
 800948c:	460d      	mov	r5, r1
 800948e:	d9f4      	bls.n	800947a <_printf_i+0x112>
 8009490:	2b08      	cmp	r3, #8
 8009492:	d10b      	bne.n	80094ac <_printf_i+0x144>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	07df      	lsls	r7, r3, #31
 8009498:	d508      	bpl.n	80094ac <_printf_i+0x144>
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	6861      	ldr	r1, [r4, #4]
 800949e:	4299      	cmp	r1, r3
 80094a0:	bfde      	ittt	le
 80094a2:	2330      	movle	r3, #48	@ 0x30
 80094a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094ac:	1b92      	subs	r2, r2, r6
 80094ae:	6122      	str	r2, [r4, #16]
 80094b0:	f8cd a000 	str.w	sl, [sp]
 80094b4:	464b      	mov	r3, r9
 80094b6:	aa03      	add	r2, sp, #12
 80094b8:	4621      	mov	r1, r4
 80094ba:	4640      	mov	r0, r8
 80094bc:	f7ff fee6 	bl	800928c <_printf_common>
 80094c0:	3001      	adds	r0, #1
 80094c2:	d14a      	bne.n	800955a <_printf_i+0x1f2>
 80094c4:	f04f 30ff 	mov.w	r0, #4294967295
 80094c8:	b004      	add	sp, #16
 80094ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	f043 0320 	orr.w	r3, r3, #32
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	4833      	ldr	r0, [pc, #204]	@ (80095a4 <_printf_i+0x23c>)
 80094d8:	2778      	movs	r7, #120	@ 0x78
 80094da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	6831      	ldr	r1, [r6, #0]
 80094e2:	061f      	lsls	r7, r3, #24
 80094e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80094e8:	d402      	bmi.n	80094f0 <_printf_i+0x188>
 80094ea:	065f      	lsls	r7, r3, #25
 80094ec:	bf48      	it	mi
 80094ee:	b2ad      	uxthmi	r5, r5
 80094f0:	6031      	str	r1, [r6, #0]
 80094f2:	07d9      	lsls	r1, r3, #31
 80094f4:	bf44      	itt	mi
 80094f6:	f043 0320 	orrmi.w	r3, r3, #32
 80094fa:	6023      	strmi	r3, [r4, #0]
 80094fc:	b11d      	cbz	r5, 8009506 <_printf_i+0x19e>
 80094fe:	2310      	movs	r3, #16
 8009500:	e7ac      	b.n	800945c <_printf_i+0xf4>
 8009502:	4827      	ldr	r0, [pc, #156]	@ (80095a0 <_printf_i+0x238>)
 8009504:	e7e9      	b.n	80094da <_printf_i+0x172>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	f023 0320 	bic.w	r3, r3, #32
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	e7f6      	b.n	80094fe <_printf_i+0x196>
 8009510:	4616      	mov	r6, r2
 8009512:	e7bd      	b.n	8009490 <_printf_i+0x128>
 8009514:	6833      	ldr	r3, [r6, #0]
 8009516:	6825      	ldr	r5, [r4, #0]
 8009518:	6961      	ldr	r1, [r4, #20]
 800951a:	1d18      	adds	r0, r3, #4
 800951c:	6030      	str	r0, [r6, #0]
 800951e:	062e      	lsls	r6, r5, #24
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	d501      	bpl.n	8009528 <_printf_i+0x1c0>
 8009524:	6019      	str	r1, [r3, #0]
 8009526:	e002      	b.n	800952e <_printf_i+0x1c6>
 8009528:	0668      	lsls	r0, r5, #25
 800952a:	d5fb      	bpl.n	8009524 <_printf_i+0x1bc>
 800952c:	8019      	strh	r1, [r3, #0]
 800952e:	2300      	movs	r3, #0
 8009530:	6123      	str	r3, [r4, #16]
 8009532:	4616      	mov	r6, r2
 8009534:	e7bc      	b.n	80094b0 <_printf_i+0x148>
 8009536:	6833      	ldr	r3, [r6, #0]
 8009538:	1d1a      	adds	r2, r3, #4
 800953a:	6032      	str	r2, [r6, #0]
 800953c:	681e      	ldr	r6, [r3, #0]
 800953e:	6862      	ldr	r2, [r4, #4]
 8009540:	2100      	movs	r1, #0
 8009542:	4630      	mov	r0, r6
 8009544:	f7f6 fe44 	bl	80001d0 <memchr>
 8009548:	b108      	cbz	r0, 800954e <_printf_i+0x1e6>
 800954a:	1b80      	subs	r0, r0, r6
 800954c:	6060      	str	r0, [r4, #4]
 800954e:	6863      	ldr	r3, [r4, #4]
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	2300      	movs	r3, #0
 8009554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009558:	e7aa      	b.n	80094b0 <_printf_i+0x148>
 800955a:	6923      	ldr	r3, [r4, #16]
 800955c:	4632      	mov	r2, r6
 800955e:	4649      	mov	r1, r9
 8009560:	4640      	mov	r0, r8
 8009562:	47d0      	blx	sl
 8009564:	3001      	adds	r0, #1
 8009566:	d0ad      	beq.n	80094c4 <_printf_i+0x15c>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	079b      	lsls	r3, r3, #30
 800956c:	d413      	bmi.n	8009596 <_printf_i+0x22e>
 800956e:	68e0      	ldr	r0, [r4, #12]
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	4298      	cmp	r0, r3
 8009574:	bfb8      	it	lt
 8009576:	4618      	movlt	r0, r3
 8009578:	e7a6      	b.n	80094c8 <_printf_i+0x160>
 800957a:	2301      	movs	r3, #1
 800957c:	4632      	mov	r2, r6
 800957e:	4649      	mov	r1, r9
 8009580:	4640      	mov	r0, r8
 8009582:	47d0      	blx	sl
 8009584:	3001      	adds	r0, #1
 8009586:	d09d      	beq.n	80094c4 <_printf_i+0x15c>
 8009588:	3501      	adds	r5, #1
 800958a:	68e3      	ldr	r3, [r4, #12]
 800958c:	9903      	ldr	r1, [sp, #12]
 800958e:	1a5b      	subs	r3, r3, r1
 8009590:	42ab      	cmp	r3, r5
 8009592:	dcf2      	bgt.n	800957a <_printf_i+0x212>
 8009594:	e7eb      	b.n	800956e <_printf_i+0x206>
 8009596:	2500      	movs	r5, #0
 8009598:	f104 0619 	add.w	r6, r4, #25
 800959c:	e7f5      	b.n	800958a <_printf_i+0x222>
 800959e:	bf00      	nop
 80095a0:	0800d7b2 	.word	0x0800d7b2
 80095a4:	0800d7c3 	.word	0x0800d7c3

080095a8 <_scanf_float>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	b087      	sub	sp, #28
 80095ae:	4617      	mov	r7, r2
 80095b0:	9303      	str	r3, [sp, #12]
 80095b2:	688b      	ldr	r3, [r1, #8]
 80095b4:	1e5a      	subs	r2, r3, #1
 80095b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80095ba:	bf81      	itttt	hi
 80095bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80095c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80095c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80095c8:	608b      	strhi	r3, [r1, #8]
 80095ca:	680b      	ldr	r3, [r1, #0]
 80095cc:	460a      	mov	r2, r1
 80095ce:	f04f 0500 	mov.w	r5, #0
 80095d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80095d6:	f842 3b1c 	str.w	r3, [r2], #28
 80095da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80095de:	4680      	mov	r8, r0
 80095e0:	460c      	mov	r4, r1
 80095e2:	bf98      	it	ls
 80095e4:	f04f 0b00 	movls.w	fp, #0
 80095e8:	9201      	str	r2, [sp, #4]
 80095ea:	4616      	mov	r6, r2
 80095ec:	46aa      	mov	sl, r5
 80095ee:	46a9      	mov	r9, r5
 80095f0:	9502      	str	r5, [sp, #8]
 80095f2:	68a2      	ldr	r2, [r4, #8]
 80095f4:	b152      	cbz	r2, 800960c <_scanf_float+0x64>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80095fc:	d864      	bhi.n	80096c8 <_scanf_float+0x120>
 80095fe:	2b40      	cmp	r3, #64	@ 0x40
 8009600:	d83c      	bhi.n	800967c <_scanf_float+0xd4>
 8009602:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009606:	b2c8      	uxtb	r0, r1
 8009608:	280e      	cmp	r0, #14
 800960a:	d93a      	bls.n	8009682 <_scanf_float+0xda>
 800960c:	f1b9 0f00 	cmp.w	r9, #0
 8009610:	d003      	beq.n	800961a <_scanf_float+0x72>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800961e:	f1ba 0f01 	cmp.w	sl, #1
 8009622:	f200 8117 	bhi.w	8009854 <_scanf_float+0x2ac>
 8009626:	9b01      	ldr	r3, [sp, #4]
 8009628:	429e      	cmp	r6, r3
 800962a:	f200 8108 	bhi.w	800983e <_scanf_float+0x296>
 800962e:	2001      	movs	r0, #1
 8009630:	b007      	add	sp, #28
 8009632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009636:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800963a:	2a0d      	cmp	r2, #13
 800963c:	d8e6      	bhi.n	800960c <_scanf_float+0x64>
 800963e:	a101      	add	r1, pc, #4	@ (adr r1, 8009644 <_scanf_float+0x9c>)
 8009640:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009644:	0800978b 	.word	0x0800978b
 8009648:	0800960d 	.word	0x0800960d
 800964c:	0800960d 	.word	0x0800960d
 8009650:	0800960d 	.word	0x0800960d
 8009654:	080097eb 	.word	0x080097eb
 8009658:	080097c3 	.word	0x080097c3
 800965c:	0800960d 	.word	0x0800960d
 8009660:	0800960d 	.word	0x0800960d
 8009664:	08009799 	.word	0x08009799
 8009668:	0800960d 	.word	0x0800960d
 800966c:	0800960d 	.word	0x0800960d
 8009670:	0800960d 	.word	0x0800960d
 8009674:	0800960d 	.word	0x0800960d
 8009678:	08009751 	.word	0x08009751
 800967c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009680:	e7db      	b.n	800963a <_scanf_float+0x92>
 8009682:	290e      	cmp	r1, #14
 8009684:	d8c2      	bhi.n	800960c <_scanf_float+0x64>
 8009686:	a001      	add	r0, pc, #4	@ (adr r0, 800968c <_scanf_float+0xe4>)
 8009688:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800968c:	08009741 	.word	0x08009741
 8009690:	0800960d 	.word	0x0800960d
 8009694:	08009741 	.word	0x08009741
 8009698:	080097d7 	.word	0x080097d7
 800969c:	0800960d 	.word	0x0800960d
 80096a0:	080096e9 	.word	0x080096e9
 80096a4:	08009727 	.word	0x08009727
 80096a8:	08009727 	.word	0x08009727
 80096ac:	08009727 	.word	0x08009727
 80096b0:	08009727 	.word	0x08009727
 80096b4:	08009727 	.word	0x08009727
 80096b8:	08009727 	.word	0x08009727
 80096bc:	08009727 	.word	0x08009727
 80096c0:	08009727 	.word	0x08009727
 80096c4:	08009727 	.word	0x08009727
 80096c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80096ca:	d809      	bhi.n	80096e0 <_scanf_float+0x138>
 80096cc:	2b60      	cmp	r3, #96	@ 0x60
 80096ce:	d8b2      	bhi.n	8009636 <_scanf_float+0x8e>
 80096d0:	2b54      	cmp	r3, #84	@ 0x54
 80096d2:	d07b      	beq.n	80097cc <_scanf_float+0x224>
 80096d4:	2b59      	cmp	r3, #89	@ 0x59
 80096d6:	d199      	bne.n	800960c <_scanf_float+0x64>
 80096d8:	2d07      	cmp	r5, #7
 80096da:	d197      	bne.n	800960c <_scanf_float+0x64>
 80096dc:	2508      	movs	r5, #8
 80096de:	e02c      	b.n	800973a <_scanf_float+0x192>
 80096e0:	2b74      	cmp	r3, #116	@ 0x74
 80096e2:	d073      	beq.n	80097cc <_scanf_float+0x224>
 80096e4:	2b79      	cmp	r3, #121	@ 0x79
 80096e6:	e7f6      	b.n	80096d6 <_scanf_float+0x12e>
 80096e8:	6821      	ldr	r1, [r4, #0]
 80096ea:	05c8      	lsls	r0, r1, #23
 80096ec:	d51b      	bpl.n	8009726 <_scanf_float+0x17e>
 80096ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80096f2:	6021      	str	r1, [r4, #0]
 80096f4:	f109 0901 	add.w	r9, r9, #1
 80096f8:	f1bb 0f00 	cmp.w	fp, #0
 80096fc:	d003      	beq.n	8009706 <_scanf_float+0x15e>
 80096fe:	3201      	adds	r2, #1
 8009700:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009704:	60a2      	str	r2, [r4, #8]
 8009706:	68a3      	ldr	r3, [r4, #8]
 8009708:	3b01      	subs	r3, #1
 800970a:	60a3      	str	r3, [r4, #8]
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	3301      	adds	r3, #1
 8009710:	6123      	str	r3, [r4, #16]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	3b01      	subs	r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	607b      	str	r3, [r7, #4]
 800971a:	f340 8087 	ble.w	800982c <_scanf_float+0x284>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	3301      	adds	r3, #1
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	e765      	b.n	80095f2 <_scanf_float+0x4a>
 8009726:	eb1a 0105 	adds.w	r1, sl, r5
 800972a:	f47f af6f 	bne.w	800960c <_scanf_float+0x64>
 800972e:	6822      	ldr	r2, [r4, #0]
 8009730:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009734:	6022      	str	r2, [r4, #0]
 8009736:	460d      	mov	r5, r1
 8009738:	468a      	mov	sl, r1
 800973a:	f806 3b01 	strb.w	r3, [r6], #1
 800973e:	e7e2      	b.n	8009706 <_scanf_float+0x15e>
 8009740:	6822      	ldr	r2, [r4, #0]
 8009742:	0610      	lsls	r0, r2, #24
 8009744:	f57f af62 	bpl.w	800960c <_scanf_float+0x64>
 8009748:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800974c:	6022      	str	r2, [r4, #0]
 800974e:	e7f4      	b.n	800973a <_scanf_float+0x192>
 8009750:	f1ba 0f00 	cmp.w	sl, #0
 8009754:	d10e      	bne.n	8009774 <_scanf_float+0x1cc>
 8009756:	f1b9 0f00 	cmp.w	r9, #0
 800975a:	d10e      	bne.n	800977a <_scanf_float+0x1d2>
 800975c:	6822      	ldr	r2, [r4, #0]
 800975e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009762:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009766:	d108      	bne.n	800977a <_scanf_float+0x1d2>
 8009768:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800976c:	6022      	str	r2, [r4, #0]
 800976e:	f04f 0a01 	mov.w	sl, #1
 8009772:	e7e2      	b.n	800973a <_scanf_float+0x192>
 8009774:	f1ba 0f02 	cmp.w	sl, #2
 8009778:	d055      	beq.n	8009826 <_scanf_float+0x27e>
 800977a:	2d01      	cmp	r5, #1
 800977c:	d002      	beq.n	8009784 <_scanf_float+0x1dc>
 800977e:	2d04      	cmp	r5, #4
 8009780:	f47f af44 	bne.w	800960c <_scanf_float+0x64>
 8009784:	3501      	adds	r5, #1
 8009786:	b2ed      	uxtb	r5, r5
 8009788:	e7d7      	b.n	800973a <_scanf_float+0x192>
 800978a:	f1ba 0f01 	cmp.w	sl, #1
 800978e:	f47f af3d 	bne.w	800960c <_scanf_float+0x64>
 8009792:	f04f 0a02 	mov.w	sl, #2
 8009796:	e7d0      	b.n	800973a <_scanf_float+0x192>
 8009798:	b97d      	cbnz	r5, 80097ba <_scanf_float+0x212>
 800979a:	f1b9 0f00 	cmp.w	r9, #0
 800979e:	f47f af38 	bne.w	8009612 <_scanf_float+0x6a>
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80097a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80097ac:	f040 8108 	bne.w	80099c0 <_scanf_float+0x418>
 80097b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80097b4:	6022      	str	r2, [r4, #0]
 80097b6:	2501      	movs	r5, #1
 80097b8:	e7bf      	b.n	800973a <_scanf_float+0x192>
 80097ba:	2d03      	cmp	r5, #3
 80097bc:	d0e2      	beq.n	8009784 <_scanf_float+0x1dc>
 80097be:	2d05      	cmp	r5, #5
 80097c0:	e7de      	b.n	8009780 <_scanf_float+0x1d8>
 80097c2:	2d02      	cmp	r5, #2
 80097c4:	f47f af22 	bne.w	800960c <_scanf_float+0x64>
 80097c8:	2503      	movs	r5, #3
 80097ca:	e7b6      	b.n	800973a <_scanf_float+0x192>
 80097cc:	2d06      	cmp	r5, #6
 80097ce:	f47f af1d 	bne.w	800960c <_scanf_float+0x64>
 80097d2:	2507      	movs	r5, #7
 80097d4:	e7b1      	b.n	800973a <_scanf_float+0x192>
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	0591      	lsls	r1, r2, #22
 80097da:	f57f af17 	bpl.w	800960c <_scanf_float+0x64>
 80097de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80097e2:	6022      	str	r2, [r4, #0]
 80097e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80097e8:	e7a7      	b.n	800973a <_scanf_float+0x192>
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80097f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80097f4:	d006      	beq.n	8009804 <_scanf_float+0x25c>
 80097f6:	0550      	lsls	r0, r2, #21
 80097f8:	f57f af08 	bpl.w	800960c <_scanf_float+0x64>
 80097fc:	f1b9 0f00 	cmp.w	r9, #0
 8009800:	f000 80de 	beq.w	80099c0 <_scanf_float+0x418>
 8009804:	0591      	lsls	r1, r2, #22
 8009806:	bf58      	it	pl
 8009808:	9902      	ldrpl	r1, [sp, #8]
 800980a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800980e:	bf58      	it	pl
 8009810:	eba9 0101 	subpl.w	r1, r9, r1
 8009814:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009818:	bf58      	it	pl
 800981a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800981e:	6022      	str	r2, [r4, #0]
 8009820:	f04f 0900 	mov.w	r9, #0
 8009824:	e789      	b.n	800973a <_scanf_float+0x192>
 8009826:	f04f 0a03 	mov.w	sl, #3
 800982a:	e786      	b.n	800973a <_scanf_float+0x192>
 800982c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009830:	4639      	mov	r1, r7
 8009832:	4640      	mov	r0, r8
 8009834:	4798      	blx	r3
 8009836:	2800      	cmp	r0, #0
 8009838:	f43f aedb 	beq.w	80095f2 <_scanf_float+0x4a>
 800983c:	e6e6      	b.n	800960c <_scanf_float+0x64>
 800983e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009846:	463a      	mov	r2, r7
 8009848:	4640      	mov	r0, r8
 800984a:	4798      	blx	r3
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	3b01      	subs	r3, #1
 8009850:	6123      	str	r3, [r4, #16]
 8009852:	e6e8      	b.n	8009626 <_scanf_float+0x7e>
 8009854:	1e6b      	subs	r3, r5, #1
 8009856:	2b06      	cmp	r3, #6
 8009858:	d824      	bhi.n	80098a4 <_scanf_float+0x2fc>
 800985a:	2d02      	cmp	r5, #2
 800985c:	d836      	bhi.n	80098cc <_scanf_float+0x324>
 800985e:	9b01      	ldr	r3, [sp, #4]
 8009860:	429e      	cmp	r6, r3
 8009862:	f67f aee4 	bls.w	800962e <_scanf_float+0x86>
 8009866:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800986a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800986e:	463a      	mov	r2, r7
 8009870:	4640      	mov	r0, r8
 8009872:	4798      	blx	r3
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	3b01      	subs	r3, #1
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	e7f0      	b.n	800985e <_scanf_float+0x2b6>
 800987c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009880:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009884:	463a      	mov	r2, r7
 8009886:	4640      	mov	r0, r8
 8009888:	4798      	blx	r3
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	3b01      	subs	r3, #1
 800988e:	6123      	str	r3, [r4, #16]
 8009890:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009894:	fa5f fa8a 	uxtb.w	sl, sl
 8009898:	f1ba 0f02 	cmp.w	sl, #2
 800989c:	d1ee      	bne.n	800987c <_scanf_float+0x2d4>
 800989e:	3d03      	subs	r5, #3
 80098a0:	b2ed      	uxtb	r5, r5
 80098a2:	1b76      	subs	r6, r6, r5
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	05da      	lsls	r2, r3, #23
 80098a8:	d530      	bpl.n	800990c <_scanf_float+0x364>
 80098aa:	055b      	lsls	r3, r3, #21
 80098ac:	d511      	bpl.n	80098d2 <_scanf_float+0x32a>
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	429e      	cmp	r6, r3
 80098b2:	f67f aebc 	bls.w	800962e <_scanf_float+0x86>
 80098b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098be:	463a      	mov	r2, r7
 80098c0:	4640      	mov	r0, r8
 80098c2:	4798      	blx	r3
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	6123      	str	r3, [r4, #16]
 80098ca:	e7f0      	b.n	80098ae <_scanf_float+0x306>
 80098cc:	46aa      	mov	sl, r5
 80098ce:	46b3      	mov	fp, r6
 80098d0:	e7de      	b.n	8009890 <_scanf_float+0x2e8>
 80098d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80098d6:	6923      	ldr	r3, [r4, #16]
 80098d8:	2965      	cmp	r1, #101	@ 0x65
 80098da:	f103 33ff 	add.w	r3, r3, #4294967295
 80098de:	f106 35ff 	add.w	r5, r6, #4294967295
 80098e2:	6123      	str	r3, [r4, #16]
 80098e4:	d00c      	beq.n	8009900 <_scanf_float+0x358>
 80098e6:	2945      	cmp	r1, #69	@ 0x45
 80098e8:	d00a      	beq.n	8009900 <_scanf_float+0x358>
 80098ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098ee:	463a      	mov	r2, r7
 80098f0:	4640      	mov	r0, r8
 80098f2:	4798      	blx	r3
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	1eb5      	subs	r5, r6, #2
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009904:	463a      	mov	r2, r7
 8009906:	4640      	mov	r0, r8
 8009908:	4798      	blx	r3
 800990a:	462e      	mov	r6, r5
 800990c:	6822      	ldr	r2, [r4, #0]
 800990e:	f012 0210 	ands.w	r2, r2, #16
 8009912:	d001      	beq.n	8009918 <_scanf_float+0x370>
 8009914:	2000      	movs	r0, #0
 8009916:	e68b      	b.n	8009630 <_scanf_float+0x88>
 8009918:	7032      	strb	r2, [r6, #0]
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009924:	d11c      	bne.n	8009960 <_scanf_float+0x3b8>
 8009926:	9b02      	ldr	r3, [sp, #8]
 8009928:	454b      	cmp	r3, r9
 800992a:	eba3 0209 	sub.w	r2, r3, r9
 800992e:	d123      	bne.n	8009978 <_scanf_float+0x3d0>
 8009930:	9901      	ldr	r1, [sp, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	4640      	mov	r0, r8
 8009936:	f002 fd13 	bl	800c360 <_strtod_r>
 800993a:	9b03      	ldr	r3, [sp, #12]
 800993c:	6821      	ldr	r1, [r4, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f011 0f02 	tst.w	r1, #2
 8009944:	ec57 6b10 	vmov	r6, r7, d0
 8009948:	f103 0204 	add.w	r2, r3, #4
 800994c:	d01f      	beq.n	800998e <_scanf_float+0x3e6>
 800994e:	9903      	ldr	r1, [sp, #12]
 8009950:	600a      	str	r2, [r1, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	e9c3 6700 	strd	r6, r7, [r3]
 8009958:	68e3      	ldr	r3, [r4, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60e3      	str	r3, [r4, #12]
 800995e:	e7d9      	b.n	8009914 <_scanf_float+0x36c>
 8009960:	9b04      	ldr	r3, [sp, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0e4      	beq.n	8009930 <_scanf_float+0x388>
 8009966:	9905      	ldr	r1, [sp, #20]
 8009968:	230a      	movs	r3, #10
 800996a:	3101      	adds	r1, #1
 800996c:	4640      	mov	r0, r8
 800996e:	f002 fd77 	bl	800c460 <_strtol_r>
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	9e05      	ldr	r6, [sp, #20]
 8009976:	1ac2      	subs	r2, r0, r3
 8009978:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800997c:	429e      	cmp	r6, r3
 800997e:	bf28      	it	cs
 8009980:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009984:	4910      	ldr	r1, [pc, #64]	@ (80099c8 <_scanf_float+0x420>)
 8009986:	4630      	mov	r0, r6
 8009988:	f000 f95c 	bl	8009c44 <siprintf>
 800998c:	e7d0      	b.n	8009930 <_scanf_float+0x388>
 800998e:	f011 0f04 	tst.w	r1, #4
 8009992:	9903      	ldr	r1, [sp, #12]
 8009994:	600a      	str	r2, [r1, #0]
 8009996:	d1dc      	bne.n	8009952 <_scanf_float+0x3aa>
 8009998:	681d      	ldr	r5, [r3, #0]
 800999a:	4632      	mov	r2, r6
 800999c:	463b      	mov	r3, r7
 800999e:	4630      	mov	r0, r6
 80099a0:	4639      	mov	r1, r7
 80099a2:	f7f7 f8c3 	bl	8000b2c <__aeabi_dcmpun>
 80099a6:	b128      	cbz	r0, 80099b4 <_scanf_float+0x40c>
 80099a8:	4808      	ldr	r0, [pc, #32]	@ (80099cc <_scanf_float+0x424>)
 80099aa:	f000 fad1 	bl	8009f50 <nanf>
 80099ae:	ed85 0a00 	vstr	s0, [r5]
 80099b2:	e7d1      	b.n	8009958 <_scanf_float+0x3b0>
 80099b4:	4630      	mov	r0, r6
 80099b6:	4639      	mov	r1, r7
 80099b8:	f7f7 f916 	bl	8000be8 <__aeabi_d2f>
 80099bc:	6028      	str	r0, [r5, #0]
 80099be:	e7cb      	b.n	8009958 <_scanf_float+0x3b0>
 80099c0:	f04f 0900 	mov.w	r9, #0
 80099c4:	e629      	b.n	800961a <_scanf_float+0x72>
 80099c6:	bf00      	nop
 80099c8:	0800d7d4 	.word	0x0800d7d4
 80099cc:	0800db6d 	.word	0x0800db6d

080099d0 <std>:
 80099d0:	2300      	movs	r3, #0
 80099d2:	b510      	push	{r4, lr}
 80099d4:	4604      	mov	r4, r0
 80099d6:	e9c0 3300 	strd	r3, r3, [r0]
 80099da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099de:	6083      	str	r3, [r0, #8]
 80099e0:	8181      	strh	r1, [r0, #12]
 80099e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80099e4:	81c2      	strh	r2, [r0, #14]
 80099e6:	6183      	str	r3, [r0, #24]
 80099e8:	4619      	mov	r1, r3
 80099ea:	2208      	movs	r2, #8
 80099ec:	305c      	adds	r0, #92	@ 0x5c
 80099ee:	f000 fa21 	bl	8009e34 <memset>
 80099f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a28 <std+0x58>)
 80099f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80099f6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a2c <std+0x5c>)
 80099f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009a30 <std+0x60>)
 80099fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009a34 <std+0x64>)
 8009a00:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a02:	4b0d      	ldr	r3, [pc, #52]	@ (8009a38 <std+0x68>)
 8009a04:	6224      	str	r4, [r4, #32]
 8009a06:	429c      	cmp	r4, r3
 8009a08:	d006      	beq.n	8009a18 <std+0x48>
 8009a0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a0e:	4294      	cmp	r4, r2
 8009a10:	d002      	beq.n	8009a18 <std+0x48>
 8009a12:	33d0      	adds	r3, #208	@ 0xd0
 8009a14:	429c      	cmp	r4, r3
 8009a16:	d105      	bne.n	8009a24 <std+0x54>
 8009a18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a20:	f000 ba84 	b.w	8009f2c <__retarget_lock_init_recursive>
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	bf00      	nop
 8009a28:	08009c85 	.word	0x08009c85
 8009a2c:	08009ca7 	.word	0x08009ca7
 8009a30:	08009cdf 	.word	0x08009cdf
 8009a34:	08009d03 	.word	0x08009d03
 8009a38:	20005130 	.word	0x20005130

08009a3c <stdio_exit_handler>:
 8009a3c:	4a02      	ldr	r2, [pc, #8]	@ (8009a48 <stdio_exit_handler+0xc>)
 8009a3e:	4903      	ldr	r1, [pc, #12]	@ (8009a4c <stdio_exit_handler+0x10>)
 8009a40:	4803      	ldr	r0, [pc, #12]	@ (8009a50 <stdio_exit_handler+0x14>)
 8009a42:	f000 b869 	b.w	8009b18 <_fwalk_sglue>
 8009a46:	bf00      	nop
 8009a48:	20000034 	.word	0x20000034
 8009a4c:	0800caa1 	.word	0x0800caa1
 8009a50:	20000044 	.word	0x20000044

08009a54 <cleanup_stdio>:
 8009a54:	6841      	ldr	r1, [r0, #4]
 8009a56:	4b0c      	ldr	r3, [pc, #48]	@ (8009a88 <cleanup_stdio+0x34>)
 8009a58:	4299      	cmp	r1, r3
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	d001      	beq.n	8009a64 <cleanup_stdio+0x10>
 8009a60:	f003 f81e 	bl	800caa0 <_fflush_r>
 8009a64:	68a1      	ldr	r1, [r4, #8]
 8009a66:	4b09      	ldr	r3, [pc, #36]	@ (8009a8c <cleanup_stdio+0x38>)
 8009a68:	4299      	cmp	r1, r3
 8009a6a:	d002      	beq.n	8009a72 <cleanup_stdio+0x1e>
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f003 f817 	bl	800caa0 <_fflush_r>
 8009a72:	68e1      	ldr	r1, [r4, #12]
 8009a74:	4b06      	ldr	r3, [pc, #24]	@ (8009a90 <cleanup_stdio+0x3c>)
 8009a76:	4299      	cmp	r1, r3
 8009a78:	d004      	beq.n	8009a84 <cleanup_stdio+0x30>
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a80:	f003 b80e 	b.w	800caa0 <_fflush_r>
 8009a84:	bd10      	pop	{r4, pc}
 8009a86:	bf00      	nop
 8009a88:	20005130 	.word	0x20005130
 8009a8c:	20005198 	.word	0x20005198
 8009a90:	20005200 	.word	0x20005200

08009a94 <global_stdio_init.part.0>:
 8009a94:	b510      	push	{r4, lr}
 8009a96:	4b0b      	ldr	r3, [pc, #44]	@ (8009ac4 <global_stdio_init.part.0+0x30>)
 8009a98:	4c0b      	ldr	r4, [pc, #44]	@ (8009ac8 <global_stdio_init.part.0+0x34>)
 8009a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8009acc <global_stdio_init.part.0+0x38>)
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	f7ff ff94 	bl	80099d0 <std>
 8009aa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009aac:	2201      	movs	r2, #1
 8009aae:	2109      	movs	r1, #9
 8009ab0:	f7ff ff8e 	bl	80099d0 <std>
 8009ab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ab8:	2202      	movs	r2, #2
 8009aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009abe:	2112      	movs	r1, #18
 8009ac0:	f7ff bf86 	b.w	80099d0 <std>
 8009ac4:	20005268 	.word	0x20005268
 8009ac8:	20005130 	.word	0x20005130
 8009acc:	08009a3d 	.word	0x08009a3d

08009ad0 <__sfp_lock_acquire>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	@ (8009ad8 <__sfp_lock_acquire+0x8>)
 8009ad2:	f000 ba2c 	b.w	8009f2e <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20005271 	.word	0x20005271

08009adc <__sfp_lock_release>:
 8009adc:	4801      	ldr	r0, [pc, #4]	@ (8009ae4 <__sfp_lock_release+0x8>)
 8009ade:	f000 ba27 	b.w	8009f30 <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	20005271 	.word	0x20005271

08009ae8 <__sinit>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	4604      	mov	r4, r0
 8009aec:	f7ff fff0 	bl	8009ad0 <__sfp_lock_acquire>
 8009af0:	6a23      	ldr	r3, [r4, #32]
 8009af2:	b11b      	cbz	r3, 8009afc <__sinit+0x14>
 8009af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af8:	f7ff bff0 	b.w	8009adc <__sfp_lock_release>
 8009afc:	4b04      	ldr	r3, [pc, #16]	@ (8009b10 <__sinit+0x28>)
 8009afe:	6223      	str	r3, [r4, #32]
 8009b00:	4b04      	ldr	r3, [pc, #16]	@ (8009b14 <__sinit+0x2c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1f5      	bne.n	8009af4 <__sinit+0xc>
 8009b08:	f7ff ffc4 	bl	8009a94 <global_stdio_init.part.0>
 8009b0c:	e7f2      	b.n	8009af4 <__sinit+0xc>
 8009b0e:	bf00      	nop
 8009b10:	08009a55 	.word	0x08009a55
 8009b14:	20005268 	.word	0x20005268

08009b18 <_fwalk_sglue>:
 8009b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	4688      	mov	r8, r1
 8009b20:	4614      	mov	r4, r2
 8009b22:	2600      	movs	r6, #0
 8009b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b28:	f1b9 0901 	subs.w	r9, r9, #1
 8009b2c:	d505      	bpl.n	8009b3a <_fwalk_sglue+0x22>
 8009b2e:	6824      	ldr	r4, [r4, #0]
 8009b30:	2c00      	cmp	r4, #0
 8009b32:	d1f7      	bne.n	8009b24 <_fwalk_sglue+0xc>
 8009b34:	4630      	mov	r0, r6
 8009b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d907      	bls.n	8009b50 <_fwalk_sglue+0x38>
 8009b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b44:	3301      	adds	r3, #1
 8009b46:	d003      	beq.n	8009b50 <_fwalk_sglue+0x38>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	47c0      	blx	r8
 8009b4e:	4306      	orrs	r6, r0
 8009b50:	3568      	adds	r5, #104	@ 0x68
 8009b52:	e7e9      	b.n	8009b28 <_fwalk_sglue+0x10>

08009b54 <iprintf>:
 8009b54:	b40f      	push	{r0, r1, r2, r3}
 8009b56:	b507      	push	{r0, r1, r2, lr}
 8009b58:	4906      	ldr	r1, [pc, #24]	@ (8009b74 <iprintf+0x20>)
 8009b5a:	ab04      	add	r3, sp, #16
 8009b5c:	6808      	ldr	r0, [r1, #0]
 8009b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b62:	6881      	ldr	r1, [r0, #8]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	f002 fdff 	bl	800c768 <_vfiprintf_r>
 8009b6a:	b003      	add	sp, #12
 8009b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b70:	b004      	add	sp, #16
 8009b72:	4770      	bx	lr
 8009b74:	20000040 	.word	0x20000040

08009b78 <putchar>:
 8009b78:	4b02      	ldr	r3, [pc, #8]	@ (8009b84 <putchar+0xc>)
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	6818      	ldr	r0, [r3, #0]
 8009b7e:	6882      	ldr	r2, [r0, #8]
 8009b80:	f003 b818 	b.w	800cbb4 <_putc_r>
 8009b84:	20000040 	.word	0x20000040

08009b88 <_puts_r>:
 8009b88:	6a03      	ldr	r3, [r0, #32]
 8009b8a:	b570      	push	{r4, r5, r6, lr}
 8009b8c:	6884      	ldr	r4, [r0, #8]
 8009b8e:	4605      	mov	r5, r0
 8009b90:	460e      	mov	r6, r1
 8009b92:	b90b      	cbnz	r3, 8009b98 <_puts_r+0x10>
 8009b94:	f7ff ffa8 	bl	8009ae8 <__sinit>
 8009b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b9a:	07db      	lsls	r3, r3, #31
 8009b9c:	d405      	bmi.n	8009baa <_puts_r+0x22>
 8009b9e:	89a3      	ldrh	r3, [r4, #12]
 8009ba0:	0598      	lsls	r0, r3, #22
 8009ba2:	d402      	bmi.n	8009baa <_puts_r+0x22>
 8009ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ba6:	f000 f9c2 	bl	8009f2e <__retarget_lock_acquire_recursive>
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	0719      	lsls	r1, r3, #28
 8009bae:	d502      	bpl.n	8009bb6 <_puts_r+0x2e>
 8009bb0:	6923      	ldr	r3, [r4, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d135      	bne.n	8009c22 <_puts_r+0x9a>
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 f8e5 	bl	8009d88 <__swsetup_r>
 8009bbe:	b380      	cbz	r0, 8009c22 <_puts_r+0x9a>
 8009bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8009bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bc6:	07da      	lsls	r2, r3, #31
 8009bc8:	d405      	bmi.n	8009bd6 <_puts_r+0x4e>
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	059b      	lsls	r3, r3, #22
 8009bce:	d402      	bmi.n	8009bd6 <_puts_r+0x4e>
 8009bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bd2:	f000 f9ad 	bl	8009f30 <__retarget_lock_release_recursive>
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	da04      	bge.n	8009be8 <_puts_r+0x60>
 8009bde:	69a2      	ldr	r2, [r4, #24]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	dc17      	bgt.n	8009c14 <_puts_r+0x8c>
 8009be4:	290a      	cmp	r1, #10
 8009be6:	d015      	beq.n	8009c14 <_puts_r+0x8c>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	6022      	str	r2, [r4, #0]
 8009bee:	7019      	strb	r1, [r3, #0]
 8009bf0:	68a3      	ldr	r3, [r4, #8]
 8009bf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	60a3      	str	r3, [r4, #8]
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	d1ed      	bne.n	8009bda <_puts_r+0x52>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	da11      	bge.n	8009c26 <_puts_r+0x9e>
 8009c02:	4622      	mov	r2, r4
 8009c04:	210a      	movs	r1, #10
 8009c06:	4628      	mov	r0, r5
 8009c08:	f000 f87f 	bl	8009d0a <__swbuf_r>
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d0d7      	beq.n	8009bc0 <_puts_r+0x38>
 8009c10:	250a      	movs	r5, #10
 8009c12:	e7d7      	b.n	8009bc4 <_puts_r+0x3c>
 8009c14:	4622      	mov	r2, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 f877 	bl	8009d0a <__swbuf_r>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d1e7      	bne.n	8009bf0 <_puts_r+0x68>
 8009c20:	e7ce      	b.n	8009bc0 <_puts_r+0x38>
 8009c22:	3e01      	subs	r6, #1
 8009c24:	e7e4      	b.n	8009bf0 <_puts_r+0x68>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	6022      	str	r2, [r4, #0]
 8009c2c:	220a      	movs	r2, #10
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e7ee      	b.n	8009c10 <_puts_r+0x88>
	...

08009c34 <puts>:
 8009c34:	4b02      	ldr	r3, [pc, #8]	@ (8009c40 <puts+0xc>)
 8009c36:	4601      	mov	r1, r0
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	f7ff bfa5 	b.w	8009b88 <_puts_r>
 8009c3e:	bf00      	nop
 8009c40:	20000040 	.word	0x20000040

08009c44 <siprintf>:
 8009c44:	b40e      	push	{r1, r2, r3}
 8009c46:	b500      	push	{lr}
 8009c48:	b09c      	sub	sp, #112	@ 0x70
 8009c4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009c4c:	9002      	str	r0, [sp, #8]
 8009c4e:	9006      	str	r0, [sp, #24]
 8009c50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c54:	4809      	ldr	r0, [pc, #36]	@ (8009c7c <siprintf+0x38>)
 8009c56:	9107      	str	r1, [sp, #28]
 8009c58:	9104      	str	r1, [sp, #16]
 8009c5a:	4909      	ldr	r1, [pc, #36]	@ (8009c80 <siprintf+0x3c>)
 8009c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c60:	9105      	str	r1, [sp, #20]
 8009c62:	6800      	ldr	r0, [r0, #0]
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	a902      	add	r1, sp, #8
 8009c68:	f002 fc58 	bl	800c51c <_svfiprintf_r>
 8009c6c:	9b02      	ldr	r3, [sp, #8]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	701a      	strb	r2, [r3, #0]
 8009c72:	b01c      	add	sp, #112	@ 0x70
 8009c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c78:	b003      	add	sp, #12
 8009c7a:	4770      	bx	lr
 8009c7c:	20000040 	.word	0x20000040
 8009c80:	ffff0208 	.word	0xffff0208

08009c84 <__sread>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	460c      	mov	r4, r1
 8009c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8c:	f000 f900 	bl	8009e90 <_read_r>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	bfab      	itete	ge
 8009c94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c96:	89a3      	ldrhlt	r3, [r4, #12]
 8009c98:	181b      	addge	r3, r3, r0
 8009c9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c9e:	bfac      	ite	ge
 8009ca0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ca2:	81a3      	strhlt	r3, [r4, #12]
 8009ca4:	bd10      	pop	{r4, pc}

08009ca6 <__swrite>:
 8009ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009caa:	461f      	mov	r7, r3
 8009cac:	898b      	ldrh	r3, [r1, #12]
 8009cae:	05db      	lsls	r3, r3, #23
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	4616      	mov	r6, r2
 8009cb6:	d505      	bpl.n	8009cc4 <__swrite+0x1e>
 8009cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f000 f8d4 	bl	8009e6c <_lseek_r>
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	463b      	mov	r3, r7
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cda:	f000 b8eb 	b.w	8009eb4 <_write_r>

08009cde <__sseek>:
 8009cde:	b510      	push	{r4, lr}
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce6:	f000 f8c1 	bl	8009e6c <_lseek_r>
 8009cea:	1c43      	adds	r3, r0, #1
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	bf15      	itete	ne
 8009cf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009cf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009cf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009cfa:	81a3      	strheq	r3, [r4, #12]
 8009cfc:	bf18      	it	ne
 8009cfe:	81a3      	strhne	r3, [r4, #12]
 8009d00:	bd10      	pop	{r4, pc}

08009d02 <__sclose>:
 8009d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d06:	f000 b8a1 	b.w	8009e4c <_close_r>

08009d0a <__swbuf_r>:
 8009d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0c:	460e      	mov	r6, r1
 8009d0e:	4614      	mov	r4, r2
 8009d10:	4605      	mov	r5, r0
 8009d12:	b118      	cbz	r0, 8009d1c <__swbuf_r+0x12>
 8009d14:	6a03      	ldr	r3, [r0, #32]
 8009d16:	b90b      	cbnz	r3, 8009d1c <__swbuf_r+0x12>
 8009d18:	f7ff fee6 	bl	8009ae8 <__sinit>
 8009d1c:	69a3      	ldr	r3, [r4, #24]
 8009d1e:	60a3      	str	r3, [r4, #8]
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	071a      	lsls	r2, r3, #28
 8009d24:	d501      	bpl.n	8009d2a <__swbuf_r+0x20>
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	b943      	cbnz	r3, 8009d3c <__swbuf_r+0x32>
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f000 f82b 	bl	8009d88 <__swsetup_r>
 8009d32:	b118      	cbz	r0, 8009d3c <__swbuf_r+0x32>
 8009d34:	f04f 37ff 	mov.w	r7, #4294967295
 8009d38:	4638      	mov	r0, r7
 8009d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	6922      	ldr	r2, [r4, #16]
 8009d40:	1a98      	subs	r0, r3, r2
 8009d42:	6963      	ldr	r3, [r4, #20]
 8009d44:	b2f6      	uxtb	r6, r6
 8009d46:	4283      	cmp	r3, r0
 8009d48:	4637      	mov	r7, r6
 8009d4a:	dc05      	bgt.n	8009d58 <__swbuf_r+0x4e>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f002 fea6 	bl	800caa0 <_fflush_r>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d1ed      	bne.n	8009d34 <__swbuf_r+0x2a>
 8009d58:	68a3      	ldr	r3, [r4, #8]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	60a3      	str	r3, [r4, #8]
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	1c5a      	adds	r2, r3, #1
 8009d62:	6022      	str	r2, [r4, #0]
 8009d64:	701e      	strb	r6, [r3, #0]
 8009d66:	6962      	ldr	r2, [r4, #20]
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d004      	beq.n	8009d78 <__swbuf_r+0x6e>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	07db      	lsls	r3, r3, #31
 8009d72:	d5e1      	bpl.n	8009d38 <__swbuf_r+0x2e>
 8009d74:	2e0a      	cmp	r6, #10
 8009d76:	d1df      	bne.n	8009d38 <__swbuf_r+0x2e>
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f002 fe90 	bl	800caa0 <_fflush_r>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d0d9      	beq.n	8009d38 <__swbuf_r+0x2e>
 8009d84:	e7d6      	b.n	8009d34 <__swbuf_r+0x2a>
	...

08009d88 <__swsetup_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4b29      	ldr	r3, [pc, #164]	@ (8009e30 <__swsetup_r+0xa8>)
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	6818      	ldr	r0, [r3, #0]
 8009d90:	460c      	mov	r4, r1
 8009d92:	b118      	cbz	r0, 8009d9c <__swsetup_r+0x14>
 8009d94:	6a03      	ldr	r3, [r0, #32]
 8009d96:	b90b      	cbnz	r3, 8009d9c <__swsetup_r+0x14>
 8009d98:	f7ff fea6 	bl	8009ae8 <__sinit>
 8009d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da0:	0719      	lsls	r1, r3, #28
 8009da2:	d422      	bmi.n	8009dea <__swsetup_r+0x62>
 8009da4:	06da      	lsls	r2, r3, #27
 8009da6:	d407      	bmi.n	8009db8 <__swsetup_r+0x30>
 8009da8:	2209      	movs	r2, #9
 8009daa:	602a      	str	r2, [r5, #0]
 8009dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	e033      	b.n	8009e20 <__swsetup_r+0x98>
 8009db8:	0758      	lsls	r0, r3, #29
 8009dba:	d512      	bpl.n	8009de2 <__swsetup_r+0x5a>
 8009dbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dbe:	b141      	cbz	r1, 8009dd2 <__swsetup_r+0x4a>
 8009dc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dc4:	4299      	cmp	r1, r3
 8009dc6:	d002      	beq.n	8009dce <__swsetup_r+0x46>
 8009dc8:	4628      	mov	r0, r5
 8009dca:	f000 ff15 	bl	800abf8 <_free_r>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	6063      	str	r3, [r4, #4]
 8009dde:	6923      	ldr	r3, [r4, #16]
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f043 0308 	orr.w	r3, r3, #8
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	6923      	ldr	r3, [r4, #16]
 8009dec:	b94b      	cbnz	r3, 8009e02 <__swsetup_r+0x7a>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009df8:	d003      	beq.n	8009e02 <__swsetup_r+0x7a>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f002 fe9d 	bl	800cb3c <__smakebuf_r>
 8009e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e06:	f013 0201 	ands.w	r2, r3, #1
 8009e0a:	d00a      	beq.n	8009e22 <__swsetup_r+0x9a>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	60a2      	str	r2, [r4, #8]
 8009e10:	6962      	ldr	r2, [r4, #20]
 8009e12:	4252      	negs	r2, r2
 8009e14:	61a2      	str	r2, [r4, #24]
 8009e16:	6922      	ldr	r2, [r4, #16]
 8009e18:	b942      	cbnz	r2, 8009e2c <__swsetup_r+0xa4>
 8009e1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e1e:	d1c5      	bne.n	8009dac <__swsetup_r+0x24>
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
 8009e22:	0799      	lsls	r1, r3, #30
 8009e24:	bf58      	it	pl
 8009e26:	6962      	ldrpl	r2, [r4, #20]
 8009e28:	60a2      	str	r2, [r4, #8]
 8009e2a:	e7f4      	b.n	8009e16 <__swsetup_r+0x8e>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e7f7      	b.n	8009e20 <__swsetup_r+0x98>
 8009e30:	20000040 	.word	0x20000040

08009e34 <memset>:
 8009e34:	4402      	add	r2, r0
 8009e36:	4603      	mov	r3, r0
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d100      	bne.n	8009e3e <memset+0xa>
 8009e3c:	4770      	bx	lr
 8009e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e42:	e7f9      	b.n	8009e38 <memset+0x4>

08009e44 <_localeconv_r>:
 8009e44:	4800      	ldr	r0, [pc, #0]	@ (8009e48 <_localeconv_r+0x4>)
 8009e46:	4770      	bx	lr
 8009e48:	20000180 	.word	0x20000180

08009e4c <_close_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4d06      	ldr	r5, [pc, #24]	@ (8009e68 <_close_r+0x1c>)
 8009e50:	2300      	movs	r3, #0
 8009e52:	4604      	mov	r4, r0
 8009e54:	4608      	mov	r0, r1
 8009e56:	602b      	str	r3, [r5, #0]
 8009e58:	f7f8 f870 	bl	8001f3c <_close>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_close_r+0x1a>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_close_r+0x1a>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	2000526c 	.word	0x2000526c

08009e6c <_lseek_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d07      	ldr	r5, [pc, #28]	@ (8009e8c <_lseek_r+0x20>)
 8009e70:	4604      	mov	r4, r0
 8009e72:	4608      	mov	r0, r1
 8009e74:	4611      	mov	r1, r2
 8009e76:	2200      	movs	r2, #0
 8009e78:	602a      	str	r2, [r5, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f7f8 f885 	bl	8001f8a <_lseek>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d102      	bne.n	8009e8a <_lseek_r+0x1e>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	b103      	cbz	r3, 8009e8a <_lseek_r+0x1e>
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	2000526c 	.word	0x2000526c

08009e90 <_read_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4d07      	ldr	r5, [pc, #28]	@ (8009eb0 <_read_r+0x20>)
 8009e94:	4604      	mov	r4, r0
 8009e96:	4608      	mov	r0, r1
 8009e98:	4611      	mov	r1, r2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	602a      	str	r2, [r5, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f7f8 f813 	bl	8001eca <_read>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d102      	bne.n	8009eae <_read_r+0x1e>
 8009ea8:	682b      	ldr	r3, [r5, #0]
 8009eaa:	b103      	cbz	r3, 8009eae <_read_r+0x1e>
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
 8009eb0:	2000526c 	.word	0x2000526c

08009eb4 <_write_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4d07      	ldr	r5, [pc, #28]	@ (8009ed4 <_write_r+0x20>)
 8009eb8:	4604      	mov	r4, r0
 8009eba:	4608      	mov	r0, r1
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	602a      	str	r2, [r5, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	f7f8 f81e 	bl	8001f04 <_write>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d102      	bne.n	8009ed2 <_write_r+0x1e>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	b103      	cbz	r3, 8009ed2 <_write_r+0x1e>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	2000526c 	.word	0x2000526c

08009ed8 <__errno>:
 8009ed8:	4b01      	ldr	r3, [pc, #4]	@ (8009ee0 <__errno+0x8>)
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	20000040 	.word	0x20000040

08009ee4 <__libc_init_array>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8009f1c <__libc_init_array+0x38>)
 8009ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8009f20 <__libc_init_array+0x3c>)
 8009eea:	1b64      	subs	r4, r4, r5
 8009eec:	10a4      	asrs	r4, r4, #2
 8009eee:	2600      	movs	r6, #0
 8009ef0:	42a6      	cmp	r6, r4
 8009ef2:	d109      	bne.n	8009f08 <__libc_init_array+0x24>
 8009ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8009f24 <__libc_init_array+0x40>)
 8009ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8009f28 <__libc_init_array+0x44>)
 8009ef8:	f003 fb14 	bl	800d524 <_init>
 8009efc:	1b64      	subs	r4, r4, r5
 8009efe:	10a4      	asrs	r4, r4, #2
 8009f00:	2600      	movs	r6, #0
 8009f02:	42a6      	cmp	r6, r4
 8009f04:	d105      	bne.n	8009f12 <__libc_init_array+0x2e>
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0c:	4798      	blx	r3
 8009f0e:	3601      	adds	r6, #1
 8009f10:	e7ee      	b.n	8009ef0 <__libc_init_array+0xc>
 8009f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f16:	4798      	blx	r3
 8009f18:	3601      	adds	r6, #1
 8009f1a:	e7f2      	b.n	8009f02 <__libc_init_array+0x1e>
 8009f1c:	0800dbd8 	.word	0x0800dbd8
 8009f20:	0800dbd8 	.word	0x0800dbd8
 8009f24:	0800dbd8 	.word	0x0800dbd8
 8009f28:	0800dbdc 	.word	0x0800dbdc

08009f2c <__retarget_lock_init_recursive>:
 8009f2c:	4770      	bx	lr

08009f2e <__retarget_lock_acquire_recursive>:
 8009f2e:	4770      	bx	lr

08009f30 <__retarget_lock_release_recursive>:
 8009f30:	4770      	bx	lr

08009f32 <memcpy>:
 8009f32:	440a      	add	r2, r1
 8009f34:	4291      	cmp	r1, r2
 8009f36:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f3a:	d100      	bne.n	8009f3e <memcpy+0xc>
 8009f3c:	4770      	bx	lr
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f48:	4291      	cmp	r1, r2
 8009f4a:	d1f9      	bne.n	8009f40 <memcpy+0xe>
 8009f4c:	bd10      	pop	{r4, pc}
	...

08009f50 <nanf>:
 8009f50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009f58 <nanf+0x8>
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	7fc00000 	.word	0x7fc00000

08009f5c <quorem>:
 8009f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f60:	6903      	ldr	r3, [r0, #16]
 8009f62:	690c      	ldr	r4, [r1, #16]
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	4607      	mov	r7, r0
 8009f68:	db7e      	blt.n	800a068 <quorem+0x10c>
 8009f6a:	3c01      	subs	r4, #1
 8009f6c:	f101 0814 	add.w	r8, r1, #20
 8009f70:	00a3      	lsls	r3, r4, #2
 8009f72:	f100 0514 	add.w	r5, r0, #20
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f86:	3301      	adds	r3, #1
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f92:	d32e      	bcc.n	8009ff2 <quorem+0x96>
 8009f94:	f04f 0a00 	mov.w	sl, #0
 8009f98:	46c4      	mov	ip, r8
 8009f9a:	46ae      	mov	lr, r5
 8009f9c:	46d3      	mov	fp, sl
 8009f9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009fa2:	b298      	uxth	r0, r3
 8009fa4:	fb06 a000 	mla	r0, r6, r0, sl
 8009fa8:	0c02      	lsrs	r2, r0, #16
 8009faa:	0c1b      	lsrs	r3, r3, #16
 8009fac:	fb06 2303 	mla	r3, r6, r3, r2
 8009fb0:	f8de 2000 	ldr.w	r2, [lr]
 8009fb4:	b280      	uxth	r0, r0
 8009fb6:	b292      	uxth	r2, r2
 8009fb8:	1a12      	subs	r2, r2, r0
 8009fba:	445a      	add	r2, fp
 8009fbc:	f8de 0000 	ldr.w	r0, [lr]
 8009fc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009fca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009fce:	b292      	uxth	r2, r2
 8009fd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009fd4:	45e1      	cmp	r9, ip
 8009fd6:	f84e 2b04 	str.w	r2, [lr], #4
 8009fda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009fde:	d2de      	bcs.n	8009f9e <quorem+0x42>
 8009fe0:	9b00      	ldr	r3, [sp, #0]
 8009fe2:	58eb      	ldr	r3, [r5, r3]
 8009fe4:	b92b      	cbnz	r3, 8009ff2 <quorem+0x96>
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	3b04      	subs	r3, #4
 8009fea:	429d      	cmp	r5, r3
 8009fec:	461a      	mov	r2, r3
 8009fee:	d32f      	bcc.n	800a050 <quorem+0xf4>
 8009ff0:	613c      	str	r4, [r7, #16]
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	f001 f9c4 	bl	800b380 <__mcmp>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	db25      	blt.n	800a048 <quorem+0xec>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	2000      	movs	r0, #0
 800a000:	f858 2b04 	ldr.w	r2, [r8], #4
 800a004:	f8d1 c000 	ldr.w	ip, [r1]
 800a008:	fa1f fe82 	uxth.w	lr, r2
 800a00c:	fa1f f38c 	uxth.w	r3, ip
 800a010:	eba3 030e 	sub.w	r3, r3, lr
 800a014:	4403      	add	r3, r0
 800a016:	0c12      	lsrs	r2, r2, #16
 800a018:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a01c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a020:	b29b      	uxth	r3, r3
 800a022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a026:	45c1      	cmp	r9, r8
 800a028:	f841 3b04 	str.w	r3, [r1], #4
 800a02c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a030:	d2e6      	bcs.n	800a000 <quorem+0xa4>
 800a032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a03a:	b922      	cbnz	r2, 800a046 <quorem+0xea>
 800a03c:	3b04      	subs	r3, #4
 800a03e:	429d      	cmp	r5, r3
 800a040:	461a      	mov	r2, r3
 800a042:	d30b      	bcc.n	800a05c <quorem+0x100>
 800a044:	613c      	str	r4, [r7, #16]
 800a046:	3601      	adds	r6, #1
 800a048:	4630      	mov	r0, r6
 800a04a:	b003      	add	sp, #12
 800a04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	3b04      	subs	r3, #4
 800a054:	2a00      	cmp	r2, #0
 800a056:	d1cb      	bne.n	8009ff0 <quorem+0x94>
 800a058:	3c01      	subs	r4, #1
 800a05a:	e7c6      	b.n	8009fea <quorem+0x8e>
 800a05c:	6812      	ldr	r2, [r2, #0]
 800a05e:	3b04      	subs	r3, #4
 800a060:	2a00      	cmp	r2, #0
 800a062:	d1ef      	bne.n	800a044 <quorem+0xe8>
 800a064:	3c01      	subs	r4, #1
 800a066:	e7ea      	b.n	800a03e <quorem+0xe2>
 800a068:	2000      	movs	r0, #0
 800a06a:	e7ee      	b.n	800a04a <quorem+0xee>
 800a06c:	0000      	movs	r0, r0
	...

0800a070 <_dtoa_r>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	69c7      	ldr	r7, [r0, #28]
 800a076:	b099      	sub	sp, #100	@ 0x64
 800a078:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a07c:	ec55 4b10 	vmov	r4, r5, d0
 800a080:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a082:	9109      	str	r1, [sp, #36]	@ 0x24
 800a084:	4683      	mov	fp, r0
 800a086:	920e      	str	r2, [sp, #56]	@ 0x38
 800a088:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a08a:	b97f      	cbnz	r7, 800a0ac <_dtoa_r+0x3c>
 800a08c:	2010      	movs	r0, #16
 800a08e:	f000 fdfd 	bl	800ac8c <malloc>
 800a092:	4602      	mov	r2, r0
 800a094:	f8cb 001c 	str.w	r0, [fp, #28]
 800a098:	b920      	cbnz	r0, 800a0a4 <_dtoa_r+0x34>
 800a09a:	4ba7      	ldr	r3, [pc, #668]	@ (800a338 <_dtoa_r+0x2c8>)
 800a09c:	21ef      	movs	r1, #239	@ 0xef
 800a09e:	48a7      	ldr	r0, [pc, #668]	@ (800a33c <_dtoa_r+0x2cc>)
 800a0a0:	f002 fe22 	bl	800cce8 <__assert_func>
 800a0a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a0a8:	6007      	str	r7, [r0, #0]
 800a0aa:	60c7      	str	r7, [r0, #12]
 800a0ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0b0:	6819      	ldr	r1, [r3, #0]
 800a0b2:	b159      	cbz	r1, 800a0cc <_dtoa_r+0x5c>
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	604a      	str	r2, [r1, #4]
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4093      	lsls	r3, r2
 800a0bc:	608b      	str	r3, [r1, #8]
 800a0be:	4658      	mov	r0, fp
 800a0c0:	f000 feda 	bl	800ae78 <_Bfree>
 800a0c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	1e2b      	subs	r3, r5, #0
 800a0ce:	bfb9      	ittee	lt
 800a0d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a0d4:	9303      	strlt	r3, [sp, #12]
 800a0d6:	2300      	movge	r3, #0
 800a0d8:	6033      	strge	r3, [r6, #0]
 800a0da:	9f03      	ldr	r7, [sp, #12]
 800a0dc:	4b98      	ldr	r3, [pc, #608]	@ (800a340 <_dtoa_r+0x2d0>)
 800a0de:	bfbc      	itt	lt
 800a0e0:	2201      	movlt	r2, #1
 800a0e2:	6032      	strlt	r2, [r6, #0]
 800a0e4:	43bb      	bics	r3, r7
 800a0e6:	d112      	bne.n	800a10e <_dtoa_r+0x9e>
 800a0e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a0ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0f4:	4323      	orrs	r3, r4
 800a0f6:	f000 854d 	beq.w	800ab94 <_dtoa_r+0xb24>
 800a0fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a354 <_dtoa_r+0x2e4>
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 854f 	beq.w	800aba4 <_dtoa_r+0xb34>
 800a106:	f10a 0303 	add.w	r3, sl, #3
 800a10a:	f000 bd49 	b.w	800aba0 <_dtoa_r+0xb30>
 800a10e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a112:	2200      	movs	r2, #0
 800a114:	ec51 0b17 	vmov	r0, r1, d7
 800a118:	2300      	movs	r3, #0
 800a11a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a11e:	f7f6 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a122:	4680      	mov	r8, r0
 800a124:	b158      	cbz	r0, 800a13e <_dtoa_r+0xce>
 800a126:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a128:	2301      	movs	r3, #1
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a12e:	b113      	cbz	r3, 800a136 <_dtoa_r+0xc6>
 800a130:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a132:	4b84      	ldr	r3, [pc, #528]	@ (800a344 <_dtoa_r+0x2d4>)
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a358 <_dtoa_r+0x2e8>
 800a13a:	f000 bd33 	b.w	800aba4 <_dtoa_r+0xb34>
 800a13e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a142:	aa16      	add	r2, sp, #88	@ 0x58
 800a144:	a917      	add	r1, sp, #92	@ 0x5c
 800a146:	4658      	mov	r0, fp
 800a148:	f001 fa3a 	bl	800b5c0 <__d2b>
 800a14c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a150:	4681      	mov	r9, r0
 800a152:	2e00      	cmp	r6, #0
 800a154:	d077      	beq.n	800a246 <_dtoa_r+0x1d6>
 800a156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a158:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a15c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a164:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a168:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a16c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a170:	4619      	mov	r1, r3
 800a172:	2200      	movs	r2, #0
 800a174:	4b74      	ldr	r3, [pc, #464]	@ (800a348 <_dtoa_r+0x2d8>)
 800a176:	f7f6 f887 	bl	8000288 <__aeabi_dsub>
 800a17a:	a369      	add	r3, pc, #420	@ (adr r3, 800a320 <_dtoa_r+0x2b0>)
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f7f6 fa3a 	bl	80005f8 <__aeabi_dmul>
 800a184:	a368      	add	r3, pc, #416	@ (adr r3, 800a328 <_dtoa_r+0x2b8>)
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	f7f6 f87f 	bl	800028c <__adddf3>
 800a18e:	4604      	mov	r4, r0
 800a190:	4630      	mov	r0, r6
 800a192:	460d      	mov	r5, r1
 800a194:	f7f6 f9c6 	bl	8000524 <__aeabi_i2d>
 800a198:	a365      	add	r3, pc, #404	@ (adr r3, 800a330 <_dtoa_r+0x2c0>)
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	f7f6 fa2b 	bl	80005f8 <__aeabi_dmul>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f7f6 f86f 	bl	800028c <__adddf3>
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	f7f6 fcd1 	bl	8000b58 <__aeabi_d2iz>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f7f6 fc8c 	bl	8000adc <__aeabi_dcmplt>
 800a1c4:	b140      	cbz	r0, 800a1d8 <_dtoa_r+0x168>
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f7f6 f9ac 	bl	8000524 <__aeabi_i2d>
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	462b      	mov	r3, r5
 800a1d0:	f7f6 fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1d4:	b900      	cbnz	r0, 800a1d8 <_dtoa_r+0x168>
 800a1d6:	3f01      	subs	r7, #1
 800a1d8:	2f16      	cmp	r7, #22
 800a1da:	d851      	bhi.n	800a280 <_dtoa_r+0x210>
 800a1dc:	4b5b      	ldr	r3, [pc, #364]	@ (800a34c <_dtoa_r+0x2dc>)
 800a1de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1ea:	f7f6 fc77 	bl	8000adc <__aeabi_dcmplt>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d048      	beq.n	800a284 <_dtoa_r+0x214>
 800a1f2:	3f01      	subs	r7, #1
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a1f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a1fa:	1b9b      	subs	r3, r3, r6
 800a1fc:	1e5a      	subs	r2, r3, #1
 800a1fe:	bf44      	itt	mi
 800a200:	f1c3 0801 	rsbmi	r8, r3, #1
 800a204:	2300      	movmi	r3, #0
 800a206:	9208      	str	r2, [sp, #32]
 800a208:	bf54      	ite	pl
 800a20a:	f04f 0800 	movpl.w	r8, #0
 800a20e:	9308      	strmi	r3, [sp, #32]
 800a210:	2f00      	cmp	r7, #0
 800a212:	db39      	blt.n	800a288 <_dtoa_r+0x218>
 800a214:	9b08      	ldr	r3, [sp, #32]
 800a216:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a218:	443b      	add	r3, r7
 800a21a:	9308      	str	r3, [sp, #32]
 800a21c:	2300      	movs	r3, #0
 800a21e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a222:	2b09      	cmp	r3, #9
 800a224:	d864      	bhi.n	800a2f0 <_dtoa_r+0x280>
 800a226:	2b05      	cmp	r3, #5
 800a228:	bfc4      	itt	gt
 800a22a:	3b04      	subgt	r3, #4
 800a22c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a230:	f1a3 0302 	sub.w	r3, r3, #2
 800a234:	bfcc      	ite	gt
 800a236:	2400      	movgt	r4, #0
 800a238:	2401      	movle	r4, #1
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d863      	bhi.n	800a306 <_dtoa_r+0x296>
 800a23e:	e8df f003 	tbb	[pc, r3]
 800a242:	372a      	.short	0x372a
 800a244:	5535      	.short	0x5535
 800a246:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a24a:	441e      	add	r6, r3
 800a24c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a250:	2b20      	cmp	r3, #32
 800a252:	bfc1      	itttt	gt
 800a254:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a258:	409f      	lslgt	r7, r3
 800a25a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a25e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a262:	bfd6      	itet	le
 800a264:	f1c3 0320 	rsble	r3, r3, #32
 800a268:	ea47 0003 	orrgt.w	r0, r7, r3
 800a26c:	fa04 f003 	lslle.w	r0, r4, r3
 800a270:	f7f6 f948 	bl	8000504 <__aeabi_ui2d>
 800a274:	2201      	movs	r2, #1
 800a276:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a27a:	3e01      	subs	r6, #1
 800a27c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a27e:	e777      	b.n	800a170 <_dtoa_r+0x100>
 800a280:	2301      	movs	r3, #1
 800a282:	e7b8      	b.n	800a1f6 <_dtoa_r+0x186>
 800a284:	9012      	str	r0, [sp, #72]	@ 0x48
 800a286:	e7b7      	b.n	800a1f8 <_dtoa_r+0x188>
 800a288:	427b      	negs	r3, r7
 800a28a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a28c:	2300      	movs	r3, #0
 800a28e:	eba8 0807 	sub.w	r8, r8, r7
 800a292:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a294:	e7c4      	b.n	800a220 <_dtoa_r+0x1b0>
 800a296:	2300      	movs	r3, #0
 800a298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a29a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	dc35      	bgt.n	800a30c <_dtoa_r+0x29c>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	9307      	str	r3, [sp, #28]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2aa:	e00b      	b.n	800a2c4 <_dtoa_r+0x254>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e7f3      	b.n	800a298 <_dtoa_r+0x228>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2b6:	18fb      	adds	r3, r7, r3
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	9307      	str	r3, [sp, #28]
 800a2c0:	bfb8      	it	lt
 800a2c2:	2301      	movlt	r3, #1
 800a2c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	2204      	movs	r2, #4
 800a2cc:	f102 0514 	add.w	r5, r2, #20
 800a2d0:	429d      	cmp	r5, r3
 800a2d2:	d91f      	bls.n	800a314 <_dtoa_r+0x2a4>
 800a2d4:	6041      	str	r1, [r0, #4]
 800a2d6:	4658      	mov	r0, fp
 800a2d8:	f000 fd8e 	bl	800adf8 <_Balloc>
 800a2dc:	4682      	mov	sl, r0
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d13c      	bne.n	800a35c <_dtoa_r+0x2ec>
 800a2e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a350 <_dtoa_r+0x2e0>)
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a2ea:	e6d8      	b.n	800a09e <_dtoa_r+0x2e>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e7e0      	b.n	800a2b2 <_dtoa_r+0x242>
 800a2f0:	2401      	movs	r4, #1
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	9307      	str	r3, [sp, #28]
 800a300:	2200      	movs	r2, #0
 800a302:	2312      	movs	r3, #18
 800a304:	e7d0      	b.n	800a2a8 <_dtoa_r+0x238>
 800a306:	2301      	movs	r3, #1
 800a308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a30a:	e7f5      	b.n	800a2f8 <_dtoa_r+0x288>
 800a30c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	9307      	str	r3, [sp, #28]
 800a312:	e7d7      	b.n	800a2c4 <_dtoa_r+0x254>
 800a314:	3101      	adds	r1, #1
 800a316:	0052      	lsls	r2, r2, #1
 800a318:	e7d8      	b.n	800a2cc <_dtoa_r+0x25c>
 800a31a:	bf00      	nop
 800a31c:	f3af 8000 	nop.w
 800a320:	636f4361 	.word	0x636f4361
 800a324:	3fd287a7 	.word	0x3fd287a7
 800a328:	8b60c8b3 	.word	0x8b60c8b3
 800a32c:	3fc68a28 	.word	0x3fc68a28
 800a330:	509f79fb 	.word	0x509f79fb
 800a334:	3fd34413 	.word	0x3fd34413
 800a338:	0800d7e6 	.word	0x0800d7e6
 800a33c:	0800d7fd 	.word	0x0800d7fd
 800a340:	7ff00000 	.word	0x7ff00000
 800a344:	0800d7b1 	.word	0x0800d7b1
 800a348:	3ff80000 	.word	0x3ff80000
 800a34c:	0800d8f8 	.word	0x0800d8f8
 800a350:	0800d855 	.word	0x0800d855
 800a354:	0800d7e2 	.word	0x0800d7e2
 800a358:	0800d7b0 	.word	0x0800d7b0
 800a35c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a360:	6018      	str	r0, [r3, #0]
 800a362:	9b07      	ldr	r3, [sp, #28]
 800a364:	2b0e      	cmp	r3, #14
 800a366:	f200 80a4 	bhi.w	800a4b2 <_dtoa_r+0x442>
 800a36a:	2c00      	cmp	r4, #0
 800a36c:	f000 80a1 	beq.w	800a4b2 <_dtoa_r+0x442>
 800a370:	2f00      	cmp	r7, #0
 800a372:	dd33      	ble.n	800a3dc <_dtoa_r+0x36c>
 800a374:	4bad      	ldr	r3, [pc, #692]	@ (800a62c <_dtoa_r+0x5bc>)
 800a376:	f007 020f 	and.w	r2, r7, #15
 800a37a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a37e:	ed93 7b00 	vldr	d7, [r3]
 800a382:	05f8      	lsls	r0, r7, #23
 800a384:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a388:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a38c:	d516      	bpl.n	800a3bc <_dtoa_r+0x34c>
 800a38e:	4ba8      	ldr	r3, [pc, #672]	@ (800a630 <_dtoa_r+0x5c0>)
 800a390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a398:	f7f6 fa58 	bl	800084c <__aeabi_ddiv>
 800a39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a0:	f004 040f 	and.w	r4, r4, #15
 800a3a4:	2603      	movs	r6, #3
 800a3a6:	4da2      	ldr	r5, [pc, #648]	@ (800a630 <_dtoa_r+0x5c0>)
 800a3a8:	b954      	cbnz	r4, 800a3c0 <_dtoa_r+0x350>
 800a3aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3b2:	f7f6 fa4b 	bl	800084c <__aeabi_ddiv>
 800a3b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3ba:	e028      	b.n	800a40e <_dtoa_r+0x39e>
 800a3bc:	2602      	movs	r6, #2
 800a3be:	e7f2      	b.n	800a3a6 <_dtoa_r+0x336>
 800a3c0:	07e1      	lsls	r1, r4, #31
 800a3c2:	d508      	bpl.n	800a3d6 <_dtoa_r+0x366>
 800a3c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3cc:	f7f6 f914 	bl	80005f8 <__aeabi_dmul>
 800a3d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3d4:	3601      	adds	r6, #1
 800a3d6:	1064      	asrs	r4, r4, #1
 800a3d8:	3508      	adds	r5, #8
 800a3da:	e7e5      	b.n	800a3a8 <_dtoa_r+0x338>
 800a3dc:	f000 80d2 	beq.w	800a584 <_dtoa_r+0x514>
 800a3e0:	427c      	negs	r4, r7
 800a3e2:	4b92      	ldr	r3, [pc, #584]	@ (800a62c <_dtoa_r+0x5bc>)
 800a3e4:	4d92      	ldr	r5, [pc, #584]	@ (800a630 <_dtoa_r+0x5c0>)
 800a3e6:	f004 020f 	and.w	r2, r4, #15
 800a3ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3f6:	f7f6 f8ff 	bl	80005f8 <__aeabi_dmul>
 800a3fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3fe:	1124      	asrs	r4, r4, #4
 800a400:	2300      	movs	r3, #0
 800a402:	2602      	movs	r6, #2
 800a404:	2c00      	cmp	r4, #0
 800a406:	f040 80b2 	bne.w	800a56e <_dtoa_r+0x4fe>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1d3      	bne.n	800a3b6 <_dtoa_r+0x346>
 800a40e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a410:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 80b7 	beq.w	800a588 <_dtoa_r+0x518>
 800a41a:	4b86      	ldr	r3, [pc, #536]	@ (800a634 <_dtoa_r+0x5c4>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	4620      	mov	r0, r4
 800a420:	4629      	mov	r1, r5
 800a422:	f7f6 fb5b 	bl	8000adc <__aeabi_dcmplt>
 800a426:	2800      	cmp	r0, #0
 800a428:	f000 80ae 	beq.w	800a588 <_dtoa_r+0x518>
 800a42c:	9b07      	ldr	r3, [sp, #28]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 80aa 	beq.w	800a588 <_dtoa_r+0x518>
 800a434:	9b00      	ldr	r3, [sp, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	dd37      	ble.n	800a4aa <_dtoa_r+0x43a>
 800a43a:	1e7b      	subs	r3, r7, #1
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	4620      	mov	r0, r4
 800a440:	4b7d      	ldr	r3, [pc, #500]	@ (800a638 <_dtoa_r+0x5c8>)
 800a442:	2200      	movs	r2, #0
 800a444:	4629      	mov	r1, r5
 800a446:	f7f6 f8d7 	bl	80005f8 <__aeabi_dmul>
 800a44a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a44e:	9c00      	ldr	r4, [sp, #0]
 800a450:	3601      	adds	r6, #1
 800a452:	4630      	mov	r0, r6
 800a454:	f7f6 f866 	bl	8000524 <__aeabi_i2d>
 800a458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a45c:	f7f6 f8cc 	bl	80005f8 <__aeabi_dmul>
 800a460:	4b76      	ldr	r3, [pc, #472]	@ (800a63c <_dtoa_r+0x5cc>)
 800a462:	2200      	movs	r2, #0
 800a464:	f7f5 ff12 	bl	800028c <__adddf3>
 800a468:	4605      	mov	r5, r0
 800a46a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a46e:	2c00      	cmp	r4, #0
 800a470:	f040 808d 	bne.w	800a58e <_dtoa_r+0x51e>
 800a474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a478:	4b71      	ldr	r3, [pc, #452]	@ (800a640 <_dtoa_r+0x5d0>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	f7f5 ff04 	bl	8000288 <__aeabi_dsub>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a488:	462a      	mov	r2, r5
 800a48a:	4633      	mov	r3, r6
 800a48c:	f7f6 fb44 	bl	8000b18 <__aeabi_dcmpgt>
 800a490:	2800      	cmp	r0, #0
 800a492:	f040 828b 	bne.w	800a9ac <_dtoa_r+0x93c>
 800a496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a49a:	462a      	mov	r2, r5
 800a49c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a4a0:	f7f6 fb1c 	bl	8000adc <__aeabi_dcmplt>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f040 8128 	bne.w	800a6fa <_dtoa_r+0x68a>
 800a4aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a4ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a4b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f2c0 815a 	blt.w	800a76e <_dtoa_r+0x6fe>
 800a4ba:	2f0e      	cmp	r7, #14
 800a4bc:	f300 8157 	bgt.w	800a76e <_dtoa_r+0x6fe>
 800a4c0:	4b5a      	ldr	r3, [pc, #360]	@ (800a62c <_dtoa_r+0x5bc>)
 800a4c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a4c6:	ed93 7b00 	vldr	d7, [r3]
 800a4ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	ed8d 7b00 	vstr	d7, [sp]
 800a4d2:	da03      	bge.n	800a4dc <_dtoa_r+0x46c>
 800a4d4:	9b07      	ldr	r3, [sp, #28]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f340 8101 	ble.w	800a6de <_dtoa_r+0x66e>
 800a4dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4e0:	4656      	mov	r6, sl
 800a4e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	f7f6 f9af 	bl	800084c <__aeabi_ddiv>
 800a4ee:	f7f6 fb33 	bl	8000b58 <__aeabi_d2iz>
 800a4f2:	4680      	mov	r8, r0
 800a4f4:	f7f6 f816 	bl	8000524 <__aeabi_i2d>
 800a4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4fc:	f7f6 f87c 	bl	80005f8 <__aeabi_dmul>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a50c:	f7f5 febc 	bl	8000288 <__aeabi_dsub>
 800a510:	f806 4b01 	strb.w	r4, [r6], #1
 800a514:	9d07      	ldr	r5, [sp, #28]
 800a516:	eba6 040a 	sub.w	r4, r6, sl
 800a51a:	42a5      	cmp	r5, r4
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	f040 8117 	bne.w	800a752 <_dtoa_r+0x6e2>
 800a524:	f7f5 feb2 	bl	800028c <__adddf3>
 800a528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a52c:	4604      	mov	r4, r0
 800a52e:	460d      	mov	r5, r1
 800a530:	f7f6 faf2 	bl	8000b18 <__aeabi_dcmpgt>
 800a534:	2800      	cmp	r0, #0
 800a536:	f040 80f9 	bne.w	800a72c <_dtoa_r+0x6bc>
 800a53a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a53e:	4620      	mov	r0, r4
 800a540:	4629      	mov	r1, r5
 800a542:	f7f6 fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a546:	b118      	cbz	r0, 800a550 <_dtoa_r+0x4e0>
 800a548:	f018 0f01 	tst.w	r8, #1
 800a54c:	f040 80ee 	bne.w	800a72c <_dtoa_r+0x6bc>
 800a550:	4649      	mov	r1, r9
 800a552:	4658      	mov	r0, fp
 800a554:	f000 fc90 	bl	800ae78 <_Bfree>
 800a558:	2300      	movs	r3, #0
 800a55a:	7033      	strb	r3, [r6, #0]
 800a55c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a55e:	3701      	adds	r7, #1
 800a560:	601f      	str	r7, [r3, #0]
 800a562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 831d 	beq.w	800aba4 <_dtoa_r+0xb34>
 800a56a:	601e      	str	r6, [r3, #0]
 800a56c:	e31a      	b.n	800aba4 <_dtoa_r+0xb34>
 800a56e:	07e2      	lsls	r2, r4, #31
 800a570:	d505      	bpl.n	800a57e <_dtoa_r+0x50e>
 800a572:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a576:	f7f6 f83f 	bl	80005f8 <__aeabi_dmul>
 800a57a:	3601      	adds	r6, #1
 800a57c:	2301      	movs	r3, #1
 800a57e:	1064      	asrs	r4, r4, #1
 800a580:	3508      	adds	r5, #8
 800a582:	e73f      	b.n	800a404 <_dtoa_r+0x394>
 800a584:	2602      	movs	r6, #2
 800a586:	e742      	b.n	800a40e <_dtoa_r+0x39e>
 800a588:	9c07      	ldr	r4, [sp, #28]
 800a58a:	9704      	str	r7, [sp, #16]
 800a58c:	e761      	b.n	800a452 <_dtoa_r+0x3e2>
 800a58e:	4b27      	ldr	r3, [pc, #156]	@ (800a62c <_dtoa_r+0x5bc>)
 800a590:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a596:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a59a:	4454      	add	r4, sl
 800a59c:	2900      	cmp	r1, #0
 800a59e:	d053      	beq.n	800a648 <_dtoa_r+0x5d8>
 800a5a0:	4928      	ldr	r1, [pc, #160]	@ (800a644 <_dtoa_r+0x5d4>)
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	f7f6 f952 	bl	800084c <__aeabi_ddiv>
 800a5a8:	4633      	mov	r3, r6
 800a5aa:	462a      	mov	r2, r5
 800a5ac:	f7f5 fe6c 	bl	8000288 <__aeabi_dsub>
 800a5b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5b4:	4656      	mov	r6, sl
 800a5b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ba:	f7f6 facd 	bl	8000b58 <__aeabi_d2iz>
 800a5be:	4605      	mov	r5, r0
 800a5c0:	f7f5 ffb0 	bl	8000524 <__aeabi_i2d>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5cc:	f7f5 fe5c 	bl	8000288 <__aeabi_dsub>
 800a5d0:	3530      	adds	r5, #48	@ 0x30
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5da:	f806 5b01 	strb.w	r5, [r6], #1
 800a5de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5e2:	f7f6 fa7b 	bl	8000adc <__aeabi_dcmplt>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d171      	bne.n	800a6ce <_dtoa_r+0x65e>
 800a5ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5ee:	4911      	ldr	r1, [pc, #68]	@ (800a634 <_dtoa_r+0x5c4>)
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f7f5 fe49 	bl	8000288 <__aeabi_dsub>
 800a5f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5fa:	f7f6 fa6f 	bl	8000adc <__aeabi_dcmplt>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f040 8095 	bne.w	800a72e <_dtoa_r+0x6be>
 800a604:	42a6      	cmp	r6, r4
 800a606:	f43f af50 	beq.w	800a4aa <_dtoa_r+0x43a>
 800a60a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a60e:	4b0a      	ldr	r3, [pc, #40]	@ (800a638 <_dtoa_r+0x5c8>)
 800a610:	2200      	movs	r2, #0
 800a612:	f7f5 fff1 	bl	80005f8 <__aeabi_dmul>
 800a616:	4b08      	ldr	r3, [pc, #32]	@ (800a638 <_dtoa_r+0x5c8>)
 800a618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a61c:	2200      	movs	r2, #0
 800a61e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a622:	f7f5 ffe9 	bl	80005f8 <__aeabi_dmul>
 800a626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a62a:	e7c4      	b.n	800a5b6 <_dtoa_r+0x546>
 800a62c:	0800d8f8 	.word	0x0800d8f8
 800a630:	0800d8d0 	.word	0x0800d8d0
 800a634:	3ff00000 	.word	0x3ff00000
 800a638:	40240000 	.word	0x40240000
 800a63c:	401c0000 	.word	0x401c0000
 800a640:	40140000 	.word	0x40140000
 800a644:	3fe00000 	.word	0x3fe00000
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	f7f5 ffd4 	bl	80005f8 <__aeabi_dmul>
 800a650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a654:	9415      	str	r4, [sp, #84]	@ 0x54
 800a656:	4656      	mov	r6, sl
 800a658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a65c:	f7f6 fa7c 	bl	8000b58 <__aeabi_d2iz>
 800a660:	4605      	mov	r5, r0
 800a662:	f7f5 ff5f 	bl	8000524 <__aeabi_i2d>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a66e:	f7f5 fe0b 	bl	8000288 <__aeabi_dsub>
 800a672:	3530      	adds	r5, #48	@ 0x30
 800a674:	f806 5b01 	strb.w	r5, [r6], #1
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	42a6      	cmp	r6, r4
 800a67e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a682:	f04f 0200 	mov.w	r2, #0
 800a686:	d124      	bne.n	800a6d2 <_dtoa_r+0x662>
 800a688:	4bac      	ldr	r3, [pc, #688]	@ (800a93c <_dtoa_r+0x8cc>)
 800a68a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a68e:	f7f5 fdfd 	bl	800028c <__adddf3>
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a69a:	f7f6 fa3d 	bl	8000b18 <__aeabi_dcmpgt>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d145      	bne.n	800a72e <_dtoa_r+0x6be>
 800a6a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6a6:	49a5      	ldr	r1, [pc, #660]	@ (800a93c <_dtoa_r+0x8cc>)
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	f7f5 fded 	bl	8000288 <__aeabi_dsub>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6b6:	f7f6 fa11 	bl	8000adc <__aeabi_dcmplt>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	f43f aef5 	beq.w	800a4aa <_dtoa_r+0x43a>
 800a6c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a6c2:	1e73      	subs	r3, r6, #1
 800a6c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a6c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6ca:	2b30      	cmp	r3, #48	@ 0x30
 800a6cc:	d0f8      	beq.n	800a6c0 <_dtoa_r+0x650>
 800a6ce:	9f04      	ldr	r7, [sp, #16]
 800a6d0:	e73e      	b.n	800a550 <_dtoa_r+0x4e0>
 800a6d2:	4b9b      	ldr	r3, [pc, #620]	@ (800a940 <_dtoa_r+0x8d0>)
 800a6d4:	f7f5 ff90 	bl	80005f8 <__aeabi_dmul>
 800a6d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6dc:	e7bc      	b.n	800a658 <_dtoa_r+0x5e8>
 800a6de:	d10c      	bne.n	800a6fa <_dtoa_r+0x68a>
 800a6e0:	4b98      	ldr	r3, [pc, #608]	@ (800a944 <_dtoa_r+0x8d4>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6e8:	f7f5 ff86 	bl	80005f8 <__aeabi_dmul>
 800a6ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6f0:	f7f6 fa08 	bl	8000b04 <__aeabi_dcmpge>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	f000 8157 	beq.w	800a9a8 <_dtoa_r+0x938>
 800a6fa:	2400      	movs	r4, #0
 800a6fc:	4625      	mov	r5, r4
 800a6fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a700:	43db      	mvns	r3, r3
 800a702:	9304      	str	r3, [sp, #16]
 800a704:	4656      	mov	r6, sl
 800a706:	2700      	movs	r7, #0
 800a708:	4621      	mov	r1, r4
 800a70a:	4658      	mov	r0, fp
 800a70c:	f000 fbb4 	bl	800ae78 <_Bfree>
 800a710:	2d00      	cmp	r5, #0
 800a712:	d0dc      	beq.n	800a6ce <_dtoa_r+0x65e>
 800a714:	b12f      	cbz	r7, 800a722 <_dtoa_r+0x6b2>
 800a716:	42af      	cmp	r7, r5
 800a718:	d003      	beq.n	800a722 <_dtoa_r+0x6b2>
 800a71a:	4639      	mov	r1, r7
 800a71c:	4658      	mov	r0, fp
 800a71e:	f000 fbab 	bl	800ae78 <_Bfree>
 800a722:	4629      	mov	r1, r5
 800a724:	4658      	mov	r0, fp
 800a726:	f000 fba7 	bl	800ae78 <_Bfree>
 800a72a:	e7d0      	b.n	800a6ce <_dtoa_r+0x65e>
 800a72c:	9704      	str	r7, [sp, #16]
 800a72e:	4633      	mov	r3, r6
 800a730:	461e      	mov	r6, r3
 800a732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a736:	2a39      	cmp	r2, #57	@ 0x39
 800a738:	d107      	bne.n	800a74a <_dtoa_r+0x6da>
 800a73a:	459a      	cmp	sl, r3
 800a73c:	d1f8      	bne.n	800a730 <_dtoa_r+0x6c0>
 800a73e:	9a04      	ldr	r2, [sp, #16]
 800a740:	3201      	adds	r2, #1
 800a742:	9204      	str	r2, [sp, #16]
 800a744:	2230      	movs	r2, #48	@ 0x30
 800a746:	f88a 2000 	strb.w	r2, [sl]
 800a74a:	781a      	ldrb	r2, [r3, #0]
 800a74c:	3201      	adds	r2, #1
 800a74e:	701a      	strb	r2, [r3, #0]
 800a750:	e7bd      	b.n	800a6ce <_dtoa_r+0x65e>
 800a752:	4b7b      	ldr	r3, [pc, #492]	@ (800a940 <_dtoa_r+0x8d0>)
 800a754:	2200      	movs	r2, #0
 800a756:	f7f5 ff4f 	bl	80005f8 <__aeabi_dmul>
 800a75a:	2200      	movs	r2, #0
 800a75c:	2300      	movs	r3, #0
 800a75e:	4604      	mov	r4, r0
 800a760:	460d      	mov	r5, r1
 800a762:	f7f6 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a766:	2800      	cmp	r0, #0
 800a768:	f43f aebb 	beq.w	800a4e2 <_dtoa_r+0x472>
 800a76c:	e6f0      	b.n	800a550 <_dtoa_r+0x4e0>
 800a76e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a770:	2a00      	cmp	r2, #0
 800a772:	f000 80db 	beq.w	800a92c <_dtoa_r+0x8bc>
 800a776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a778:	2a01      	cmp	r2, #1
 800a77a:	f300 80bf 	bgt.w	800a8fc <_dtoa_r+0x88c>
 800a77e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a780:	2a00      	cmp	r2, #0
 800a782:	f000 80b7 	beq.w	800a8f4 <_dtoa_r+0x884>
 800a786:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a78a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a78c:	4646      	mov	r6, r8
 800a78e:	9a08      	ldr	r2, [sp, #32]
 800a790:	2101      	movs	r1, #1
 800a792:	441a      	add	r2, r3
 800a794:	4658      	mov	r0, fp
 800a796:	4498      	add	r8, r3
 800a798:	9208      	str	r2, [sp, #32]
 800a79a:	f000 fc6b 	bl	800b074 <__i2b>
 800a79e:	4605      	mov	r5, r0
 800a7a0:	b15e      	cbz	r6, 800a7ba <_dtoa_r+0x74a>
 800a7a2:	9b08      	ldr	r3, [sp, #32]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd08      	ble.n	800a7ba <_dtoa_r+0x74a>
 800a7a8:	42b3      	cmp	r3, r6
 800a7aa:	9a08      	ldr	r2, [sp, #32]
 800a7ac:	bfa8      	it	ge
 800a7ae:	4633      	movge	r3, r6
 800a7b0:	eba8 0803 	sub.w	r8, r8, r3
 800a7b4:	1af6      	subs	r6, r6, r3
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	9308      	str	r3, [sp, #32]
 800a7ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7bc:	b1f3      	cbz	r3, 800a7fc <_dtoa_r+0x78c>
 800a7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 80b7 	beq.w	800a934 <_dtoa_r+0x8c4>
 800a7c6:	b18c      	cbz	r4, 800a7ec <_dtoa_r+0x77c>
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	4622      	mov	r2, r4
 800a7cc:	4658      	mov	r0, fp
 800a7ce:	f000 fd11 	bl	800b1f4 <__pow5mult>
 800a7d2:	464a      	mov	r2, r9
 800a7d4:	4601      	mov	r1, r0
 800a7d6:	4605      	mov	r5, r0
 800a7d8:	4658      	mov	r0, fp
 800a7da:	f000 fc61 	bl	800b0a0 <__multiply>
 800a7de:	4649      	mov	r1, r9
 800a7e0:	9004      	str	r0, [sp, #16]
 800a7e2:	4658      	mov	r0, fp
 800a7e4:	f000 fb48 	bl	800ae78 <_Bfree>
 800a7e8:	9b04      	ldr	r3, [sp, #16]
 800a7ea:	4699      	mov	r9, r3
 800a7ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ee:	1b1a      	subs	r2, r3, r4
 800a7f0:	d004      	beq.n	800a7fc <_dtoa_r+0x78c>
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	4658      	mov	r0, fp
 800a7f6:	f000 fcfd 	bl	800b1f4 <__pow5mult>
 800a7fa:	4681      	mov	r9, r0
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	4658      	mov	r0, fp
 800a800:	f000 fc38 	bl	800b074 <__i2b>
 800a804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a806:	4604      	mov	r4, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 81cf 	beq.w	800abac <_dtoa_r+0xb3c>
 800a80e:	461a      	mov	r2, r3
 800a810:	4601      	mov	r1, r0
 800a812:	4658      	mov	r0, fp
 800a814:	f000 fcee 	bl	800b1f4 <__pow5mult>
 800a818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	4604      	mov	r4, r0
 800a81e:	f300 8095 	bgt.w	800a94c <_dtoa_r+0x8dc>
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f040 8087 	bne.w	800a938 <_dtoa_r+0x8c8>
 800a82a:	9b03      	ldr	r3, [sp, #12]
 800a82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a830:	2b00      	cmp	r3, #0
 800a832:	f040 8089 	bne.w	800a948 <_dtoa_r+0x8d8>
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a83c:	0d1b      	lsrs	r3, r3, #20
 800a83e:	051b      	lsls	r3, r3, #20
 800a840:	b12b      	cbz	r3, 800a84e <_dtoa_r+0x7de>
 800a842:	9b08      	ldr	r3, [sp, #32]
 800a844:	3301      	adds	r3, #1
 800a846:	9308      	str	r3, [sp, #32]
 800a848:	f108 0801 	add.w	r8, r8, #1
 800a84c:	2301      	movs	r3, #1
 800a84e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 81b0 	beq.w	800abb8 <_dtoa_r+0xb48>
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a85e:	6918      	ldr	r0, [r3, #16]
 800a860:	f000 fbbc 	bl	800afdc <__hi0bits>
 800a864:	f1c0 0020 	rsb	r0, r0, #32
 800a868:	9b08      	ldr	r3, [sp, #32]
 800a86a:	4418      	add	r0, r3
 800a86c:	f010 001f 	ands.w	r0, r0, #31
 800a870:	d077      	beq.n	800a962 <_dtoa_r+0x8f2>
 800a872:	f1c0 0320 	rsb	r3, r0, #32
 800a876:	2b04      	cmp	r3, #4
 800a878:	dd6b      	ble.n	800a952 <_dtoa_r+0x8e2>
 800a87a:	9b08      	ldr	r3, [sp, #32]
 800a87c:	f1c0 001c 	rsb	r0, r0, #28
 800a880:	4403      	add	r3, r0
 800a882:	4480      	add	r8, r0
 800a884:	4406      	add	r6, r0
 800a886:	9308      	str	r3, [sp, #32]
 800a888:	f1b8 0f00 	cmp.w	r8, #0
 800a88c:	dd05      	ble.n	800a89a <_dtoa_r+0x82a>
 800a88e:	4649      	mov	r1, r9
 800a890:	4642      	mov	r2, r8
 800a892:	4658      	mov	r0, fp
 800a894:	f000 fd08 	bl	800b2a8 <__lshift>
 800a898:	4681      	mov	r9, r0
 800a89a:	9b08      	ldr	r3, [sp, #32]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dd05      	ble.n	800a8ac <_dtoa_r+0x83c>
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	4658      	mov	r0, fp
 800a8a6:	f000 fcff 	bl	800b2a8 <__lshift>
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d059      	beq.n	800a966 <_dtoa_r+0x8f6>
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4648      	mov	r0, r9
 800a8b6:	f000 fd63 	bl	800b380 <__mcmp>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	da53      	bge.n	800a966 <_dtoa_r+0x8f6>
 800a8be:	1e7b      	subs	r3, r7, #1
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	220a      	movs	r2, #10
 800a8c8:	4658      	mov	r0, fp
 800a8ca:	f000 faf7 	bl	800aebc <__multadd>
 800a8ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8d0:	4681      	mov	r9, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 8172 	beq.w	800abbc <_dtoa_r+0xb4c>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	4629      	mov	r1, r5
 800a8dc:	220a      	movs	r2, #10
 800a8de:	4658      	mov	r0, fp
 800a8e0:	f000 faec 	bl	800aebc <__multadd>
 800a8e4:	9b00      	ldr	r3, [sp, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	dc67      	bgt.n	800a9bc <_dtoa_r+0x94c>
 800a8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	dc41      	bgt.n	800a976 <_dtoa_r+0x906>
 800a8f2:	e063      	b.n	800a9bc <_dtoa_r+0x94c>
 800a8f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a8f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a8fa:	e746      	b.n	800a78a <_dtoa_r+0x71a>
 800a8fc:	9b07      	ldr	r3, [sp, #28]
 800a8fe:	1e5c      	subs	r4, r3, #1
 800a900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a902:	42a3      	cmp	r3, r4
 800a904:	bfbf      	itttt	lt
 800a906:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a908:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a90a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a90c:	1ae3      	sublt	r3, r4, r3
 800a90e:	bfb4      	ite	lt
 800a910:	18d2      	addlt	r2, r2, r3
 800a912:	1b1c      	subge	r4, r3, r4
 800a914:	9b07      	ldr	r3, [sp, #28]
 800a916:	bfbc      	itt	lt
 800a918:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a91a:	2400      	movlt	r4, #0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	bfb5      	itete	lt
 800a920:	eba8 0603 	sublt.w	r6, r8, r3
 800a924:	9b07      	ldrge	r3, [sp, #28]
 800a926:	2300      	movlt	r3, #0
 800a928:	4646      	movge	r6, r8
 800a92a:	e730      	b.n	800a78e <_dtoa_r+0x71e>
 800a92c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a92e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a930:	4646      	mov	r6, r8
 800a932:	e735      	b.n	800a7a0 <_dtoa_r+0x730>
 800a934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a936:	e75c      	b.n	800a7f2 <_dtoa_r+0x782>
 800a938:	2300      	movs	r3, #0
 800a93a:	e788      	b.n	800a84e <_dtoa_r+0x7de>
 800a93c:	3fe00000 	.word	0x3fe00000
 800a940:	40240000 	.word	0x40240000
 800a944:	40140000 	.word	0x40140000
 800a948:	9b02      	ldr	r3, [sp, #8]
 800a94a:	e780      	b.n	800a84e <_dtoa_r+0x7de>
 800a94c:	2300      	movs	r3, #0
 800a94e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a950:	e782      	b.n	800a858 <_dtoa_r+0x7e8>
 800a952:	d099      	beq.n	800a888 <_dtoa_r+0x818>
 800a954:	9a08      	ldr	r2, [sp, #32]
 800a956:	331c      	adds	r3, #28
 800a958:	441a      	add	r2, r3
 800a95a:	4498      	add	r8, r3
 800a95c:	441e      	add	r6, r3
 800a95e:	9208      	str	r2, [sp, #32]
 800a960:	e792      	b.n	800a888 <_dtoa_r+0x818>
 800a962:	4603      	mov	r3, r0
 800a964:	e7f6      	b.n	800a954 <_dtoa_r+0x8e4>
 800a966:	9b07      	ldr	r3, [sp, #28]
 800a968:	9704      	str	r7, [sp, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	dc20      	bgt.n	800a9b0 <_dtoa_r+0x940>
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a972:	2b02      	cmp	r3, #2
 800a974:	dd1e      	ble.n	800a9b4 <_dtoa_r+0x944>
 800a976:	9b00      	ldr	r3, [sp, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f47f aec0 	bne.w	800a6fe <_dtoa_r+0x68e>
 800a97e:	4621      	mov	r1, r4
 800a980:	2205      	movs	r2, #5
 800a982:	4658      	mov	r0, fp
 800a984:	f000 fa9a 	bl	800aebc <__multadd>
 800a988:	4601      	mov	r1, r0
 800a98a:	4604      	mov	r4, r0
 800a98c:	4648      	mov	r0, r9
 800a98e:	f000 fcf7 	bl	800b380 <__mcmp>
 800a992:	2800      	cmp	r0, #0
 800a994:	f77f aeb3 	ble.w	800a6fe <_dtoa_r+0x68e>
 800a998:	4656      	mov	r6, sl
 800a99a:	2331      	movs	r3, #49	@ 0x31
 800a99c:	f806 3b01 	strb.w	r3, [r6], #1
 800a9a0:	9b04      	ldr	r3, [sp, #16]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	9304      	str	r3, [sp, #16]
 800a9a6:	e6ae      	b.n	800a706 <_dtoa_r+0x696>
 800a9a8:	9c07      	ldr	r4, [sp, #28]
 800a9aa:	9704      	str	r7, [sp, #16]
 800a9ac:	4625      	mov	r5, r4
 800a9ae:	e7f3      	b.n	800a998 <_dtoa_r+0x928>
 800a9b0:	9b07      	ldr	r3, [sp, #28]
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 8104 	beq.w	800abc4 <_dtoa_r+0xb54>
 800a9bc:	2e00      	cmp	r6, #0
 800a9be:	dd05      	ble.n	800a9cc <_dtoa_r+0x95c>
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	4658      	mov	r0, fp
 800a9c6:	f000 fc6f 	bl	800b2a8 <__lshift>
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d05a      	beq.n	800aa88 <_dtoa_r+0xa18>
 800a9d2:	6869      	ldr	r1, [r5, #4]
 800a9d4:	4658      	mov	r0, fp
 800a9d6:	f000 fa0f 	bl	800adf8 <_Balloc>
 800a9da:	4606      	mov	r6, r0
 800a9dc:	b928      	cbnz	r0, 800a9ea <_dtoa_r+0x97a>
 800a9de:	4b84      	ldr	r3, [pc, #528]	@ (800abf0 <_dtoa_r+0xb80>)
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a9e6:	f7ff bb5a 	b.w	800a09e <_dtoa_r+0x2e>
 800a9ea:	692a      	ldr	r2, [r5, #16]
 800a9ec:	3202      	adds	r2, #2
 800a9ee:	0092      	lsls	r2, r2, #2
 800a9f0:	f105 010c 	add.w	r1, r5, #12
 800a9f4:	300c      	adds	r0, #12
 800a9f6:	f7ff fa9c 	bl	8009f32 <memcpy>
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4658      	mov	r0, fp
 800aa00:	f000 fc52 	bl	800b2a8 <__lshift>
 800aa04:	f10a 0301 	add.w	r3, sl, #1
 800aa08:	9307      	str	r3, [sp, #28]
 800aa0a:	9b00      	ldr	r3, [sp, #0]
 800aa0c:	4453      	add	r3, sl
 800aa0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa10:	9b02      	ldr	r3, [sp, #8]
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	462f      	mov	r7, r5
 800aa18:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	9b07      	ldr	r3, [sp, #28]
 800aa1e:	4621      	mov	r1, r4
 800aa20:	3b01      	subs	r3, #1
 800aa22:	4648      	mov	r0, r9
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	f7ff fa99 	bl	8009f5c <quorem>
 800aa2a:	4639      	mov	r1, r7
 800aa2c:	9002      	str	r0, [sp, #8]
 800aa2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa32:	4648      	mov	r0, r9
 800aa34:	f000 fca4 	bl	800b380 <__mcmp>
 800aa38:	462a      	mov	r2, r5
 800aa3a:	9008      	str	r0, [sp, #32]
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4658      	mov	r0, fp
 800aa40:	f000 fcba 	bl	800b3b8 <__mdiff>
 800aa44:	68c2      	ldr	r2, [r0, #12]
 800aa46:	4606      	mov	r6, r0
 800aa48:	bb02      	cbnz	r2, 800aa8c <_dtoa_r+0xa1c>
 800aa4a:	4601      	mov	r1, r0
 800aa4c:	4648      	mov	r0, r9
 800aa4e:	f000 fc97 	bl	800b380 <__mcmp>
 800aa52:	4602      	mov	r2, r0
 800aa54:	4631      	mov	r1, r6
 800aa56:	4658      	mov	r0, fp
 800aa58:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa5a:	f000 fa0d 	bl	800ae78 <_Bfree>
 800aa5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa62:	9e07      	ldr	r6, [sp, #28]
 800aa64:	ea43 0102 	orr.w	r1, r3, r2
 800aa68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa6a:	4319      	orrs	r1, r3
 800aa6c:	d110      	bne.n	800aa90 <_dtoa_r+0xa20>
 800aa6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa72:	d029      	beq.n	800aac8 <_dtoa_r+0xa58>
 800aa74:	9b08      	ldr	r3, [sp, #32]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	dd02      	ble.n	800aa80 <_dtoa_r+0xa10>
 800aa7a:	9b02      	ldr	r3, [sp, #8]
 800aa7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aa80:	9b00      	ldr	r3, [sp, #0]
 800aa82:	f883 8000 	strb.w	r8, [r3]
 800aa86:	e63f      	b.n	800a708 <_dtoa_r+0x698>
 800aa88:	4628      	mov	r0, r5
 800aa8a:	e7bb      	b.n	800aa04 <_dtoa_r+0x994>
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	e7e1      	b.n	800aa54 <_dtoa_r+0x9e4>
 800aa90:	9b08      	ldr	r3, [sp, #32]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	db04      	blt.n	800aaa0 <_dtoa_r+0xa30>
 800aa96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	d120      	bne.n	800aae2 <_dtoa_r+0xa72>
 800aaa0:	2a00      	cmp	r2, #0
 800aaa2:	dded      	ble.n	800aa80 <_dtoa_r+0xa10>
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	4658      	mov	r0, fp
 800aaaa:	f000 fbfd 	bl	800b2a8 <__lshift>
 800aaae:	4621      	mov	r1, r4
 800aab0:	4681      	mov	r9, r0
 800aab2:	f000 fc65 	bl	800b380 <__mcmp>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	dc03      	bgt.n	800aac2 <_dtoa_r+0xa52>
 800aaba:	d1e1      	bne.n	800aa80 <_dtoa_r+0xa10>
 800aabc:	f018 0f01 	tst.w	r8, #1
 800aac0:	d0de      	beq.n	800aa80 <_dtoa_r+0xa10>
 800aac2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aac6:	d1d8      	bne.n	800aa7a <_dtoa_r+0xa0a>
 800aac8:	9a00      	ldr	r2, [sp, #0]
 800aaca:	2339      	movs	r3, #57	@ 0x39
 800aacc:	7013      	strb	r3, [r2, #0]
 800aace:	4633      	mov	r3, r6
 800aad0:	461e      	mov	r6, r3
 800aad2:	3b01      	subs	r3, #1
 800aad4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aad8:	2a39      	cmp	r2, #57	@ 0x39
 800aada:	d052      	beq.n	800ab82 <_dtoa_r+0xb12>
 800aadc:	3201      	adds	r2, #1
 800aade:	701a      	strb	r2, [r3, #0]
 800aae0:	e612      	b.n	800a708 <_dtoa_r+0x698>
 800aae2:	2a00      	cmp	r2, #0
 800aae4:	dd07      	ble.n	800aaf6 <_dtoa_r+0xa86>
 800aae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aaea:	d0ed      	beq.n	800aac8 <_dtoa_r+0xa58>
 800aaec:	9a00      	ldr	r2, [sp, #0]
 800aaee:	f108 0301 	add.w	r3, r8, #1
 800aaf2:	7013      	strb	r3, [r2, #0]
 800aaf4:	e608      	b.n	800a708 <_dtoa_r+0x698>
 800aaf6:	9b07      	ldr	r3, [sp, #28]
 800aaf8:	9a07      	ldr	r2, [sp, #28]
 800aafa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aafe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d028      	beq.n	800ab56 <_dtoa_r+0xae6>
 800ab04:	4649      	mov	r1, r9
 800ab06:	2300      	movs	r3, #0
 800ab08:	220a      	movs	r2, #10
 800ab0a:	4658      	mov	r0, fp
 800ab0c:	f000 f9d6 	bl	800aebc <__multadd>
 800ab10:	42af      	cmp	r7, r5
 800ab12:	4681      	mov	r9, r0
 800ab14:	f04f 0300 	mov.w	r3, #0
 800ab18:	f04f 020a 	mov.w	r2, #10
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	4658      	mov	r0, fp
 800ab20:	d107      	bne.n	800ab32 <_dtoa_r+0xac2>
 800ab22:	f000 f9cb 	bl	800aebc <__multadd>
 800ab26:	4607      	mov	r7, r0
 800ab28:	4605      	mov	r5, r0
 800ab2a:	9b07      	ldr	r3, [sp, #28]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	9307      	str	r3, [sp, #28]
 800ab30:	e774      	b.n	800aa1c <_dtoa_r+0x9ac>
 800ab32:	f000 f9c3 	bl	800aebc <__multadd>
 800ab36:	4629      	mov	r1, r5
 800ab38:	4607      	mov	r7, r0
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	220a      	movs	r2, #10
 800ab3e:	4658      	mov	r0, fp
 800ab40:	f000 f9bc 	bl	800aebc <__multadd>
 800ab44:	4605      	mov	r5, r0
 800ab46:	e7f0      	b.n	800ab2a <_dtoa_r+0xaba>
 800ab48:	9b00      	ldr	r3, [sp, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bfcc      	ite	gt
 800ab4e:	461e      	movgt	r6, r3
 800ab50:	2601      	movle	r6, #1
 800ab52:	4456      	add	r6, sl
 800ab54:	2700      	movs	r7, #0
 800ab56:	4649      	mov	r1, r9
 800ab58:	2201      	movs	r2, #1
 800ab5a:	4658      	mov	r0, fp
 800ab5c:	f000 fba4 	bl	800b2a8 <__lshift>
 800ab60:	4621      	mov	r1, r4
 800ab62:	4681      	mov	r9, r0
 800ab64:	f000 fc0c 	bl	800b380 <__mcmp>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	dcb0      	bgt.n	800aace <_dtoa_r+0xa5e>
 800ab6c:	d102      	bne.n	800ab74 <_dtoa_r+0xb04>
 800ab6e:	f018 0f01 	tst.w	r8, #1
 800ab72:	d1ac      	bne.n	800aace <_dtoa_r+0xa5e>
 800ab74:	4633      	mov	r3, r6
 800ab76:	461e      	mov	r6, r3
 800ab78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab7c:	2a30      	cmp	r2, #48	@ 0x30
 800ab7e:	d0fa      	beq.n	800ab76 <_dtoa_r+0xb06>
 800ab80:	e5c2      	b.n	800a708 <_dtoa_r+0x698>
 800ab82:	459a      	cmp	sl, r3
 800ab84:	d1a4      	bne.n	800aad0 <_dtoa_r+0xa60>
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	9304      	str	r3, [sp, #16]
 800ab8c:	2331      	movs	r3, #49	@ 0x31
 800ab8e:	f88a 3000 	strb.w	r3, [sl]
 800ab92:	e5b9      	b.n	800a708 <_dtoa_r+0x698>
 800ab94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800abf4 <_dtoa_r+0xb84>
 800ab9a:	b11b      	cbz	r3, 800aba4 <_dtoa_r+0xb34>
 800ab9c:	f10a 0308 	add.w	r3, sl, #8
 800aba0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	4650      	mov	r0, sl
 800aba6:	b019      	add	sp, #100	@ 0x64
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abae:	2b01      	cmp	r3, #1
 800abb0:	f77f ae37 	ble.w	800a822 <_dtoa_r+0x7b2>
 800abb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800abb8:	2001      	movs	r0, #1
 800abba:	e655      	b.n	800a868 <_dtoa_r+0x7f8>
 800abbc:	9b00      	ldr	r3, [sp, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f77f aed6 	ble.w	800a970 <_dtoa_r+0x900>
 800abc4:	4656      	mov	r6, sl
 800abc6:	4621      	mov	r1, r4
 800abc8:	4648      	mov	r0, r9
 800abca:	f7ff f9c7 	bl	8009f5c <quorem>
 800abce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800abd2:	f806 8b01 	strb.w	r8, [r6], #1
 800abd6:	9b00      	ldr	r3, [sp, #0]
 800abd8:	eba6 020a 	sub.w	r2, r6, sl
 800abdc:	4293      	cmp	r3, r2
 800abde:	ddb3      	ble.n	800ab48 <_dtoa_r+0xad8>
 800abe0:	4649      	mov	r1, r9
 800abe2:	2300      	movs	r3, #0
 800abe4:	220a      	movs	r2, #10
 800abe6:	4658      	mov	r0, fp
 800abe8:	f000 f968 	bl	800aebc <__multadd>
 800abec:	4681      	mov	r9, r0
 800abee:	e7ea      	b.n	800abc6 <_dtoa_r+0xb56>
 800abf0:	0800d855 	.word	0x0800d855
 800abf4:	0800d7d9 	.word	0x0800d7d9

0800abf8 <_free_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4605      	mov	r5, r0
 800abfc:	2900      	cmp	r1, #0
 800abfe:	d041      	beq.n	800ac84 <_free_r+0x8c>
 800ac00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac04:	1f0c      	subs	r4, r1, #4
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	bfb8      	it	lt
 800ac0a:	18e4      	addlt	r4, r4, r3
 800ac0c:	f000 f8e8 	bl	800ade0 <__malloc_lock>
 800ac10:	4a1d      	ldr	r2, [pc, #116]	@ (800ac88 <_free_r+0x90>)
 800ac12:	6813      	ldr	r3, [r2, #0]
 800ac14:	b933      	cbnz	r3, 800ac24 <_free_r+0x2c>
 800ac16:	6063      	str	r3, [r4, #4]
 800ac18:	6014      	str	r4, [r2, #0]
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac20:	f000 b8e4 	b.w	800adec <__malloc_unlock>
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	d908      	bls.n	800ac3a <_free_r+0x42>
 800ac28:	6820      	ldr	r0, [r4, #0]
 800ac2a:	1821      	adds	r1, r4, r0
 800ac2c:	428b      	cmp	r3, r1
 800ac2e:	bf01      	itttt	eq
 800ac30:	6819      	ldreq	r1, [r3, #0]
 800ac32:	685b      	ldreq	r3, [r3, #4]
 800ac34:	1809      	addeq	r1, r1, r0
 800ac36:	6021      	streq	r1, [r4, #0]
 800ac38:	e7ed      	b.n	800ac16 <_free_r+0x1e>
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	b10b      	cbz	r3, 800ac44 <_free_r+0x4c>
 800ac40:	42a3      	cmp	r3, r4
 800ac42:	d9fa      	bls.n	800ac3a <_free_r+0x42>
 800ac44:	6811      	ldr	r1, [r2, #0]
 800ac46:	1850      	adds	r0, r2, r1
 800ac48:	42a0      	cmp	r0, r4
 800ac4a:	d10b      	bne.n	800ac64 <_free_r+0x6c>
 800ac4c:	6820      	ldr	r0, [r4, #0]
 800ac4e:	4401      	add	r1, r0
 800ac50:	1850      	adds	r0, r2, r1
 800ac52:	4283      	cmp	r3, r0
 800ac54:	6011      	str	r1, [r2, #0]
 800ac56:	d1e0      	bne.n	800ac1a <_free_r+0x22>
 800ac58:	6818      	ldr	r0, [r3, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	6053      	str	r3, [r2, #4]
 800ac5e:	4408      	add	r0, r1
 800ac60:	6010      	str	r0, [r2, #0]
 800ac62:	e7da      	b.n	800ac1a <_free_r+0x22>
 800ac64:	d902      	bls.n	800ac6c <_free_r+0x74>
 800ac66:	230c      	movs	r3, #12
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	e7d6      	b.n	800ac1a <_free_r+0x22>
 800ac6c:	6820      	ldr	r0, [r4, #0]
 800ac6e:	1821      	adds	r1, r4, r0
 800ac70:	428b      	cmp	r3, r1
 800ac72:	bf04      	itt	eq
 800ac74:	6819      	ldreq	r1, [r3, #0]
 800ac76:	685b      	ldreq	r3, [r3, #4]
 800ac78:	6063      	str	r3, [r4, #4]
 800ac7a:	bf04      	itt	eq
 800ac7c:	1809      	addeq	r1, r1, r0
 800ac7e:	6021      	streq	r1, [r4, #0]
 800ac80:	6054      	str	r4, [r2, #4]
 800ac82:	e7ca      	b.n	800ac1a <_free_r+0x22>
 800ac84:	bd38      	pop	{r3, r4, r5, pc}
 800ac86:	bf00      	nop
 800ac88:	20005278 	.word	0x20005278

0800ac8c <malloc>:
 800ac8c:	4b02      	ldr	r3, [pc, #8]	@ (800ac98 <malloc+0xc>)
 800ac8e:	4601      	mov	r1, r0
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	f000 b825 	b.w	800ace0 <_malloc_r>
 800ac96:	bf00      	nop
 800ac98:	20000040 	.word	0x20000040

0800ac9c <sbrk_aligned>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	4e0f      	ldr	r6, [pc, #60]	@ (800acdc <sbrk_aligned+0x40>)
 800aca0:	460c      	mov	r4, r1
 800aca2:	6831      	ldr	r1, [r6, #0]
 800aca4:	4605      	mov	r5, r0
 800aca6:	b911      	cbnz	r1, 800acae <sbrk_aligned+0x12>
 800aca8:	f002 f806 	bl	800ccb8 <_sbrk_r>
 800acac:	6030      	str	r0, [r6, #0]
 800acae:	4621      	mov	r1, r4
 800acb0:	4628      	mov	r0, r5
 800acb2:	f002 f801 	bl	800ccb8 <_sbrk_r>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	d103      	bne.n	800acc2 <sbrk_aligned+0x26>
 800acba:	f04f 34ff 	mov.w	r4, #4294967295
 800acbe:	4620      	mov	r0, r4
 800acc0:	bd70      	pop	{r4, r5, r6, pc}
 800acc2:	1cc4      	adds	r4, r0, #3
 800acc4:	f024 0403 	bic.w	r4, r4, #3
 800acc8:	42a0      	cmp	r0, r4
 800acca:	d0f8      	beq.n	800acbe <sbrk_aligned+0x22>
 800accc:	1a21      	subs	r1, r4, r0
 800acce:	4628      	mov	r0, r5
 800acd0:	f001 fff2 	bl	800ccb8 <_sbrk_r>
 800acd4:	3001      	adds	r0, #1
 800acd6:	d1f2      	bne.n	800acbe <sbrk_aligned+0x22>
 800acd8:	e7ef      	b.n	800acba <sbrk_aligned+0x1e>
 800acda:	bf00      	nop
 800acdc:	20005274 	.word	0x20005274

0800ace0 <_malloc_r>:
 800ace0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace4:	1ccd      	adds	r5, r1, #3
 800ace6:	f025 0503 	bic.w	r5, r5, #3
 800acea:	3508      	adds	r5, #8
 800acec:	2d0c      	cmp	r5, #12
 800acee:	bf38      	it	cc
 800acf0:	250c      	movcc	r5, #12
 800acf2:	2d00      	cmp	r5, #0
 800acf4:	4606      	mov	r6, r0
 800acf6:	db01      	blt.n	800acfc <_malloc_r+0x1c>
 800acf8:	42a9      	cmp	r1, r5
 800acfa:	d904      	bls.n	800ad06 <_malloc_r+0x26>
 800acfc:	230c      	movs	r3, #12
 800acfe:	6033      	str	r3, [r6, #0]
 800ad00:	2000      	movs	r0, #0
 800ad02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800addc <_malloc_r+0xfc>
 800ad0a:	f000 f869 	bl	800ade0 <__malloc_lock>
 800ad0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad12:	461c      	mov	r4, r3
 800ad14:	bb44      	cbnz	r4, 800ad68 <_malloc_r+0x88>
 800ad16:	4629      	mov	r1, r5
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f7ff ffbf 	bl	800ac9c <sbrk_aligned>
 800ad1e:	1c43      	adds	r3, r0, #1
 800ad20:	4604      	mov	r4, r0
 800ad22:	d158      	bne.n	800add6 <_malloc_r+0xf6>
 800ad24:	f8d8 4000 	ldr.w	r4, [r8]
 800ad28:	4627      	mov	r7, r4
 800ad2a:	2f00      	cmp	r7, #0
 800ad2c:	d143      	bne.n	800adb6 <_malloc_r+0xd6>
 800ad2e:	2c00      	cmp	r4, #0
 800ad30:	d04b      	beq.n	800adca <_malloc_r+0xea>
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	4639      	mov	r1, r7
 800ad36:	4630      	mov	r0, r6
 800ad38:	eb04 0903 	add.w	r9, r4, r3
 800ad3c:	f001 ffbc 	bl	800ccb8 <_sbrk_r>
 800ad40:	4581      	cmp	r9, r0
 800ad42:	d142      	bne.n	800adca <_malloc_r+0xea>
 800ad44:	6821      	ldr	r1, [r4, #0]
 800ad46:	1a6d      	subs	r5, r5, r1
 800ad48:	4629      	mov	r1, r5
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f7ff ffa6 	bl	800ac9c <sbrk_aligned>
 800ad50:	3001      	adds	r0, #1
 800ad52:	d03a      	beq.n	800adca <_malloc_r+0xea>
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	442b      	add	r3, r5
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	bb62      	cbnz	r2, 800adbc <_malloc_r+0xdc>
 800ad62:	f8c8 7000 	str.w	r7, [r8]
 800ad66:	e00f      	b.n	800ad88 <_malloc_r+0xa8>
 800ad68:	6822      	ldr	r2, [r4, #0]
 800ad6a:	1b52      	subs	r2, r2, r5
 800ad6c:	d420      	bmi.n	800adb0 <_malloc_r+0xd0>
 800ad6e:	2a0b      	cmp	r2, #11
 800ad70:	d917      	bls.n	800ada2 <_malloc_r+0xc2>
 800ad72:	1961      	adds	r1, r4, r5
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	6025      	str	r5, [r4, #0]
 800ad78:	bf18      	it	ne
 800ad7a:	6059      	strne	r1, [r3, #4]
 800ad7c:	6863      	ldr	r3, [r4, #4]
 800ad7e:	bf08      	it	eq
 800ad80:	f8c8 1000 	streq.w	r1, [r8]
 800ad84:	5162      	str	r2, [r4, r5]
 800ad86:	604b      	str	r3, [r1, #4]
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f000 f82f 	bl	800adec <__malloc_unlock>
 800ad8e:	f104 000b 	add.w	r0, r4, #11
 800ad92:	1d23      	adds	r3, r4, #4
 800ad94:	f020 0007 	bic.w	r0, r0, #7
 800ad98:	1ac2      	subs	r2, r0, r3
 800ad9a:	bf1c      	itt	ne
 800ad9c:	1a1b      	subne	r3, r3, r0
 800ad9e:	50a3      	strne	r3, [r4, r2]
 800ada0:	e7af      	b.n	800ad02 <_malloc_r+0x22>
 800ada2:	6862      	ldr	r2, [r4, #4]
 800ada4:	42a3      	cmp	r3, r4
 800ada6:	bf0c      	ite	eq
 800ada8:	f8c8 2000 	streq.w	r2, [r8]
 800adac:	605a      	strne	r2, [r3, #4]
 800adae:	e7eb      	b.n	800ad88 <_malloc_r+0xa8>
 800adb0:	4623      	mov	r3, r4
 800adb2:	6864      	ldr	r4, [r4, #4]
 800adb4:	e7ae      	b.n	800ad14 <_malloc_r+0x34>
 800adb6:	463c      	mov	r4, r7
 800adb8:	687f      	ldr	r7, [r7, #4]
 800adba:	e7b6      	b.n	800ad2a <_malloc_r+0x4a>
 800adbc:	461a      	mov	r2, r3
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	d1fb      	bne.n	800adbc <_malloc_r+0xdc>
 800adc4:	2300      	movs	r3, #0
 800adc6:	6053      	str	r3, [r2, #4]
 800adc8:	e7de      	b.n	800ad88 <_malloc_r+0xa8>
 800adca:	230c      	movs	r3, #12
 800adcc:	6033      	str	r3, [r6, #0]
 800adce:	4630      	mov	r0, r6
 800add0:	f000 f80c 	bl	800adec <__malloc_unlock>
 800add4:	e794      	b.n	800ad00 <_malloc_r+0x20>
 800add6:	6005      	str	r5, [r0, #0]
 800add8:	e7d6      	b.n	800ad88 <_malloc_r+0xa8>
 800adda:	bf00      	nop
 800addc:	20005278 	.word	0x20005278

0800ade0 <__malloc_lock>:
 800ade0:	4801      	ldr	r0, [pc, #4]	@ (800ade8 <__malloc_lock+0x8>)
 800ade2:	f7ff b8a4 	b.w	8009f2e <__retarget_lock_acquire_recursive>
 800ade6:	bf00      	nop
 800ade8:	20005270 	.word	0x20005270

0800adec <__malloc_unlock>:
 800adec:	4801      	ldr	r0, [pc, #4]	@ (800adf4 <__malloc_unlock+0x8>)
 800adee:	f7ff b89f 	b.w	8009f30 <__retarget_lock_release_recursive>
 800adf2:	bf00      	nop
 800adf4:	20005270 	.word	0x20005270

0800adf8 <_Balloc>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	69c6      	ldr	r6, [r0, #28]
 800adfc:	4604      	mov	r4, r0
 800adfe:	460d      	mov	r5, r1
 800ae00:	b976      	cbnz	r6, 800ae20 <_Balloc+0x28>
 800ae02:	2010      	movs	r0, #16
 800ae04:	f7ff ff42 	bl	800ac8c <malloc>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	61e0      	str	r0, [r4, #28]
 800ae0c:	b920      	cbnz	r0, 800ae18 <_Balloc+0x20>
 800ae0e:	4b18      	ldr	r3, [pc, #96]	@ (800ae70 <_Balloc+0x78>)
 800ae10:	4818      	ldr	r0, [pc, #96]	@ (800ae74 <_Balloc+0x7c>)
 800ae12:	216b      	movs	r1, #107	@ 0x6b
 800ae14:	f001 ff68 	bl	800cce8 <__assert_func>
 800ae18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae1c:	6006      	str	r6, [r0, #0]
 800ae1e:	60c6      	str	r6, [r0, #12]
 800ae20:	69e6      	ldr	r6, [r4, #28]
 800ae22:	68f3      	ldr	r3, [r6, #12]
 800ae24:	b183      	cbz	r3, 800ae48 <_Balloc+0x50>
 800ae26:	69e3      	ldr	r3, [r4, #28]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae2e:	b9b8      	cbnz	r0, 800ae60 <_Balloc+0x68>
 800ae30:	2101      	movs	r1, #1
 800ae32:	fa01 f605 	lsl.w	r6, r1, r5
 800ae36:	1d72      	adds	r2, r6, #5
 800ae38:	0092      	lsls	r2, r2, #2
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f001 ff72 	bl	800cd24 <_calloc_r>
 800ae40:	b160      	cbz	r0, 800ae5c <_Balloc+0x64>
 800ae42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae46:	e00e      	b.n	800ae66 <_Balloc+0x6e>
 800ae48:	2221      	movs	r2, #33	@ 0x21
 800ae4a:	2104      	movs	r1, #4
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f001 ff69 	bl	800cd24 <_calloc_r>
 800ae52:	69e3      	ldr	r3, [r4, #28]
 800ae54:	60f0      	str	r0, [r6, #12]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e4      	bne.n	800ae26 <_Balloc+0x2e>
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}
 800ae60:	6802      	ldr	r2, [r0, #0]
 800ae62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae66:	2300      	movs	r3, #0
 800ae68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae6c:	e7f7      	b.n	800ae5e <_Balloc+0x66>
 800ae6e:	bf00      	nop
 800ae70:	0800d7e6 	.word	0x0800d7e6
 800ae74:	0800d866 	.word	0x0800d866

0800ae78 <_Bfree>:
 800ae78:	b570      	push	{r4, r5, r6, lr}
 800ae7a:	69c6      	ldr	r6, [r0, #28]
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	460c      	mov	r4, r1
 800ae80:	b976      	cbnz	r6, 800aea0 <_Bfree+0x28>
 800ae82:	2010      	movs	r0, #16
 800ae84:	f7ff ff02 	bl	800ac8c <malloc>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	61e8      	str	r0, [r5, #28]
 800ae8c:	b920      	cbnz	r0, 800ae98 <_Bfree+0x20>
 800ae8e:	4b09      	ldr	r3, [pc, #36]	@ (800aeb4 <_Bfree+0x3c>)
 800ae90:	4809      	ldr	r0, [pc, #36]	@ (800aeb8 <_Bfree+0x40>)
 800ae92:	218f      	movs	r1, #143	@ 0x8f
 800ae94:	f001 ff28 	bl	800cce8 <__assert_func>
 800ae98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae9c:	6006      	str	r6, [r0, #0]
 800ae9e:	60c6      	str	r6, [r0, #12]
 800aea0:	b13c      	cbz	r4, 800aeb2 <_Bfree+0x3a>
 800aea2:	69eb      	ldr	r3, [r5, #28]
 800aea4:	6862      	ldr	r2, [r4, #4]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aeac:	6021      	str	r1, [r4, #0]
 800aeae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
 800aeb4:	0800d7e6 	.word	0x0800d7e6
 800aeb8:	0800d866 	.word	0x0800d866

0800aebc <__multadd>:
 800aebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec0:	690d      	ldr	r5, [r1, #16]
 800aec2:	4607      	mov	r7, r0
 800aec4:	460c      	mov	r4, r1
 800aec6:	461e      	mov	r6, r3
 800aec8:	f101 0c14 	add.w	ip, r1, #20
 800aecc:	2000      	movs	r0, #0
 800aece:	f8dc 3000 	ldr.w	r3, [ip]
 800aed2:	b299      	uxth	r1, r3
 800aed4:	fb02 6101 	mla	r1, r2, r1, r6
 800aed8:	0c1e      	lsrs	r6, r3, #16
 800aeda:	0c0b      	lsrs	r3, r1, #16
 800aedc:	fb02 3306 	mla	r3, r2, r6, r3
 800aee0:	b289      	uxth	r1, r1
 800aee2:	3001      	adds	r0, #1
 800aee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aee8:	4285      	cmp	r5, r0
 800aeea:	f84c 1b04 	str.w	r1, [ip], #4
 800aeee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aef2:	dcec      	bgt.n	800aece <__multadd+0x12>
 800aef4:	b30e      	cbz	r6, 800af3a <__multadd+0x7e>
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	42ab      	cmp	r3, r5
 800aefa:	dc19      	bgt.n	800af30 <__multadd+0x74>
 800aefc:	6861      	ldr	r1, [r4, #4]
 800aefe:	4638      	mov	r0, r7
 800af00:	3101      	adds	r1, #1
 800af02:	f7ff ff79 	bl	800adf8 <_Balloc>
 800af06:	4680      	mov	r8, r0
 800af08:	b928      	cbnz	r0, 800af16 <__multadd+0x5a>
 800af0a:	4602      	mov	r2, r0
 800af0c:	4b0c      	ldr	r3, [pc, #48]	@ (800af40 <__multadd+0x84>)
 800af0e:	480d      	ldr	r0, [pc, #52]	@ (800af44 <__multadd+0x88>)
 800af10:	21ba      	movs	r1, #186	@ 0xba
 800af12:	f001 fee9 	bl	800cce8 <__assert_func>
 800af16:	6922      	ldr	r2, [r4, #16]
 800af18:	3202      	adds	r2, #2
 800af1a:	f104 010c 	add.w	r1, r4, #12
 800af1e:	0092      	lsls	r2, r2, #2
 800af20:	300c      	adds	r0, #12
 800af22:	f7ff f806 	bl	8009f32 <memcpy>
 800af26:	4621      	mov	r1, r4
 800af28:	4638      	mov	r0, r7
 800af2a:	f7ff ffa5 	bl	800ae78 <_Bfree>
 800af2e:	4644      	mov	r4, r8
 800af30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af34:	3501      	adds	r5, #1
 800af36:	615e      	str	r6, [r3, #20]
 800af38:	6125      	str	r5, [r4, #16]
 800af3a:	4620      	mov	r0, r4
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	0800d855 	.word	0x0800d855
 800af44:	0800d866 	.word	0x0800d866

0800af48 <__s2b>:
 800af48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af4c:	460c      	mov	r4, r1
 800af4e:	4615      	mov	r5, r2
 800af50:	461f      	mov	r7, r3
 800af52:	2209      	movs	r2, #9
 800af54:	3308      	adds	r3, #8
 800af56:	4606      	mov	r6, r0
 800af58:	fb93 f3f2 	sdiv	r3, r3, r2
 800af5c:	2100      	movs	r1, #0
 800af5e:	2201      	movs	r2, #1
 800af60:	429a      	cmp	r2, r3
 800af62:	db09      	blt.n	800af78 <__s2b+0x30>
 800af64:	4630      	mov	r0, r6
 800af66:	f7ff ff47 	bl	800adf8 <_Balloc>
 800af6a:	b940      	cbnz	r0, 800af7e <__s2b+0x36>
 800af6c:	4602      	mov	r2, r0
 800af6e:	4b19      	ldr	r3, [pc, #100]	@ (800afd4 <__s2b+0x8c>)
 800af70:	4819      	ldr	r0, [pc, #100]	@ (800afd8 <__s2b+0x90>)
 800af72:	21d3      	movs	r1, #211	@ 0xd3
 800af74:	f001 feb8 	bl	800cce8 <__assert_func>
 800af78:	0052      	lsls	r2, r2, #1
 800af7a:	3101      	adds	r1, #1
 800af7c:	e7f0      	b.n	800af60 <__s2b+0x18>
 800af7e:	9b08      	ldr	r3, [sp, #32]
 800af80:	6143      	str	r3, [r0, #20]
 800af82:	2d09      	cmp	r5, #9
 800af84:	f04f 0301 	mov.w	r3, #1
 800af88:	6103      	str	r3, [r0, #16]
 800af8a:	dd16      	ble.n	800afba <__s2b+0x72>
 800af8c:	f104 0909 	add.w	r9, r4, #9
 800af90:	46c8      	mov	r8, r9
 800af92:	442c      	add	r4, r5
 800af94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af98:	4601      	mov	r1, r0
 800af9a:	3b30      	subs	r3, #48	@ 0x30
 800af9c:	220a      	movs	r2, #10
 800af9e:	4630      	mov	r0, r6
 800afa0:	f7ff ff8c 	bl	800aebc <__multadd>
 800afa4:	45a0      	cmp	r8, r4
 800afa6:	d1f5      	bne.n	800af94 <__s2b+0x4c>
 800afa8:	f1a5 0408 	sub.w	r4, r5, #8
 800afac:	444c      	add	r4, r9
 800afae:	1b2d      	subs	r5, r5, r4
 800afb0:	1963      	adds	r3, r4, r5
 800afb2:	42bb      	cmp	r3, r7
 800afb4:	db04      	blt.n	800afc0 <__s2b+0x78>
 800afb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afba:	340a      	adds	r4, #10
 800afbc:	2509      	movs	r5, #9
 800afbe:	e7f6      	b.n	800afae <__s2b+0x66>
 800afc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afc4:	4601      	mov	r1, r0
 800afc6:	3b30      	subs	r3, #48	@ 0x30
 800afc8:	220a      	movs	r2, #10
 800afca:	4630      	mov	r0, r6
 800afcc:	f7ff ff76 	bl	800aebc <__multadd>
 800afd0:	e7ee      	b.n	800afb0 <__s2b+0x68>
 800afd2:	bf00      	nop
 800afd4:	0800d855 	.word	0x0800d855
 800afd8:	0800d866 	.word	0x0800d866

0800afdc <__hi0bits>:
 800afdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800afe0:	4603      	mov	r3, r0
 800afe2:	bf36      	itet	cc
 800afe4:	0403      	lslcc	r3, r0, #16
 800afe6:	2000      	movcs	r0, #0
 800afe8:	2010      	movcc	r0, #16
 800afea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afee:	bf3c      	itt	cc
 800aff0:	021b      	lslcc	r3, r3, #8
 800aff2:	3008      	addcc	r0, #8
 800aff4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aff8:	bf3c      	itt	cc
 800affa:	011b      	lslcc	r3, r3, #4
 800affc:	3004      	addcc	r0, #4
 800affe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b002:	bf3c      	itt	cc
 800b004:	009b      	lslcc	r3, r3, #2
 800b006:	3002      	addcc	r0, #2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	db05      	blt.n	800b018 <__hi0bits+0x3c>
 800b00c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b010:	f100 0001 	add.w	r0, r0, #1
 800b014:	bf08      	it	eq
 800b016:	2020      	moveq	r0, #32
 800b018:	4770      	bx	lr

0800b01a <__lo0bits>:
 800b01a:	6803      	ldr	r3, [r0, #0]
 800b01c:	4602      	mov	r2, r0
 800b01e:	f013 0007 	ands.w	r0, r3, #7
 800b022:	d00b      	beq.n	800b03c <__lo0bits+0x22>
 800b024:	07d9      	lsls	r1, r3, #31
 800b026:	d421      	bmi.n	800b06c <__lo0bits+0x52>
 800b028:	0798      	lsls	r0, r3, #30
 800b02a:	bf49      	itett	mi
 800b02c:	085b      	lsrmi	r3, r3, #1
 800b02e:	089b      	lsrpl	r3, r3, #2
 800b030:	2001      	movmi	r0, #1
 800b032:	6013      	strmi	r3, [r2, #0]
 800b034:	bf5c      	itt	pl
 800b036:	6013      	strpl	r3, [r2, #0]
 800b038:	2002      	movpl	r0, #2
 800b03a:	4770      	bx	lr
 800b03c:	b299      	uxth	r1, r3
 800b03e:	b909      	cbnz	r1, 800b044 <__lo0bits+0x2a>
 800b040:	0c1b      	lsrs	r3, r3, #16
 800b042:	2010      	movs	r0, #16
 800b044:	b2d9      	uxtb	r1, r3
 800b046:	b909      	cbnz	r1, 800b04c <__lo0bits+0x32>
 800b048:	3008      	adds	r0, #8
 800b04a:	0a1b      	lsrs	r3, r3, #8
 800b04c:	0719      	lsls	r1, r3, #28
 800b04e:	bf04      	itt	eq
 800b050:	091b      	lsreq	r3, r3, #4
 800b052:	3004      	addeq	r0, #4
 800b054:	0799      	lsls	r1, r3, #30
 800b056:	bf04      	itt	eq
 800b058:	089b      	lsreq	r3, r3, #2
 800b05a:	3002      	addeq	r0, #2
 800b05c:	07d9      	lsls	r1, r3, #31
 800b05e:	d403      	bmi.n	800b068 <__lo0bits+0x4e>
 800b060:	085b      	lsrs	r3, r3, #1
 800b062:	f100 0001 	add.w	r0, r0, #1
 800b066:	d003      	beq.n	800b070 <__lo0bits+0x56>
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	4770      	bx	lr
 800b06c:	2000      	movs	r0, #0
 800b06e:	4770      	bx	lr
 800b070:	2020      	movs	r0, #32
 800b072:	4770      	bx	lr

0800b074 <__i2b>:
 800b074:	b510      	push	{r4, lr}
 800b076:	460c      	mov	r4, r1
 800b078:	2101      	movs	r1, #1
 800b07a:	f7ff febd 	bl	800adf8 <_Balloc>
 800b07e:	4602      	mov	r2, r0
 800b080:	b928      	cbnz	r0, 800b08e <__i2b+0x1a>
 800b082:	4b05      	ldr	r3, [pc, #20]	@ (800b098 <__i2b+0x24>)
 800b084:	4805      	ldr	r0, [pc, #20]	@ (800b09c <__i2b+0x28>)
 800b086:	f240 1145 	movw	r1, #325	@ 0x145
 800b08a:	f001 fe2d 	bl	800cce8 <__assert_func>
 800b08e:	2301      	movs	r3, #1
 800b090:	6144      	str	r4, [r0, #20]
 800b092:	6103      	str	r3, [r0, #16]
 800b094:	bd10      	pop	{r4, pc}
 800b096:	bf00      	nop
 800b098:	0800d855 	.word	0x0800d855
 800b09c:	0800d866 	.word	0x0800d866

0800b0a0 <__multiply>:
 800b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	4614      	mov	r4, r2
 800b0a6:	690a      	ldr	r2, [r1, #16]
 800b0a8:	6923      	ldr	r3, [r4, #16]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	bfa8      	it	ge
 800b0ae:	4623      	movge	r3, r4
 800b0b0:	460f      	mov	r7, r1
 800b0b2:	bfa4      	itt	ge
 800b0b4:	460c      	movge	r4, r1
 800b0b6:	461f      	movge	r7, r3
 800b0b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b0bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b0c0:	68a3      	ldr	r3, [r4, #8]
 800b0c2:	6861      	ldr	r1, [r4, #4]
 800b0c4:	eb0a 0609 	add.w	r6, sl, r9
 800b0c8:	42b3      	cmp	r3, r6
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	bfb8      	it	lt
 800b0ce:	3101      	addlt	r1, #1
 800b0d0:	f7ff fe92 	bl	800adf8 <_Balloc>
 800b0d4:	b930      	cbnz	r0, 800b0e4 <__multiply+0x44>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	4b44      	ldr	r3, [pc, #272]	@ (800b1ec <__multiply+0x14c>)
 800b0da:	4845      	ldr	r0, [pc, #276]	@ (800b1f0 <__multiply+0x150>)
 800b0dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b0e0:	f001 fe02 	bl	800cce8 <__assert_func>
 800b0e4:	f100 0514 	add.w	r5, r0, #20
 800b0e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4543      	cmp	r3, r8
 800b0f2:	d321      	bcc.n	800b138 <__multiply+0x98>
 800b0f4:	f107 0114 	add.w	r1, r7, #20
 800b0f8:	f104 0214 	add.w	r2, r4, #20
 800b0fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b100:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b104:	9302      	str	r3, [sp, #8]
 800b106:	1b13      	subs	r3, r2, r4
 800b108:	3b15      	subs	r3, #21
 800b10a:	f023 0303 	bic.w	r3, r3, #3
 800b10e:	3304      	adds	r3, #4
 800b110:	f104 0715 	add.w	r7, r4, #21
 800b114:	42ba      	cmp	r2, r7
 800b116:	bf38      	it	cc
 800b118:	2304      	movcc	r3, #4
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	9b02      	ldr	r3, [sp, #8]
 800b11e:	9103      	str	r1, [sp, #12]
 800b120:	428b      	cmp	r3, r1
 800b122:	d80c      	bhi.n	800b13e <__multiply+0x9e>
 800b124:	2e00      	cmp	r6, #0
 800b126:	dd03      	ble.n	800b130 <__multiply+0x90>
 800b128:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d05b      	beq.n	800b1e8 <__multiply+0x148>
 800b130:	6106      	str	r6, [r0, #16]
 800b132:	b005      	add	sp, #20
 800b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b138:	f843 2b04 	str.w	r2, [r3], #4
 800b13c:	e7d8      	b.n	800b0f0 <__multiply+0x50>
 800b13e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b142:	f1ba 0f00 	cmp.w	sl, #0
 800b146:	d024      	beq.n	800b192 <__multiply+0xf2>
 800b148:	f104 0e14 	add.w	lr, r4, #20
 800b14c:	46a9      	mov	r9, r5
 800b14e:	f04f 0c00 	mov.w	ip, #0
 800b152:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b156:	f8d9 3000 	ldr.w	r3, [r9]
 800b15a:	fa1f fb87 	uxth.w	fp, r7
 800b15e:	b29b      	uxth	r3, r3
 800b160:	fb0a 330b 	mla	r3, sl, fp, r3
 800b164:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b168:	f8d9 7000 	ldr.w	r7, [r9]
 800b16c:	4463      	add	r3, ip
 800b16e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b172:	fb0a c70b 	mla	r7, sl, fp, ip
 800b176:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b180:	4572      	cmp	r2, lr
 800b182:	f849 3b04 	str.w	r3, [r9], #4
 800b186:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b18a:	d8e2      	bhi.n	800b152 <__multiply+0xb2>
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	f845 c003 	str.w	ip, [r5, r3]
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b198:	3104      	adds	r1, #4
 800b19a:	f1b9 0f00 	cmp.w	r9, #0
 800b19e:	d021      	beq.n	800b1e4 <__multiply+0x144>
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	f104 0c14 	add.w	ip, r4, #20
 800b1a6:	46ae      	mov	lr, r5
 800b1a8:	f04f 0a00 	mov.w	sl, #0
 800b1ac:	f8bc b000 	ldrh.w	fp, [ip]
 800b1b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b1b4:	fb09 770b 	mla	r7, r9, fp, r7
 800b1b8:	4457      	add	r7, sl
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1c0:	f84e 3b04 	str.w	r3, [lr], #4
 800b1c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1cc:	f8be 3000 	ldrh.w	r3, [lr]
 800b1d0:	fb09 330a 	mla	r3, r9, sl, r3
 800b1d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b1d8:	4562      	cmp	r2, ip
 800b1da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1de:	d8e5      	bhi.n	800b1ac <__multiply+0x10c>
 800b1e0:	9f01      	ldr	r7, [sp, #4]
 800b1e2:	51eb      	str	r3, [r5, r7]
 800b1e4:	3504      	adds	r5, #4
 800b1e6:	e799      	b.n	800b11c <__multiply+0x7c>
 800b1e8:	3e01      	subs	r6, #1
 800b1ea:	e79b      	b.n	800b124 <__multiply+0x84>
 800b1ec:	0800d855 	.word	0x0800d855
 800b1f0:	0800d866 	.word	0x0800d866

0800b1f4 <__pow5mult>:
 800b1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1f8:	4615      	mov	r5, r2
 800b1fa:	f012 0203 	ands.w	r2, r2, #3
 800b1fe:	4607      	mov	r7, r0
 800b200:	460e      	mov	r6, r1
 800b202:	d007      	beq.n	800b214 <__pow5mult+0x20>
 800b204:	4c25      	ldr	r4, [pc, #148]	@ (800b29c <__pow5mult+0xa8>)
 800b206:	3a01      	subs	r2, #1
 800b208:	2300      	movs	r3, #0
 800b20a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b20e:	f7ff fe55 	bl	800aebc <__multadd>
 800b212:	4606      	mov	r6, r0
 800b214:	10ad      	asrs	r5, r5, #2
 800b216:	d03d      	beq.n	800b294 <__pow5mult+0xa0>
 800b218:	69fc      	ldr	r4, [r7, #28]
 800b21a:	b97c      	cbnz	r4, 800b23c <__pow5mult+0x48>
 800b21c:	2010      	movs	r0, #16
 800b21e:	f7ff fd35 	bl	800ac8c <malloc>
 800b222:	4602      	mov	r2, r0
 800b224:	61f8      	str	r0, [r7, #28]
 800b226:	b928      	cbnz	r0, 800b234 <__pow5mult+0x40>
 800b228:	4b1d      	ldr	r3, [pc, #116]	@ (800b2a0 <__pow5mult+0xac>)
 800b22a:	481e      	ldr	r0, [pc, #120]	@ (800b2a4 <__pow5mult+0xb0>)
 800b22c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b230:	f001 fd5a 	bl	800cce8 <__assert_func>
 800b234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b238:	6004      	str	r4, [r0, #0]
 800b23a:	60c4      	str	r4, [r0, #12]
 800b23c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b244:	b94c      	cbnz	r4, 800b25a <__pow5mult+0x66>
 800b246:	f240 2171 	movw	r1, #625	@ 0x271
 800b24a:	4638      	mov	r0, r7
 800b24c:	f7ff ff12 	bl	800b074 <__i2b>
 800b250:	2300      	movs	r3, #0
 800b252:	f8c8 0008 	str.w	r0, [r8, #8]
 800b256:	4604      	mov	r4, r0
 800b258:	6003      	str	r3, [r0, #0]
 800b25a:	f04f 0900 	mov.w	r9, #0
 800b25e:	07eb      	lsls	r3, r5, #31
 800b260:	d50a      	bpl.n	800b278 <__pow5mult+0x84>
 800b262:	4631      	mov	r1, r6
 800b264:	4622      	mov	r2, r4
 800b266:	4638      	mov	r0, r7
 800b268:	f7ff ff1a 	bl	800b0a0 <__multiply>
 800b26c:	4631      	mov	r1, r6
 800b26e:	4680      	mov	r8, r0
 800b270:	4638      	mov	r0, r7
 800b272:	f7ff fe01 	bl	800ae78 <_Bfree>
 800b276:	4646      	mov	r6, r8
 800b278:	106d      	asrs	r5, r5, #1
 800b27a:	d00b      	beq.n	800b294 <__pow5mult+0xa0>
 800b27c:	6820      	ldr	r0, [r4, #0]
 800b27e:	b938      	cbnz	r0, 800b290 <__pow5mult+0x9c>
 800b280:	4622      	mov	r2, r4
 800b282:	4621      	mov	r1, r4
 800b284:	4638      	mov	r0, r7
 800b286:	f7ff ff0b 	bl	800b0a0 <__multiply>
 800b28a:	6020      	str	r0, [r4, #0]
 800b28c:	f8c0 9000 	str.w	r9, [r0]
 800b290:	4604      	mov	r4, r0
 800b292:	e7e4      	b.n	800b25e <__pow5mult+0x6a>
 800b294:	4630      	mov	r0, r6
 800b296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b29a:	bf00      	nop
 800b29c:	0800d8c0 	.word	0x0800d8c0
 800b2a0:	0800d7e6 	.word	0x0800d7e6
 800b2a4:	0800d866 	.word	0x0800d866

0800b2a8 <__lshift>:
 800b2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ac:	460c      	mov	r4, r1
 800b2ae:	6849      	ldr	r1, [r1, #4]
 800b2b0:	6923      	ldr	r3, [r4, #16]
 800b2b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2b6:	68a3      	ldr	r3, [r4, #8]
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	4691      	mov	r9, r2
 800b2bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2c0:	f108 0601 	add.w	r6, r8, #1
 800b2c4:	42b3      	cmp	r3, r6
 800b2c6:	db0b      	blt.n	800b2e0 <__lshift+0x38>
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	f7ff fd95 	bl	800adf8 <_Balloc>
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	b948      	cbnz	r0, 800b2e6 <__lshift+0x3e>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	4b28      	ldr	r3, [pc, #160]	@ (800b378 <__lshift+0xd0>)
 800b2d6:	4829      	ldr	r0, [pc, #164]	@ (800b37c <__lshift+0xd4>)
 800b2d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2dc:	f001 fd04 	bl	800cce8 <__assert_func>
 800b2e0:	3101      	adds	r1, #1
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	e7ee      	b.n	800b2c4 <__lshift+0x1c>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f100 0114 	add.w	r1, r0, #20
 800b2ec:	f100 0210 	add.w	r2, r0, #16
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	4553      	cmp	r3, sl
 800b2f4:	db33      	blt.n	800b35e <__lshift+0xb6>
 800b2f6:	6920      	ldr	r0, [r4, #16]
 800b2f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2fc:	f104 0314 	add.w	r3, r4, #20
 800b300:	f019 091f 	ands.w	r9, r9, #31
 800b304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b30c:	d02b      	beq.n	800b366 <__lshift+0xbe>
 800b30e:	f1c9 0e20 	rsb	lr, r9, #32
 800b312:	468a      	mov	sl, r1
 800b314:	2200      	movs	r2, #0
 800b316:	6818      	ldr	r0, [r3, #0]
 800b318:	fa00 f009 	lsl.w	r0, r0, r9
 800b31c:	4310      	orrs	r0, r2
 800b31e:	f84a 0b04 	str.w	r0, [sl], #4
 800b322:	f853 2b04 	ldr.w	r2, [r3], #4
 800b326:	459c      	cmp	ip, r3
 800b328:	fa22 f20e 	lsr.w	r2, r2, lr
 800b32c:	d8f3      	bhi.n	800b316 <__lshift+0x6e>
 800b32e:	ebac 0304 	sub.w	r3, ip, r4
 800b332:	3b15      	subs	r3, #21
 800b334:	f023 0303 	bic.w	r3, r3, #3
 800b338:	3304      	adds	r3, #4
 800b33a:	f104 0015 	add.w	r0, r4, #21
 800b33e:	4584      	cmp	ip, r0
 800b340:	bf38      	it	cc
 800b342:	2304      	movcc	r3, #4
 800b344:	50ca      	str	r2, [r1, r3]
 800b346:	b10a      	cbz	r2, 800b34c <__lshift+0xa4>
 800b348:	f108 0602 	add.w	r6, r8, #2
 800b34c:	3e01      	subs	r6, #1
 800b34e:	4638      	mov	r0, r7
 800b350:	612e      	str	r6, [r5, #16]
 800b352:	4621      	mov	r1, r4
 800b354:	f7ff fd90 	bl	800ae78 <_Bfree>
 800b358:	4628      	mov	r0, r5
 800b35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b362:	3301      	adds	r3, #1
 800b364:	e7c5      	b.n	800b2f2 <__lshift+0x4a>
 800b366:	3904      	subs	r1, #4
 800b368:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b370:	459c      	cmp	ip, r3
 800b372:	d8f9      	bhi.n	800b368 <__lshift+0xc0>
 800b374:	e7ea      	b.n	800b34c <__lshift+0xa4>
 800b376:	bf00      	nop
 800b378:	0800d855 	.word	0x0800d855
 800b37c:	0800d866 	.word	0x0800d866

0800b380 <__mcmp>:
 800b380:	690a      	ldr	r2, [r1, #16]
 800b382:	4603      	mov	r3, r0
 800b384:	6900      	ldr	r0, [r0, #16]
 800b386:	1a80      	subs	r0, r0, r2
 800b388:	b530      	push	{r4, r5, lr}
 800b38a:	d10e      	bne.n	800b3aa <__mcmp+0x2a>
 800b38c:	3314      	adds	r3, #20
 800b38e:	3114      	adds	r1, #20
 800b390:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b394:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b39c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3a0:	4295      	cmp	r5, r2
 800b3a2:	d003      	beq.n	800b3ac <__mcmp+0x2c>
 800b3a4:	d205      	bcs.n	800b3b2 <__mcmp+0x32>
 800b3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3aa:	bd30      	pop	{r4, r5, pc}
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	d3f3      	bcc.n	800b398 <__mcmp+0x18>
 800b3b0:	e7fb      	b.n	800b3aa <__mcmp+0x2a>
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	e7f9      	b.n	800b3aa <__mcmp+0x2a>
	...

0800b3b8 <__mdiff>:
 800b3b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	4689      	mov	r9, r1
 800b3be:	4606      	mov	r6, r0
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	4648      	mov	r0, r9
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	f7ff ffdb 	bl	800b380 <__mcmp>
 800b3ca:	1e05      	subs	r5, r0, #0
 800b3cc:	d112      	bne.n	800b3f4 <__mdiff+0x3c>
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	f7ff fd11 	bl	800adf8 <_Balloc>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	b928      	cbnz	r0, 800b3e6 <__mdiff+0x2e>
 800b3da:	4b3f      	ldr	r3, [pc, #252]	@ (800b4d8 <__mdiff+0x120>)
 800b3dc:	f240 2137 	movw	r1, #567	@ 0x237
 800b3e0:	483e      	ldr	r0, [pc, #248]	@ (800b4dc <__mdiff+0x124>)
 800b3e2:	f001 fc81 	bl	800cce8 <__assert_func>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3ec:	4610      	mov	r0, r2
 800b3ee:	b003      	add	sp, #12
 800b3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f4:	bfbc      	itt	lt
 800b3f6:	464b      	movlt	r3, r9
 800b3f8:	46a1      	movlt	r9, r4
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b400:	bfba      	itte	lt
 800b402:	461c      	movlt	r4, r3
 800b404:	2501      	movlt	r5, #1
 800b406:	2500      	movge	r5, #0
 800b408:	f7ff fcf6 	bl	800adf8 <_Balloc>
 800b40c:	4602      	mov	r2, r0
 800b40e:	b918      	cbnz	r0, 800b418 <__mdiff+0x60>
 800b410:	4b31      	ldr	r3, [pc, #196]	@ (800b4d8 <__mdiff+0x120>)
 800b412:	f240 2145 	movw	r1, #581	@ 0x245
 800b416:	e7e3      	b.n	800b3e0 <__mdiff+0x28>
 800b418:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b41c:	6926      	ldr	r6, [r4, #16]
 800b41e:	60c5      	str	r5, [r0, #12]
 800b420:	f109 0310 	add.w	r3, r9, #16
 800b424:	f109 0514 	add.w	r5, r9, #20
 800b428:	f104 0e14 	add.w	lr, r4, #20
 800b42c:	f100 0b14 	add.w	fp, r0, #20
 800b430:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b434:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	46d9      	mov	r9, fp
 800b43c:	f04f 0c00 	mov.w	ip, #0
 800b440:	9b01      	ldr	r3, [sp, #4]
 800b442:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b446:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	fa1f f38a 	uxth.w	r3, sl
 800b450:	4619      	mov	r1, r3
 800b452:	b283      	uxth	r3, r0
 800b454:	1acb      	subs	r3, r1, r3
 800b456:	0c00      	lsrs	r0, r0, #16
 800b458:	4463      	add	r3, ip
 800b45a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b45e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b462:	b29b      	uxth	r3, r3
 800b464:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b468:	4576      	cmp	r6, lr
 800b46a:	f849 3b04 	str.w	r3, [r9], #4
 800b46e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b472:	d8e5      	bhi.n	800b440 <__mdiff+0x88>
 800b474:	1b33      	subs	r3, r6, r4
 800b476:	3b15      	subs	r3, #21
 800b478:	f023 0303 	bic.w	r3, r3, #3
 800b47c:	3415      	adds	r4, #21
 800b47e:	3304      	adds	r3, #4
 800b480:	42a6      	cmp	r6, r4
 800b482:	bf38      	it	cc
 800b484:	2304      	movcc	r3, #4
 800b486:	441d      	add	r5, r3
 800b488:	445b      	add	r3, fp
 800b48a:	461e      	mov	r6, r3
 800b48c:	462c      	mov	r4, r5
 800b48e:	4544      	cmp	r4, r8
 800b490:	d30e      	bcc.n	800b4b0 <__mdiff+0xf8>
 800b492:	f108 0103 	add.w	r1, r8, #3
 800b496:	1b49      	subs	r1, r1, r5
 800b498:	f021 0103 	bic.w	r1, r1, #3
 800b49c:	3d03      	subs	r5, #3
 800b49e:	45a8      	cmp	r8, r5
 800b4a0:	bf38      	it	cc
 800b4a2:	2100      	movcc	r1, #0
 800b4a4:	440b      	add	r3, r1
 800b4a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4aa:	b191      	cbz	r1, 800b4d2 <__mdiff+0x11a>
 800b4ac:	6117      	str	r7, [r2, #16]
 800b4ae:	e79d      	b.n	800b3ec <__mdiff+0x34>
 800b4b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b4b4:	46e6      	mov	lr, ip
 800b4b6:	0c08      	lsrs	r0, r1, #16
 800b4b8:	fa1c fc81 	uxtah	ip, ip, r1
 800b4bc:	4471      	add	r1, lr
 800b4be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b4c2:	b289      	uxth	r1, r1
 800b4c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b4c8:	f846 1b04 	str.w	r1, [r6], #4
 800b4cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4d0:	e7dd      	b.n	800b48e <__mdiff+0xd6>
 800b4d2:	3f01      	subs	r7, #1
 800b4d4:	e7e7      	b.n	800b4a6 <__mdiff+0xee>
 800b4d6:	bf00      	nop
 800b4d8:	0800d855 	.word	0x0800d855
 800b4dc:	0800d866 	.word	0x0800d866

0800b4e0 <__ulp>:
 800b4e0:	b082      	sub	sp, #8
 800b4e2:	ed8d 0b00 	vstr	d0, [sp]
 800b4e6:	9a01      	ldr	r2, [sp, #4]
 800b4e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b528 <__ulp+0x48>)
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dc08      	bgt.n	800b506 <__ulp+0x26>
 800b4f4:	425b      	negs	r3, r3
 800b4f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b4fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4fe:	da04      	bge.n	800b50a <__ulp+0x2a>
 800b500:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b504:	4113      	asrs	r3, r2
 800b506:	2200      	movs	r2, #0
 800b508:	e008      	b.n	800b51c <__ulp+0x3c>
 800b50a:	f1a2 0314 	sub.w	r3, r2, #20
 800b50e:	2b1e      	cmp	r3, #30
 800b510:	bfda      	itte	le
 800b512:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b516:	40da      	lsrle	r2, r3
 800b518:	2201      	movgt	r2, #1
 800b51a:	2300      	movs	r3, #0
 800b51c:	4619      	mov	r1, r3
 800b51e:	4610      	mov	r0, r2
 800b520:	ec41 0b10 	vmov	d0, r0, r1
 800b524:	b002      	add	sp, #8
 800b526:	4770      	bx	lr
 800b528:	7ff00000 	.word	0x7ff00000

0800b52c <__b2d>:
 800b52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b530:	6906      	ldr	r6, [r0, #16]
 800b532:	f100 0814 	add.w	r8, r0, #20
 800b536:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b53a:	1f37      	subs	r7, r6, #4
 800b53c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b540:	4610      	mov	r0, r2
 800b542:	f7ff fd4b 	bl	800afdc <__hi0bits>
 800b546:	f1c0 0320 	rsb	r3, r0, #32
 800b54a:	280a      	cmp	r0, #10
 800b54c:	600b      	str	r3, [r1, #0]
 800b54e:	491b      	ldr	r1, [pc, #108]	@ (800b5bc <__b2d+0x90>)
 800b550:	dc15      	bgt.n	800b57e <__b2d+0x52>
 800b552:	f1c0 0c0b 	rsb	ip, r0, #11
 800b556:	fa22 f30c 	lsr.w	r3, r2, ip
 800b55a:	45b8      	cmp	r8, r7
 800b55c:	ea43 0501 	orr.w	r5, r3, r1
 800b560:	bf34      	ite	cc
 800b562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b566:	2300      	movcs	r3, #0
 800b568:	3015      	adds	r0, #21
 800b56a:	fa02 f000 	lsl.w	r0, r2, r0
 800b56e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b572:	4303      	orrs	r3, r0
 800b574:	461c      	mov	r4, r3
 800b576:	ec45 4b10 	vmov	d0, r4, r5
 800b57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b57e:	45b8      	cmp	r8, r7
 800b580:	bf3a      	itte	cc
 800b582:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b586:	f1a6 0708 	subcc.w	r7, r6, #8
 800b58a:	2300      	movcs	r3, #0
 800b58c:	380b      	subs	r0, #11
 800b58e:	d012      	beq.n	800b5b6 <__b2d+0x8a>
 800b590:	f1c0 0120 	rsb	r1, r0, #32
 800b594:	fa23 f401 	lsr.w	r4, r3, r1
 800b598:	4082      	lsls	r2, r0
 800b59a:	4322      	orrs	r2, r4
 800b59c:	4547      	cmp	r7, r8
 800b59e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b5a2:	bf8c      	ite	hi
 800b5a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b5a8:	2200      	movls	r2, #0
 800b5aa:	4083      	lsls	r3, r0
 800b5ac:	40ca      	lsrs	r2, r1
 800b5ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	e7de      	b.n	800b574 <__b2d+0x48>
 800b5b6:	ea42 0501 	orr.w	r5, r2, r1
 800b5ba:	e7db      	b.n	800b574 <__b2d+0x48>
 800b5bc:	3ff00000 	.word	0x3ff00000

0800b5c0 <__d2b>:
 800b5c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	ec59 8b10 	vmov	r8, r9, d0
 800b5cc:	4616      	mov	r6, r2
 800b5ce:	f7ff fc13 	bl	800adf8 <_Balloc>
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	b930      	cbnz	r0, 800b5e4 <__d2b+0x24>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	4b23      	ldr	r3, [pc, #140]	@ (800b668 <__d2b+0xa8>)
 800b5da:	4824      	ldr	r0, [pc, #144]	@ (800b66c <__d2b+0xac>)
 800b5dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b5e0:	f001 fb82 	bl	800cce8 <__assert_func>
 800b5e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5ec:	b10d      	cbz	r5, 800b5f2 <__d2b+0x32>
 800b5ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5f2:	9301      	str	r3, [sp, #4]
 800b5f4:	f1b8 0300 	subs.w	r3, r8, #0
 800b5f8:	d023      	beq.n	800b642 <__d2b+0x82>
 800b5fa:	4668      	mov	r0, sp
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	f7ff fd0c 	bl	800b01a <__lo0bits>
 800b602:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b606:	b1d0      	cbz	r0, 800b63e <__d2b+0x7e>
 800b608:	f1c0 0320 	rsb	r3, r0, #32
 800b60c:	fa02 f303 	lsl.w	r3, r2, r3
 800b610:	430b      	orrs	r3, r1
 800b612:	40c2      	lsrs	r2, r0
 800b614:	6163      	str	r3, [r4, #20]
 800b616:	9201      	str	r2, [sp, #4]
 800b618:	9b01      	ldr	r3, [sp, #4]
 800b61a:	61a3      	str	r3, [r4, #24]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	bf0c      	ite	eq
 800b620:	2201      	moveq	r2, #1
 800b622:	2202      	movne	r2, #2
 800b624:	6122      	str	r2, [r4, #16]
 800b626:	b1a5      	cbz	r5, 800b652 <__d2b+0x92>
 800b628:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b62c:	4405      	add	r5, r0
 800b62e:	603d      	str	r5, [r7, #0]
 800b630:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b634:	6030      	str	r0, [r6, #0]
 800b636:	4620      	mov	r0, r4
 800b638:	b003      	add	sp, #12
 800b63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b63e:	6161      	str	r1, [r4, #20]
 800b640:	e7ea      	b.n	800b618 <__d2b+0x58>
 800b642:	a801      	add	r0, sp, #4
 800b644:	f7ff fce9 	bl	800b01a <__lo0bits>
 800b648:	9b01      	ldr	r3, [sp, #4]
 800b64a:	6163      	str	r3, [r4, #20]
 800b64c:	3020      	adds	r0, #32
 800b64e:	2201      	movs	r2, #1
 800b650:	e7e8      	b.n	800b624 <__d2b+0x64>
 800b652:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b65a:	6038      	str	r0, [r7, #0]
 800b65c:	6918      	ldr	r0, [r3, #16]
 800b65e:	f7ff fcbd 	bl	800afdc <__hi0bits>
 800b662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b666:	e7e5      	b.n	800b634 <__d2b+0x74>
 800b668:	0800d855 	.word	0x0800d855
 800b66c:	0800d866 	.word	0x0800d866

0800b670 <__ratio>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	b085      	sub	sp, #20
 800b676:	e9cd 1000 	strd	r1, r0, [sp]
 800b67a:	a902      	add	r1, sp, #8
 800b67c:	f7ff ff56 	bl	800b52c <__b2d>
 800b680:	9800      	ldr	r0, [sp, #0]
 800b682:	a903      	add	r1, sp, #12
 800b684:	ec55 4b10 	vmov	r4, r5, d0
 800b688:	f7ff ff50 	bl	800b52c <__b2d>
 800b68c:	9b01      	ldr	r3, [sp, #4]
 800b68e:	6919      	ldr	r1, [r3, #16]
 800b690:	9b00      	ldr	r3, [sp, #0]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	1ac9      	subs	r1, r1, r3
 800b696:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b69a:	1a9b      	subs	r3, r3, r2
 800b69c:	ec5b ab10 	vmov	sl, fp, d0
 800b6a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	bfce      	itee	gt
 800b6a8:	462a      	movgt	r2, r5
 800b6aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6ae:	465a      	movle	r2, fp
 800b6b0:	462f      	mov	r7, r5
 800b6b2:	46d9      	mov	r9, fp
 800b6b4:	bfcc      	ite	gt
 800b6b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b6be:	464b      	mov	r3, r9
 800b6c0:	4652      	mov	r2, sl
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	4639      	mov	r1, r7
 800b6c6:	f7f5 f8c1 	bl	800084c <__aeabi_ddiv>
 800b6ca:	ec41 0b10 	vmov	d0, r0, r1
 800b6ce:	b005      	add	sp, #20
 800b6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6d4 <__copybits>:
 800b6d4:	3901      	subs	r1, #1
 800b6d6:	b570      	push	{r4, r5, r6, lr}
 800b6d8:	1149      	asrs	r1, r1, #5
 800b6da:	6914      	ldr	r4, [r2, #16]
 800b6dc:	3101      	adds	r1, #1
 800b6de:	f102 0314 	add.w	r3, r2, #20
 800b6e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b6ea:	1f05      	subs	r5, r0, #4
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	d30c      	bcc.n	800b70a <__copybits+0x36>
 800b6f0:	1aa3      	subs	r3, r4, r2
 800b6f2:	3b11      	subs	r3, #17
 800b6f4:	f023 0303 	bic.w	r3, r3, #3
 800b6f8:	3211      	adds	r2, #17
 800b6fa:	42a2      	cmp	r2, r4
 800b6fc:	bf88      	it	hi
 800b6fe:	2300      	movhi	r3, #0
 800b700:	4418      	add	r0, r3
 800b702:	2300      	movs	r3, #0
 800b704:	4288      	cmp	r0, r1
 800b706:	d305      	bcc.n	800b714 <__copybits+0x40>
 800b708:	bd70      	pop	{r4, r5, r6, pc}
 800b70a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b70e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b712:	e7eb      	b.n	800b6ec <__copybits+0x18>
 800b714:	f840 3b04 	str.w	r3, [r0], #4
 800b718:	e7f4      	b.n	800b704 <__copybits+0x30>

0800b71a <__any_on>:
 800b71a:	f100 0214 	add.w	r2, r0, #20
 800b71e:	6900      	ldr	r0, [r0, #16]
 800b720:	114b      	asrs	r3, r1, #5
 800b722:	4298      	cmp	r0, r3
 800b724:	b510      	push	{r4, lr}
 800b726:	db11      	blt.n	800b74c <__any_on+0x32>
 800b728:	dd0a      	ble.n	800b740 <__any_on+0x26>
 800b72a:	f011 011f 	ands.w	r1, r1, #31
 800b72e:	d007      	beq.n	800b740 <__any_on+0x26>
 800b730:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b734:	fa24 f001 	lsr.w	r0, r4, r1
 800b738:	fa00 f101 	lsl.w	r1, r0, r1
 800b73c:	428c      	cmp	r4, r1
 800b73e:	d10b      	bne.n	800b758 <__any_on+0x3e>
 800b740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b744:	4293      	cmp	r3, r2
 800b746:	d803      	bhi.n	800b750 <__any_on+0x36>
 800b748:	2000      	movs	r0, #0
 800b74a:	bd10      	pop	{r4, pc}
 800b74c:	4603      	mov	r3, r0
 800b74e:	e7f7      	b.n	800b740 <__any_on+0x26>
 800b750:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b754:	2900      	cmp	r1, #0
 800b756:	d0f5      	beq.n	800b744 <__any_on+0x2a>
 800b758:	2001      	movs	r0, #1
 800b75a:	e7f6      	b.n	800b74a <__any_on+0x30>

0800b75c <sulp>:
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	ec45 4b10 	vmov	d0, r4, r5
 800b766:	4616      	mov	r6, r2
 800b768:	f7ff feba 	bl	800b4e0 <__ulp>
 800b76c:	ec51 0b10 	vmov	r0, r1, d0
 800b770:	b17e      	cbz	r6, 800b792 <sulp+0x36>
 800b772:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b776:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	dd09      	ble.n	800b792 <sulp+0x36>
 800b77e:	051b      	lsls	r3, r3, #20
 800b780:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b784:	2400      	movs	r4, #0
 800b786:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b78a:	4622      	mov	r2, r4
 800b78c:	462b      	mov	r3, r5
 800b78e:	f7f4 ff33 	bl	80005f8 <__aeabi_dmul>
 800b792:	ec41 0b10 	vmov	d0, r0, r1
 800b796:	bd70      	pop	{r4, r5, r6, pc}

0800b798 <_strtod_l>:
 800b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79c:	b09f      	sub	sp, #124	@ 0x7c
 800b79e:	460c      	mov	r4, r1
 800b7a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800b7a6:	9005      	str	r0, [sp, #20]
 800b7a8:	f04f 0a00 	mov.w	sl, #0
 800b7ac:	f04f 0b00 	mov.w	fp, #0
 800b7b0:	460a      	mov	r2, r1
 800b7b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7b4:	7811      	ldrb	r1, [r2, #0]
 800b7b6:	292b      	cmp	r1, #43	@ 0x2b
 800b7b8:	d04a      	beq.n	800b850 <_strtod_l+0xb8>
 800b7ba:	d838      	bhi.n	800b82e <_strtod_l+0x96>
 800b7bc:	290d      	cmp	r1, #13
 800b7be:	d832      	bhi.n	800b826 <_strtod_l+0x8e>
 800b7c0:	2908      	cmp	r1, #8
 800b7c2:	d832      	bhi.n	800b82a <_strtod_l+0x92>
 800b7c4:	2900      	cmp	r1, #0
 800b7c6:	d03b      	beq.n	800b840 <_strtod_l+0xa8>
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b7cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b7ce:	782a      	ldrb	r2, [r5, #0]
 800b7d0:	2a30      	cmp	r2, #48	@ 0x30
 800b7d2:	f040 80b3 	bne.w	800b93c <_strtod_l+0x1a4>
 800b7d6:	786a      	ldrb	r2, [r5, #1]
 800b7d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7dc:	2a58      	cmp	r2, #88	@ 0x58
 800b7de:	d16e      	bne.n	800b8be <_strtod_l+0x126>
 800b7e0:	9302      	str	r3, [sp, #8]
 800b7e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	4a8e      	ldr	r2, [pc, #568]	@ (800ba24 <_strtod_l+0x28c>)
 800b7ec:	9805      	ldr	r0, [sp, #20]
 800b7ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b7f0:	a919      	add	r1, sp, #100	@ 0x64
 800b7f2:	f001 fb13 	bl	800ce1c <__gethex>
 800b7f6:	f010 060f 	ands.w	r6, r0, #15
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	d005      	beq.n	800b80a <_strtod_l+0x72>
 800b7fe:	2e06      	cmp	r6, #6
 800b800:	d128      	bne.n	800b854 <_strtod_l+0xbc>
 800b802:	3501      	adds	r5, #1
 800b804:	2300      	movs	r3, #0
 800b806:	9519      	str	r5, [sp, #100]	@ 0x64
 800b808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b80a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f040 858e 	bne.w	800c32e <_strtod_l+0xb96>
 800b812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b814:	b1cb      	cbz	r3, 800b84a <_strtod_l+0xb2>
 800b816:	4652      	mov	r2, sl
 800b818:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b81c:	ec43 2b10 	vmov	d0, r2, r3
 800b820:	b01f      	add	sp, #124	@ 0x7c
 800b822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b826:	2920      	cmp	r1, #32
 800b828:	d1ce      	bne.n	800b7c8 <_strtod_l+0x30>
 800b82a:	3201      	adds	r2, #1
 800b82c:	e7c1      	b.n	800b7b2 <_strtod_l+0x1a>
 800b82e:	292d      	cmp	r1, #45	@ 0x2d
 800b830:	d1ca      	bne.n	800b7c8 <_strtod_l+0x30>
 800b832:	2101      	movs	r1, #1
 800b834:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b836:	1c51      	adds	r1, r2, #1
 800b838:	9119      	str	r1, [sp, #100]	@ 0x64
 800b83a:	7852      	ldrb	r2, [r2, #1]
 800b83c:	2a00      	cmp	r2, #0
 800b83e:	d1c5      	bne.n	800b7cc <_strtod_l+0x34>
 800b840:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b842:	9419      	str	r4, [sp, #100]	@ 0x64
 800b844:	2b00      	cmp	r3, #0
 800b846:	f040 8570 	bne.w	800c32a <_strtod_l+0xb92>
 800b84a:	4652      	mov	r2, sl
 800b84c:	465b      	mov	r3, fp
 800b84e:	e7e5      	b.n	800b81c <_strtod_l+0x84>
 800b850:	2100      	movs	r1, #0
 800b852:	e7ef      	b.n	800b834 <_strtod_l+0x9c>
 800b854:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b856:	b13a      	cbz	r2, 800b868 <_strtod_l+0xd0>
 800b858:	2135      	movs	r1, #53	@ 0x35
 800b85a:	a81c      	add	r0, sp, #112	@ 0x70
 800b85c:	f7ff ff3a 	bl	800b6d4 <__copybits>
 800b860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b862:	9805      	ldr	r0, [sp, #20]
 800b864:	f7ff fb08 	bl	800ae78 <_Bfree>
 800b868:	3e01      	subs	r6, #1
 800b86a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b86c:	2e04      	cmp	r6, #4
 800b86e:	d806      	bhi.n	800b87e <_strtod_l+0xe6>
 800b870:	e8df f006 	tbb	[pc, r6]
 800b874:	201d0314 	.word	0x201d0314
 800b878:	14          	.byte	0x14
 800b879:	00          	.byte	0x00
 800b87a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b87e:	05e1      	lsls	r1, r4, #23
 800b880:	bf48      	it	mi
 800b882:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b886:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b88a:	0d1b      	lsrs	r3, r3, #20
 800b88c:	051b      	lsls	r3, r3, #20
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1bb      	bne.n	800b80a <_strtod_l+0x72>
 800b892:	f7fe fb21 	bl	8009ed8 <__errno>
 800b896:	2322      	movs	r3, #34	@ 0x22
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	e7b6      	b.n	800b80a <_strtod_l+0x72>
 800b89c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b8a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b8a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b8a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b8ac:	e7e7      	b.n	800b87e <_strtod_l+0xe6>
 800b8ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ba2c <_strtod_l+0x294>
 800b8b2:	e7e4      	b.n	800b87e <_strtod_l+0xe6>
 800b8b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b8b8:	f04f 3aff 	mov.w	sl, #4294967295
 800b8bc:	e7df      	b.n	800b87e <_strtod_l+0xe6>
 800b8be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8c4:	785b      	ldrb	r3, [r3, #1]
 800b8c6:	2b30      	cmp	r3, #48	@ 0x30
 800b8c8:	d0f9      	beq.n	800b8be <_strtod_l+0x126>
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d09d      	beq.n	800b80a <_strtod_l+0x72>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9308      	str	r3, [sp, #32]
 800b8da:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8dc:	461f      	mov	r7, r3
 800b8de:	220a      	movs	r2, #10
 800b8e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b8e2:	7805      	ldrb	r5, [r0, #0]
 800b8e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b8e8:	b2d9      	uxtb	r1, r3
 800b8ea:	2909      	cmp	r1, #9
 800b8ec:	d928      	bls.n	800b940 <_strtod_l+0x1a8>
 800b8ee:	494e      	ldr	r1, [pc, #312]	@ (800ba28 <_strtod_l+0x290>)
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f001 f9ad 	bl	800cc50 <strncmp>
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	d032      	beq.n	800b960 <_strtod_l+0x1c8>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	462a      	mov	r2, r5
 800b8fe:	4681      	mov	r9, r0
 800b900:	463d      	mov	r5, r7
 800b902:	4603      	mov	r3, r0
 800b904:	2a65      	cmp	r2, #101	@ 0x65
 800b906:	d001      	beq.n	800b90c <_strtod_l+0x174>
 800b908:	2a45      	cmp	r2, #69	@ 0x45
 800b90a:	d114      	bne.n	800b936 <_strtod_l+0x19e>
 800b90c:	b91d      	cbnz	r5, 800b916 <_strtod_l+0x17e>
 800b90e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b910:	4302      	orrs	r2, r0
 800b912:	d095      	beq.n	800b840 <_strtod_l+0xa8>
 800b914:	2500      	movs	r5, #0
 800b916:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b918:	1c62      	adds	r2, r4, #1
 800b91a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b91c:	7862      	ldrb	r2, [r4, #1]
 800b91e:	2a2b      	cmp	r2, #43	@ 0x2b
 800b920:	d077      	beq.n	800ba12 <_strtod_l+0x27a>
 800b922:	2a2d      	cmp	r2, #45	@ 0x2d
 800b924:	d07b      	beq.n	800ba1e <_strtod_l+0x286>
 800b926:	f04f 0c00 	mov.w	ip, #0
 800b92a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b92e:	2909      	cmp	r1, #9
 800b930:	f240 8082 	bls.w	800ba38 <_strtod_l+0x2a0>
 800b934:	9419      	str	r4, [sp, #100]	@ 0x64
 800b936:	f04f 0800 	mov.w	r8, #0
 800b93a:	e0a2      	b.n	800ba82 <_strtod_l+0x2ea>
 800b93c:	2300      	movs	r3, #0
 800b93e:	e7c7      	b.n	800b8d0 <_strtod_l+0x138>
 800b940:	2f08      	cmp	r7, #8
 800b942:	bfd5      	itete	le
 800b944:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b946:	9908      	ldrgt	r1, [sp, #32]
 800b948:	fb02 3301 	mlale	r3, r2, r1, r3
 800b94c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b950:	f100 0001 	add.w	r0, r0, #1
 800b954:	bfd4      	ite	le
 800b956:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b958:	9308      	strgt	r3, [sp, #32]
 800b95a:	3701      	adds	r7, #1
 800b95c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b95e:	e7bf      	b.n	800b8e0 <_strtod_l+0x148>
 800b960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	9219      	str	r2, [sp, #100]	@ 0x64
 800b966:	785a      	ldrb	r2, [r3, #1]
 800b968:	b37f      	cbz	r7, 800b9ca <_strtod_l+0x232>
 800b96a:	4681      	mov	r9, r0
 800b96c:	463d      	mov	r5, r7
 800b96e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b972:	2b09      	cmp	r3, #9
 800b974:	d912      	bls.n	800b99c <_strtod_l+0x204>
 800b976:	2301      	movs	r3, #1
 800b978:	e7c4      	b.n	800b904 <_strtod_l+0x16c>
 800b97a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b97c:	1c5a      	adds	r2, r3, #1
 800b97e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b980:	785a      	ldrb	r2, [r3, #1]
 800b982:	3001      	adds	r0, #1
 800b984:	2a30      	cmp	r2, #48	@ 0x30
 800b986:	d0f8      	beq.n	800b97a <_strtod_l+0x1e2>
 800b988:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b98c:	2b08      	cmp	r3, #8
 800b98e:	f200 84d3 	bhi.w	800c338 <_strtod_l+0xba0>
 800b992:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b994:	930c      	str	r3, [sp, #48]	@ 0x30
 800b996:	4681      	mov	r9, r0
 800b998:	2000      	movs	r0, #0
 800b99a:	4605      	mov	r5, r0
 800b99c:	3a30      	subs	r2, #48	@ 0x30
 800b99e:	f100 0301 	add.w	r3, r0, #1
 800b9a2:	d02a      	beq.n	800b9fa <_strtod_l+0x262>
 800b9a4:	4499      	add	r9, r3
 800b9a6:	eb00 0c05 	add.w	ip, r0, r5
 800b9aa:	462b      	mov	r3, r5
 800b9ac:	210a      	movs	r1, #10
 800b9ae:	4563      	cmp	r3, ip
 800b9b0:	d10d      	bne.n	800b9ce <_strtod_l+0x236>
 800b9b2:	1c69      	adds	r1, r5, #1
 800b9b4:	4401      	add	r1, r0
 800b9b6:	4428      	add	r0, r5
 800b9b8:	2808      	cmp	r0, #8
 800b9ba:	dc16      	bgt.n	800b9ea <_strtod_l+0x252>
 800b9bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b9be:	230a      	movs	r3, #10
 800b9c0:	fb03 2300 	mla	r3, r3, r0, r2
 800b9c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	e018      	b.n	800b9fc <_strtod_l+0x264>
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	e7da      	b.n	800b984 <_strtod_l+0x1ec>
 800b9ce:	2b08      	cmp	r3, #8
 800b9d0:	f103 0301 	add.w	r3, r3, #1
 800b9d4:	dc03      	bgt.n	800b9de <_strtod_l+0x246>
 800b9d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b9d8:	434e      	muls	r6, r1
 800b9da:	960a      	str	r6, [sp, #40]	@ 0x28
 800b9dc:	e7e7      	b.n	800b9ae <_strtod_l+0x216>
 800b9de:	2b10      	cmp	r3, #16
 800b9e0:	bfde      	ittt	le
 800b9e2:	9e08      	ldrle	r6, [sp, #32]
 800b9e4:	434e      	mulle	r6, r1
 800b9e6:	9608      	strle	r6, [sp, #32]
 800b9e8:	e7e1      	b.n	800b9ae <_strtod_l+0x216>
 800b9ea:	280f      	cmp	r0, #15
 800b9ec:	dceb      	bgt.n	800b9c6 <_strtod_l+0x22e>
 800b9ee:	9808      	ldr	r0, [sp, #32]
 800b9f0:	230a      	movs	r3, #10
 800b9f2:	fb03 2300 	mla	r3, r3, r0, r2
 800b9f6:	9308      	str	r3, [sp, #32]
 800b9f8:	e7e5      	b.n	800b9c6 <_strtod_l+0x22e>
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9fe:	1c50      	adds	r0, r2, #1
 800ba00:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba02:	7852      	ldrb	r2, [r2, #1]
 800ba04:	4618      	mov	r0, r3
 800ba06:	460d      	mov	r5, r1
 800ba08:	e7b1      	b.n	800b96e <_strtod_l+0x1d6>
 800ba0a:	f04f 0900 	mov.w	r9, #0
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e77d      	b.n	800b90e <_strtod_l+0x176>
 800ba12:	f04f 0c00 	mov.w	ip, #0
 800ba16:	1ca2      	adds	r2, r4, #2
 800ba18:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba1a:	78a2      	ldrb	r2, [r4, #2]
 800ba1c:	e785      	b.n	800b92a <_strtod_l+0x192>
 800ba1e:	f04f 0c01 	mov.w	ip, #1
 800ba22:	e7f8      	b.n	800ba16 <_strtod_l+0x27e>
 800ba24:	0800d9d8 	.word	0x0800d9d8
 800ba28:	0800d9c0 	.word	0x0800d9c0
 800ba2c:	7ff00000 	.word	0x7ff00000
 800ba30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba32:	1c51      	adds	r1, r2, #1
 800ba34:	9119      	str	r1, [sp, #100]	@ 0x64
 800ba36:	7852      	ldrb	r2, [r2, #1]
 800ba38:	2a30      	cmp	r2, #48	@ 0x30
 800ba3a:	d0f9      	beq.n	800ba30 <_strtod_l+0x298>
 800ba3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ba40:	2908      	cmp	r1, #8
 800ba42:	f63f af78 	bhi.w	800b936 <_strtod_l+0x19e>
 800ba46:	3a30      	subs	r2, #48	@ 0x30
 800ba48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ba4e:	f04f 080a 	mov.w	r8, #10
 800ba52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ba54:	1c56      	adds	r6, r2, #1
 800ba56:	9619      	str	r6, [sp, #100]	@ 0x64
 800ba58:	7852      	ldrb	r2, [r2, #1]
 800ba5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ba5e:	f1be 0f09 	cmp.w	lr, #9
 800ba62:	d939      	bls.n	800bad8 <_strtod_l+0x340>
 800ba64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ba66:	1a76      	subs	r6, r6, r1
 800ba68:	2e08      	cmp	r6, #8
 800ba6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ba6e:	dc03      	bgt.n	800ba78 <_strtod_l+0x2e0>
 800ba70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ba72:	4588      	cmp	r8, r1
 800ba74:	bfa8      	it	ge
 800ba76:	4688      	movge	r8, r1
 800ba78:	f1bc 0f00 	cmp.w	ip, #0
 800ba7c:	d001      	beq.n	800ba82 <_strtod_l+0x2ea>
 800ba7e:	f1c8 0800 	rsb	r8, r8, #0
 800ba82:	2d00      	cmp	r5, #0
 800ba84:	d14e      	bne.n	800bb24 <_strtod_l+0x38c>
 800ba86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba88:	4308      	orrs	r0, r1
 800ba8a:	f47f aebe 	bne.w	800b80a <_strtod_l+0x72>
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f47f aed6 	bne.w	800b840 <_strtod_l+0xa8>
 800ba94:	2a69      	cmp	r2, #105	@ 0x69
 800ba96:	d028      	beq.n	800baea <_strtod_l+0x352>
 800ba98:	dc25      	bgt.n	800bae6 <_strtod_l+0x34e>
 800ba9a:	2a49      	cmp	r2, #73	@ 0x49
 800ba9c:	d025      	beq.n	800baea <_strtod_l+0x352>
 800ba9e:	2a4e      	cmp	r2, #78	@ 0x4e
 800baa0:	f47f aece 	bne.w	800b840 <_strtod_l+0xa8>
 800baa4:	499b      	ldr	r1, [pc, #620]	@ (800bd14 <_strtod_l+0x57c>)
 800baa6:	a819      	add	r0, sp, #100	@ 0x64
 800baa8:	f001 fbda 	bl	800d260 <__match>
 800baac:	2800      	cmp	r0, #0
 800baae:	f43f aec7 	beq.w	800b840 <_strtod_l+0xa8>
 800bab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	2b28      	cmp	r3, #40	@ 0x28
 800bab8:	d12e      	bne.n	800bb18 <_strtod_l+0x380>
 800baba:	4997      	ldr	r1, [pc, #604]	@ (800bd18 <_strtod_l+0x580>)
 800babc:	aa1c      	add	r2, sp, #112	@ 0x70
 800babe:	a819      	add	r0, sp, #100	@ 0x64
 800bac0:	f001 fbe2 	bl	800d288 <__hexnan>
 800bac4:	2805      	cmp	r0, #5
 800bac6:	d127      	bne.n	800bb18 <_strtod_l+0x380>
 800bac8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800baca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bace:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bad2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bad6:	e698      	b.n	800b80a <_strtod_l+0x72>
 800bad8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bada:	fb08 2101 	mla	r1, r8, r1, r2
 800bade:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bae2:	920e      	str	r2, [sp, #56]	@ 0x38
 800bae4:	e7b5      	b.n	800ba52 <_strtod_l+0x2ba>
 800bae6:	2a6e      	cmp	r2, #110	@ 0x6e
 800bae8:	e7da      	b.n	800baa0 <_strtod_l+0x308>
 800baea:	498c      	ldr	r1, [pc, #560]	@ (800bd1c <_strtod_l+0x584>)
 800baec:	a819      	add	r0, sp, #100	@ 0x64
 800baee:	f001 fbb7 	bl	800d260 <__match>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f43f aea4 	beq.w	800b840 <_strtod_l+0xa8>
 800baf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bafa:	4989      	ldr	r1, [pc, #548]	@ (800bd20 <_strtod_l+0x588>)
 800bafc:	3b01      	subs	r3, #1
 800bafe:	a819      	add	r0, sp, #100	@ 0x64
 800bb00:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb02:	f001 fbad 	bl	800d260 <__match>
 800bb06:	b910      	cbnz	r0, 800bb0e <_strtod_l+0x376>
 800bb08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800bb0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bd30 <_strtod_l+0x598>
 800bb12:	f04f 0a00 	mov.w	sl, #0
 800bb16:	e678      	b.n	800b80a <_strtod_l+0x72>
 800bb18:	4882      	ldr	r0, [pc, #520]	@ (800bd24 <_strtod_l+0x58c>)
 800bb1a:	f001 f8dd 	bl	800ccd8 <nan>
 800bb1e:	ec5b ab10 	vmov	sl, fp, d0
 800bb22:	e672      	b.n	800b80a <_strtod_l+0x72>
 800bb24:	eba8 0309 	sub.w	r3, r8, r9
 800bb28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb2c:	2f00      	cmp	r7, #0
 800bb2e:	bf08      	it	eq
 800bb30:	462f      	moveq	r7, r5
 800bb32:	2d10      	cmp	r5, #16
 800bb34:	462c      	mov	r4, r5
 800bb36:	bfa8      	it	ge
 800bb38:	2410      	movge	r4, #16
 800bb3a:	f7f4 fce3 	bl	8000504 <__aeabi_ui2d>
 800bb3e:	2d09      	cmp	r5, #9
 800bb40:	4682      	mov	sl, r0
 800bb42:	468b      	mov	fp, r1
 800bb44:	dc13      	bgt.n	800bb6e <_strtod_l+0x3d6>
 800bb46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f43f ae5e 	beq.w	800b80a <_strtod_l+0x72>
 800bb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb50:	dd78      	ble.n	800bc44 <_strtod_l+0x4ac>
 800bb52:	2b16      	cmp	r3, #22
 800bb54:	dc5f      	bgt.n	800bc16 <_strtod_l+0x47e>
 800bb56:	4974      	ldr	r1, [pc, #464]	@ (800bd28 <_strtod_l+0x590>)
 800bb58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb60:	4652      	mov	r2, sl
 800bb62:	465b      	mov	r3, fp
 800bb64:	f7f4 fd48 	bl	80005f8 <__aeabi_dmul>
 800bb68:	4682      	mov	sl, r0
 800bb6a:	468b      	mov	fp, r1
 800bb6c:	e64d      	b.n	800b80a <_strtod_l+0x72>
 800bb6e:	4b6e      	ldr	r3, [pc, #440]	@ (800bd28 <_strtod_l+0x590>)
 800bb70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bb78:	f7f4 fd3e 	bl	80005f8 <__aeabi_dmul>
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	9808      	ldr	r0, [sp, #32]
 800bb80:	468b      	mov	fp, r1
 800bb82:	f7f4 fcbf 	bl	8000504 <__aeabi_ui2d>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4650      	mov	r0, sl
 800bb8c:	4659      	mov	r1, fp
 800bb8e:	f7f4 fb7d 	bl	800028c <__adddf3>
 800bb92:	2d0f      	cmp	r5, #15
 800bb94:	4682      	mov	sl, r0
 800bb96:	468b      	mov	fp, r1
 800bb98:	ddd5      	ble.n	800bb46 <_strtod_l+0x3ae>
 800bb9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb9c:	1b2c      	subs	r4, r5, r4
 800bb9e:	441c      	add	r4, r3
 800bba0:	2c00      	cmp	r4, #0
 800bba2:	f340 8096 	ble.w	800bcd2 <_strtod_l+0x53a>
 800bba6:	f014 030f 	ands.w	r3, r4, #15
 800bbaa:	d00a      	beq.n	800bbc2 <_strtod_l+0x42a>
 800bbac:	495e      	ldr	r1, [pc, #376]	@ (800bd28 <_strtod_l+0x590>)
 800bbae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbb2:	4652      	mov	r2, sl
 800bbb4:	465b      	mov	r3, fp
 800bbb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbba:	f7f4 fd1d 	bl	80005f8 <__aeabi_dmul>
 800bbbe:	4682      	mov	sl, r0
 800bbc0:	468b      	mov	fp, r1
 800bbc2:	f034 040f 	bics.w	r4, r4, #15
 800bbc6:	d073      	beq.n	800bcb0 <_strtod_l+0x518>
 800bbc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bbcc:	dd48      	ble.n	800bc60 <_strtod_l+0x4c8>
 800bbce:	2400      	movs	r4, #0
 800bbd0:	46a0      	mov	r8, r4
 800bbd2:	940a      	str	r4, [sp, #40]	@ 0x28
 800bbd4:	46a1      	mov	r9, r4
 800bbd6:	9a05      	ldr	r2, [sp, #20]
 800bbd8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bd30 <_strtod_l+0x598>
 800bbdc:	2322      	movs	r3, #34	@ 0x22
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	f04f 0a00 	mov.w	sl, #0
 800bbe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f43f ae0f 	beq.w	800b80a <_strtod_l+0x72>
 800bbec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbee:	9805      	ldr	r0, [sp, #20]
 800bbf0:	f7ff f942 	bl	800ae78 <_Bfree>
 800bbf4:	9805      	ldr	r0, [sp, #20]
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	f7ff f93e 	bl	800ae78 <_Bfree>
 800bbfc:	9805      	ldr	r0, [sp, #20]
 800bbfe:	4641      	mov	r1, r8
 800bc00:	f7ff f93a 	bl	800ae78 <_Bfree>
 800bc04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc06:	9805      	ldr	r0, [sp, #20]
 800bc08:	f7ff f936 	bl	800ae78 <_Bfree>
 800bc0c:	9805      	ldr	r0, [sp, #20]
 800bc0e:	4621      	mov	r1, r4
 800bc10:	f7ff f932 	bl	800ae78 <_Bfree>
 800bc14:	e5f9      	b.n	800b80a <_strtod_l+0x72>
 800bc16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	dbbc      	blt.n	800bb9a <_strtod_l+0x402>
 800bc20:	4c41      	ldr	r4, [pc, #260]	@ (800bd28 <_strtod_l+0x590>)
 800bc22:	f1c5 050f 	rsb	r5, r5, #15
 800bc26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bc2a:	4652      	mov	r2, sl
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc32:	f7f4 fce1 	bl	80005f8 <__aeabi_dmul>
 800bc36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc38:	1b5d      	subs	r5, r3, r5
 800bc3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bc3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc42:	e78f      	b.n	800bb64 <_strtod_l+0x3cc>
 800bc44:	3316      	adds	r3, #22
 800bc46:	dba8      	blt.n	800bb9a <_strtod_l+0x402>
 800bc48:	4b37      	ldr	r3, [pc, #220]	@ (800bd28 <_strtod_l+0x590>)
 800bc4a:	eba9 0808 	sub.w	r8, r9, r8
 800bc4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bc52:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bc56:	4650      	mov	r0, sl
 800bc58:	4659      	mov	r1, fp
 800bc5a:	f7f4 fdf7 	bl	800084c <__aeabi_ddiv>
 800bc5e:	e783      	b.n	800bb68 <_strtod_l+0x3d0>
 800bc60:	4b32      	ldr	r3, [pc, #200]	@ (800bd2c <_strtod_l+0x594>)
 800bc62:	9308      	str	r3, [sp, #32]
 800bc64:	2300      	movs	r3, #0
 800bc66:	1124      	asrs	r4, r4, #4
 800bc68:	4650      	mov	r0, sl
 800bc6a:	4659      	mov	r1, fp
 800bc6c:	461e      	mov	r6, r3
 800bc6e:	2c01      	cmp	r4, #1
 800bc70:	dc21      	bgt.n	800bcb6 <_strtod_l+0x51e>
 800bc72:	b10b      	cbz	r3, 800bc78 <_strtod_l+0x4e0>
 800bc74:	4682      	mov	sl, r0
 800bc76:	468b      	mov	fp, r1
 800bc78:	492c      	ldr	r1, [pc, #176]	@ (800bd2c <_strtod_l+0x594>)
 800bc7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bc7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bc82:	4652      	mov	r2, sl
 800bc84:	465b      	mov	r3, fp
 800bc86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc8a:	f7f4 fcb5 	bl	80005f8 <__aeabi_dmul>
 800bc8e:	4b28      	ldr	r3, [pc, #160]	@ (800bd30 <_strtod_l+0x598>)
 800bc90:	460a      	mov	r2, r1
 800bc92:	400b      	ands	r3, r1
 800bc94:	4927      	ldr	r1, [pc, #156]	@ (800bd34 <_strtod_l+0x59c>)
 800bc96:	428b      	cmp	r3, r1
 800bc98:	4682      	mov	sl, r0
 800bc9a:	d898      	bhi.n	800bbce <_strtod_l+0x436>
 800bc9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bca0:	428b      	cmp	r3, r1
 800bca2:	bf86      	itte	hi
 800bca4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bd38 <_strtod_l+0x5a0>
 800bca8:	f04f 3aff 	movhi.w	sl, #4294967295
 800bcac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	9308      	str	r3, [sp, #32]
 800bcb4:	e07a      	b.n	800bdac <_strtod_l+0x614>
 800bcb6:	07e2      	lsls	r2, r4, #31
 800bcb8:	d505      	bpl.n	800bcc6 <_strtod_l+0x52e>
 800bcba:	9b08      	ldr	r3, [sp, #32]
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	f7f4 fc9a 	bl	80005f8 <__aeabi_dmul>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	9a08      	ldr	r2, [sp, #32]
 800bcc8:	3208      	adds	r2, #8
 800bcca:	3601      	adds	r6, #1
 800bccc:	1064      	asrs	r4, r4, #1
 800bcce:	9208      	str	r2, [sp, #32]
 800bcd0:	e7cd      	b.n	800bc6e <_strtod_l+0x4d6>
 800bcd2:	d0ed      	beq.n	800bcb0 <_strtod_l+0x518>
 800bcd4:	4264      	negs	r4, r4
 800bcd6:	f014 020f 	ands.w	r2, r4, #15
 800bcda:	d00a      	beq.n	800bcf2 <_strtod_l+0x55a>
 800bcdc:	4b12      	ldr	r3, [pc, #72]	@ (800bd28 <_strtod_l+0x590>)
 800bcde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bce2:	4650      	mov	r0, sl
 800bce4:	4659      	mov	r1, fp
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fdaf 	bl	800084c <__aeabi_ddiv>
 800bcee:	4682      	mov	sl, r0
 800bcf0:	468b      	mov	fp, r1
 800bcf2:	1124      	asrs	r4, r4, #4
 800bcf4:	d0dc      	beq.n	800bcb0 <_strtod_l+0x518>
 800bcf6:	2c1f      	cmp	r4, #31
 800bcf8:	dd20      	ble.n	800bd3c <_strtod_l+0x5a4>
 800bcfa:	2400      	movs	r4, #0
 800bcfc:	46a0      	mov	r8, r4
 800bcfe:	940a      	str	r4, [sp, #40]	@ 0x28
 800bd00:	46a1      	mov	r9, r4
 800bd02:	9a05      	ldr	r2, [sp, #20]
 800bd04:	2322      	movs	r3, #34	@ 0x22
 800bd06:	f04f 0a00 	mov.w	sl, #0
 800bd0a:	f04f 0b00 	mov.w	fp, #0
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	e768      	b.n	800bbe4 <_strtod_l+0x44c>
 800bd12:	bf00      	nop
 800bd14:	0800d7ad 	.word	0x0800d7ad
 800bd18:	0800d9c4 	.word	0x0800d9c4
 800bd1c:	0800d7a5 	.word	0x0800d7a5
 800bd20:	0800d7dc 	.word	0x0800d7dc
 800bd24:	0800db6d 	.word	0x0800db6d
 800bd28:	0800d8f8 	.word	0x0800d8f8
 800bd2c:	0800d8d0 	.word	0x0800d8d0
 800bd30:	7ff00000 	.word	0x7ff00000
 800bd34:	7ca00000 	.word	0x7ca00000
 800bd38:	7fefffff 	.word	0x7fefffff
 800bd3c:	f014 0310 	ands.w	r3, r4, #16
 800bd40:	bf18      	it	ne
 800bd42:	236a      	movne	r3, #106	@ 0x6a
 800bd44:	4ea9      	ldr	r6, [pc, #676]	@ (800bfec <_strtod_l+0x854>)
 800bd46:	9308      	str	r3, [sp, #32]
 800bd48:	4650      	mov	r0, sl
 800bd4a:	4659      	mov	r1, fp
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	07e2      	lsls	r2, r4, #31
 800bd50:	d504      	bpl.n	800bd5c <_strtod_l+0x5c4>
 800bd52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd56:	f7f4 fc4f 	bl	80005f8 <__aeabi_dmul>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	1064      	asrs	r4, r4, #1
 800bd5e:	f106 0608 	add.w	r6, r6, #8
 800bd62:	d1f4      	bne.n	800bd4e <_strtod_l+0x5b6>
 800bd64:	b10b      	cbz	r3, 800bd6a <_strtod_l+0x5d2>
 800bd66:	4682      	mov	sl, r0
 800bd68:	468b      	mov	fp, r1
 800bd6a:	9b08      	ldr	r3, [sp, #32]
 800bd6c:	b1b3      	cbz	r3, 800bd9c <_strtod_l+0x604>
 800bd6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bd72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	4659      	mov	r1, fp
 800bd7a:	dd0f      	ble.n	800bd9c <_strtod_l+0x604>
 800bd7c:	2b1f      	cmp	r3, #31
 800bd7e:	dd55      	ble.n	800be2c <_strtod_l+0x694>
 800bd80:	2b34      	cmp	r3, #52	@ 0x34
 800bd82:	bfde      	ittt	le
 800bd84:	f04f 33ff 	movle.w	r3, #4294967295
 800bd88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bd8c:	4093      	lslle	r3, r2
 800bd8e:	f04f 0a00 	mov.w	sl, #0
 800bd92:	bfcc      	ite	gt
 800bd94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bd98:	ea03 0b01 	andle.w	fp, r3, r1
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2300      	movs	r3, #0
 800bda0:	4650      	mov	r0, sl
 800bda2:	4659      	mov	r1, fp
 800bda4:	f7f4 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d1a6      	bne.n	800bcfa <_strtod_l+0x562>
 800bdac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bdb2:	9805      	ldr	r0, [sp, #20]
 800bdb4:	462b      	mov	r3, r5
 800bdb6:	463a      	mov	r2, r7
 800bdb8:	f7ff f8c6 	bl	800af48 <__s2b>
 800bdbc:	900a      	str	r0, [sp, #40]	@ 0x28
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	f43f af05 	beq.w	800bbce <_strtod_l+0x436>
 800bdc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdc6:	2a00      	cmp	r2, #0
 800bdc8:	eba9 0308 	sub.w	r3, r9, r8
 800bdcc:	bfa8      	it	ge
 800bdce:	2300      	movge	r3, #0
 800bdd0:	9312      	str	r3, [sp, #72]	@ 0x48
 800bdd2:	2400      	movs	r4, #0
 800bdd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bdd8:	9316      	str	r3, [sp, #88]	@ 0x58
 800bdda:	46a0      	mov	r8, r4
 800bddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdde:	9805      	ldr	r0, [sp, #20]
 800bde0:	6859      	ldr	r1, [r3, #4]
 800bde2:	f7ff f809 	bl	800adf8 <_Balloc>
 800bde6:	4681      	mov	r9, r0
 800bde8:	2800      	cmp	r0, #0
 800bdea:	f43f aef4 	beq.w	800bbd6 <_strtod_l+0x43e>
 800bdee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdf0:	691a      	ldr	r2, [r3, #16]
 800bdf2:	3202      	adds	r2, #2
 800bdf4:	f103 010c 	add.w	r1, r3, #12
 800bdf8:	0092      	lsls	r2, r2, #2
 800bdfa:	300c      	adds	r0, #12
 800bdfc:	f7fe f899 	bl	8009f32 <memcpy>
 800be00:	ec4b ab10 	vmov	d0, sl, fp
 800be04:	9805      	ldr	r0, [sp, #20]
 800be06:	aa1c      	add	r2, sp, #112	@ 0x70
 800be08:	a91b      	add	r1, sp, #108	@ 0x6c
 800be0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800be0e:	f7ff fbd7 	bl	800b5c0 <__d2b>
 800be12:	901a      	str	r0, [sp, #104]	@ 0x68
 800be14:	2800      	cmp	r0, #0
 800be16:	f43f aede 	beq.w	800bbd6 <_strtod_l+0x43e>
 800be1a:	9805      	ldr	r0, [sp, #20]
 800be1c:	2101      	movs	r1, #1
 800be1e:	f7ff f929 	bl	800b074 <__i2b>
 800be22:	4680      	mov	r8, r0
 800be24:	b948      	cbnz	r0, 800be3a <_strtod_l+0x6a2>
 800be26:	f04f 0800 	mov.w	r8, #0
 800be2a:	e6d4      	b.n	800bbd6 <_strtod_l+0x43e>
 800be2c:	f04f 32ff 	mov.w	r2, #4294967295
 800be30:	fa02 f303 	lsl.w	r3, r2, r3
 800be34:	ea03 0a0a 	and.w	sl, r3, sl
 800be38:	e7b0      	b.n	800bd9c <_strtod_l+0x604>
 800be3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800be3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800be3e:	2d00      	cmp	r5, #0
 800be40:	bfab      	itete	ge
 800be42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800be44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800be46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800be48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800be4a:	bfac      	ite	ge
 800be4c:	18ef      	addge	r7, r5, r3
 800be4e:	1b5e      	sublt	r6, r3, r5
 800be50:	9b08      	ldr	r3, [sp, #32]
 800be52:	1aed      	subs	r5, r5, r3
 800be54:	4415      	add	r5, r2
 800be56:	4b66      	ldr	r3, [pc, #408]	@ (800bff0 <_strtod_l+0x858>)
 800be58:	3d01      	subs	r5, #1
 800be5a:	429d      	cmp	r5, r3
 800be5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800be60:	da50      	bge.n	800bf04 <_strtod_l+0x76c>
 800be62:	1b5b      	subs	r3, r3, r5
 800be64:	2b1f      	cmp	r3, #31
 800be66:	eba2 0203 	sub.w	r2, r2, r3
 800be6a:	f04f 0101 	mov.w	r1, #1
 800be6e:	dc3d      	bgt.n	800beec <_strtod_l+0x754>
 800be70:	fa01 f303 	lsl.w	r3, r1, r3
 800be74:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be76:	2300      	movs	r3, #0
 800be78:	9310      	str	r3, [sp, #64]	@ 0x40
 800be7a:	18bd      	adds	r5, r7, r2
 800be7c:	9b08      	ldr	r3, [sp, #32]
 800be7e:	42af      	cmp	r7, r5
 800be80:	4416      	add	r6, r2
 800be82:	441e      	add	r6, r3
 800be84:	463b      	mov	r3, r7
 800be86:	bfa8      	it	ge
 800be88:	462b      	movge	r3, r5
 800be8a:	42b3      	cmp	r3, r6
 800be8c:	bfa8      	it	ge
 800be8e:	4633      	movge	r3, r6
 800be90:	2b00      	cmp	r3, #0
 800be92:	bfc2      	ittt	gt
 800be94:	1aed      	subgt	r5, r5, r3
 800be96:	1af6      	subgt	r6, r6, r3
 800be98:	1aff      	subgt	r7, r7, r3
 800be9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dd16      	ble.n	800bece <_strtod_l+0x736>
 800bea0:	4641      	mov	r1, r8
 800bea2:	9805      	ldr	r0, [sp, #20]
 800bea4:	461a      	mov	r2, r3
 800bea6:	f7ff f9a5 	bl	800b1f4 <__pow5mult>
 800beaa:	4680      	mov	r8, r0
 800beac:	2800      	cmp	r0, #0
 800beae:	d0ba      	beq.n	800be26 <_strtod_l+0x68e>
 800beb0:	4601      	mov	r1, r0
 800beb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800beb4:	9805      	ldr	r0, [sp, #20]
 800beb6:	f7ff f8f3 	bl	800b0a0 <__multiply>
 800beba:	900e      	str	r0, [sp, #56]	@ 0x38
 800bebc:	2800      	cmp	r0, #0
 800bebe:	f43f ae8a 	beq.w	800bbd6 <_strtod_l+0x43e>
 800bec2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bec4:	9805      	ldr	r0, [sp, #20]
 800bec6:	f7fe ffd7 	bl	800ae78 <_Bfree>
 800beca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800becc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bece:	2d00      	cmp	r5, #0
 800bed0:	dc1d      	bgt.n	800bf0e <_strtod_l+0x776>
 800bed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	dd23      	ble.n	800bf20 <_strtod_l+0x788>
 800bed8:	4649      	mov	r1, r9
 800beda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bedc:	9805      	ldr	r0, [sp, #20]
 800bede:	f7ff f989 	bl	800b1f4 <__pow5mult>
 800bee2:	4681      	mov	r9, r0
 800bee4:	b9e0      	cbnz	r0, 800bf20 <_strtod_l+0x788>
 800bee6:	f04f 0900 	mov.w	r9, #0
 800beea:	e674      	b.n	800bbd6 <_strtod_l+0x43e>
 800beec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bef0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bef4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bef8:	35e2      	adds	r5, #226	@ 0xe2
 800befa:	fa01 f305 	lsl.w	r3, r1, r5
 800befe:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf00:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bf02:	e7ba      	b.n	800be7a <_strtod_l+0x6e2>
 800bf04:	2300      	movs	r3, #0
 800bf06:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf08:	2301      	movs	r3, #1
 800bf0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf0c:	e7b5      	b.n	800be7a <_strtod_l+0x6e2>
 800bf0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf10:	9805      	ldr	r0, [sp, #20]
 800bf12:	462a      	mov	r2, r5
 800bf14:	f7ff f9c8 	bl	800b2a8 <__lshift>
 800bf18:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	d1d9      	bne.n	800bed2 <_strtod_l+0x73a>
 800bf1e:	e65a      	b.n	800bbd6 <_strtod_l+0x43e>
 800bf20:	2e00      	cmp	r6, #0
 800bf22:	dd07      	ble.n	800bf34 <_strtod_l+0x79c>
 800bf24:	4649      	mov	r1, r9
 800bf26:	9805      	ldr	r0, [sp, #20]
 800bf28:	4632      	mov	r2, r6
 800bf2a:	f7ff f9bd 	bl	800b2a8 <__lshift>
 800bf2e:	4681      	mov	r9, r0
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d0d8      	beq.n	800bee6 <_strtod_l+0x74e>
 800bf34:	2f00      	cmp	r7, #0
 800bf36:	dd08      	ble.n	800bf4a <_strtod_l+0x7b2>
 800bf38:	4641      	mov	r1, r8
 800bf3a:	9805      	ldr	r0, [sp, #20]
 800bf3c:	463a      	mov	r2, r7
 800bf3e:	f7ff f9b3 	bl	800b2a8 <__lshift>
 800bf42:	4680      	mov	r8, r0
 800bf44:	2800      	cmp	r0, #0
 800bf46:	f43f ae46 	beq.w	800bbd6 <_strtod_l+0x43e>
 800bf4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf4c:	9805      	ldr	r0, [sp, #20]
 800bf4e:	464a      	mov	r2, r9
 800bf50:	f7ff fa32 	bl	800b3b8 <__mdiff>
 800bf54:	4604      	mov	r4, r0
 800bf56:	2800      	cmp	r0, #0
 800bf58:	f43f ae3d 	beq.w	800bbd6 <_strtod_l+0x43e>
 800bf5c:	68c3      	ldr	r3, [r0, #12]
 800bf5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf60:	2300      	movs	r3, #0
 800bf62:	60c3      	str	r3, [r0, #12]
 800bf64:	4641      	mov	r1, r8
 800bf66:	f7ff fa0b 	bl	800b380 <__mcmp>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	da46      	bge.n	800bffc <_strtod_l+0x864>
 800bf6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf70:	ea53 030a 	orrs.w	r3, r3, sl
 800bf74:	d16c      	bne.n	800c050 <_strtod_l+0x8b8>
 800bf76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d168      	bne.n	800c050 <_strtod_l+0x8b8>
 800bf7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf82:	0d1b      	lsrs	r3, r3, #20
 800bf84:	051b      	lsls	r3, r3, #20
 800bf86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf8a:	d961      	bls.n	800c050 <_strtod_l+0x8b8>
 800bf8c:	6963      	ldr	r3, [r4, #20]
 800bf8e:	b913      	cbnz	r3, 800bf96 <_strtod_l+0x7fe>
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	dd5c      	ble.n	800c050 <_strtod_l+0x8b8>
 800bf96:	4621      	mov	r1, r4
 800bf98:	2201      	movs	r2, #1
 800bf9a:	9805      	ldr	r0, [sp, #20]
 800bf9c:	f7ff f984 	bl	800b2a8 <__lshift>
 800bfa0:	4641      	mov	r1, r8
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	f7ff f9ec 	bl	800b380 <__mcmp>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	dd51      	ble.n	800c050 <_strtod_l+0x8b8>
 800bfac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bfb0:	9a08      	ldr	r2, [sp, #32]
 800bfb2:	0d1b      	lsrs	r3, r3, #20
 800bfb4:	051b      	lsls	r3, r3, #20
 800bfb6:	2a00      	cmp	r2, #0
 800bfb8:	d06b      	beq.n	800c092 <_strtod_l+0x8fa>
 800bfba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bfbe:	d868      	bhi.n	800c092 <_strtod_l+0x8fa>
 800bfc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bfc4:	f67f ae9d 	bls.w	800bd02 <_strtod_l+0x56a>
 800bfc8:	4b0a      	ldr	r3, [pc, #40]	@ (800bff4 <_strtod_l+0x85c>)
 800bfca:	4650      	mov	r0, sl
 800bfcc:	4659      	mov	r1, fp
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f7f4 fb12 	bl	80005f8 <__aeabi_dmul>
 800bfd4:	4b08      	ldr	r3, [pc, #32]	@ (800bff8 <_strtod_l+0x860>)
 800bfd6:	400b      	ands	r3, r1
 800bfd8:	4682      	mov	sl, r0
 800bfda:	468b      	mov	fp, r1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f47f ae05 	bne.w	800bbec <_strtod_l+0x454>
 800bfe2:	9a05      	ldr	r2, [sp, #20]
 800bfe4:	2322      	movs	r3, #34	@ 0x22
 800bfe6:	6013      	str	r3, [r2, #0]
 800bfe8:	e600      	b.n	800bbec <_strtod_l+0x454>
 800bfea:	bf00      	nop
 800bfec:	0800d9f0 	.word	0x0800d9f0
 800bff0:	fffffc02 	.word	0xfffffc02
 800bff4:	39500000 	.word	0x39500000
 800bff8:	7ff00000 	.word	0x7ff00000
 800bffc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c000:	d165      	bne.n	800c0ce <_strtod_l+0x936>
 800c002:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c008:	b35a      	cbz	r2, 800c062 <_strtod_l+0x8ca>
 800c00a:	4a9f      	ldr	r2, [pc, #636]	@ (800c288 <_strtod_l+0xaf0>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d12b      	bne.n	800c068 <_strtod_l+0x8d0>
 800c010:	9b08      	ldr	r3, [sp, #32]
 800c012:	4651      	mov	r1, sl
 800c014:	b303      	cbz	r3, 800c058 <_strtod_l+0x8c0>
 800c016:	4b9d      	ldr	r3, [pc, #628]	@ (800c28c <_strtod_l+0xaf4>)
 800c018:	465a      	mov	r2, fp
 800c01a:	4013      	ands	r3, r2
 800c01c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c020:	f04f 32ff 	mov.w	r2, #4294967295
 800c024:	d81b      	bhi.n	800c05e <_strtod_l+0x8c6>
 800c026:	0d1b      	lsrs	r3, r3, #20
 800c028:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c02c:	fa02 f303 	lsl.w	r3, r2, r3
 800c030:	4299      	cmp	r1, r3
 800c032:	d119      	bne.n	800c068 <_strtod_l+0x8d0>
 800c034:	4b96      	ldr	r3, [pc, #600]	@ (800c290 <_strtod_l+0xaf8>)
 800c036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c038:	429a      	cmp	r2, r3
 800c03a:	d102      	bne.n	800c042 <_strtod_l+0x8aa>
 800c03c:	3101      	adds	r1, #1
 800c03e:	f43f adca 	beq.w	800bbd6 <_strtod_l+0x43e>
 800c042:	4b92      	ldr	r3, [pc, #584]	@ (800c28c <_strtod_l+0xaf4>)
 800c044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c046:	401a      	ands	r2, r3
 800c048:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c04c:	f04f 0a00 	mov.w	sl, #0
 800c050:	9b08      	ldr	r3, [sp, #32]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1b8      	bne.n	800bfc8 <_strtod_l+0x830>
 800c056:	e5c9      	b.n	800bbec <_strtod_l+0x454>
 800c058:	f04f 33ff 	mov.w	r3, #4294967295
 800c05c:	e7e8      	b.n	800c030 <_strtod_l+0x898>
 800c05e:	4613      	mov	r3, r2
 800c060:	e7e6      	b.n	800c030 <_strtod_l+0x898>
 800c062:	ea53 030a 	orrs.w	r3, r3, sl
 800c066:	d0a1      	beq.n	800bfac <_strtod_l+0x814>
 800c068:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c06a:	b1db      	cbz	r3, 800c0a4 <_strtod_l+0x90c>
 800c06c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c06e:	4213      	tst	r3, r2
 800c070:	d0ee      	beq.n	800c050 <_strtod_l+0x8b8>
 800c072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c074:	9a08      	ldr	r2, [sp, #32]
 800c076:	4650      	mov	r0, sl
 800c078:	4659      	mov	r1, fp
 800c07a:	b1bb      	cbz	r3, 800c0ac <_strtod_l+0x914>
 800c07c:	f7ff fb6e 	bl	800b75c <sulp>
 800c080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c084:	ec53 2b10 	vmov	r2, r3, d0
 800c088:	f7f4 f900 	bl	800028c <__adddf3>
 800c08c:	4682      	mov	sl, r0
 800c08e:	468b      	mov	fp, r1
 800c090:	e7de      	b.n	800c050 <_strtod_l+0x8b8>
 800c092:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c096:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c09a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c09e:	f04f 3aff 	mov.w	sl, #4294967295
 800c0a2:	e7d5      	b.n	800c050 <_strtod_l+0x8b8>
 800c0a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c0a6:	ea13 0f0a 	tst.w	r3, sl
 800c0aa:	e7e1      	b.n	800c070 <_strtod_l+0x8d8>
 800c0ac:	f7ff fb56 	bl	800b75c <sulp>
 800c0b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0b4:	ec53 2b10 	vmov	r2, r3, d0
 800c0b8:	f7f4 f8e6 	bl	8000288 <__aeabi_dsub>
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2300      	movs	r3, #0
 800c0c0:	4682      	mov	sl, r0
 800c0c2:	468b      	mov	fp, r1
 800c0c4:	f7f4 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d0c1      	beq.n	800c050 <_strtod_l+0x8b8>
 800c0cc:	e619      	b.n	800bd02 <_strtod_l+0x56a>
 800c0ce:	4641      	mov	r1, r8
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f7ff facd 	bl	800b670 <__ratio>
 800c0d6:	ec57 6b10 	vmov	r6, r7, d0
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	f7f4 fd04 	bl	8000af0 <__aeabi_dcmple>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d06f      	beq.n	800c1cc <_strtod_l+0xa34>
 800c0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d17a      	bne.n	800c1e8 <_strtod_l+0xa50>
 800c0f2:	f1ba 0f00 	cmp.w	sl, #0
 800c0f6:	d158      	bne.n	800c1aa <_strtod_l+0xa12>
 800c0f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d15a      	bne.n	800c1b8 <_strtod_l+0xa20>
 800c102:	4b64      	ldr	r3, [pc, #400]	@ (800c294 <_strtod_l+0xafc>)
 800c104:	2200      	movs	r2, #0
 800c106:	4630      	mov	r0, r6
 800c108:	4639      	mov	r1, r7
 800c10a:	f7f4 fce7 	bl	8000adc <__aeabi_dcmplt>
 800c10e:	2800      	cmp	r0, #0
 800c110:	d159      	bne.n	800c1c6 <_strtod_l+0xa2e>
 800c112:	4630      	mov	r0, r6
 800c114:	4639      	mov	r1, r7
 800c116:	4b60      	ldr	r3, [pc, #384]	@ (800c298 <_strtod_l+0xb00>)
 800c118:	2200      	movs	r2, #0
 800c11a:	f7f4 fa6d 	bl	80005f8 <__aeabi_dmul>
 800c11e:	4606      	mov	r6, r0
 800c120:	460f      	mov	r7, r1
 800c122:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c126:	9606      	str	r6, [sp, #24]
 800c128:	9307      	str	r3, [sp, #28]
 800c12a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c12e:	4d57      	ldr	r5, [pc, #348]	@ (800c28c <_strtod_l+0xaf4>)
 800c130:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c136:	401d      	ands	r5, r3
 800c138:	4b58      	ldr	r3, [pc, #352]	@ (800c29c <_strtod_l+0xb04>)
 800c13a:	429d      	cmp	r5, r3
 800c13c:	f040 80b2 	bne.w	800c2a4 <_strtod_l+0xb0c>
 800c140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c142:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c146:	ec4b ab10 	vmov	d0, sl, fp
 800c14a:	f7ff f9c9 	bl	800b4e0 <__ulp>
 800c14e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c152:	ec51 0b10 	vmov	r0, r1, d0
 800c156:	f7f4 fa4f 	bl	80005f8 <__aeabi_dmul>
 800c15a:	4652      	mov	r2, sl
 800c15c:	465b      	mov	r3, fp
 800c15e:	f7f4 f895 	bl	800028c <__adddf3>
 800c162:	460b      	mov	r3, r1
 800c164:	4949      	ldr	r1, [pc, #292]	@ (800c28c <_strtod_l+0xaf4>)
 800c166:	4a4e      	ldr	r2, [pc, #312]	@ (800c2a0 <_strtod_l+0xb08>)
 800c168:	4019      	ands	r1, r3
 800c16a:	4291      	cmp	r1, r2
 800c16c:	4682      	mov	sl, r0
 800c16e:	d942      	bls.n	800c1f6 <_strtod_l+0xa5e>
 800c170:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c172:	4b47      	ldr	r3, [pc, #284]	@ (800c290 <_strtod_l+0xaf8>)
 800c174:	429a      	cmp	r2, r3
 800c176:	d103      	bne.n	800c180 <_strtod_l+0x9e8>
 800c178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c17a:	3301      	adds	r3, #1
 800c17c:	f43f ad2b 	beq.w	800bbd6 <_strtod_l+0x43e>
 800c180:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c290 <_strtod_l+0xaf8>
 800c184:	f04f 3aff 	mov.w	sl, #4294967295
 800c188:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c18a:	9805      	ldr	r0, [sp, #20]
 800c18c:	f7fe fe74 	bl	800ae78 <_Bfree>
 800c190:	9805      	ldr	r0, [sp, #20]
 800c192:	4649      	mov	r1, r9
 800c194:	f7fe fe70 	bl	800ae78 <_Bfree>
 800c198:	9805      	ldr	r0, [sp, #20]
 800c19a:	4641      	mov	r1, r8
 800c19c:	f7fe fe6c 	bl	800ae78 <_Bfree>
 800c1a0:	9805      	ldr	r0, [sp, #20]
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	f7fe fe68 	bl	800ae78 <_Bfree>
 800c1a8:	e618      	b.n	800bddc <_strtod_l+0x644>
 800c1aa:	f1ba 0f01 	cmp.w	sl, #1
 800c1ae:	d103      	bne.n	800c1b8 <_strtod_l+0xa20>
 800c1b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f43f ada5 	beq.w	800bd02 <_strtod_l+0x56a>
 800c1b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c268 <_strtod_l+0xad0>
 800c1bc:	4f35      	ldr	r7, [pc, #212]	@ (800c294 <_strtod_l+0xafc>)
 800c1be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1c2:	2600      	movs	r6, #0
 800c1c4:	e7b1      	b.n	800c12a <_strtod_l+0x992>
 800c1c6:	4f34      	ldr	r7, [pc, #208]	@ (800c298 <_strtod_l+0xb00>)
 800c1c8:	2600      	movs	r6, #0
 800c1ca:	e7aa      	b.n	800c122 <_strtod_l+0x98a>
 800c1cc:	4b32      	ldr	r3, [pc, #200]	@ (800c298 <_strtod_l+0xb00>)
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7f4 fa10 	bl	80005f8 <__aeabi_dmul>
 800c1d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1da:	4606      	mov	r6, r0
 800c1dc:	460f      	mov	r7, r1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d09f      	beq.n	800c122 <_strtod_l+0x98a>
 800c1e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c1e6:	e7a0      	b.n	800c12a <_strtod_l+0x992>
 800c1e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c270 <_strtod_l+0xad8>
 800c1ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1f0:	ec57 6b17 	vmov	r6, r7, d7
 800c1f4:	e799      	b.n	800c12a <_strtod_l+0x992>
 800c1f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1c1      	bne.n	800c188 <_strtod_l+0x9f0>
 800c204:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c208:	0d1b      	lsrs	r3, r3, #20
 800c20a:	051b      	lsls	r3, r3, #20
 800c20c:	429d      	cmp	r5, r3
 800c20e:	d1bb      	bne.n	800c188 <_strtod_l+0x9f0>
 800c210:	4630      	mov	r0, r6
 800c212:	4639      	mov	r1, r7
 800c214:	f7f4 fd50 	bl	8000cb8 <__aeabi_d2lz>
 800c218:	f7f4 f9c0 	bl	800059c <__aeabi_l2d>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	4630      	mov	r0, r6
 800c222:	4639      	mov	r1, r7
 800c224:	f7f4 f830 	bl	8000288 <__aeabi_dsub>
 800c228:	460b      	mov	r3, r1
 800c22a:	4602      	mov	r2, r0
 800c22c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c230:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c236:	ea46 060a 	orr.w	r6, r6, sl
 800c23a:	431e      	orrs	r6, r3
 800c23c:	d06f      	beq.n	800c31e <_strtod_l+0xb86>
 800c23e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c278 <_strtod_l+0xae0>)
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f7f4 fc4a 	bl	8000adc <__aeabi_dcmplt>
 800c248:	2800      	cmp	r0, #0
 800c24a:	f47f accf 	bne.w	800bbec <_strtod_l+0x454>
 800c24e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c280 <_strtod_l+0xae8>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c258:	f7f4 fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d093      	beq.n	800c188 <_strtod_l+0x9f0>
 800c260:	e4c4      	b.n	800bbec <_strtod_l+0x454>
 800c262:	bf00      	nop
 800c264:	f3af 8000 	nop.w
 800c268:	00000000 	.word	0x00000000
 800c26c:	bff00000 	.word	0xbff00000
 800c270:	00000000 	.word	0x00000000
 800c274:	3ff00000 	.word	0x3ff00000
 800c278:	94a03595 	.word	0x94a03595
 800c27c:	3fdfffff 	.word	0x3fdfffff
 800c280:	35afe535 	.word	0x35afe535
 800c284:	3fe00000 	.word	0x3fe00000
 800c288:	000fffff 	.word	0x000fffff
 800c28c:	7ff00000 	.word	0x7ff00000
 800c290:	7fefffff 	.word	0x7fefffff
 800c294:	3ff00000 	.word	0x3ff00000
 800c298:	3fe00000 	.word	0x3fe00000
 800c29c:	7fe00000 	.word	0x7fe00000
 800c2a0:	7c9fffff 	.word	0x7c9fffff
 800c2a4:	9b08      	ldr	r3, [sp, #32]
 800c2a6:	b323      	cbz	r3, 800c2f2 <_strtod_l+0xb5a>
 800c2a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c2ac:	d821      	bhi.n	800c2f2 <_strtod_l+0xb5a>
 800c2ae:	a328      	add	r3, pc, #160	@ (adr r3, 800c350 <_strtod_l+0xbb8>)
 800c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	4639      	mov	r1, r7
 800c2b8:	f7f4 fc1a 	bl	8000af0 <__aeabi_dcmple>
 800c2bc:	b1a0      	cbz	r0, 800c2e8 <_strtod_l+0xb50>
 800c2be:	4639      	mov	r1, r7
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f7f4 fc71 	bl	8000ba8 <__aeabi_d2uiz>
 800c2c6:	2801      	cmp	r0, #1
 800c2c8:	bf38      	it	cc
 800c2ca:	2001      	movcc	r0, #1
 800c2cc:	f7f4 f91a 	bl	8000504 <__aeabi_ui2d>
 800c2d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	460f      	mov	r7, r1
 800c2d6:	b9fb      	cbnz	r3, 800c318 <_strtod_l+0xb80>
 800c2d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800c2de:	9315      	str	r3, [sp, #84]	@ 0x54
 800c2e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c2e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c2e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c2ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c2ee:	1b5b      	subs	r3, r3, r5
 800c2f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c2f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c2f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c2fa:	f7ff f8f1 	bl	800b4e0 <__ulp>
 800c2fe:	4650      	mov	r0, sl
 800c300:	ec53 2b10 	vmov	r2, r3, d0
 800c304:	4659      	mov	r1, fp
 800c306:	f7f4 f977 	bl	80005f8 <__aeabi_dmul>
 800c30a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c30e:	f7f3 ffbd 	bl	800028c <__adddf3>
 800c312:	4682      	mov	sl, r0
 800c314:	468b      	mov	fp, r1
 800c316:	e770      	b.n	800c1fa <_strtod_l+0xa62>
 800c318:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c31c:	e7e0      	b.n	800c2e0 <_strtod_l+0xb48>
 800c31e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c358 <_strtod_l+0xbc0>)
 800c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c324:	f7f4 fbda 	bl	8000adc <__aeabi_dcmplt>
 800c328:	e798      	b.n	800c25c <_strtod_l+0xac4>
 800c32a:	2300      	movs	r3, #0
 800c32c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c32e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	f7ff ba6d 	b.w	800b812 <_strtod_l+0x7a>
 800c338:	2a65      	cmp	r2, #101	@ 0x65
 800c33a:	f43f ab66 	beq.w	800ba0a <_strtod_l+0x272>
 800c33e:	2a45      	cmp	r2, #69	@ 0x45
 800c340:	f43f ab63 	beq.w	800ba0a <_strtod_l+0x272>
 800c344:	2301      	movs	r3, #1
 800c346:	f7ff bb9e 	b.w	800ba86 <_strtod_l+0x2ee>
 800c34a:	bf00      	nop
 800c34c:	f3af 8000 	nop.w
 800c350:	ffc00000 	.word	0xffc00000
 800c354:	41dfffff 	.word	0x41dfffff
 800c358:	94a03595 	.word	0x94a03595
 800c35c:	3fcfffff 	.word	0x3fcfffff

0800c360 <_strtod_r>:
 800c360:	4b01      	ldr	r3, [pc, #4]	@ (800c368 <_strtod_r+0x8>)
 800c362:	f7ff ba19 	b.w	800b798 <_strtod_l>
 800c366:	bf00      	nop
 800c368:	20000090 	.word	0x20000090

0800c36c <_strtol_l.constprop.0>:
 800c36c:	2b24      	cmp	r3, #36	@ 0x24
 800c36e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c372:	4686      	mov	lr, r0
 800c374:	4690      	mov	r8, r2
 800c376:	d801      	bhi.n	800c37c <_strtol_l.constprop.0+0x10>
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d106      	bne.n	800c38a <_strtol_l.constprop.0+0x1e>
 800c37c:	f7fd fdac 	bl	8009ed8 <__errno>
 800c380:	2316      	movs	r3, #22
 800c382:	6003      	str	r3, [r0, #0]
 800c384:	2000      	movs	r0, #0
 800c386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38a:	4834      	ldr	r0, [pc, #208]	@ (800c45c <_strtol_l.constprop.0+0xf0>)
 800c38c:	460d      	mov	r5, r1
 800c38e:	462a      	mov	r2, r5
 800c390:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c394:	5d06      	ldrb	r6, [r0, r4]
 800c396:	f016 0608 	ands.w	r6, r6, #8
 800c39a:	d1f8      	bne.n	800c38e <_strtol_l.constprop.0+0x22>
 800c39c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c39e:	d12d      	bne.n	800c3fc <_strtol_l.constprop.0+0x90>
 800c3a0:	782c      	ldrb	r4, [r5, #0]
 800c3a2:	2601      	movs	r6, #1
 800c3a4:	1c95      	adds	r5, r2, #2
 800c3a6:	f033 0210 	bics.w	r2, r3, #16
 800c3aa:	d109      	bne.n	800c3c0 <_strtol_l.constprop.0+0x54>
 800c3ac:	2c30      	cmp	r4, #48	@ 0x30
 800c3ae:	d12a      	bne.n	800c406 <_strtol_l.constprop.0+0x9a>
 800c3b0:	782a      	ldrb	r2, [r5, #0]
 800c3b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c3b6:	2a58      	cmp	r2, #88	@ 0x58
 800c3b8:	d125      	bne.n	800c406 <_strtol_l.constprop.0+0x9a>
 800c3ba:	786c      	ldrb	r4, [r5, #1]
 800c3bc:	2310      	movs	r3, #16
 800c3be:	3502      	adds	r5, #2
 800c3c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c3c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	fbbc f9f3 	udiv	r9, ip, r3
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c3d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c3d8:	2f09      	cmp	r7, #9
 800c3da:	d81b      	bhi.n	800c414 <_strtol_l.constprop.0+0xa8>
 800c3dc:	463c      	mov	r4, r7
 800c3de:	42a3      	cmp	r3, r4
 800c3e0:	dd27      	ble.n	800c432 <_strtol_l.constprop.0+0xc6>
 800c3e2:	1c57      	adds	r7, r2, #1
 800c3e4:	d007      	beq.n	800c3f6 <_strtol_l.constprop.0+0x8a>
 800c3e6:	4581      	cmp	r9, r0
 800c3e8:	d320      	bcc.n	800c42c <_strtol_l.constprop.0+0xc0>
 800c3ea:	d101      	bne.n	800c3f0 <_strtol_l.constprop.0+0x84>
 800c3ec:	45a2      	cmp	sl, r4
 800c3ee:	db1d      	blt.n	800c42c <_strtol_l.constprop.0+0xc0>
 800c3f0:	fb00 4003 	mla	r0, r0, r3, r4
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3fa:	e7eb      	b.n	800c3d4 <_strtol_l.constprop.0+0x68>
 800c3fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800c3fe:	bf04      	itt	eq
 800c400:	782c      	ldrbeq	r4, [r5, #0]
 800c402:	1c95      	addeq	r5, r2, #2
 800c404:	e7cf      	b.n	800c3a6 <_strtol_l.constprop.0+0x3a>
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1da      	bne.n	800c3c0 <_strtol_l.constprop.0+0x54>
 800c40a:	2c30      	cmp	r4, #48	@ 0x30
 800c40c:	bf0c      	ite	eq
 800c40e:	2308      	moveq	r3, #8
 800c410:	230a      	movne	r3, #10
 800c412:	e7d5      	b.n	800c3c0 <_strtol_l.constprop.0+0x54>
 800c414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c418:	2f19      	cmp	r7, #25
 800c41a:	d801      	bhi.n	800c420 <_strtol_l.constprop.0+0xb4>
 800c41c:	3c37      	subs	r4, #55	@ 0x37
 800c41e:	e7de      	b.n	800c3de <_strtol_l.constprop.0+0x72>
 800c420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c424:	2f19      	cmp	r7, #25
 800c426:	d804      	bhi.n	800c432 <_strtol_l.constprop.0+0xc6>
 800c428:	3c57      	subs	r4, #87	@ 0x57
 800c42a:	e7d8      	b.n	800c3de <_strtol_l.constprop.0+0x72>
 800c42c:	f04f 32ff 	mov.w	r2, #4294967295
 800c430:	e7e1      	b.n	800c3f6 <_strtol_l.constprop.0+0x8a>
 800c432:	1c53      	adds	r3, r2, #1
 800c434:	d108      	bne.n	800c448 <_strtol_l.constprop.0+0xdc>
 800c436:	2322      	movs	r3, #34	@ 0x22
 800c438:	f8ce 3000 	str.w	r3, [lr]
 800c43c:	4660      	mov	r0, ip
 800c43e:	f1b8 0f00 	cmp.w	r8, #0
 800c442:	d0a0      	beq.n	800c386 <_strtol_l.constprop.0+0x1a>
 800c444:	1e69      	subs	r1, r5, #1
 800c446:	e006      	b.n	800c456 <_strtol_l.constprop.0+0xea>
 800c448:	b106      	cbz	r6, 800c44c <_strtol_l.constprop.0+0xe0>
 800c44a:	4240      	negs	r0, r0
 800c44c:	f1b8 0f00 	cmp.w	r8, #0
 800c450:	d099      	beq.n	800c386 <_strtol_l.constprop.0+0x1a>
 800c452:	2a00      	cmp	r2, #0
 800c454:	d1f6      	bne.n	800c444 <_strtol_l.constprop.0+0xd8>
 800c456:	f8c8 1000 	str.w	r1, [r8]
 800c45a:	e794      	b.n	800c386 <_strtol_l.constprop.0+0x1a>
 800c45c:	0800da19 	.word	0x0800da19

0800c460 <_strtol_r>:
 800c460:	f7ff bf84 	b.w	800c36c <_strtol_l.constprop.0>

0800c464 <__ssputs_r>:
 800c464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c468:	688e      	ldr	r6, [r1, #8]
 800c46a:	461f      	mov	r7, r3
 800c46c:	42be      	cmp	r6, r7
 800c46e:	680b      	ldr	r3, [r1, #0]
 800c470:	4682      	mov	sl, r0
 800c472:	460c      	mov	r4, r1
 800c474:	4690      	mov	r8, r2
 800c476:	d82d      	bhi.n	800c4d4 <__ssputs_r+0x70>
 800c478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c47c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c480:	d026      	beq.n	800c4d0 <__ssputs_r+0x6c>
 800c482:	6965      	ldr	r5, [r4, #20]
 800c484:	6909      	ldr	r1, [r1, #16]
 800c486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c48a:	eba3 0901 	sub.w	r9, r3, r1
 800c48e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c492:	1c7b      	adds	r3, r7, #1
 800c494:	444b      	add	r3, r9
 800c496:	106d      	asrs	r5, r5, #1
 800c498:	429d      	cmp	r5, r3
 800c49a:	bf38      	it	cc
 800c49c:	461d      	movcc	r5, r3
 800c49e:	0553      	lsls	r3, r2, #21
 800c4a0:	d527      	bpl.n	800c4f2 <__ssputs_r+0x8e>
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	f7fe fc1c 	bl	800ace0 <_malloc_r>
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	b360      	cbz	r0, 800c506 <__ssputs_r+0xa2>
 800c4ac:	6921      	ldr	r1, [r4, #16]
 800c4ae:	464a      	mov	r2, r9
 800c4b0:	f7fd fd3f 	bl	8009f32 <memcpy>
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c4ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4be:	81a3      	strh	r3, [r4, #12]
 800c4c0:	6126      	str	r6, [r4, #16]
 800c4c2:	6165      	str	r5, [r4, #20]
 800c4c4:	444e      	add	r6, r9
 800c4c6:	eba5 0509 	sub.w	r5, r5, r9
 800c4ca:	6026      	str	r6, [r4, #0]
 800c4cc:	60a5      	str	r5, [r4, #8]
 800c4ce:	463e      	mov	r6, r7
 800c4d0:	42be      	cmp	r6, r7
 800c4d2:	d900      	bls.n	800c4d6 <__ssputs_r+0x72>
 800c4d4:	463e      	mov	r6, r7
 800c4d6:	6820      	ldr	r0, [r4, #0]
 800c4d8:	4632      	mov	r2, r6
 800c4da:	4641      	mov	r1, r8
 800c4dc:	f000 fb9e 	bl	800cc1c <memmove>
 800c4e0:	68a3      	ldr	r3, [r4, #8]
 800c4e2:	1b9b      	subs	r3, r3, r6
 800c4e4:	60a3      	str	r3, [r4, #8]
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	4433      	add	r3, r6
 800c4ea:	6023      	str	r3, [r4, #0]
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f2:	462a      	mov	r2, r5
 800c4f4:	f000 ff75 	bl	800d3e2 <_realloc_r>
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d1e0      	bne.n	800c4c0 <__ssputs_r+0x5c>
 800c4fe:	6921      	ldr	r1, [r4, #16]
 800c500:	4650      	mov	r0, sl
 800c502:	f7fe fb79 	bl	800abf8 <_free_r>
 800c506:	230c      	movs	r3, #12
 800c508:	f8ca 3000 	str.w	r3, [sl]
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c512:	81a3      	strh	r3, [r4, #12]
 800c514:	f04f 30ff 	mov.w	r0, #4294967295
 800c518:	e7e9      	b.n	800c4ee <__ssputs_r+0x8a>
	...

0800c51c <_svfiprintf_r>:
 800c51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c520:	4698      	mov	r8, r3
 800c522:	898b      	ldrh	r3, [r1, #12]
 800c524:	061b      	lsls	r3, r3, #24
 800c526:	b09d      	sub	sp, #116	@ 0x74
 800c528:	4607      	mov	r7, r0
 800c52a:	460d      	mov	r5, r1
 800c52c:	4614      	mov	r4, r2
 800c52e:	d510      	bpl.n	800c552 <_svfiprintf_r+0x36>
 800c530:	690b      	ldr	r3, [r1, #16]
 800c532:	b973      	cbnz	r3, 800c552 <_svfiprintf_r+0x36>
 800c534:	2140      	movs	r1, #64	@ 0x40
 800c536:	f7fe fbd3 	bl	800ace0 <_malloc_r>
 800c53a:	6028      	str	r0, [r5, #0]
 800c53c:	6128      	str	r0, [r5, #16]
 800c53e:	b930      	cbnz	r0, 800c54e <_svfiprintf_r+0x32>
 800c540:	230c      	movs	r3, #12
 800c542:	603b      	str	r3, [r7, #0]
 800c544:	f04f 30ff 	mov.w	r0, #4294967295
 800c548:	b01d      	add	sp, #116	@ 0x74
 800c54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54e:	2340      	movs	r3, #64	@ 0x40
 800c550:	616b      	str	r3, [r5, #20]
 800c552:	2300      	movs	r3, #0
 800c554:	9309      	str	r3, [sp, #36]	@ 0x24
 800c556:	2320      	movs	r3, #32
 800c558:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c55c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c560:	2330      	movs	r3, #48	@ 0x30
 800c562:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c700 <_svfiprintf_r+0x1e4>
 800c566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c56a:	f04f 0901 	mov.w	r9, #1
 800c56e:	4623      	mov	r3, r4
 800c570:	469a      	mov	sl, r3
 800c572:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c576:	b10a      	cbz	r2, 800c57c <_svfiprintf_r+0x60>
 800c578:	2a25      	cmp	r2, #37	@ 0x25
 800c57a:	d1f9      	bne.n	800c570 <_svfiprintf_r+0x54>
 800c57c:	ebba 0b04 	subs.w	fp, sl, r4
 800c580:	d00b      	beq.n	800c59a <_svfiprintf_r+0x7e>
 800c582:	465b      	mov	r3, fp
 800c584:	4622      	mov	r2, r4
 800c586:	4629      	mov	r1, r5
 800c588:	4638      	mov	r0, r7
 800c58a:	f7ff ff6b 	bl	800c464 <__ssputs_r>
 800c58e:	3001      	adds	r0, #1
 800c590:	f000 80a7 	beq.w	800c6e2 <_svfiprintf_r+0x1c6>
 800c594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c596:	445a      	add	r2, fp
 800c598:	9209      	str	r2, [sp, #36]	@ 0x24
 800c59a:	f89a 3000 	ldrb.w	r3, [sl]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 809f 	beq.w	800c6e2 <_svfiprintf_r+0x1c6>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ae:	f10a 0a01 	add.w	sl, sl, #1
 800c5b2:	9304      	str	r3, [sp, #16]
 800c5b4:	9307      	str	r3, [sp, #28]
 800c5b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5bc:	4654      	mov	r4, sl
 800c5be:	2205      	movs	r2, #5
 800c5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c4:	484e      	ldr	r0, [pc, #312]	@ (800c700 <_svfiprintf_r+0x1e4>)
 800c5c6:	f7f3 fe03 	bl	80001d0 <memchr>
 800c5ca:	9a04      	ldr	r2, [sp, #16]
 800c5cc:	b9d8      	cbnz	r0, 800c606 <_svfiprintf_r+0xea>
 800c5ce:	06d0      	lsls	r0, r2, #27
 800c5d0:	bf44      	itt	mi
 800c5d2:	2320      	movmi	r3, #32
 800c5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5d8:	0711      	lsls	r1, r2, #28
 800c5da:	bf44      	itt	mi
 800c5dc:	232b      	movmi	r3, #43	@ 0x2b
 800c5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5e8:	d015      	beq.n	800c616 <_svfiprintf_r+0xfa>
 800c5ea:	9a07      	ldr	r2, [sp, #28]
 800c5ec:	4654      	mov	r4, sl
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	f04f 0c0a 	mov.w	ip, #10
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5fa:	3b30      	subs	r3, #48	@ 0x30
 800c5fc:	2b09      	cmp	r3, #9
 800c5fe:	d94b      	bls.n	800c698 <_svfiprintf_r+0x17c>
 800c600:	b1b0      	cbz	r0, 800c630 <_svfiprintf_r+0x114>
 800c602:	9207      	str	r2, [sp, #28]
 800c604:	e014      	b.n	800c630 <_svfiprintf_r+0x114>
 800c606:	eba0 0308 	sub.w	r3, r0, r8
 800c60a:	fa09 f303 	lsl.w	r3, r9, r3
 800c60e:	4313      	orrs	r3, r2
 800c610:	9304      	str	r3, [sp, #16]
 800c612:	46a2      	mov	sl, r4
 800c614:	e7d2      	b.n	800c5bc <_svfiprintf_r+0xa0>
 800c616:	9b03      	ldr	r3, [sp, #12]
 800c618:	1d19      	adds	r1, r3, #4
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	9103      	str	r1, [sp, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bfbb      	ittet	lt
 800c622:	425b      	neglt	r3, r3
 800c624:	f042 0202 	orrlt.w	r2, r2, #2
 800c628:	9307      	strge	r3, [sp, #28]
 800c62a:	9307      	strlt	r3, [sp, #28]
 800c62c:	bfb8      	it	lt
 800c62e:	9204      	strlt	r2, [sp, #16]
 800c630:	7823      	ldrb	r3, [r4, #0]
 800c632:	2b2e      	cmp	r3, #46	@ 0x2e
 800c634:	d10a      	bne.n	800c64c <_svfiprintf_r+0x130>
 800c636:	7863      	ldrb	r3, [r4, #1]
 800c638:	2b2a      	cmp	r3, #42	@ 0x2a
 800c63a:	d132      	bne.n	800c6a2 <_svfiprintf_r+0x186>
 800c63c:	9b03      	ldr	r3, [sp, #12]
 800c63e:	1d1a      	adds	r2, r3, #4
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	9203      	str	r2, [sp, #12]
 800c644:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c648:	3402      	adds	r4, #2
 800c64a:	9305      	str	r3, [sp, #20]
 800c64c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c710 <_svfiprintf_r+0x1f4>
 800c650:	7821      	ldrb	r1, [r4, #0]
 800c652:	2203      	movs	r2, #3
 800c654:	4650      	mov	r0, sl
 800c656:	f7f3 fdbb 	bl	80001d0 <memchr>
 800c65a:	b138      	cbz	r0, 800c66c <_svfiprintf_r+0x150>
 800c65c:	9b04      	ldr	r3, [sp, #16]
 800c65e:	eba0 000a 	sub.w	r0, r0, sl
 800c662:	2240      	movs	r2, #64	@ 0x40
 800c664:	4082      	lsls	r2, r0
 800c666:	4313      	orrs	r3, r2
 800c668:	3401      	adds	r4, #1
 800c66a:	9304      	str	r3, [sp, #16]
 800c66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c670:	4824      	ldr	r0, [pc, #144]	@ (800c704 <_svfiprintf_r+0x1e8>)
 800c672:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c676:	2206      	movs	r2, #6
 800c678:	f7f3 fdaa 	bl	80001d0 <memchr>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d036      	beq.n	800c6ee <_svfiprintf_r+0x1d2>
 800c680:	4b21      	ldr	r3, [pc, #132]	@ (800c708 <_svfiprintf_r+0x1ec>)
 800c682:	bb1b      	cbnz	r3, 800c6cc <_svfiprintf_r+0x1b0>
 800c684:	9b03      	ldr	r3, [sp, #12]
 800c686:	3307      	adds	r3, #7
 800c688:	f023 0307 	bic.w	r3, r3, #7
 800c68c:	3308      	adds	r3, #8
 800c68e:	9303      	str	r3, [sp, #12]
 800c690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c692:	4433      	add	r3, r6
 800c694:	9309      	str	r3, [sp, #36]	@ 0x24
 800c696:	e76a      	b.n	800c56e <_svfiprintf_r+0x52>
 800c698:	fb0c 3202 	mla	r2, ip, r2, r3
 800c69c:	460c      	mov	r4, r1
 800c69e:	2001      	movs	r0, #1
 800c6a0:	e7a8      	b.n	800c5f4 <_svfiprintf_r+0xd8>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	3401      	adds	r4, #1
 800c6a6:	9305      	str	r3, [sp, #20]
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	f04f 0c0a 	mov.w	ip, #10
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6b4:	3a30      	subs	r2, #48	@ 0x30
 800c6b6:	2a09      	cmp	r2, #9
 800c6b8:	d903      	bls.n	800c6c2 <_svfiprintf_r+0x1a6>
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0c6      	beq.n	800c64c <_svfiprintf_r+0x130>
 800c6be:	9105      	str	r1, [sp, #20]
 800c6c0:	e7c4      	b.n	800c64c <_svfiprintf_r+0x130>
 800c6c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e7f0      	b.n	800c6ae <_svfiprintf_r+0x192>
 800c6cc:	ab03      	add	r3, sp, #12
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	462a      	mov	r2, r5
 800c6d2:	4b0e      	ldr	r3, [pc, #56]	@ (800c70c <_svfiprintf_r+0x1f0>)
 800c6d4:	a904      	add	r1, sp, #16
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	f7fc fbae 	bl	8008e38 <_printf_float>
 800c6dc:	1c42      	adds	r2, r0, #1
 800c6de:	4606      	mov	r6, r0
 800c6e0:	d1d6      	bne.n	800c690 <_svfiprintf_r+0x174>
 800c6e2:	89ab      	ldrh	r3, [r5, #12]
 800c6e4:	065b      	lsls	r3, r3, #25
 800c6e6:	f53f af2d 	bmi.w	800c544 <_svfiprintf_r+0x28>
 800c6ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6ec:	e72c      	b.n	800c548 <_svfiprintf_r+0x2c>
 800c6ee:	ab03      	add	r3, sp, #12
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	462a      	mov	r2, r5
 800c6f4:	4b05      	ldr	r3, [pc, #20]	@ (800c70c <_svfiprintf_r+0x1f0>)
 800c6f6:	a904      	add	r1, sp, #16
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	f7fc fe35 	bl	8009368 <_printf_i>
 800c6fe:	e7ed      	b.n	800c6dc <_svfiprintf_r+0x1c0>
 800c700:	0800db19 	.word	0x0800db19
 800c704:	0800db23 	.word	0x0800db23
 800c708:	08008e39 	.word	0x08008e39
 800c70c:	0800c465 	.word	0x0800c465
 800c710:	0800db1f 	.word	0x0800db1f

0800c714 <__sfputc_r>:
 800c714:	6893      	ldr	r3, [r2, #8]
 800c716:	3b01      	subs	r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	b410      	push	{r4}
 800c71c:	6093      	str	r3, [r2, #8]
 800c71e:	da08      	bge.n	800c732 <__sfputc_r+0x1e>
 800c720:	6994      	ldr	r4, [r2, #24]
 800c722:	42a3      	cmp	r3, r4
 800c724:	db01      	blt.n	800c72a <__sfputc_r+0x16>
 800c726:	290a      	cmp	r1, #10
 800c728:	d103      	bne.n	800c732 <__sfputc_r+0x1e>
 800c72a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c72e:	f7fd baec 	b.w	8009d0a <__swbuf_r>
 800c732:	6813      	ldr	r3, [r2, #0]
 800c734:	1c58      	adds	r0, r3, #1
 800c736:	6010      	str	r0, [r2, #0]
 800c738:	7019      	strb	r1, [r3, #0]
 800c73a:	4608      	mov	r0, r1
 800c73c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <__sfputs_r>:
 800c742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c744:	4606      	mov	r6, r0
 800c746:	460f      	mov	r7, r1
 800c748:	4614      	mov	r4, r2
 800c74a:	18d5      	adds	r5, r2, r3
 800c74c:	42ac      	cmp	r4, r5
 800c74e:	d101      	bne.n	800c754 <__sfputs_r+0x12>
 800c750:	2000      	movs	r0, #0
 800c752:	e007      	b.n	800c764 <__sfputs_r+0x22>
 800c754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c758:	463a      	mov	r2, r7
 800c75a:	4630      	mov	r0, r6
 800c75c:	f7ff ffda 	bl	800c714 <__sfputc_r>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d1f3      	bne.n	800c74c <__sfputs_r+0xa>
 800c764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c768 <_vfiprintf_r>:
 800c768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76c:	460d      	mov	r5, r1
 800c76e:	b09d      	sub	sp, #116	@ 0x74
 800c770:	4614      	mov	r4, r2
 800c772:	4698      	mov	r8, r3
 800c774:	4606      	mov	r6, r0
 800c776:	b118      	cbz	r0, 800c780 <_vfiprintf_r+0x18>
 800c778:	6a03      	ldr	r3, [r0, #32]
 800c77a:	b90b      	cbnz	r3, 800c780 <_vfiprintf_r+0x18>
 800c77c:	f7fd f9b4 	bl	8009ae8 <__sinit>
 800c780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c782:	07d9      	lsls	r1, r3, #31
 800c784:	d405      	bmi.n	800c792 <_vfiprintf_r+0x2a>
 800c786:	89ab      	ldrh	r3, [r5, #12]
 800c788:	059a      	lsls	r2, r3, #22
 800c78a:	d402      	bmi.n	800c792 <_vfiprintf_r+0x2a>
 800c78c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c78e:	f7fd fbce 	bl	8009f2e <__retarget_lock_acquire_recursive>
 800c792:	89ab      	ldrh	r3, [r5, #12]
 800c794:	071b      	lsls	r3, r3, #28
 800c796:	d501      	bpl.n	800c79c <_vfiprintf_r+0x34>
 800c798:	692b      	ldr	r3, [r5, #16]
 800c79a:	b99b      	cbnz	r3, 800c7c4 <_vfiprintf_r+0x5c>
 800c79c:	4629      	mov	r1, r5
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f7fd faf2 	bl	8009d88 <__swsetup_r>
 800c7a4:	b170      	cbz	r0, 800c7c4 <_vfiprintf_r+0x5c>
 800c7a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7a8:	07dc      	lsls	r4, r3, #31
 800c7aa:	d504      	bpl.n	800c7b6 <_vfiprintf_r+0x4e>
 800c7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b0:	b01d      	add	sp, #116	@ 0x74
 800c7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b6:	89ab      	ldrh	r3, [r5, #12]
 800c7b8:	0598      	lsls	r0, r3, #22
 800c7ba:	d4f7      	bmi.n	800c7ac <_vfiprintf_r+0x44>
 800c7bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7be:	f7fd fbb7 	bl	8009f30 <__retarget_lock_release_recursive>
 800c7c2:	e7f3      	b.n	800c7ac <_vfiprintf_r+0x44>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7c8:	2320      	movs	r3, #32
 800c7ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7d2:	2330      	movs	r3, #48	@ 0x30
 800c7d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c984 <_vfiprintf_r+0x21c>
 800c7d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7dc:	f04f 0901 	mov.w	r9, #1
 800c7e0:	4623      	mov	r3, r4
 800c7e2:	469a      	mov	sl, r3
 800c7e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7e8:	b10a      	cbz	r2, 800c7ee <_vfiprintf_r+0x86>
 800c7ea:	2a25      	cmp	r2, #37	@ 0x25
 800c7ec:	d1f9      	bne.n	800c7e2 <_vfiprintf_r+0x7a>
 800c7ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c7f2:	d00b      	beq.n	800c80c <_vfiprintf_r+0xa4>
 800c7f4:	465b      	mov	r3, fp
 800c7f6:	4622      	mov	r2, r4
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f7ff ffa1 	bl	800c742 <__sfputs_r>
 800c800:	3001      	adds	r0, #1
 800c802:	f000 80a7 	beq.w	800c954 <_vfiprintf_r+0x1ec>
 800c806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c808:	445a      	add	r2, fp
 800c80a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c80c:	f89a 3000 	ldrb.w	r3, [sl]
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 809f 	beq.w	800c954 <_vfiprintf_r+0x1ec>
 800c816:	2300      	movs	r3, #0
 800c818:	f04f 32ff 	mov.w	r2, #4294967295
 800c81c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c820:	f10a 0a01 	add.w	sl, sl, #1
 800c824:	9304      	str	r3, [sp, #16]
 800c826:	9307      	str	r3, [sp, #28]
 800c828:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c82c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c82e:	4654      	mov	r4, sl
 800c830:	2205      	movs	r2, #5
 800c832:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c836:	4853      	ldr	r0, [pc, #332]	@ (800c984 <_vfiprintf_r+0x21c>)
 800c838:	f7f3 fcca 	bl	80001d0 <memchr>
 800c83c:	9a04      	ldr	r2, [sp, #16]
 800c83e:	b9d8      	cbnz	r0, 800c878 <_vfiprintf_r+0x110>
 800c840:	06d1      	lsls	r1, r2, #27
 800c842:	bf44      	itt	mi
 800c844:	2320      	movmi	r3, #32
 800c846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c84a:	0713      	lsls	r3, r2, #28
 800c84c:	bf44      	itt	mi
 800c84e:	232b      	movmi	r3, #43	@ 0x2b
 800c850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c854:	f89a 3000 	ldrb.w	r3, [sl]
 800c858:	2b2a      	cmp	r3, #42	@ 0x2a
 800c85a:	d015      	beq.n	800c888 <_vfiprintf_r+0x120>
 800c85c:	9a07      	ldr	r2, [sp, #28]
 800c85e:	4654      	mov	r4, sl
 800c860:	2000      	movs	r0, #0
 800c862:	f04f 0c0a 	mov.w	ip, #10
 800c866:	4621      	mov	r1, r4
 800c868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c86c:	3b30      	subs	r3, #48	@ 0x30
 800c86e:	2b09      	cmp	r3, #9
 800c870:	d94b      	bls.n	800c90a <_vfiprintf_r+0x1a2>
 800c872:	b1b0      	cbz	r0, 800c8a2 <_vfiprintf_r+0x13a>
 800c874:	9207      	str	r2, [sp, #28]
 800c876:	e014      	b.n	800c8a2 <_vfiprintf_r+0x13a>
 800c878:	eba0 0308 	sub.w	r3, r0, r8
 800c87c:	fa09 f303 	lsl.w	r3, r9, r3
 800c880:	4313      	orrs	r3, r2
 800c882:	9304      	str	r3, [sp, #16]
 800c884:	46a2      	mov	sl, r4
 800c886:	e7d2      	b.n	800c82e <_vfiprintf_r+0xc6>
 800c888:	9b03      	ldr	r3, [sp, #12]
 800c88a:	1d19      	adds	r1, r3, #4
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	9103      	str	r1, [sp, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	bfbb      	ittet	lt
 800c894:	425b      	neglt	r3, r3
 800c896:	f042 0202 	orrlt.w	r2, r2, #2
 800c89a:	9307      	strge	r3, [sp, #28]
 800c89c:	9307      	strlt	r3, [sp, #28]
 800c89e:	bfb8      	it	lt
 800c8a0:	9204      	strlt	r2, [sp, #16]
 800c8a2:	7823      	ldrb	r3, [r4, #0]
 800c8a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8a6:	d10a      	bne.n	800c8be <_vfiprintf_r+0x156>
 800c8a8:	7863      	ldrb	r3, [r4, #1]
 800c8aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8ac:	d132      	bne.n	800c914 <_vfiprintf_r+0x1ac>
 800c8ae:	9b03      	ldr	r3, [sp, #12]
 800c8b0:	1d1a      	adds	r2, r3, #4
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	9203      	str	r2, [sp, #12]
 800c8b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8ba:	3402      	adds	r4, #2
 800c8bc:	9305      	str	r3, [sp, #20]
 800c8be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c994 <_vfiprintf_r+0x22c>
 800c8c2:	7821      	ldrb	r1, [r4, #0]
 800c8c4:	2203      	movs	r2, #3
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	f7f3 fc82 	bl	80001d0 <memchr>
 800c8cc:	b138      	cbz	r0, 800c8de <_vfiprintf_r+0x176>
 800c8ce:	9b04      	ldr	r3, [sp, #16]
 800c8d0:	eba0 000a 	sub.w	r0, r0, sl
 800c8d4:	2240      	movs	r2, #64	@ 0x40
 800c8d6:	4082      	lsls	r2, r0
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	3401      	adds	r4, #1
 800c8dc:	9304      	str	r3, [sp, #16]
 800c8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e2:	4829      	ldr	r0, [pc, #164]	@ (800c988 <_vfiprintf_r+0x220>)
 800c8e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8e8:	2206      	movs	r2, #6
 800c8ea:	f7f3 fc71 	bl	80001d0 <memchr>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d03f      	beq.n	800c972 <_vfiprintf_r+0x20a>
 800c8f2:	4b26      	ldr	r3, [pc, #152]	@ (800c98c <_vfiprintf_r+0x224>)
 800c8f4:	bb1b      	cbnz	r3, 800c93e <_vfiprintf_r+0x1d6>
 800c8f6:	9b03      	ldr	r3, [sp, #12]
 800c8f8:	3307      	adds	r3, #7
 800c8fa:	f023 0307 	bic.w	r3, r3, #7
 800c8fe:	3308      	adds	r3, #8
 800c900:	9303      	str	r3, [sp, #12]
 800c902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c904:	443b      	add	r3, r7
 800c906:	9309      	str	r3, [sp, #36]	@ 0x24
 800c908:	e76a      	b.n	800c7e0 <_vfiprintf_r+0x78>
 800c90a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c90e:	460c      	mov	r4, r1
 800c910:	2001      	movs	r0, #1
 800c912:	e7a8      	b.n	800c866 <_vfiprintf_r+0xfe>
 800c914:	2300      	movs	r3, #0
 800c916:	3401      	adds	r4, #1
 800c918:	9305      	str	r3, [sp, #20]
 800c91a:	4619      	mov	r1, r3
 800c91c:	f04f 0c0a 	mov.w	ip, #10
 800c920:	4620      	mov	r0, r4
 800c922:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c926:	3a30      	subs	r2, #48	@ 0x30
 800c928:	2a09      	cmp	r2, #9
 800c92a:	d903      	bls.n	800c934 <_vfiprintf_r+0x1cc>
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d0c6      	beq.n	800c8be <_vfiprintf_r+0x156>
 800c930:	9105      	str	r1, [sp, #20]
 800c932:	e7c4      	b.n	800c8be <_vfiprintf_r+0x156>
 800c934:	fb0c 2101 	mla	r1, ip, r1, r2
 800c938:	4604      	mov	r4, r0
 800c93a:	2301      	movs	r3, #1
 800c93c:	e7f0      	b.n	800c920 <_vfiprintf_r+0x1b8>
 800c93e:	ab03      	add	r3, sp, #12
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	462a      	mov	r2, r5
 800c944:	4b12      	ldr	r3, [pc, #72]	@ (800c990 <_vfiprintf_r+0x228>)
 800c946:	a904      	add	r1, sp, #16
 800c948:	4630      	mov	r0, r6
 800c94a:	f7fc fa75 	bl	8008e38 <_printf_float>
 800c94e:	4607      	mov	r7, r0
 800c950:	1c78      	adds	r0, r7, #1
 800c952:	d1d6      	bne.n	800c902 <_vfiprintf_r+0x19a>
 800c954:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c956:	07d9      	lsls	r1, r3, #31
 800c958:	d405      	bmi.n	800c966 <_vfiprintf_r+0x1fe>
 800c95a:	89ab      	ldrh	r3, [r5, #12]
 800c95c:	059a      	lsls	r2, r3, #22
 800c95e:	d402      	bmi.n	800c966 <_vfiprintf_r+0x1fe>
 800c960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c962:	f7fd fae5 	bl	8009f30 <__retarget_lock_release_recursive>
 800c966:	89ab      	ldrh	r3, [r5, #12]
 800c968:	065b      	lsls	r3, r3, #25
 800c96a:	f53f af1f 	bmi.w	800c7ac <_vfiprintf_r+0x44>
 800c96e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c970:	e71e      	b.n	800c7b0 <_vfiprintf_r+0x48>
 800c972:	ab03      	add	r3, sp, #12
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	462a      	mov	r2, r5
 800c978:	4b05      	ldr	r3, [pc, #20]	@ (800c990 <_vfiprintf_r+0x228>)
 800c97a:	a904      	add	r1, sp, #16
 800c97c:	4630      	mov	r0, r6
 800c97e:	f7fc fcf3 	bl	8009368 <_printf_i>
 800c982:	e7e4      	b.n	800c94e <_vfiprintf_r+0x1e6>
 800c984:	0800db19 	.word	0x0800db19
 800c988:	0800db23 	.word	0x0800db23
 800c98c:	08008e39 	.word	0x08008e39
 800c990:	0800c743 	.word	0x0800c743
 800c994:	0800db1f 	.word	0x0800db1f

0800c998 <__sflush_r>:
 800c998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a0:	0716      	lsls	r6, r2, #28
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	d454      	bmi.n	800ca52 <__sflush_r+0xba>
 800c9a8:	684b      	ldr	r3, [r1, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	dc02      	bgt.n	800c9b4 <__sflush_r+0x1c>
 800c9ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	dd48      	ble.n	800ca46 <__sflush_r+0xae>
 800c9b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9b6:	2e00      	cmp	r6, #0
 800c9b8:	d045      	beq.n	800ca46 <__sflush_r+0xae>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c9c0:	682f      	ldr	r7, [r5, #0]
 800c9c2:	6a21      	ldr	r1, [r4, #32]
 800c9c4:	602b      	str	r3, [r5, #0]
 800c9c6:	d030      	beq.n	800ca2a <__sflush_r+0x92>
 800c9c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c9ca:	89a3      	ldrh	r3, [r4, #12]
 800c9cc:	0759      	lsls	r1, r3, #29
 800c9ce:	d505      	bpl.n	800c9dc <__sflush_r+0x44>
 800c9d0:	6863      	ldr	r3, [r4, #4]
 800c9d2:	1ad2      	subs	r2, r2, r3
 800c9d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c9d6:	b10b      	cbz	r3, 800c9dc <__sflush_r+0x44>
 800c9d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c9da:	1ad2      	subs	r2, r2, r3
 800c9dc:	2300      	movs	r3, #0
 800c9de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9e0:	6a21      	ldr	r1, [r4, #32]
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	47b0      	blx	r6
 800c9e6:	1c43      	adds	r3, r0, #1
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	d106      	bne.n	800c9fa <__sflush_r+0x62>
 800c9ec:	6829      	ldr	r1, [r5, #0]
 800c9ee:	291d      	cmp	r1, #29
 800c9f0:	d82b      	bhi.n	800ca4a <__sflush_r+0xb2>
 800c9f2:	4a2a      	ldr	r2, [pc, #168]	@ (800ca9c <__sflush_r+0x104>)
 800c9f4:	410a      	asrs	r2, r1
 800c9f6:	07d6      	lsls	r6, r2, #31
 800c9f8:	d427      	bmi.n	800ca4a <__sflush_r+0xb2>
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	6062      	str	r2, [r4, #4]
 800c9fe:	04d9      	lsls	r1, r3, #19
 800ca00:	6922      	ldr	r2, [r4, #16]
 800ca02:	6022      	str	r2, [r4, #0]
 800ca04:	d504      	bpl.n	800ca10 <__sflush_r+0x78>
 800ca06:	1c42      	adds	r2, r0, #1
 800ca08:	d101      	bne.n	800ca0e <__sflush_r+0x76>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	b903      	cbnz	r3, 800ca10 <__sflush_r+0x78>
 800ca0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca12:	602f      	str	r7, [r5, #0]
 800ca14:	b1b9      	cbz	r1, 800ca46 <__sflush_r+0xae>
 800ca16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca1a:	4299      	cmp	r1, r3
 800ca1c:	d002      	beq.n	800ca24 <__sflush_r+0x8c>
 800ca1e:	4628      	mov	r0, r5
 800ca20:	f7fe f8ea 	bl	800abf8 <_free_r>
 800ca24:	2300      	movs	r3, #0
 800ca26:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca28:	e00d      	b.n	800ca46 <__sflush_r+0xae>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	47b0      	blx	r6
 800ca30:	4602      	mov	r2, r0
 800ca32:	1c50      	adds	r0, r2, #1
 800ca34:	d1c9      	bne.n	800c9ca <__sflush_r+0x32>
 800ca36:	682b      	ldr	r3, [r5, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d0c6      	beq.n	800c9ca <__sflush_r+0x32>
 800ca3c:	2b1d      	cmp	r3, #29
 800ca3e:	d001      	beq.n	800ca44 <__sflush_r+0xac>
 800ca40:	2b16      	cmp	r3, #22
 800ca42:	d11e      	bne.n	800ca82 <__sflush_r+0xea>
 800ca44:	602f      	str	r7, [r5, #0]
 800ca46:	2000      	movs	r0, #0
 800ca48:	e022      	b.n	800ca90 <__sflush_r+0xf8>
 800ca4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca4e:	b21b      	sxth	r3, r3
 800ca50:	e01b      	b.n	800ca8a <__sflush_r+0xf2>
 800ca52:	690f      	ldr	r7, [r1, #16]
 800ca54:	2f00      	cmp	r7, #0
 800ca56:	d0f6      	beq.n	800ca46 <__sflush_r+0xae>
 800ca58:	0793      	lsls	r3, r2, #30
 800ca5a:	680e      	ldr	r6, [r1, #0]
 800ca5c:	bf08      	it	eq
 800ca5e:	694b      	ldreq	r3, [r1, #20]
 800ca60:	600f      	str	r7, [r1, #0]
 800ca62:	bf18      	it	ne
 800ca64:	2300      	movne	r3, #0
 800ca66:	eba6 0807 	sub.w	r8, r6, r7
 800ca6a:	608b      	str	r3, [r1, #8]
 800ca6c:	f1b8 0f00 	cmp.w	r8, #0
 800ca70:	dde9      	ble.n	800ca46 <__sflush_r+0xae>
 800ca72:	6a21      	ldr	r1, [r4, #32]
 800ca74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca76:	4643      	mov	r3, r8
 800ca78:	463a      	mov	r2, r7
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	47b0      	blx	r6
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	dc08      	bgt.n	800ca94 <__sflush_r+0xfc>
 800ca82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca8a:	81a3      	strh	r3, [r4, #12]
 800ca8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca94:	4407      	add	r7, r0
 800ca96:	eba8 0800 	sub.w	r8, r8, r0
 800ca9a:	e7e7      	b.n	800ca6c <__sflush_r+0xd4>
 800ca9c:	dfbffffe 	.word	0xdfbffffe

0800caa0 <_fflush_r>:
 800caa0:	b538      	push	{r3, r4, r5, lr}
 800caa2:	690b      	ldr	r3, [r1, #16]
 800caa4:	4605      	mov	r5, r0
 800caa6:	460c      	mov	r4, r1
 800caa8:	b913      	cbnz	r3, 800cab0 <_fflush_r+0x10>
 800caaa:	2500      	movs	r5, #0
 800caac:	4628      	mov	r0, r5
 800caae:	bd38      	pop	{r3, r4, r5, pc}
 800cab0:	b118      	cbz	r0, 800caba <_fflush_r+0x1a>
 800cab2:	6a03      	ldr	r3, [r0, #32]
 800cab4:	b90b      	cbnz	r3, 800caba <_fflush_r+0x1a>
 800cab6:	f7fd f817 	bl	8009ae8 <__sinit>
 800caba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d0f3      	beq.n	800caaa <_fflush_r+0xa>
 800cac2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cac4:	07d0      	lsls	r0, r2, #31
 800cac6:	d404      	bmi.n	800cad2 <_fflush_r+0x32>
 800cac8:	0599      	lsls	r1, r3, #22
 800caca:	d402      	bmi.n	800cad2 <_fflush_r+0x32>
 800cacc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cace:	f7fd fa2e 	bl	8009f2e <__retarget_lock_acquire_recursive>
 800cad2:	4628      	mov	r0, r5
 800cad4:	4621      	mov	r1, r4
 800cad6:	f7ff ff5f 	bl	800c998 <__sflush_r>
 800cada:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cadc:	07da      	lsls	r2, r3, #31
 800cade:	4605      	mov	r5, r0
 800cae0:	d4e4      	bmi.n	800caac <_fflush_r+0xc>
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	059b      	lsls	r3, r3, #22
 800cae6:	d4e1      	bmi.n	800caac <_fflush_r+0xc>
 800cae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caea:	f7fd fa21 	bl	8009f30 <__retarget_lock_release_recursive>
 800caee:	e7dd      	b.n	800caac <_fflush_r+0xc>

0800caf0 <__swhatbuf_r>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	460c      	mov	r4, r1
 800caf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf8:	2900      	cmp	r1, #0
 800cafa:	b096      	sub	sp, #88	@ 0x58
 800cafc:	4615      	mov	r5, r2
 800cafe:	461e      	mov	r6, r3
 800cb00:	da0d      	bge.n	800cb1e <__swhatbuf_r+0x2e>
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb08:	f04f 0100 	mov.w	r1, #0
 800cb0c:	bf14      	ite	ne
 800cb0e:	2340      	movne	r3, #64	@ 0x40
 800cb10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb14:	2000      	movs	r0, #0
 800cb16:	6031      	str	r1, [r6, #0]
 800cb18:	602b      	str	r3, [r5, #0]
 800cb1a:	b016      	add	sp, #88	@ 0x58
 800cb1c:	bd70      	pop	{r4, r5, r6, pc}
 800cb1e:	466a      	mov	r2, sp
 800cb20:	f000 f8a8 	bl	800cc74 <_fstat_r>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	dbec      	blt.n	800cb02 <__swhatbuf_r+0x12>
 800cb28:	9901      	ldr	r1, [sp, #4]
 800cb2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb32:	4259      	negs	r1, r3
 800cb34:	4159      	adcs	r1, r3
 800cb36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb3a:	e7eb      	b.n	800cb14 <__swhatbuf_r+0x24>

0800cb3c <__smakebuf_r>:
 800cb3c:	898b      	ldrh	r3, [r1, #12]
 800cb3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb40:	079d      	lsls	r5, r3, #30
 800cb42:	4606      	mov	r6, r0
 800cb44:	460c      	mov	r4, r1
 800cb46:	d507      	bpl.n	800cb58 <__smakebuf_r+0x1c>
 800cb48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	6123      	str	r3, [r4, #16]
 800cb50:	2301      	movs	r3, #1
 800cb52:	6163      	str	r3, [r4, #20]
 800cb54:	b003      	add	sp, #12
 800cb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb58:	ab01      	add	r3, sp, #4
 800cb5a:	466a      	mov	r2, sp
 800cb5c:	f7ff ffc8 	bl	800caf0 <__swhatbuf_r>
 800cb60:	9f00      	ldr	r7, [sp, #0]
 800cb62:	4605      	mov	r5, r0
 800cb64:	4639      	mov	r1, r7
 800cb66:	4630      	mov	r0, r6
 800cb68:	f7fe f8ba 	bl	800ace0 <_malloc_r>
 800cb6c:	b948      	cbnz	r0, 800cb82 <__smakebuf_r+0x46>
 800cb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb72:	059a      	lsls	r2, r3, #22
 800cb74:	d4ee      	bmi.n	800cb54 <__smakebuf_r+0x18>
 800cb76:	f023 0303 	bic.w	r3, r3, #3
 800cb7a:	f043 0302 	orr.w	r3, r3, #2
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	e7e2      	b.n	800cb48 <__smakebuf_r+0xc>
 800cb82:	89a3      	ldrh	r3, [r4, #12]
 800cb84:	6020      	str	r0, [r4, #0]
 800cb86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb8a:	81a3      	strh	r3, [r4, #12]
 800cb8c:	9b01      	ldr	r3, [sp, #4]
 800cb8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb92:	b15b      	cbz	r3, 800cbac <__smakebuf_r+0x70>
 800cb94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f000 f87d 	bl	800cc98 <_isatty_r>
 800cb9e:	b128      	cbz	r0, 800cbac <__smakebuf_r+0x70>
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	f023 0303 	bic.w	r3, r3, #3
 800cba6:	f043 0301 	orr.w	r3, r3, #1
 800cbaa:	81a3      	strh	r3, [r4, #12]
 800cbac:	89a3      	ldrh	r3, [r4, #12]
 800cbae:	431d      	orrs	r5, r3
 800cbb0:	81a5      	strh	r5, [r4, #12]
 800cbb2:	e7cf      	b.n	800cb54 <__smakebuf_r+0x18>

0800cbb4 <_putc_r>:
 800cbb4:	b570      	push	{r4, r5, r6, lr}
 800cbb6:	460d      	mov	r5, r1
 800cbb8:	4614      	mov	r4, r2
 800cbba:	4606      	mov	r6, r0
 800cbbc:	b118      	cbz	r0, 800cbc6 <_putc_r+0x12>
 800cbbe:	6a03      	ldr	r3, [r0, #32]
 800cbc0:	b90b      	cbnz	r3, 800cbc6 <_putc_r+0x12>
 800cbc2:	f7fc ff91 	bl	8009ae8 <__sinit>
 800cbc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbc8:	07d8      	lsls	r0, r3, #31
 800cbca:	d405      	bmi.n	800cbd8 <_putc_r+0x24>
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	0599      	lsls	r1, r3, #22
 800cbd0:	d402      	bmi.n	800cbd8 <_putc_r+0x24>
 800cbd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbd4:	f7fd f9ab 	bl	8009f2e <__retarget_lock_acquire_recursive>
 800cbd8:	68a3      	ldr	r3, [r4, #8]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	60a3      	str	r3, [r4, #8]
 800cbe0:	da05      	bge.n	800cbee <_putc_r+0x3a>
 800cbe2:	69a2      	ldr	r2, [r4, #24]
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	db12      	blt.n	800cc0e <_putc_r+0x5a>
 800cbe8:	b2eb      	uxtb	r3, r5
 800cbea:	2b0a      	cmp	r3, #10
 800cbec:	d00f      	beq.n	800cc0e <_putc_r+0x5a>
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	6022      	str	r2, [r4, #0]
 800cbf4:	701d      	strb	r5, [r3, #0]
 800cbf6:	b2ed      	uxtb	r5, r5
 800cbf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbfa:	07da      	lsls	r2, r3, #31
 800cbfc:	d405      	bmi.n	800cc0a <_putc_r+0x56>
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	059b      	lsls	r3, r3, #22
 800cc02:	d402      	bmi.n	800cc0a <_putc_r+0x56>
 800cc04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc06:	f7fd f993 	bl	8009f30 <__retarget_lock_release_recursive>
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	bd70      	pop	{r4, r5, r6, pc}
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4622      	mov	r2, r4
 800cc12:	4630      	mov	r0, r6
 800cc14:	f7fd f879 	bl	8009d0a <__swbuf_r>
 800cc18:	4605      	mov	r5, r0
 800cc1a:	e7ed      	b.n	800cbf8 <_putc_r+0x44>

0800cc1c <memmove>:
 800cc1c:	4288      	cmp	r0, r1
 800cc1e:	b510      	push	{r4, lr}
 800cc20:	eb01 0402 	add.w	r4, r1, r2
 800cc24:	d902      	bls.n	800cc2c <memmove+0x10>
 800cc26:	4284      	cmp	r4, r0
 800cc28:	4623      	mov	r3, r4
 800cc2a:	d807      	bhi.n	800cc3c <memmove+0x20>
 800cc2c:	1e43      	subs	r3, r0, #1
 800cc2e:	42a1      	cmp	r1, r4
 800cc30:	d008      	beq.n	800cc44 <memmove+0x28>
 800cc32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc3a:	e7f8      	b.n	800cc2e <memmove+0x12>
 800cc3c:	4402      	add	r2, r0
 800cc3e:	4601      	mov	r1, r0
 800cc40:	428a      	cmp	r2, r1
 800cc42:	d100      	bne.n	800cc46 <memmove+0x2a>
 800cc44:	bd10      	pop	{r4, pc}
 800cc46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc4e:	e7f7      	b.n	800cc40 <memmove+0x24>

0800cc50 <strncmp>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	b16a      	cbz	r2, 800cc70 <strncmp+0x20>
 800cc54:	3901      	subs	r1, #1
 800cc56:	1884      	adds	r4, r0, r2
 800cc58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d103      	bne.n	800cc6c <strncmp+0x1c>
 800cc64:	42a0      	cmp	r0, r4
 800cc66:	d001      	beq.n	800cc6c <strncmp+0x1c>
 800cc68:	2a00      	cmp	r2, #0
 800cc6a:	d1f5      	bne.n	800cc58 <strncmp+0x8>
 800cc6c:	1ad0      	subs	r0, r2, r3
 800cc6e:	bd10      	pop	{r4, pc}
 800cc70:	4610      	mov	r0, r2
 800cc72:	e7fc      	b.n	800cc6e <strncmp+0x1e>

0800cc74 <_fstat_r>:
 800cc74:	b538      	push	{r3, r4, r5, lr}
 800cc76:	4d07      	ldr	r5, [pc, #28]	@ (800cc94 <_fstat_r+0x20>)
 800cc78:	2300      	movs	r3, #0
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	4608      	mov	r0, r1
 800cc7e:	4611      	mov	r1, r2
 800cc80:	602b      	str	r3, [r5, #0]
 800cc82:	f7f5 f967 	bl	8001f54 <_fstat>
 800cc86:	1c43      	adds	r3, r0, #1
 800cc88:	d102      	bne.n	800cc90 <_fstat_r+0x1c>
 800cc8a:	682b      	ldr	r3, [r5, #0]
 800cc8c:	b103      	cbz	r3, 800cc90 <_fstat_r+0x1c>
 800cc8e:	6023      	str	r3, [r4, #0]
 800cc90:	bd38      	pop	{r3, r4, r5, pc}
 800cc92:	bf00      	nop
 800cc94:	2000526c 	.word	0x2000526c

0800cc98 <_isatty_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4d06      	ldr	r5, [pc, #24]	@ (800ccb4 <_isatty_r+0x1c>)
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4604      	mov	r4, r0
 800cca0:	4608      	mov	r0, r1
 800cca2:	602b      	str	r3, [r5, #0]
 800cca4:	f7f5 f966 	bl	8001f74 <_isatty>
 800cca8:	1c43      	adds	r3, r0, #1
 800ccaa:	d102      	bne.n	800ccb2 <_isatty_r+0x1a>
 800ccac:	682b      	ldr	r3, [r5, #0]
 800ccae:	b103      	cbz	r3, 800ccb2 <_isatty_r+0x1a>
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	bd38      	pop	{r3, r4, r5, pc}
 800ccb4:	2000526c 	.word	0x2000526c

0800ccb8 <_sbrk_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d06      	ldr	r5, [pc, #24]	@ (800ccd4 <_sbrk_r+0x1c>)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	602b      	str	r3, [r5, #0]
 800ccc4:	f7f5 f96e 	bl	8001fa4 <_sbrk>
 800ccc8:	1c43      	adds	r3, r0, #1
 800ccca:	d102      	bne.n	800ccd2 <_sbrk_r+0x1a>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	b103      	cbz	r3, 800ccd2 <_sbrk_r+0x1a>
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	bd38      	pop	{r3, r4, r5, pc}
 800ccd4:	2000526c 	.word	0x2000526c

0800ccd8 <nan>:
 800ccd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cce0 <nan+0x8>
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	00000000 	.word	0x00000000
 800cce4:	7ff80000 	.word	0x7ff80000

0800cce8 <__assert_func>:
 800cce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccea:	4614      	mov	r4, r2
 800ccec:	461a      	mov	r2, r3
 800ccee:	4b09      	ldr	r3, [pc, #36]	@ (800cd14 <__assert_func+0x2c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4605      	mov	r5, r0
 800ccf4:	68d8      	ldr	r0, [r3, #12]
 800ccf6:	b954      	cbnz	r4, 800cd0e <__assert_func+0x26>
 800ccf8:	4b07      	ldr	r3, [pc, #28]	@ (800cd18 <__assert_func+0x30>)
 800ccfa:	461c      	mov	r4, r3
 800ccfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd00:	9100      	str	r1, [sp, #0]
 800cd02:	462b      	mov	r3, r5
 800cd04:	4905      	ldr	r1, [pc, #20]	@ (800cd1c <__assert_func+0x34>)
 800cd06:	f000 fba7 	bl	800d458 <fiprintf>
 800cd0a:	f000 fbb7 	bl	800d47c <abort>
 800cd0e:	4b04      	ldr	r3, [pc, #16]	@ (800cd20 <__assert_func+0x38>)
 800cd10:	e7f4      	b.n	800ccfc <__assert_func+0x14>
 800cd12:	bf00      	nop
 800cd14:	20000040 	.word	0x20000040
 800cd18:	0800db6d 	.word	0x0800db6d
 800cd1c:	0800db3f 	.word	0x0800db3f
 800cd20:	0800db32 	.word	0x0800db32

0800cd24 <_calloc_r>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	fba1 5402 	umull	r5, r4, r1, r2
 800cd2a:	b93c      	cbnz	r4, 800cd3c <_calloc_r+0x18>
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f7fd ffd7 	bl	800ace0 <_malloc_r>
 800cd32:	4606      	mov	r6, r0
 800cd34:	b928      	cbnz	r0, 800cd42 <_calloc_r+0x1e>
 800cd36:	2600      	movs	r6, #0
 800cd38:	4630      	mov	r0, r6
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	220c      	movs	r2, #12
 800cd3e:	6002      	str	r2, [r0, #0]
 800cd40:	e7f9      	b.n	800cd36 <_calloc_r+0x12>
 800cd42:	462a      	mov	r2, r5
 800cd44:	4621      	mov	r1, r4
 800cd46:	f7fd f875 	bl	8009e34 <memset>
 800cd4a:	e7f5      	b.n	800cd38 <_calloc_r+0x14>

0800cd4c <rshift>:
 800cd4c:	6903      	ldr	r3, [r0, #16]
 800cd4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd5a:	f100 0414 	add.w	r4, r0, #20
 800cd5e:	dd45      	ble.n	800cdec <rshift+0xa0>
 800cd60:	f011 011f 	ands.w	r1, r1, #31
 800cd64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd6c:	d10c      	bne.n	800cd88 <rshift+0x3c>
 800cd6e:	f100 0710 	add.w	r7, r0, #16
 800cd72:	4629      	mov	r1, r5
 800cd74:	42b1      	cmp	r1, r6
 800cd76:	d334      	bcc.n	800cde2 <rshift+0x96>
 800cd78:	1a9b      	subs	r3, r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	1eea      	subs	r2, r5, #3
 800cd7e:	4296      	cmp	r6, r2
 800cd80:	bf38      	it	cc
 800cd82:	2300      	movcc	r3, #0
 800cd84:	4423      	add	r3, r4
 800cd86:	e015      	b.n	800cdb4 <rshift+0x68>
 800cd88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cd8c:	f1c1 0820 	rsb	r8, r1, #32
 800cd90:	40cf      	lsrs	r7, r1
 800cd92:	f105 0e04 	add.w	lr, r5, #4
 800cd96:	46a1      	mov	r9, r4
 800cd98:	4576      	cmp	r6, lr
 800cd9a:	46f4      	mov	ip, lr
 800cd9c:	d815      	bhi.n	800cdca <rshift+0x7e>
 800cd9e:	1a9a      	subs	r2, r3, r2
 800cda0:	0092      	lsls	r2, r2, #2
 800cda2:	3a04      	subs	r2, #4
 800cda4:	3501      	adds	r5, #1
 800cda6:	42ae      	cmp	r6, r5
 800cda8:	bf38      	it	cc
 800cdaa:	2200      	movcc	r2, #0
 800cdac:	18a3      	adds	r3, r4, r2
 800cdae:	50a7      	str	r7, [r4, r2]
 800cdb0:	b107      	cbz	r7, 800cdb4 <rshift+0x68>
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	1b1a      	subs	r2, r3, r4
 800cdb6:	42a3      	cmp	r3, r4
 800cdb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cdbc:	bf08      	it	eq
 800cdbe:	2300      	moveq	r3, #0
 800cdc0:	6102      	str	r2, [r0, #16]
 800cdc2:	bf08      	it	eq
 800cdc4:	6143      	streq	r3, [r0, #20]
 800cdc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdca:	f8dc c000 	ldr.w	ip, [ip]
 800cdce:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdd2:	ea4c 0707 	orr.w	r7, ip, r7
 800cdd6:	f849 7b04 	str.w	r7, [r9], #4
 800cdda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cdde:	40cf      	lsrs	r7, r1
 800cde0:	e7da      	b.n	800cd98 <rshift+0x4c>
 800cde2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cde6:	f847 cf04 	str.w	ip, [r7, #4]!
 800cdea:	e7c3      	b.n	800cd74 <rshift+0x28>
 800cdec:	4623      	mov	r3, r4
 800cdee:	e7e1      	b.n	800cdb4 <rshift+0x68>

0800cdf0 <__hexdig_fun>:
 800cdf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cdf4:	2b09      	cmp	r3, #9
 800cdf6:	d802      	bhi.n	800cdfe <__hexdig_fun+0xe>
 800cdf8:	3820      	subs	r0, #32
 800cdfa:	b2c0      	uxtb	r0, r0
 800cdfc:	4770      	bx	lr
 800cdfe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ce02:	2b05      	cmp	r3, #5
 800ce04:	d801      	bhi.n	800ce0a <__hexdig_fun+0x1a>
 800ce06:	3847      	subs	r0, #71	@ 0x47
 800ce08:	e7f7      	b.n	800cdfa <__hexdig_fun+0xa>
 800ce0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ce0e:	2b05      	cmp	r3, #5
 800ce10:	d801      	bhi.n	800ce16 <__hexdig_fun+0x26>
 800ce12:	3827      	subs	r0, #39	@ 0x27
 800ce14:	e7f1      	b.n	800cdfa <__hexdig_fun+0xa>
 800ce16:	2000      	movs	r0, #0
 800ce18:	4770      	bx	lr
	...

0800ce1c <__gethex>:
 800ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	b085      	sub	sp, #20
 800ce22:	468a      	mov	sl, r1
 800ce24:	9302      	str	r3, [sp, #8]
 800ce26:	680b      	ldr	r3, [r1, #0]
 800ce28:	9001      	str	r0, [sp, #4]
 800ce2a:	4690      	mov	r8, r2
 800ce2c:	1c9c      	adds	r4, r3, #2
 800ce2e:	46a1      	mov	r9, r4
 800ce30:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ce34:	2830      	cmp	r0, #48	@ 0x30
 800ce36:	d0fa      	beq.n	800ce2e <__gethex+0x12>
 800ce38:	eba9 0303 	sub.w	r3, r9, r3
 800ce3c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ce40:	f7ff ffd6 	bl	800cdf0 <__hexdig_fun>
 800ce44:	4605      	mov	r5, r0
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d168      	bne.n	800cf1c <__gethex+0x100>
 800ce4a:	49a0      	ldr	r1, [pc, #640]	@ (800d0cc <__gethex+0x2b0>)
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	4648      	mov	r0, r9
 800ce50:	f7ff fefe 	bl	800cc50 <strncmp>
 800ce54:	4607      	mov	r7, r0
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d167      	bne.n	800cf2a <__gethex+0x10e>
 800ce5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ce5e:	4626      	mov	r6, r4
 800ce60:	f7ff ffc6 	bl	800cdf0 <__hexdig_fun>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d062      	beq.n	800cf2e <__gethex+0x112>
 800ce68:	4623      	mov	r3, r4
 800ce6a:	7818      	ldrb	r0, [r3, #0]
 800ce6c:	2830      	cmp	r0, #48	@ 0x30
 800ce6e:	4699      	mov	r9, r3
 800ce70:	f103 0301 	add.w	r3, r3, #1
 800ce74:	d0f9      	beq.n	800ce6a <__gethex+0x4e>
 800ce76:	f7ff ffbb 	bl	800cdf0 <__hexdig_fun>
 800ce7a:	fab0 f580 	clz	r5, r0
 800ce7e:	096d      	lsrs	r5, r5, #5
 800ce80:	f04f 0b01 	mov.w	fp, #1
 800ce84:	464a      	mov	r2, r9
 800ce86:	4616      	mov	r6, r2
 800ce88:	3201      	adds	r2, #1
 800ce8a:	7830      	ldrb	r0, [r6, #0]
 800ce8c:	f7ff ffb0 	bl	800cdf0 <__hexdig_fun>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d1f8      	bne.n	800ce86 <__gethex+0x6a>
 800ce94:	498d      	ldr	r1, [pc, #564]	@ (800d0cc <__gethex+0x2b0>)
 800ce96:	2201      	movs	r2, #1
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f7ff fed9 	bl	800cc50 <strncmp>
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d13f      	bne.n	800cf22 <__gethex+0x106>
 800cea2:	b944      	cbnz	r4, 800ceb6 <__gethex+0x9a>
 800cea4:	1c74      	adds	r4, r6, #1
 800cea6:	4622      	mov	r2, r4
 800cea8:	4616      	mov	r6, r2
 800ceaa:	3201      	adds	r2, #1
 800ceac:	7830      	ldrb	r0, [r6, #0]
 800ceae:	f7ff ff9f 	bl	800cdf0 <__hexdig_fun>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d1f8      	bne.n	800cea8 <__gethex+0x8c>
 800ceb6:	1ba4      	subs	r4, r4, r6
 800ceb8:	00a7      	lsls	r7, r4, #2
 800ceba:	7833      	ldrb	r3, [r6, #0]
 800cebc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cec0:	2b50      	cmp	r3, #80	@ 0x50
 800cec2:	d13e      	bne.n	800cf42 <__gethex+0x126>
 800cec4:	7873      	ldrb	r3, [r6, #1]
 800cec6:	2b2b      	cmp	r3, #43	@ 0x2b
 800cec8:	d033      	beq.n	800cf32 <__gethex+0x116>
 800ceca:	2b2d      	cmp	r3, #45	@ 0x2d
 800cecc:	d034      	beq.n	800cf38 <__gethex+0x11c>
 800cece:	1c71      	adds	r1, r6, #1
 800ced0:	2400      	movs	r4, #0
 800ced2:	7808      	ldrb	r0, [r1, #0]
 800ced4:	f7ff ff8c 	bl	800cdf0 <__hexdig_fun>
 800ced8:	1e43      	subs	r3, r0, #1
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	2b18      	cmp	r3, #24
 800cede:	d830      	bhi.n	800cf42 <__gethex+0x126>
 800cee0:	f1a0 0210 	sub.w	r2, r0, #16
 800cee4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cee8:	f7ff ff82 	bl	800cdf0 <__hexdig_fun>
 800ceec:	f100 3cff 	add.w	ip, r0, #4294967295
 800cef0:	fa5f fc8c 	uxtb.w	ip, ip
 800cef4:	f1bc 0f18 	cmp.w	ip, #24
 800cef8:	f04f 030a 	mov.w	r3, #10
 800cefc:	d91e      	bls.n	800cf3c <__gethex+0x120>
 800cefe:	b104      	cbz	r4, 800cf02 <__gethex+0xe6>
 800cf00:	4252      	negs	r2, r2
 800cf02:	4417      	add	r7, r2
 800cf04:	f8ca 1000 	str.w	r1, [sl]
 800cf08:	b1ed      	cbz	r5, 800cf46 <__gethex+0x12a>
 800cf0a:	f1bb 0f00 	cmp.w	fp, #0
 800cf0e:	bf0c      	ite	eq
 800cf10:	2506      	moveq	r5, #6
 800cf12:	2500      	movne	r5, #0
 800cf14:	4628      	mov	r0, r5
 800cf16:	b005      	add	sp, #20
 800cf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf1c:	2500      	movs	r5, #0
 800cf1e:	462c      	mov	r4, r5
 800cf20:	e7b0      	b.n	800ce84 <__gethex+0x68>
 800cf22:	2c00      	cmp	r4, #0
 800cf24:	d1c7      	bne.n	800ceb6 <__gethex+0x9a>
 800cf26:	4627      	mov	r7, r4
 800cf28:	e7c7      	b.n	800ceba <__gethex+0x9e>
 800cf2a:	464e      	mov	r6, r9
 800cf2c:	462f      	mov	r7, r5
 800cf2e:	2501      	movs	r5, #1
 800cf30:	e7c3      	b.n	800ceba <__gethex+0x9e>
 800cf32:	2400      	movs	r4, #0
 800cf34:	1cb1      	adds	r1, r6, #2
 800cf36:	e7cc      	b.n	800ced2 <__gethex+0xb6>
 800cf38:	2401      	movs	r4, #1
 800cf3a:	e7fb      	b.n	800cf34 <__gethex+0x118>
 800cf3c:	fb03 0002 	mla	r0, r3, r2, r0
 800cf40:	e7ce      	b.n	800cee0 <__gethex+0xc4>
 800cf42:	4631      	mov	r1, r6
 800cf44:	e7de      	b.n	800cf04 <__gethex+0xe8>
 800cf46:	eba6 0309 	sub.w	r3, r6, r9
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	2b07      	cmp	r3, #7
 800cf50:	dc0a      	bgt.n	800cf68 <__gethex+0x14c>
 800cf52:	9801      	ldr	r0, [sp, #4]
 800cf54:	f7fd ff50 	bl	800adf8 <_Balloc>
 800cf58:	4604      	mov	r4, r0
 800cf5a:	b940      	cbnz	r0, 800cf6e <__gethex+0x152>
 800cf5c:	4b5c      	ldr	r3, [pc, #368]	@ (800d0d0 <__gethex+0x2b4>)
 800cf5e:	4602      	mov	r2, r0
 800cf60:	21e4      	movs	r1, #228	@ 0xe4
 800cf62:	485c      	ldr	r0, [pc, #368]	@ (800d0d4 <__gethex+0x2b8>)
 800cf64:	f7ff fec0 	bl	800cce8 <__assert_func>
 800cf68:	3101      	adds	r1, #1
 800cf6a:	105b      	asrs	r3, r3, #1
 800cf6c:	e7ef      	b.n	800cf4e <__gethex+0x132>
 800cf6e:	f100 0a14 	add.w	sl, r0, #20
 800cf72:	2300      	movs	r3, #0
 800cf74:	4655      	mov	r5, sl
 800cf76:	469b      	mov	fp, r3
 800cf78:	45b1      	cmp	r9, r6
 800cf7a:	d337      	bcc.n	800cfec <__gethex+0x1d0>
 800cf7c:	f845 bb04 	str.w	fp, [r5], #4
 800cf80:	eba5 050a 	sub.w	r5, r5, sl
 800cf84:	10ad      	asrs	r5, r5, #2
 800cf86:	6125      	str	r5, [r4, #16]
 800cf88:	4658      	mov	r0, fp
 800cf8a:	f7fe f827 	bl	800afdc <__hi0bits>
 800cf8e:	016d      	lsls	r5, r5, #5
 800cf90:	f8d8 6000 	ldr.w	r6, [r8]
 800cf94:	1a2d      	subs	r5, r5, r0
 800cf96:	42b5      	cmp	r5, r6
 800cf98:	dd54      	ble.n	800d044 <__gethex+0x228>
 800cf9a:	1bad      	subs	r5, r5, r6
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	f7fe fbbb 	bl	800b71a <__any_on>
 800cfa4:	4681      	mov	r9, r0
 800cfa6:	b178      	cbz	r0, 800cfc8 <__gethex+0x1ac>
 800cfa8:	1e6b      	subs	r3, r5, #1
 800cfaa:	1159      	asrs	r1, r3, #5
 800cfac:	f003 021f 	and.w	r2, r3, #31
 800cfb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cfb4:	f04f 0901 	mov.w	r9, #1
 800cfb8:	fa09 f202 	lsl.w	r2, r9, r2
 800cfbc:	420a      	tst	r2, r1
 800cfbe:	d003      	beq.n	800cfc8 <__gethex+0x1ac>
 800cfc0:	454b      	cmp	r3, r9
 800cfc2:	dc36      	bgt.n	800d032 <__gethex+0x216>
 800cfc4:	f04f 0902 	mov.w	r9, #2
 800cfc8:	4629      	mov	r1, r5
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f7ff febe 	bl	800cd4c <rshift>
 800cfd0:	442f      	add	r7, r5
 800cfd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cfd6:	42bb      	cmp	r3, r7
 800cfd8:	da42      	bge.n	800d060 <__gethex+0x244>
 800cfda:	9801      	ldr	r0, [sp, #4]
 800cfdc:	4621      	mov	r1, r4
 800cfde:	f7fd ff4b 	bl	800ae78 <_Bfree>
 800cfe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	25a3      	movs	r5, #163	@ 0xa3
 800cfea:	e793      	b.n	800cf14 <__gethex+0xf8>
 800cfec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cff0:	2a2e      	cmp	r2, #46	@ 0x2e
 800cff2:	d012      	beq.n	800d01a <__gethex+0x1fe>
 800cff4:	2b20      	cmp	r3, #32
 800cff6:	d104      	bne.n	800d002 <__gethex+0x1e6>
 800cff8:	f845 bb04 	str.w	fp, [r5], #4
 800cffc:	f04f 0b00 	mov.w	fp, #0
 800d000:	465b      	mov	r3, fp
 800d002:	7830      	ldrb	r0, [r6, #0]
 800d004:	9303      	str	r3, [sp, #12]
 800d006:	f7ff fef3 	bl	800cdf0 <__hexdig_fun>
 800d00a:	9b03      	ldr	r3, [sp, #12]
 800d00c:	f000 000f 	and.w	r0, r0, #15
 800d010:	4098      	lsls	r0, r3
 800d012:	ea4b 0b00 	orr.w	fp, fp, r0
 800d016:	3304      	adds	r3, #4
 800d018:	e7ae      	b.n	800cf78 <__gethex+0x15c>
 800d01a:	45b1      	cmp	r9, r6
 800d01c:	d8ea      	bhi.n	800cff4 <__gethex+0x1d8>
 800d01e:	492b      	ldr	r1, [pc, #172]	@ (800d0cc <__gethex+0x2b0>)
 800d020:	9303      	str	r3, [sp, #12]
 800d022:	2201      	movs	r2, #1
 800d024:	4630      	mov	r0, r6
 800d026:	f7ff fe13 	bl	800cc50 <strncmp>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d1e1      	bne.n	800cff4 <__gethex+0x1d8>
 800d030:	e7a2      	b.n	800cf78 <__gethex+0x15c>
 800d032:	1ea9      	subs	r1, r5, #2
 800d034:	4620      	mov	r0, r4
 800d036:	f7fe fb70 	bl	800b71a <__any_on>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d0c2      	beq.n	800cfc4 <__gethex+0x1a8>
 800d03e:	f04f 0903 	mov.w	r9, #3
 800d042:	e7c1      	b.n	800cfc8 <__gethex+0x1ac>
 800d044:	da09      	bge.n	800d05a <__gethex+0x23e>
 800d046:	1b75      	subs	r5, r6, r5
 800d048:	4621      	mov	r1, r4
 800d04a:	9801      	ldr	r0, [sp, #4]
 800d04c:	462a      	mov	r2, r5
 800d04e:	f7fe f92b 	bl	800b2a8 <__lshift>
 800d052:	1b7f      	subs	r7, r7, r5
 800d054:	4604      	mov	r4, r0
 800d056:	f100 0a14 	add.w	sl, r0, #20
 800d05a:	f04f 0900 	mov.w	r9, #0
 800d05e:	e7b8      	b.n	800cfd2 <__gethex+0x1b6>
 800d060:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d064:	42bd      	cmp	r5, r7
 800d066:	dd6f      	ble.n	800d148 <__gethex+0x32c>
 800d068:	1bed      	subs	r5, r5, r7
 800d06a:	42ae      	cmp	r6, r5
 800d06c:	dc34      	bgt.n	800d0d8 <__gethex+0x2bc>
 800d06e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d072:	2b02      	cmp	r3, #2
 800d074:	d022      	beq.n	800d0bc <__gethex+0x2a0>
 800d076:	2b03      	cmp	r3, #3
 800d078:	d024      	beq.n	800d0c4 <__gethex+0x2a8>
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d115      	bne.n	800d0aa <__gethex+0x28e>
 800d07e:	42ae      	cmp	r6, r5
 800d080:	d113      	bne.n	800d0aa <__gethex+0x28e>
 800d082:	2e01      	cmp	r6, #1
 800d084:	d10b      	bne.n	800d09e <__gethex+0x282>
 800d086:	9a02      	ldr	r2, [sp, #8]
 800d088:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d08c:	6013      	str	r3, [r2, #0]
 800d08e:	2301      	movs	r3, #1
 800d090:	6123      	str	r3, [r4, #16]
 800d092:	f8ca 3000 	str.w	r3, [sl]
 800d096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d098:	2562      	movs	r5, #98	@ 0x62
 800d09a:	601c      	str	r4, [r3, #0]
 800d09c:	e73a      	b.n	800cf14 <__gethex+0xf8>
 800d09e:	1e71      	subs	r1, r6, #1
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f7fe fb3a 	bl	800b71a <__any_on>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d1ed      	bne.n	800d086 <__gethex+0x26a>
 800d0aa:	9801      	ldr	r0, [sp, #4]
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f7fd fee3 	bl	800ae78 <_Bfree>
 800d0b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	6013      	str	r3, [r2, #0]
 800d0b8:	2550      	movs	r5, #80	@ 0x50
 800d0ba:	e72b      	b.n	800cf14 <__gethex+0xf8>
 800d0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1f3      	bne.n	800d0aa <__gethex+0x28e>
 800d0c2:	e7e0      	b.n	800d086 <__gethex+0x26a>
 800d0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1dd      	bne.n	800d086 <__gethex+0x26a>
 800d0ca:	e7ee      	b.n	800d0aa <__gethex+0x28e>
 800d0cc:	0800d9c0 	.word	0x0800d9c0
 800d0d0:	0800d855 	.word	0x0800d855
 800d0d4:	0800db6e 	.word	0x0800db6e
 800d0d8:	1e6f      	subs	r7, r5, #1
 800d0da:	f1b9 0f00 	cmp.w	r9, #0
 800d0de:	d130      	bne.n	800d142 <__gethex+0x326>
 800d0e0:	b127      	cbz	r7, 800d0ec <__gethex+0x2d0>
 800d0e2:	4639      	mov	r1, r7
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f7fe fb18 	bl	800b71a <__any_on>
 800d0ea:	4681      	mov	r9, r0
 800d0ec:	117a      	asrs	r2, r7, #5
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d0f4:	f007 071f 	and.w	r7, r7, #31
 800d0f8:	40bb      	lsls	r3, r7
 800d0fa:	4213      	tst	r3, r2
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	4620      	mov	r0, r4
 800d100:	bf18      	it	ne
 800d102:	f049 0902 	orrne.w	r9, r9, #2
 800d106:	f7ff fe21 	bl	800cd4c <rshift>
 800d10a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d10e:	1b76      	subs	r6, r6, r5
 800d110:	2502      	movs	r5, #2
 800d112:	f1b9 0f00 	cmp.w	r9, #0
 800d116:	d047      	beq.n	800d1a8 <__gethex+0x38c>
 800d118:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d11c:	2b02      	cmp	r3, #2
 800d11e:	d015      	beq.n	800d14c <__gethex+0x330>
 800d120:	2b03      	cmp	r3, #3
 800d122:	d017      	beq.n	800d154 <__gethex+0x338>
 800d124:	2b01      	cmp	r3, #1
 800d126:	d109      	bne.n	800d13c <__gethex+0x320>
 800d128:	f019 0f02 	tst.w	r9, #2
 800d12c:	d006      	beq.n	800d13c <__gethex+0x320>
 800d12e:	f8da 3000 	ldr.w	r3, [sl]
 800d132:	ea49 0903 	orr.w	r9, r9, r3
 800d136:	f019 0f01 	tst.w	r9, #1
 800d13a:	d10e      	bne.n	800d15a <__gethex+0x33e>
 800d13c:	f045 0510 	orr.w	r5, r5, #16
 800d140:	e032      	b.n	800d1a8 <__gethex+0x38c>
 800d142:	f04f 0901 	mov.w	r9, #1
 800d146:	e7d1      	b.n	800d0ec <__gethex+0x2d0>
 800d148:	2501      	movs	r5, #1
 800d14a:	e7e2      	b.n	800d112 <__gethex+0x2f6>
 800d14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d14e:	f1c3 0301 	rsb	r3, r3, #1
 800d152:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d156:	2b00      	cmp	r3, #0
 800d158:	d0f0      	beq.n	800d13c <__gethex+0x320>
 800d15a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d15e:	f104 0314 	add.w	r3, r4, #20
 800d162:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d166:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d16a:	f04f 0c00 	mov.w	ip, #0
 800d16e:	4618      	mov	r0, r3
 800d170:	f853 2b04 	ldr.w	r2, [r3], #4
 800d174:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d178:	d01b      	beq.n	800d1b2 <__gethex+0x396>
 800d17a:	3201      	adds	r2, #1
 800d17c:	6002      	str	r2, [r0, #0]
 800d17e:	2d02      	cmp	r5, #2
 800d180:	f104 0314 	add.w	r3, r4, #20
 800d184:	d13c      	bne.n	800d200 <__gethex+0x3e4>
 800d186:	f8d8 2000 	ldr.w	r2, [r8]
 800d18a:	3a01      	subs	r2, #1
 800d18c:	42b2      	cmp	r2, r6
 800d18e:	d109      	bne.n	800d1a4 <__gethex+0x388>
 800d190:	1171      	asrs	r1, r6, #5
 800d192:	2201      	movs	r2, #1
 800d194:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d198:	f006 061f 	and.w	r6, r6, #31
 800d19c:	fa02 f606 	lsl.w	r6, r2, r6
 800d1a0:	421e      	tst	r6, r3
 800d1a2:	d13a      	bne.n	800d21a <__gethex+0x3fe>
 800d1a4:	f045 0520 	orr.w	r5, r5, #32
 800d1a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1aa:	601c      	str	r4, [r3, #0]
 800d1ac:	9b02      	ldr	r3, [sp, #8]
 800d1ae:	601f      	str	r7, [r3, #0]
 800d1b0:	e6b0      	b.n	800cf14 <__gethex+0xf8>
 800d1b2:	4299      	cmp	r1, r3
 800d1b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d1b8:	d8d9      	bhi.n	800d16e <__gethex+0x352>
 800d1ba:	68a3      	ldr	r3, [r4, #8]
 800d1bc:	459b      	cmp	fp, r3
 800d1be:	db17      	blt.n	800d1f0 <__gethex+0x3d4>
 800d1c0:	6861      	ldr	r1, [r4, #4]
 800d1c2:	9801      	ldr	r0, [sp, #4]
 800d1c4:	3101      	adds	r1, #1
 800d1c6:	f7fd fe17 	bl	800adf8 <_Balloc>
 800d1ca:	4681      	mov	r9, r0
 800d1cc:	b918      	cbnz	r0, 800d1d6 <__gethex+0x3ba>
 800d1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d238 <__gethex+0x41c>)
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	2184      	movs	r1, #132	@ 0x84
 800d1d4:	e6c5      	b.n	800cf62 <__gethex+0x146>
 800d1d6:	6922      	ldr	r2, [r4, #16]
 800d1d8:	3202      	adds	r2, #2
 800d1da:	f104 010c 	add.w	r1, r4, #12
 800d1de:	0092      	lsls	r2, r2, #2
 800d1e0:	300c      	adds	r0, #12
 800d1e2:	f7fc fea6 	bl	8009f32 <memcpy>
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	9801      	ldr	r0, [sp, #4]
 800d1ea:	f7fd fe45 	bl	800ae78 <_Bfree>
 800d1ee:	464c      	mov	r4, r9
 800d1f0:	6923      	ldr	r3, [r4, #16]
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d1f8:	6122      	str	r2, [r4, #16]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	615a      	str	r2, [r3, #20]
 800d1fe:	e7be      	b.n	800d17e <__gethex+0x362>
 800d200:	6922      	ldr	r2, [r4, #16]
 800d202:	455a      	cmp	r2, fp
 800d204:	dd0b      	ble.n	800d21e <__gethex+0x402>
 800d206:	2101      	movs	r1, #1
 800d208:	4620      	mov	r0, r4
 800d20a:	f7ff fd9f 	bl	800cd4c <rshift>
 800d20e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d212:	3701      	adds	r7, #1
 800d214:	42bb      	cmp	r3, r7
 800d216:	f6ff aee0 	blt.w	800cfda <__gethex+0x1be>
 800d21a:	2501      	movs	r5, #1
 800d21c:	e7c2      	b.n	800d1a4 <__gethex+0x388>
 800d21e:	f016 061f 	ands.w	r6, r6, #31
 800d222:	d0fa      	beq.n	800d21a <__gethex+0x3fe>
 800d224:	4453      	add	r3, sl
 800d226:	f1c6 0620 	rsb	r6, r6, #32
 800d22a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d22e:	f7fd fed5 	bl	800afdc <__hi0bits>
 800d232:	42b0      	cmp	r0, r6
 800d234:	dbe7      	blt.n	800d206 <__gethex+0x3ea>
 800d236:	e7f0      	b.n	800d21a <__gethex+0x3fe>
 800d238:	0800d855 	.word	0x0800d855

0800d23c <L_shift>:
 800d23c:	f1c2 0208 	rsb	r2, r2, #8
 800d240:	0092      	lsls	r2, r2, #2
 800d242:	b570      	push	{r4, r5, r6, lr}
 800d244:	f1c2 0620 	rsb	r6, r2, #32
 800d248:	6843      	ldr	r3, [r0, #4]
 800d24a:	6804      	ldr	r4, [r0, #0]
 800d24c:	fa03 f506 	lsl.w	r5, r3, r6
 800d250:	432c      	orrs	r4, r5
 800d252:	40d3      	lsrs	r3, r2
 800d254:	6004      	str	r4, [r0, #0]
 800d256:	f840 3f04 	str.w	r3, [r0, #4]!
 800d25a:	4288      	cmp	r0, r1
 800d25c:	d3f4      	bcc.n	800d248 <L_shift+0xc>
 800d25e:	bd70      	pop	{r4, r5, r6, pc}

0800d260 <__match>:
 800d260:	b530      	push	{r4, r5, lr}
 800d262:	6803      	ldr	r3, [r0, #0]
 800d264:	3301      	adds	r3, #1
 800d266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d26a:	b914      	cbnz	r4, 800d272 <__match+0x12>
 800d26c:	6003      	str	r3, [r0, #0]
 800d26e:	2001      	movs	r0, #1
 800d270:	bd30      	pop	{r4, r5, pc}
 800d272:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d276:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d27a:	2d19      	cmp	r5, #25
 800d27c:	bf98      	it	ls
 800d27e:	3220      	addls	r2, #32
 800d280:	42a2      	cmp	r2, r4
 800d282:	d0f0      	beq.n	800d266 <__match+0x6>
 800d284:	2000      	movs	r0, #0
 800d286:	e7f3      	b.n	800d270 <__match+0x10>

0800d288 <__hexnan>:
 800d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	680b      	ldr	r3, [r1, #0]
 800d28e:	6801      	ldr	r1, [r0, #0]
 800d290:	115e      	asrs	r6, r3, #5
 800d292:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d296:	f013 031f 	ands.w	r3, r3, #31
 800d29a:	b087      	sub	sp, #28
 800d29c:	bf18      	it	ne
 800d29e:	3604      	addne	r6, #4
 800d2a0:	2500      	movs	r5, #0
 800d2a2:	1f37      	subs	r7, r6, #4
 800d2a4:	4682      	mov	sl, r0
 800d2a6:	4690      	mov	r8, r2
 800d2a8:	9301      	str	r3, [sp, #4]
 800d2aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d2ae:	46b9      	mov	r9, r7
 800d2b0:	463c      	mov	r4, r7
 800d2b2:	9502      	str	r5, [sp, #8]
 800d2b4:	46ab      	mov	fp, r5
 800d2b6:	784a      	ldrb	r2, [r1, #1]
 800d2b8:	1c4b      	adds	r3, r1, #1
 800d2ba:	9303      	str	r3, [sp, #12]
 800d2bc:	b342      	cbz	r2, 800d310 <__hexnan+0x88>
 800d2be:	4610      	mov	r0, r2
 800d2c0:	9105      	str	r1, [sp, #20]
 800d2c2:	9204      	str	r2, [sp, #16]
 800d2c4:	f7ff fd94 	bl	800cdf0 <__hexdig_fun>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d151      	bne.n	800d370 <__hexnan+0xe8>
 800d2cc:	9a04      	ldr	r2, [sp, #16]
 800d2ce:	9905      	ldr	r1, [sp, #20]
 800d2d0:	2a20      	cmp	r2, #32
 800d2d2:	d818      	bhi.n	800d306 <__hexnan+0x7e>
 800d2d4:	9b02      	ldr	r3, [sp, #8]
 800d2d6:	459b      	cmp	fp, r3
 800d2d8:	dd13      	ble.n	800d302 <__hexnan+0x7a>
 800d2da:	454c      	cmp	r4, r9
 800d2dc:	d206      	bcs.n	800d2ec <__hexnan+0x64>
 800d2de:	2d07      	cmp	r5, #7
 800d2e0:	dc04      	bgt.n	800d2ec <__hexnan+0x64>
 800d2e2:	462a      	mov	r2, r5
 800d2e4:	4649      	mov	r1, r9
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	f7ff ffa8 	bl	800d23c <L_shift>
 800d2ec:	4544      	cmp	r4, r8
 800d2ee:	d952      	bls.n	800d396 <__hexnan+0x10e>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	f1a4 0904 	sub.w	r9, r4, #4
 800d2f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2fa:	f8cd b008 	str.w	fp, [sp, #8]
 800d2fe:	464c      	mov	r4, r9
 800d300:	461d      	mov	r5, r3
 800d302:	9903      	ldr	r1, [sp, #12]
 800d304:	e7d7      	b.n	800d2b6 <__hexnan+0x2e>
 800d306:	2a29      	cmp	r2, #41	@ 0x29
 800d308:	d157      	bne.n	800d3ba <__hexnan+0x132>
 800d30a:	3102      	adds	r1, #2
 800d30c:	f8ca 1000 	str.w	r1, [sl]
 800d310:	f1bb 0f00 	cmp.w	fp, #0
 800d314:	d051      	beq.n	800d3ba <__hexnan+0x132>
 800d316:	454c      	cmp	r4, r9
 800d318:	d206      	bcs.n	800d328 <__hexnan+0xa0>
 800d31a:	2d07      	cmp	r5, #7
 800d31c:	dc04      	bgt.n	800d328 <__hexnan+0xa0>
 800d31e:	462a      	mov	r2, r5
 800d320:	4649      	mov	r1, r9
 800d322:	4620      	mov	r0, r4
 800d324:	f7ff ff8a 	bl	800d23c <L_shift>
 800d328:	4544      	cmp	r4, r8
 800d32a:	d936      	bls.n	800d39a <__hexnan+0x112>
 800d32c:	f1a8 0204 	sub.w	r2, r8, #4
 800d330:	4623      	mov	r3, r4
 800d332:	f853 1b04 	ldr.w	r1, [r3], #4
 800d336:	f842 1f04 	str.w	r1, [r2, #4]!
 800d33a:	429f      	cmp	r7, r3
 800d33c:	d2f9      	bcs.n	800d332 <__hexnan+0xaa>
 800d33e:	1b3b      	subs	r3, r7, r4
 800d340:	f023 0303 	bic.w	r3, r3, #3
 800d344:	3304      	adds	r3, #4
 800d346:	3401      	adds	r4, #1
 800d348:	3e03      	subs	r6, #3
 800d34a:	42b4      	cmp	r4, r6
 800d34c:	bf88      	it	hi
 800d34e:	2304      	movhi	r3, #4
 800d350:	4443      	add	r3, r8
 800d352:	2200      	movs	r2, #0
 800d354:	f843 2b04 	str.w	r2, [r3], #4
 800d358:	429f      	cmp	r7, r3
 800d35a:	d2fb      	bcs.n	800d354 <__hexnan+0xcc>
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	b91b      	cbnz	r3, 800d368 <__hexnan+0xe0>
 800d360:	4547      	cmp	r7, r8
 800d362:	d128      	bne.n	800d3b6 <__hexnan+0x12e>
 800d364:	2301      	movs	r3, #1
 800d366:	603b      	str	r3, [r7, #0]
 800d368:	2005      	movs	r0, #5
 800d36a:	b007      	add	sp, #28
 800d36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d370:	3501      	adds	r5, #1
 800d372:	2d08      	cmp	r5, #8
 800d374:	f10b 0b01 	add.w	fp, fp, #1
 800d378:	dd06      	ble.n	800d388 <__hexnan+0x100>
 800d37a:	4544      	cmp	r4, r8
 800d37c:	d9c1      	bls.n	800d302 <__hexnan+0x7a>
 800d37e:	2300      	movs	r3, #0
 800d380:	f844 3c04 	str.w	r3, [r4, #-4]
 800d384:	2501      	movs	r5, #1
 800d386:	3c04      	subs	r4, #4
 800d388:	6822      	ldr	r2, [r4, #0]
 800d38a:	f000 000f 	and.w	r0, r0, #15
 800d38e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d392:	6020      	str	r0, [r4, #0]
 800d394:	e7b5      	b.n	800d302 <__hexnan+0x7a>
 800d396:	2508      	movs	r5, #8
 800d398:	e7b3      	b.n	800d302 <__hexnan+0x7a>
 800d39a:	9b01      	ldr	r3, [sp, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d0dd      	beq.n	800d35c <__hexnan+0xd4>
 800d3a0:	f1c3 0320 	rsb	r3, r3, #32
 800d3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a8:	40da      	lsrs	r2, r3
 800d3aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d3b4:	e7d2      	b.n	800d35c <__hexnan+0xd4>
 800d3b6:	3f04      	subs	r7, #4
 800d3b8:	e7d0      	b.n	800d35c <__hexnan+0xd4>
 800d3ba:	2004      	movs	r0, #4
 800d3bc:	e7d5      	b.n	800d36a <__hexnan+0xe2>

0800d3be <__ascii_mbtowc>:
 800d3be:	b082      	sub	sp, #8
 800d3c0:	b901      	cbnz	r1, 800d3c4 <__ascii_mbtowc+0x6>
 800d3c2:	a901      	add	r1, sp, #4
 800d3c4:	b142      	cbz	r2, 800d3d8 <__ascii_mbtowc+0x1a>
 800d3c6:	b14b      	cbz	r3, 800d3dc <__ascii_mbtowc+0x1e>
 800d3c8:	7813      	ldrb	r3, [r2, #0]
 800d3ca:	600b      	str	r3, [r1, #0]
 800d3cc:	7812      	ldrb	r2, [r2, #0]
 800d3ce:	1e10      	subs	r0, r2, #0
 800d3d0:	bf18      	it	ne
 800d3d2:	2001      	movne	r0, #1
 800d3d4:	b002      	add	sp, #8
 800d3d6:	4770      	bx	lr
 800d3d8:	4610      	mov	r0, r2
 800d3da:	e7fb      	b.n	800d3d4 <__ascii_mbtowc+0x16>
 800d3dc:	f06f 0001 	mvn.w	r0, #1
 800d3e0:	e7f8      	b.n	800d3d4 <__ascii_mbtowc+0x16>

0800d3e2 <_realloc_r>:
 800d3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e6:	4680      	mov	r8, r0
 800d3e8:	4615      	mov	r5, r2
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	b921      	cbnz	r1, 800d3f8 <_realloc_r+0x16>
 800d3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	f7fd bc74 	b.w	800ace0 <_malloc_r>
 800d3f8:	b92a      	cbnz	r2, 800d406 <_realloc_r+0x24>
 800d3fa:	f7fd fbfd 	bl	800abf8 <_free_r>
 800d3fe:	2400      	movs	r4, #0
 800d400:	4620      	mov	r0, r4
 800d402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d406:	f000 f840 	bl	800d48a <_malloc_usable_size_r>
 800d40a:	4285      	cmp	r5, r0
 800d40c:	4606      	mov	r6, r0
 800d40e:	d802      	bhi.n	800d416 <_realloc_r+0x34>
 800d410:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d414:	d8f4      	bhi.n	800d400 <_realloc_r+0x1e>
 800d416:	4629      	mov	r1, r5
 800d418:	4640      	mov	r0, r8
 800d41a:	f7fd fc61 	bl	800ace0 <_malloc_r>
 800d41e:	4607      	mov	r7, r0
 800d420:	2800      	cmp	r0, #0
 800d422:	d0ec      	beq.n	800d3fe <_realloc_r+0x1c>
 800d424:	42b5      	cmp	r5, r6
 800d426:	462a      	mov	r2, r5
 800d428:	4621      	mov	r1, r4
 800d42a:	bf28      	it	cs
 800d42c:	4632      	movcs	r2, r6
 800d42e:	f7fc fd80 	bl	8009f32 <memcpy>
 800d432:	4621      	mov	r1, r4
 800d434:	4640      	mov	r0, r8
 800d436:	f7fd fbdf 	bl	800abf8 <_free_r>
 800d43a:	463c      	mov	r4, r7
 800d43c:	e7e0      	b.n	800d400 <_realloc_r+0x1e>

0800d43e <__ascii_wctomb>:
 800d43e:	4603      	mov	r3, r0
 800d440:	4608      	mov	r0, r1
 800d442:	b141      	cbz	r1, 800d456 <__ascii_wctomb+0x18>
 800d444:	2aff      	cmp	r2, #255	@ 0xff
 800d446:	d904      	bls.n	800d452 <__ascii_wctomb+0x14>
 800d448:	228a      	movs	r2, #138	@ 0x8a
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295
 800d450:	4770      	bx	lr
 800d452:	700a      	strb	r2, [r1, #0]
 800d454:	2001      	movs	r0, #1
 800d456:	4770      	bx	lr

0800d458 <fiprintf>:
 800d458:	b40e      	push	{r1, r2, r3}
 800d45a:	b503      	push	{r0, r1, lr}
 800d45c:	4601      	mov	r1, r0
 800d45e:	ab03      	add	r3, sp, #12
 800d460:	4805      	ldr	r0, [pc, #20]	@ (800d478 <fiprintf+0x20>)
 800d462:	f853 2b04 	ldr.w	r2, [r3], #4
 800d466:	6800      	ldr	r0, [r0, #0]
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	f7ff f97d 	bl	800c768 <_vfiprintf_r>
 800d46e:	b002      	add	sp, #8
 800d470:	f85d eb04 	ldr.w	lr, [sp], #4
 800d474:	b003      	add	sp, #12
 800d476:	4770      	bx	lr
 800d478:	20000040 	.word	0x20000040

0800d47c <abort>:
 800d47c:	b508      	push	{r3, lr}
 800d47e:	2006      	movs	r0, #6
 800d480:	f000 f834 	bl	800d4ec <raise>
 800d484:	2001      	movs	r0, #1
 800d486:	f7f4 fd15 	bl	8001eb4 <_exit>

0800d48a <_malloc_usable_size_r>:
 800d48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d48e:	1f18      	subs	r0, r3, #4
 800d490:	2b00      	cmp	r3, #0
 800d492:	bfbc      	itt	lt
 800d494:	580b      	ldrlt	r3, [r1, r0]
 800d496:	18c0      	addlt	r0, r0, r3
 800d498:	4770      	bx	lr

0800d49a <_raise_r>:
 800d49a:	291f      	cmp	r1, #31
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	4605      	mov	r5, r0
 800d4a0:	460c      	mov	r4, r1
 800d4a2:	d904      	bls.n	800d4ae <_raise_r+0x14>
 800d4a4:	2316      	movs	r3, #22
 800d4a6:	6003      	str	r3, [r0, #0]
 800d4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ac:	bd38      	pop	{r3, r4, r5, pc}
 800d4ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d4b0:	b112      	cbz	r2, 800d4b8 <_raise_r+0x1e>
 800d4b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4b6:	b94b      	cbnz	r3, 800d4cc <_raise_r+0x32>
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	f000 f831 	bl	800d520 <_getpid_r>
 800d4be:	4622      	mov	r2, r4
 800d4c0:	4601      	mov	r1, r0
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4c8:	f000 b818 	b.w	800d4fc <_kill_r>
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d00a      	beq.n	800d4e6 <_raise_r+0x4c>
 800d4d0:	1c59      	adds	r1, r3, #1
 800d4d2:	d103      	bne.n	800d4dc <_raise_r+0x42>
 800d4d4:	2316      	movs	r3, #22
 800d4d6:	6003      	str	r3, [r0, #0]
 800d4d8:	2001      	movs	r0, #1
 800d4da:	e7e7      	b.n	800d4ac <_raise_r+0x12>
 800d4dc:	2100      	movs	r1, #0
 800d4de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	4798      	blx	r3
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	e7e0      	b.n	800d4ac <_raise_r+0x12>
	...

0800d4ec <raise>:
 800d4ec:	4b02      	ldr	r3, [pc, #8]	@ (800d4f8 <raise+0xc>)
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	6818      	ldr	r0, [r3, #0]
 800d4f2:	f7ff bfd2 	b.w	800d49a <_raise_r>
 800d4f6:	bf00      	nop
 800d4f8:	20000040 	.word	0x20000040

0800d4fc <_kill_r>:
 800d4fc:	b538      	push	{r3, r4, r5, lr}
 800d4fe:	4d07      	ldr	r5, [pc, #28]	@ (800d51c <_kill_r+0x20>)
 800d500:	2300      	movs	r3, #0
 800d502:	4604      	mov	r4, r0
 800d504:	4608      	mov	r0, r1
 800d506:	4611      	mov	r1, r2
 800d508:	602b      	str	r3, [r5, #0]
 800d50a:	f7f4 fcc3 	bl	8001e94 <_kill>
 800d50e:	1c43      	adds	r3, r0, #1
 800d510:	d102      	bne.n	800d518 <_kill_r+0x1c>
 800d512:	682b      	ldr	r3, [r5, #0]
 800d514:	b103      	cbz	r3, 800d518 <_kill_r+0x1c>
 800d516:	6023      	str	r3, [r4, #0]
 800d518:	bd38      	pop	{r3, r4, r5, pc}
 800d51a:	bf00      	nop
 800d51c:	2000526c 	.word	0x2000526c

0800d520 <_getpid_r>:
 800d520:	f7f4 bcb0 	b.w	8001e84 <_getpid>

0800d524 <_init>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	bf00      	nop
 800d528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d52a:	bc08      	pop	{r3}
 800d52c:	469e      	mov	lr, r3
 800d52e:	4770      	bx	lr

0800d530 <_fini>:
 800d530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d532:	bf00      	nop
 800d534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d536:	bc08      	pop	{r3}
 800d538:	469e      	mov	lr, r3
 800d53a:	4770      	bx	lr
