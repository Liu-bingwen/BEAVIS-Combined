
beavis-combined.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d47c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800d610  0800d610  0000e610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc88  0800dc88  0000f1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc88  0800dc88  0000ec88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc90  0800dc90  0000f1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc90  0800dc90  0000ec90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc94  0800dc94  0000ec94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800dc98  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1fc  2**0
                  CONTENTS
 10 .bss          00005080  200001fc  200001fc  0000f1fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000527c  2000527c  0000f1fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ead  00000000  00000000  0000f22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ee0  00000000  00000000  000310d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e80  00000000  00000000  00035fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017b5  00000000  00000000  00037e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025be8  00000000  00000000  000395f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002595b  00000000  00000000  0005f1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d561e  00000000  00000000  00084b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015a156  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000095f8  00000000  00000000  0015a19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00163794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5f4 	.word	0x0800d5f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800d5f4 	.word	0x0800d5f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <VL53L1X_StartRanging>:
	*pInterruptPolarity = !(Temp>>4);
	return status;
}

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	2240      	movs	r2, #64	@ 0x40
 8000ff6:	2187      	movs	r1, #135	@ 0x87
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 f895 	bl	8002128 <VL53L1_WrByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4313      	orrs	r3, r2
 8001006:	73fb      	strb	r3, [r7, #15]
	return status;
 8001008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	73bb      	strb	r3, [r7, #14]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8001028:	f107 020e 	add.w	r2, r7, #14
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	21e5      	movs	r1, #229	@ 0xe5
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fffb 	bl	800202c <VL53L1_RdByte>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	4313      	orrs	r3, r2
 800103e:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8001040:	7bba      	ldrb	r2, [r7, #14]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	701a      	strb	r2, [r3, #0]
	return status;
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 800105c:	1d39      	adds	r1, r7, #4
 800105e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001062:	2201      	movs	r2, #1
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <__io_putchar+0x20>)
 8001066:	f004 fd31 	bl	8005acc <HAL_UART_Transmit>
		return ch;
 800106a:	687b      	ldr	r3, [r7, #4]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000588 	.word	0x20000588

08001078 <bmi088_starting>:

void bmi088_starting(){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

	printf("BMI088 I2C Test\n");
 800107c:	485d      	ldr	r0, [pc, #372]	@ (80011f4 <bmi088_starting+0x17c>)
 800107e:	f008 fe41 	bl	8009d04 <puts>
	printf("Bolgen Studio\n");
 8001082:	485d      	ldr	r0, [pc, #372]	@ (80011f8 <bmi088_starting+0x180>)
 8001084:	f008 fe3e 	bl	8009d04 <puts>

	/* Initializing the bmi088 sensors the below function will Initialize both accel and gyro sensors */
	rslt = bmi088_init(&dev);
 8001088:	485c      	ldr	r0, [pc, #368]	@ (80011fc <bmi088_starting+0x184>)
 800108a:	f001 f8fa 	bl	8002282 <bmi088_init>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <bmi088_starting+0x188>)
 8001094:	701a      	strb	r2, [r3, #0]

	if(rslt == BMI08X_OK)
 8001096:	4b5a      	ldr	r3, [pc, #360]	@ (8001200 <bmi088_starting+0x188>)
 8001098:	f993 3000 	ldrsb.w	r3, [r3]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d12b      	bne.n	80010f8 <bmi088_starting+0x80>
	{

    /* Read accel chip id */
    rslt = bmi08a_get_regs(BMI08X_ACCEL_CHIP_ID_REG, &data, 1, &dev);
 80010a0:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <bmi088_starting+0x184>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	4957      	ldr	r1, [pc, #348]	@ (8001204 <bmi088_starting+0x18c>)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f001 f946 	bl	8002338 <bmi08a_get_regs>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b53      	ldr	r3, [pc, #332]	@ (8001200 <bmi088_starting+0x188>)
 80010b2:	701a      	strb	r2, [r3, #0]
		printf("Accel Initialization OK\n");
 80010b4:	4854      	ldr	r0, [pc, #336]	@ (8001208 <bmi088_starting+0x190>)
 80010b6:	f008 fe25 	bl	8009d04 <puts>
		printf("Accel Chip ID: 0x%02X\n",data);
 80010ba:	4b52      	ldr	r3, [pc, #328]	@ (8001204 <bmi088_starting+0x18c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	4852      	ldr	r0, [pc, #328]	@ (800120c <bmi088_starting+0x194>)
 80010c2:	f008 fdaf 	bl	8009c24 <iprintf>

		if(rslt == BMI08X_OK)
 80010c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001200 <bmi088_starting+0x188>)
 80010c8:	f993 3000 	ldrsb.w	r3, [r3]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d118      	bne.n	8001102 <bmi088_starting+0x8a>
		{
			/* Read gyro chip id */
			rslt = bmi08g_get_regs(BMI08X_GYRO_CHIP_ID_REG, &data, 1, &dev);
 80010d0:	4b4a      	ldr	r3, [pc, #296]	@ (80011fc <bmi088_starting+0x184>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	494b      	ldr	r1, [pc, #300]	@ (8001204 <bmi088_starting+0x18c>)
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 fc39 	bl	800294e <bmi08g_get_regs>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	4b47      	ldr	r3, [pc, #284]	@ (8001200 <bmi088_starting+0x188>)
 80010e2:	701a      	strb	r2, [r3, #0]
			printf("GYRO Initialization OK\n");
 80010e4:	484a      	ldr	r0, [pc, #296]	@ (8001210 <bmi088_starting+0x198>)
 80010e6:	f008 fe0d 	bl	8009d04 <puts>
			printf("GYRO Chip ID: 0x%02X\n",data);
 80010ea:	4b46      	ldr	r3, [pc, #280]	@ (8001204 <bmi088_starting+0x18c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4848      	ldr	r0, [pc, #288]	@ (8001214 <bmi088_starting+0x19c>)
 80010f2:	f008 fd97 	bl	8009c24 <iprintf>
 80010f6:	e004      	b.n	8001102 <bmi088_starting+0x8a>
		}
	}
	else
	{

		printf("BMI088 Initialization Error\n");
 80010f8:	4847      	ldr	r0, [pc, #284]	@ (8001218 <bmi088_starting+0x1a0>)
 80010fa:	f008 fe03 	bl	8009d04 <puts>
		while(1);
 80010fe:	bf00      	nop
 8001100:	e7fd      	b.n	80010fe <bmi088_starting+0x86>
	}

	/* Perform soft reset */
  rslt = bmi08a_soft_reset(&dev);
 8001102:	483e      	ldr	r0, [pc, #248]	@ (80011fc <bmi088_starting+0x184>)
 8001104:	f001 f944 	bl	8002390 <bmi08a_soft_reset>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b3c      	ldr	r3, [pc, #240]	@ (8001200 <bmi088_starting+0x188>)
 800110e:	701a      	strb	r2, [r3, #0]
	if (rslt != BMI08X_OK)
 8001110:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <bmi088_starting+0x188>)
 8001112:	f993 3000 	ldrsb.w	r3, [r3]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <bmi088_starting+0xac>
	{
		printf("BMI088 Soft Reset Error\n");
 800111a:	4840      	ldr	r0, [pc, #256]	@ (800121c <bmi088_starting+0x1a4>)
 800111c:	f008 fdf2 	bl	8009d04 <puts>
		while(1);
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <bmi088_starting+0xa8>
	}
	/* Read the accel power mode */
	rslt = bmi08a_get_power_mode(&dev);
 8001124:	4835      	ldr	r0, [pc, #212]	@ (80011fc <bmi088_starting+0x184>)
 8001126:	f001 fa1d 	bl	8002564 <bmi08a_get_power_mode>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <bmi088_starting+0x188>)
 8001130:	701a      	strb	r2, [r3, #0]
	/* Read the accel sensor config parameters (odr,bw,range) */
	rslt = bmi08a_get_meas_conf(&dev);
 8001132:	4832      	ldr	r0, [pc, #200]	@ (80011fc <bmi088_starting+0x184>)
 8001134:	f001 f95f 	bl	80023f6 <bmi08a_get_meas_conf>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <bmi088_starting+0x188>)
 800113e:	701a      	strb	r2, [r3, #0]
	/* Initialize the device instance as per the initialization example */

/* Assign the desired configurations */
	dev.accel_cfg.bw = BMI08X_ACCEL_BW_NORMAL;
 8001140:	4b2e      	ldr	r3, [pc, #184]	@ (80011fc <bmi088_starting+0x184>)
 8001142:	2202      	movs	r2, #2
 8001144:	721a      	strb	r2, [r3, #8]
	dev.accel_cfg.odr = BMI08X_ACCEL_ODR_1600_HZ;
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <bmi088_starting+0x184>)
 8001148:	220c      	movs	r2, #12
 800114a:	725a      	strb	r2, [r3, #9]
	dev.accel_cfg.range = BMI088_ACCEL_RANGE_3G;
 800114c:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <bmi088_starting+0x184>)
 800114e:	2200      	movs	r2, #0
 8001150:	71da      	strb	r2, [r3, #7]
	dev.accel_cfg.power = BMI08X_ACCEL_PM_ACTIVE;
 8001152:	4b2a      	ldr	r3, [pc, #168]	@ (80011fc <bmi088_starting+0x184>)
 8001154:	2200      	movs	r2, #0
 8001156:	719a      	strb	r2, [r3, #6]

	rslt = bmi08a_set_power_mode(&dev);
 8001158:	4828      	ldr	r0, [pc, #160]	@ (80011fc <bmi088_starting+0x184>)
 800115a:	f001 fa26 	bl	80025aa <bmi08a_set_power_mode>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <bmi088_starting+0x188>)
 8001164:	701a      	strb	r2, [r3, #0]

	/* Wait for 10ms to switch between the power modes - delay taken care inside the function */
	rslt = bmi08a_set_meas_conf(&dev);
 8001166:	4825      	ldr	r0, [pc, #148]	@ (80011fc <bmi088_starting+0x184>)
 8001168:	f001 f979 	bl	800245e <bmi08a_set_meas_conf>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <bmi088_starting+0x188>)
 8001172:	701a      	strb	r2, [r3, #0]

  /* Configuring the gyro	 */
	dev.gyro_cfg.power = BMI08X_GYRO_PM_NORMAL;
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <bmi088_starting+0x184>)
 8001176:	2200      	movs	r2, #0
 8001178:	729a      	strb	r2, [r3, #10]

	rslt = bmi08g_set_power_mode(&dev);
 800117a:	4820      	ldr	r0, [pc, #128]	@ (80011fc <bmi088_starting+0x184>)
 800117c:	f001 fc91 	bl	8002aa2 <bmi08g_set_power_mode>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <bmi088_starting+0x188>)
 8001186:	701a      	strb	r2, [r3, #0]
	/* Wait for 30ms to switch between the power modes - delay taken care inside the function */

	/* Assign the desired configurations */
	dev.gyro_cfg.odr = BMI08X_GYRO_BW_23_ODR_200_HZ;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <bmi088_starting+0x184>)
 800118a:	2204      	movs	r2, #4
 800118c:	735a      	strb	r2, [r3, #13]
	dev.gyro_cfg.range = BMI08X_GYRO_RANGE_1000_DPS;
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <bmi088_starting+0x184>)
 8001190:	2201      	movs	r2, #1
 8001192:	72da      	strb	r2, [r3, #11]
	dev.gyro_cfg.bw = BMI08X_GYRO_BW_23_ODR_200_HZ;
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <bmi088_starting+0x184>)
 8001196:	2204      	movs	r2, #4
 8001198:	731a      	strb	r2, [r3, #12]

	rslt = bmi08g_set_meas_conf(&dev);
 800119a:	4818      	ldr	r0, [pc, #96]	@ (80011fc <bmi088_starting+0x184>)
 800119c:	f001 fc03 	bl	80029a6 <bmi08g_set_meas_conf>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <bmi088_starting+0x188>)
 80011a6:	701a      	strb	r2, [r3, #0]

	switch(dev.accel_cfg.range)
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <bmi088_starting+0x184>)
 80011aa:	79db      	ldrb	r3, [r3, #7]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d81b      	bhi.n	80011e8 <bmi088_starting+0x170>
 80011b0:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <bmi088_starting+0x140>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011d1 	.word	0x080011d1
 80011c0:	080011d9 	.word	0x080011d9
 80011c4:	080011e1 	.word	0x080011e1
	{
		case BMI088_ACCEL_RANGE_3G: accRange = 3000;break;
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <bmi088_starting+0x1a8>)
 80011ca:	4a16      	ldr	r2, [pc, #88]	@ (8001224 <bmi088_starting+0x1ac>)
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e00f      	b.n	80011f0 <bmi088_starting+0x178>
		case BMI088_ACCEL_RANGE_6G: accRange = 6000;break;
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <bmi088_starting+0x1a8>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <bmi088_starting+0x1b0>)
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e00b      	b.n	80011f0 <bmi088_starting+0x178>
		case BMI088_ACCEL_RANGE_12G: accRange = 12000;break;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <bmi088_starting+0x1a8>)
 80011da:	4a14      	ldr	r2, [pc, #80]	@ (800122c <bmi088_starting+0x1b4>)
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e007      	b.n	80011f0 <bmi088_starting+0x178>
		case BMI088_ACCEL_RANGE_24G: accRange = 24000;break;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <bmi088_starting+0x1a8>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	@ (8001230 <bmi088_starting+0x1b8>)
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e003      	b.n	80011f0 <bmi088_starting+0x178>
		default: accRange = 24000;break;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <bmi088_starting+0x1a8>)
 80011ea:	4a11      	ldr	r2, [pc, #68]	@ (8001230 <bmi088_starting+0x1b8>)
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	bf00      	nop
	}


}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0800d610 	.word	0x0800d610
 80011f8:	0800d620 	.word	0x0800d620
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000218 	.word	0x20000218
 8001204:	20000219 	.word	0x20000219
 8001208:	0800d630 	.word	0x0800d630
 800120c:	0800d648 	.word	0x0800d648
 8001210:	0800d660 	.word	0x0800d660
 8001214:	0800d678 	.word	0x0800d678
 8001218:	0800d690 	.word	0x0800d690
 800121c:	0800d6ac 	.word	0x0800d6ac
 8001220:	20000230 	.word	0x20000230
 8001224:	453b8000 	.word	0x453b8000
 8001228:	45bb8000 	.word	0x45bb8000
 800122c:	463b8000 	.word	0x463b8000
 8001230:	46bb8000 	.word	0x46bb8000

08001234 <stm32_i2c_write>:
typedef int8_t (*bmi08x_com_fptr_t)(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len);

int8_t stm32_i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
 800123a:	603a      	str	r2, [r7, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	460b      	mov	r3, r1
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	4613      	mov	r3, r2
 8001248:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, reg_addr, 1, data, len, 100);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	b29b      	uxth	r3, r3
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	b299      	uxth	r1, r3
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	b29a      	uxth	r2, r3
 8001256:	2364      	movs	r3, #100	@ 0x64
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	4807      	ldr	r0, [pc, #28]	@ (8001284 <stm32_i2c_write+0x50>)
 8001266:	f002 f96f 	bl	8003548 <HAL_I2C_Mem_Write>
	while(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_BUSY);
 800126a:	bf00      	nop
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <stm32_i2c_write+0x50>)
 800126e:	f002 fc97 	bl	8003ba0 <HAL_I2C_GetState>
 8001272:	4603      	mov	r3, r0
 8001274:	2b24      	cmp	r3, #36	@ 0x24
 8001276:	d0f9      	beq.n	800126c <stm32_i2c_write+0x38>

	return 0;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000238 	.word	0x20000238

08001288 <stm32_i2c_read>:

int8_t stm32_i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af04      	add	r7, sp, #16
 800128e:	603a      	str	r2, [r7, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	460b      	mov	r3, r1
 8001298:	71bb      	strb	r3, [r7, #6]
 800129a:	4613      	mov	r3, r2
 800129c:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, reg_addr, 1, data, len, 100);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	b299      	uxth	r1, r3
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	2364      	movs	r3, #100	@ 0x64
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <stm32_i2c_read+0x40>)
 80012ba:	f002 fa3f 	bl	800373c <HAL_I2C_Mem_Read>

	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000238 	.word	0x20000238
 80012cc:	00000000 	.word	0x00000000

080012d0 <bmi088_read>:

void bmi088_read(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

	/*读取数据*/
		while(1){
			/* Read the sensor data into the sensor data instance */
			rslt = bmi08a_get_data(&user_accel_bmi088, &dev);
 80012d4:	4958      	ldr	r1, [pc, #352]	@ (8001438 <bmi088_read+0x168>)
 80012d6:	4859      	ldr	r0, [pc, #356]	@ (800143c <bmi088_read+0x16c>)
 80012d8:	f001 f9b6 	bl	8002648 <bmi08a_get_data>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <bmi088_read+0x170>)
 80012e2:	701a      	strb	r2, [r3, #0]
			/* Read the sensor data into the sensor data instance */
			rslt = bmi08g_get_data(&user_gyro_bmi088, &dev);
 80012e4:	4954      	ldr	r1, [pc, #336]	@ (8001438 <bmi088_read+0x168>)
 80012e6:	4857      	ldr	r0, [pc, #348]	@ (8001444 <bmi088_read+0x174>)
 80012e8:	f001 fc27 	bl	8002b3a <bmi08g_get_data>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <bmi088_read+0x170>)
 80012f2:	701a      	strb	r2, [r3, #0]

	//		printf("x:%f",user_accel_bmi088.x * accRange / 32768 );
			printf("x:%.3f",user_accel_bmi088.x/ 10920.0 );
 80012f4:	4b51      	ldr	r3, [pc, #324]	@ (800143c <bmi088_read+0x16c>)
 80012f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f912 	bl	8000524 <__aeabi_i2d>
 8001300:	a349      	add	r3, pc, #292	@ (adr r3, 8001428 <bmi088_read+0x158>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff faa1 	bl	800084c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	484e      	ldr	r0, [pc, #312]	@ (8001448 <bmi088_read+0x178>)
 8001310:	f008 fc88 	bl	8009c24 <iprintf>
			printf("\t");
 8001314:	2009      	movs	r0, #9
 8001316:	f008 fc97 	bl	8009c48 <putchar>
			printf("y:%.3f",user_accel_bmi088.y/ 10920.0 );
 800131a:	4b48      	ldr	r3, [pc, #288]	@ (800143c <bmi088_read+0x16c>)
 800131c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8ff 	bl	8000524 <__aeabi_i2d>
 8001326:	a340      	add	r3, pc, #256	@ (adr r3, 8001428 <bmi088_read+0x158>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff fa8e 	bl	800084c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4845      	ldr	r0, [pc, #276]	@ (800144c <bmi088_read+0x17c>)
 8001336:	f008 fc75 	bl	8009c24 <iprintf>
			printf("\t");
 800133a:	2009      	movs	r0, #9
 800133c:	f008 fc84 	bl	8009c48 <putchar>
			printf("z:%.3f",user_accel_bmi088.z/ 10920.0 );
 8001340:	4b3e      	ldr	r3, [pc, #248]	@ (800143c <bmi088_read+0x16c>)
 8001342:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8ec 	bl	8000524 <__aeabi_i2d>
 800134c:	a336      	add	r3, pc, #216	@ (adr r3, 8001428 <bmi088_read+0x158>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fa7b 	bl	800084c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	483d      	ldr	r0, [pc, #244]	@ (8001450 <bmi088_read+0x180>)
 800135c:	f008 fc62 	bl	8009c24 <iprintf>
			printf("\t\t");
 8001360:	483c      	ldr	r0, [pc, #240]	@ (8001454 <bmi088_read+0x184>)
 8001362:	f008 fc5f 	bl	8009c24 <iprintf>
			printf("x:%.3f",user_gyro_bmi088.x / 32.768);
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <bmi088_read+0x174>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8d9 	bl	8000524 <__aeabi_i2d>
 8001372:	a32f      	add	r3, pc, #188	@ (adr r3, 8001430 <bmi088_read+0x160>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff fa68 	bl	800084c <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4831      	ldr	r0, [pc, #196]	@ (8001448 <bmi088_read+0x178>)
 8001382:	f008 fc4f 	bl	8009c24 <iprintf>
			printf("\t");
 8001386:	2009      	movs	r0, #9
 8001388:	f008 fc5e 	bl	8009c48 <putchar>
			printf("y:%.3f",user_gyro_bmi088.y / 32.768);
 800138c:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <bmi088_read+0x174>)
 800138e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8c6 	bl	8000524 <__aeabi_i2d>
 8001398:	a325      	add	r3, pc, #148	@ (adr r3, 8001430 <bmi088_read+0x160>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff fa55 	bl	800084c <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4829      	ldr	r0, [pc, #164]	@ (800144c <bmi088_read+0x17c>)
 80013a8:	f008 fc3c 	bl	8009c24 <iprintf>
			printf("\t");
 80013ac:	2009      	movs	r0, #9
 80013ae:	f008 fc4b 	bl	8009c48 <putchar>
			printf("z:%.3f",user_gyro_bmi088.z / 32.768);
 80013b2:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <bmi088_read+0x174>)
 80013b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8b3 	bl	8000524 <__aeabi_i2d>
 80013be:	a31c      	add	r3, pc, #112	@ (adr r3, 8001430 <bmi088_read+0x160>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff fa42 	bl	800084c <__aeabi_ddiv>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4820      	ldr	r0, [pc, #128]	@ (8001450 <bmi088_read+0x180>)
 80013ce:	f008 fc29 	bl	8009c24 <iprintf>
			printf("\t");
 80013d2:	2009      	movs	r0, #9
 80013d4:	f008 fc38 	bl	8009c48 <putchar>

			rslt = bmi08a_get_sensor_temperature(&dev,&bmi08x_sensor_temp);
 80013d8:	491f      	ldr	r1, [pc, #124]	@ (8001458 <bmi088_read+0x188>)
 80013da:	4817      	ldr	r0, [pc, #92]	@ (8001438 <bmi088_read+0x168>)
 80013dc:	f001 f98b 	bl	80026f6 <bmi08a_get_sensor_temperature>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <bmi088_read+0x170>)
 80013e6:	701a      	strb	r2, [r3, #0]
			if (rslt == BMI08X_OK)
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <bmi088_read+0x170>)
 80013ea:	f993 3000 	ldrsb.w	r3, [r3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <bmi088_read+0x142>
			{
				printf("Temp:%.3f", bmi08x_sensor_temp/1000.0);
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <bmi088_read+0x188>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f894 	bl	8000524 <__aeabi_i2d>
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <bmi088_read+0x18c>)
 8001402:	f7ff fa23 	bl	800084c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4815      	ldr	r0, [pc, #84]	@ (8001460 <bmi088_read+0x190>)
 800140c:	f008 fc0a 	bl	8009c24 <iprintf>
 8001410:	e002      	b.n	8001418 <bmi088_read+0x148>
			}
			else
			{
					printf("BMI088 Get Sensor Temperature Error\n");
 8001412:	4814      	ldr	r0, [pc, #80]	@ (8001464 <bmi088_read+0x194>)
 8001414:	f008 fc76 	bl	8009d04 <puts>
			}
			printf("\n");
 8001418:	200a      	movs	r0, #10
 800141a:	f008 fc15 	bl	8009c48 <putchar>

			HAL_Delay(1000);
 800141e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001422:	f001 fc91 	bl	8002d48 <HAL_Delay>
			rslt = bmi08a_get_data(&user_accel_bmi088, &dev);
 8001426:	e755      	b.n	80012d4 <bmi088_read+0x4>
 8001428:	00000000 	.word	0x00000000
 800142c:	40c55400 	.word	0x40c55400
 8001430:	d2f1a9fc 	.word	0xd2f1a9fc
 8001434:	4040624d 	.word	0x4040624d
 8001438:	20000000 	.word	0x20000000
 800143c:	20000220 	.word	0x20000220
 8001440:	20000218 	.word	0x20000218
 8001444:	20000228 	.word	0x20000228
 8001448:	0800d6c4 	.word	0x0800d6c4
 800144c:	0800d6cc 	.word	0x0800d6cc
 8001450:	0800d6d4 	.word	0x0800d6d4
 8001454:	0800d6dc 	.word	0x0800d6dc
 8001458:	2000021c 	.word	0x2000021c
 800145c:	408f4000 	.word	0x408f4000
 8001460:	0800d6e0 	.word	0x0800d6e0
 8001464:	0800d6ec 	.word	0x0800d6ec

08001468 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <MX_FREERTOS_Init+0x18>)
 800146e:	2100      	movs	r1, #0
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_FREERTOS_Init+0x1c>)
 8001472:	f004 ff75 	bl	8006360 <osThreadNew>
 8001476:	4603      	mov	r3, r0
 8001478:	4a03      	ldr	r2, [pc, #12]	@ (8001488 <MX_FREERTOS_Init+0x20>)
 800147a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	0800d820 	.word	0x0800d820
 8001484:	0800148d 	.word	0x0800148d
 8001488:	20000234 	.word	0x20000234

0800148c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	bmi088_read();
 8001494:	f7ff ff1c 	bl	80012d0 <bmi088_read>
    osDelay(1);
 8001498:	2001      	movs	r0, #1
 800149a:	f004 fff3 	bl	8006484 <osDelay>
	bmi088_read();
 800149e:	bf00      	nop
 80014a0:	e7f8      	b.n	8001494 <StartDefaultTask+0x8>
	...

080014a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a25      	ldr	r2, [pc, #148]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a1e      	ldr	r2, [pc, #120]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <MX_GPIO_Init+0xb4>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_GPIO_Init+0xb4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_XSHUT_Pin|PIN_CS_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f240 2101 	movw	r1, #513	@ 0x201
 8001514:	4811      	ldr	r0, [pc, #68]	@ (800155c <MX_GPIO_Init+0xb8>)
 8001516:	f001 feb9 	bl	800328c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_XSHUT_Pin|PIN_CS_Pin;
 800151a:	f240 2301 	movw	r3, #513	@ 0x201
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4619      	mov	r1, r3
 8001532:	480a      	ldr	r0, [pc, #40]	@ (800155c <MX_GPIO_Init+0xb8>)
 8001534:	f001 fd0e 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_GPIO_Pin;
 8001538:	2302      	movs	r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4619      	mov	r1, r3
 800154a:	4804      	ldr	r0, [pc, #16]	@ (800155c <MX_GPIO_Init+0xb8>)
 800154c:	f001 fd02 	bl	8002f54 <HAL_GPIO_Init>

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40020400 	.word	0x40020400

08001560 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001566:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <MX_I2C1_Init+0x54>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800156c:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x58>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800157e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001582:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_I2C1_Init+0x50>)
 800159e:	f001 fe8f 	bl	80032c0 <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a8:	f000 f972 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000238 	.word	0x20000238
 80015b4:	40005400 	.word	0x40005400
 80015b8:	000186a0 	.word	0x000186a0

080015bc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <MX_I2C2_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_I2C2_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <MX_I2C2_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_I2C2_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_I2C2_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_I2C2_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <MX_I2C2_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_I2C2_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_I2C2_Init+0x50>)
 80015fa:	f001 fe61 	bl	80032c0 <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 f944 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000028c 	.word	0x2000028c
 8001610:	40005800 	.word	0x40005800
 8001614:	000186a0 	.word	0x000186a0

08001618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <HAL_I2C_MspInit+0xe8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12c      	bne.n	8001694 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	4b31      	ldr	r3, [pc, #196]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a30      	ldr	r2, [pc, #192]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b2e      	ldr	r3, [pc, #184]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001656:	23c0      	movs	r3, #192	@ 0xc0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001666:	2304      	movs	r3, #4
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4825      	ldr	r0, [pc, #148]	@ (8001708 <HAL_I2C_MspInit+0xf0>)
 8001672:	f001 fc6f 	bl	8002f54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a21      	ldr	r2, [pc, #132]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001692:	e031      	b.n	80016f8 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <HAL_I2C_MspInit+0xf4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12c      	bne.n	80016f8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TOF_SCL_Pin|TOF_SDA_Pin;
 80016ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c0:	2312      	movs	r3, #18
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016cc:	2304      	movs	r3, #4
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	480c      	ldr	r0, [pc, #48]	@ (8001708 <HAL_I2C_MspInit+0xf0>)
 80016d8:	f001 fc3c 	bl	8002f54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 80016e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_I2C_MspInit+0xec>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3730      	adds	r7, #48	@ 0x30
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40005400 	.word	0x40005400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400
 800170c:	40005800 	.word	0x40005800

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001714:	f001 fad6 	bl	8002cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001718:	f000 f83e 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f7ff fec2 	bl	80014a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001720:	f7ff ff1e 	bl	8001560 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001724:	f7ff ff4a 	bl	80015bc <MX_I2C2_Init>
  MX_SPI1_Init();
 8001728:	f000 f9ea 	bl	8001b00 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800172c:	f000 fc0c 	bl	8001f48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //initialize BMI800
  bmi088_starting();
 8001730:	f7ff fca2 	bl	8001078 <bmi088_starting>

  //initialize PMW3901
  error = PMW3901_init();
 8001734:	f000 f8b2 	bl	800189c <PMW3901_init>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <main+0x80>)
 800173e:	701a      	strb	r2, [r3, #0]
  if(error)
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <main+0x80>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <main+0x3c>
  {
	  while(1);
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <main+0x38>
  }

  //Initialize VL53L1X
  status = VL53L1__Init();
 800174c:	f000 fd3e 	bl	80021cc <VL53L1__Init>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <main+0x84>)
 8001756:	701a      	strb	r2, [r3, #0]
  if(status)
 8001758:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <main+0x84>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <main+0x54>
  {
	  while(1);
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <main+0x50>
  }
  status = VL53L1X_StartRanging(VL53L1__ADDR);
 8001764:	2052      	movs	r0, #82	@ 0x52
 8001766:	f7ff fc3d 	bl	8000fe4 <VL53L1X_StartRanging>
 800176a:	4603      	mov	r3, r0
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <main+0x84>)
 8001770:	701a      	strb	r2, [r3, #0]
  if(status)
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <main+0x84>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <main+0x6e>
  {
	  while(1);
 800177a:	bf00      	nop
 800177c:	e7fd      	b.n	800177a <main+0x6a>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800177e:	f004 fda5 	bl	80062cc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001782:	f7ff fe71 	bl	8001468 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001786:	f004 fdc5 	bl	8006314 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800178a:	bf00      	nop
 800178c:	e7fd      	b.n	800178a <main+0x7a>
 800178e:	bf00      	nop
 8001790:	200002e0 	.word	0x200002e0
 8001794:	200002e1 	.word	0x200002e1

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	@ 0x50
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	2230      	movs	r2, #48	@ 0x30
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 fbac 	bl	8009f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <SystemClock_Config+0xcc>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	4a27      	ldr	r2, [pc, #156]	@ (8001864 <SystemClock_Config+0xcc>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80017cc:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <SystemClock_Config+0xcc>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <SystemClock_Config+0xd0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a21      	ldr	r2, [pc, #132]	@ (8001868 <SystemClock_Config+0xd0>)
 80017e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001868 <SystemClock_Config+0xd0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fc:	2310      	movs	r3, #16
 80017fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001800:	2302      	movs	r3, #2
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001804:	2300      	movs	r3, #0
 8001806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001808:	2308      	movs	r3, #8
 800180a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800180c:	23a8      	movs	r3, #168	@ 0xa8
 800180e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001810:	2302      	movs	r3, #2
 8001812:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001814:	2304      	movs	r3, #4
 8001816:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4618      	mov	r0, r3
 800181e:	f002 fd81 	bl	8004324 <HAL_RCC_OscConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001828:	f000 f832 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182c:	230f      	movs	r3, #15
 800182e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001830:	2302      	movs	r3, #2
 8001832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001838:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800183c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800183e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001842:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2105      	movs	r1, #5
 800184a:	4618      	mov	r0, r3
 800184c:	f002 ffe2 	bl	8004814 <HAL_RCC_ClockConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001856:	f000 f81b 	bl	8001890 <Error_Handler>
  }
}
 800185a:	bf00      	nop
 800185c:	3750      	adds	r7, #80	@ 0x50
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000

0800186c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a04      	ldr	r2, [pc, #16]	@ (800188c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800187e:	f001 fa43 	bl	8002d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40000800 	.word	0x40000800

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <Error_Handler+0x8>

0800189c <PMW3901_init>:

#include "pmw3901.h"

uint8_t message[512] = {'\0'};

uint8_t PMW3901_init(){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin,GPIO_PIN_SET);
 80018a2:	2201      	movs	r2, #1
 80018a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018a8:	4833      	ldr	r0, [pc, #204]	@ (8001978 <PMW3901_init+0xdc>)
 80018aa:	f001 fcef 	bl	800328c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018ae:	200a      	movs	r0, #10
 80018b0:	f001 fa4a 	bl	8002d48 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_CS_GPIO_Port,PIN_CS_Pin,GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ba:	482f      	ldr	r0, [pc, #188]	@ (8001978 <PMW3901_init+0xdc>)
 80018bc:	f001 fce6 	bl	800328c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018c0:	200a      	movs	r0, #10
 80018c2:	f001 fa41 	bl	8002d48 <HAL_Delay>
	HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin,GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018cc:	482a      	ldr	r0, [pc, #168]	@ (8001978 <PMW3901_init+0xdc>)
 80018ce:	f001 fcdd 	bl	800328c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 80018d2:	2028      	movs	r0, #40	@ 0x28
 80018d4:	f001 fa38 	bl	8002d48 <HAL_Delay>

	uint8_t error=0;
 80018d8:	2300      	movs	r3, #0
 80018da:	70fb      	strb	r3, [r7, #3]
	//POWER On RESET
	error = WriteReg(0x3A,0x5A);
 80018dc:	215a      	movs	r1, #90	@ 0x5a
 80018de:	203a      	movs	r0, #58	@ 0x3a
 80018e0:	f000 f854 	bl	800198c <WriteReg>
 80018e4:	4603      	mov	r3, r0
 80018e6:	70fb      	strb	r3, [r7, #3]
	if(error){
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d014      	beq.n	8001918 <PMW3901_init+0x7c>
		while(1){
			sprintf(message,"Write Failed 1");
 80018ee:	4923      	ldr	r1, [pc, #140]	@ (800197c <PMW3901_init+0xe0>)
 80018f0:	4823      	ldr	r0, [pc, #140]	@ (8001980 <PMW3901_init+0xe4>)
 80018f2:	f008 fa0f 	bl	8009d14 <siprintf>
			HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80018f6:	4822      	ldr	r0, [pc, #136]	@ (8001980 <PMW3901_init+0xe4>)
 80018f8:	f7fe fcba 	bl	8000270 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29a      	uxth	r2, r3
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	491e      	ldr	r1, [pc, #120]	@ (8001980 <PMW3901_init+0xe4>)
 8001906:	481f      	ldr	r0, [pc, #124]	@ (8001984 <PMW3901_init+0xe8>)
 8001908:	f004 f8e0 	bl	8005acc <HAL_UART_Transmit>
			HAL_Delay(1000);
 800190c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001910:	f001 fa1a 	bl	8002d48 <HAL_Delay>
			sprintf(message,"Write Failed 1");
 8001914:	bf00      	nop
 8001916:	e7ea      	b.n	80018ee <PMW3901_init+0x52>
		}
		return error;
	}
	HAL_Delay(50);
 8001918:	2032      	movs	r0, #50	@ 0x32
 800191a:	f001 fa15 	bl	8002d48 <HAL_Delay>


	//Read PRODUCT_ID

	uint8_t chipID = 0x49;
 800191e:	2349      	movs	r3, #73	@ 0x49
 8001920:	70bb      	strb	r3, [r7, #2]
	int i=0;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
	while(1){
		chipID = ReadReg(0x00);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f88a 	bl	8001a40 <ReadReg>
 800192c:	4603      	mov	r3, r0
 800192e:	70bb      	strb	r3, [r7, #2]
		if(chipID != 0x49){
 8001930:	78bb      	ldrb	r3, [r7, #2]
 8001932:	2b49      	cmp	r3, #73	@ 0x49
 8001934:	d017      	beq.n	8001966 <PMW3901_init+0xca>
			//while(1){

	        	sprintf(message, "CHIP_ID: %X\tLoop: %d", chipID,i);
 8001936:	78ba      	ldrb	r2, [r7, #2]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4913      	ldr	r1, [pc, #76]	@ (8001988 <PMW3901_init+0xec>)
 800193c:	4810      	ldr	r0, [pc, #64]	@ (8001980 <PMW3901_init+0xe4>)
 800193e:	f008 f9e9 	bl	8009d14 <siprintf>
	        	HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8001942:	480f      	ldr	r0, [pc, #60]	@ (8001980 <PMW3901_init+0xe4>)
 8001944:	f7fe fc94 	bl	8000270 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	b29a      	uxth	r2, r3
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	490b      	ldr	r1, [pc, #44]	@ (8001980 <PMW3901_init+0xe4>)
 8001952:	480c      	ldr	r0, [pc, #48]	@ (8001984 <PMW3901_init+0xe8>)
 8001954:	f004 f8ba 	bl	8005acc <HAL_UART_Transmit>
	        	i++;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
	        	HAL_Delay(500);
 800195e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001962:	f001 f9f1 	bl	8002d48 <HAL_Delay>
			//}
		}
		if(i==60) return 1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b3c      	cmp	r3, #60	@ 0x3c
 800196a:	d1dc      	bne.n	8001926 <PMW3901_init+0x8a>
 800196c:	2301      	movs	r3, #1
	}




}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020400 	.word	0x40020400
 800197c:	0800d71c 	.word	0x0800d71c
 8001980:	200002e4 	.word	0x200002e4
 8001984:	20000588 	.word	0x20000588
 8001988:	0800d72c 	.word	0x0800d72c

0800198c <WriteReg>:

uint8_t WriteReg(uint8_t reg, uint8_t value){
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	4613      	mov	r3, r2
 800199a:	71bb      	strb	r3, [r7, #6]
		uint8_t Error = 0x01;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]

	    // Select the SPI device by pulling CS pin low
	    HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019a6:	4821      	ldr	r0, [pc, #132]	@ (8001a2c <WriteReg+0xa0>)
 80019a8:	f001 fc70 	bl	800328c <HAL_GPIO_WritePin>

	    // Construct the data to be transmitted
	    uint8_t data[2] = {reg | 0x80, value}; // Address byte with write operation
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	733b      	strb	r3, [r7, #12]
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	737b      	strb	r3, [r7, #13]

	    // Transmit data over SPI
	    Error = HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 80019ba:	f107 010c 	add.w	r1, r7, #12
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	2202      	movs	r2, #2
 80019c4:	481a      	ldr	r0, [pc, #104]	@ (8001a30 <WriteReg+0xa4>)
 80019c6:	f003 f9c0 	bl	8004d4a <HAL_SPI_Transmit>
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]

	    HAL_Delay(5);
 80019ce:	2005      	movs	r0, #5
 80019d0:	f001 f9ba 	bl	8002d48 <HAL_Delay>
	    // Check for transmission error
	    if (Error != HAL_OK) {
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d01c      	beq.n	8001a14 <WriteReg+0x88>
	        // SPI transmission failed
	        HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_SET); // Deselect SPI device
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e0:	4812      	ldr	r0, [pc, #72]	@ (8001a2c <WriteReg+0xa0>)
 80019e2:	f001 fc53 	bl	800328c <HAL_GPIO_WritePin>
	        // Handle error or log message
	        while(1){
	        	sprintf(message, "Write Failed: %d", Error);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4912      	ldr	r1, [pc, #72]	@ (8001a34 <WriteReg+0xa8>)
 80019ec:	4812      	ldr	r0, [pc, #72]	@ (8001a38 <WriteReg+0xac>)
 80019ee:	f008 f991 	bl	8009d14 <siprintf>
	        	HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 80019f2:	4811      	ldr	r0, [pc, #68]	@ (8001a38 <WriteReg+0xac>)
 80019f4:	f7fe fc3c 	bl	8000270 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	490d      	ldr	r1, [pc, #52]	@ (8001a38 <WriteReg+0xac>)
 8001a02:	480e      	ldr	r0, [pc, #56]	@ (8001a3c <WriteReg+0xb0>)
 8001a04:	f004 f862 	bl	8005acc <HAL_UART_Transmit>
	        	HAL_Delay(1000);
 8001a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a0c:	f001 f99c 	bl	8002d48 <HAL_Delay>
	        	sprintf(message, "Write Failed: %d", Error);
 8001a10:	bf00      	nop
 8001a12:	e7e8      	b.n	80019e6 <WriteReg+0x5a>

	        return 1;
	    }

	    // Deselect the SPI device by pulling CS pin high
	    HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a1a:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <WriteReg+0xa0>)
 8001a1c:	f001 fc36 	bl	800328c <HAL_GPIO_WritePin>

	    return 0; // Success
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	200004e4 	.word	0x200004e4
 8001a34:	0800d744 	.word	0x0800d744
 8001a38:	200002e4 	.word	0x200002e4
 8001a3c:	20000588 	.word	0x20000588

08001a40 <ReadReg>:

uint8_t ReadReg(uint8_t reg){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	@ 0x28
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
		uint8_t txData = reg & 0x7f; // Set MSB to 0 for read operation
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	77bb      	strb	r3, [r7, #30]
		uint8_t rxData ;
	    uint8_t dummy[16] = {0x00};
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
	    uint8_t Error = 0x01;
 8001a64:	2301      	movs	r3, #1
 8001a66:	77fb      	strb	r3, [r7, #31]

	    // Select the SPI device by pulling CS pin low
	    HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a6e:	481f      	ldr	r0, [pc, #124]	@ (8001aec <ReadReg+0xac>)
 8001a70:	f001 fc0c 	bl	800328c <HAL_GPIO_WritePin>
	    HAL_Delay(5);
 8001a74:	2005      	movs	r0, #5
 8001a76:	f001 f967 	bl	8002d48 <HAL_Delay>


	    Error = HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, HAL_MAX_DELAY);
 8001a7a:	f107 021d 	add.w	r2, r7, #29
 8001a7e:	f107 011e 	add.w	r1, r7, #30
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	4819      	ldr	r0, [pc, #100]	@ (8001af0 <ReadReg+0xb0>)
 8001a8c:	f003 faa0 	bl	8004fd0 <HAL_SPI_TransmitReceive>
 8001a90:	4603      	mov	r3, r0
 8001a92:	77fb      	strb	r3, [r7, #31]
	    if (Error != HAL_OK) {
 8001a94:	7ffb      	ldrb	r3, [r7, #31]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01c      	beq.n	8001ad4 <ReadReg+0x94>
	        // SPI reception failed
	        HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_SET); // Deselect SPI device
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aa0:	4812      	ldr	r0, [pc, #72]	@ (8001aec <ReadReg+0xac>)
 8001aa2:	f001 fbf3 	bl	800328c <HAL_GPIO_WritePin>
	        while(1){
	        	sprintf(message, "Read Failed: Receive : %d", Error);
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4912      	ldr	r1, [pc, #72]	@ (8001af4 <ReadReg+0xb4>)
 8001aac:	4812      	ldr	r0, [pc, #72]	@ (8001af8 <ReadReg+0xb8>)
 8001aae:	f008 f931 	bl	8009d14 <siprintf>
	        	HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 8001ab2:	4811      	ldr	r0, [pc, #68]	@ (8001af8 <ReadReg+0xb8>)
 8001ab4:	f7fe fbdc 	bl	8000270 <strlen>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	490d      	ldr	r1, [pc, #52]	@ (8001af8 <ReadReg+0xb8>)
 8001ac2:	480e      	ldr	r0, [pc, #56]	@ (8001afc <ReadReg+0xbc>)
 8001ac4:	f004 f802 	bl	8005acc <HAL_UART_Transmit>
	        	HAL_Delay(1000);
 8001ac8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001acc:	f001 f93c 	bl	8002d48 <HAL_Delay>
	        	sprintf(message, "Read Failed: Receive : %d", Error);
 8001ad0:	bf00      	nop
 8001ad2:	e7e8      	b.n	8001aa6 <ReadReg+0x66>
	        }
	        return 0xff;
	    }

	    // Deselect the SPI device by pulling CS pin high
	    HAL_GPIO_WritePin(PIN_CS_GPIO_Port, PIN_CS_Pin, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ada:	4804      	ldr	r0, [pc, #16]	@ (8001aec <ReadReg+0xac>)
 8001adc:	f001 fbd6 	bl	800328c <HAL_GPIO_WritePin>

	    return rxData;
 8001ae0:	7f7b      	ldrb	r3, [r7, #29]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40020400 	.word	0x40020400
 8001af0:	200004e4 	.word	0x200004e4
 8001af4:	0800d758 	.word	0x0800d758
 8001af8:	200002e4 	.word	0x200002e4
 8001afc:	20000588 	.word	0x20000588

08001b00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b06:	4a18      	ldr	r2, [pc, #96]	@ (8001b68 <MX_SPI1_Init+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b4c:	220a      	movs	r2, #10
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <MX_SPI1_Init+0x64>)
 8001b52:	f003 f871 	bl	8004c38 <HAL_SPI_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b5c:	f7ff fe98 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200004e4 	.word	0x200004e4
 8001b68:	40013000 	.word	0x40013000

08001b6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <HAL_SPI_MspInit+0x84>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12b      	bne.n	8001be6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	4a17      	ldr	r2, [pc, #92]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001b98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	4a10      	ldr	r2, [pc, #64]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_SPI_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bc6:	23e0      	movs	r3, #224	@ 0xe0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <HAL_SPI_MspInit+0x8c>)
 8001be2:	f001 f9b7 	bl	8002f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	@ 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40013000 	.word	0x40013000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a11      	ldr	r2, [pc, #68]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c12:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	f06f 0001 	mvn.w	r0, #1
 8001c42:	f001 f95d 	bl	8002f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08e      	sub	sp, #56	@ 0x38
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	4b33      	ldr	r3, [pc, #204]	@ (8001d38 <HAL_InitTick+0xe4>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	4a32      	ldr	r2, [pc, #200]	@ (8001d38 <HAL_InitTick+0xe4>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c74:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <HAL_InitTick+0xe4>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c80:	f107 0210 	add.w	r2, r7, #16
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 ffa2 	bl	8004bd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c9a:	f002 ff73 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8001c9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ca0:	e004      	b.n	8001cac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ca2:	f002 ff6f 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cae:	4a23      	ldr	r2, [pc, #140]	@ (8001d3c <HAL_InitTick+0xe8>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	0c9b      	lsrs	r3, r3, #18
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001cba:	4b21      	ldr	r3, [pc, #132]	@ (8001d40 <HAL_InitTick+0xec>)
 8001cbc:	4a21      	ldr	r2, [pc, #132]	@ (8001d44 <HAL_InitTick+0xf0>)
 8001cbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <HAL_InitTick+0xec>)
 8001cc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cc6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d40 <HAL_InitTick+0xec>)
 8001cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ccc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <HAL_InitTick+0xec>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <HAL_InitTick+0xec>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <HAL_InitTick+0xec>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001ce0:	4817      	ldr	r0, [pc, #92]	@ (8001d40 <HAL_InitTick+0xec>)
 8001ce2:	f003 fc01 	bl	80054e8 <HAL_TIM_Base_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001cec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11b      	bne.n	8001d2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001cf4:	4812      	ldr	r0, [pc, #72]	@ (8001d40 <HAL_InitTick+0xec>)
 8001cf6:	f003 fc51 	bl	800559c <HAL_TIM_Base_Start_IT>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d111      	bne.n	8001d2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d08:	201e      	movs	r0, #30
 8001d0a:	f001 f915 	bl	8002f38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d808      	bhi.n	8001d26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	201e      	movs	r0, #30
 8001d1a:	f001 f8f1 	bl	8002f00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_InitTick+0xf4>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e002      	b.n	8001d2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3738      	adds	r7, #56	@ 0x38
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	431bde83 	.word	0x431bde83
 8001d40:	2000053c 	.word	0x2000053c
 8001d44:	40000800 	.word	0x40000800
 8001d48:	20000028 	.word	0x20000028

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <NMI_Handler+0x4>

08001d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <HardFault_Handler+0x4>

08001d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <MemManage_Handler+0x4>

08001d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d88:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <TIM4_IRQHandler+0x10>)
 8001d8a:	f003 fc77 	bl	800567c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000053c 	.word	0x2000053c

08001d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return 1;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_kill>:

int _kill(int pid, int sig)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db2:	f008 f8f9 	bl	8009fa8 <__errno>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2216      	movs	r2, #22
 8001dba:	601a      	str	r2, [r3, #0]
  return -1;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_exit>:

void _exit (int status)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ffe7 	bl	8001da8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dda:	bf00      	nop
 8001ddc:	e7fd      	b.n	8001dda <_exit+0x12>

08001dde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e00a      	b.n	8001e06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df0:	f3af 8000 	nop.w
 8001df4:	4601      	mov	r1, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	60ba      	str	r2, [r7, #8]
 8001dfc:	b2ca      	uxtb	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbf0      	blt.n	8001df0 <_read+0x12>
  }

  return len;
 8001e0e:	687b      	ldr	r3, [r7, #4]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e009      	b.n	8001e3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	60ba      	str	r2, [r7, #8]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f90e 	bl	8001054 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dbf1      	blt.n	8001e2a <_write+0x12>
  }
  return len;
 8001e46:	687b      	ldr	r3, [r7, #4]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_close>:

int _close(int file)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e78:	605a      	str	r2, [r3, #4]
  return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_isatty>:

int _isatty(int file)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec0:	4a14      	ldr	r2, [pc, #80]	@ (8001f14 <_sbrk+0x5c>)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <_sbrk+0x60>)
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <_sbrk+0x64>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <_sbrk+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d207      	bcs.n	8001ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee8:	f008 f85e 	bl	8009fa8 <__errno>
 8001eec:	4603      	mov	r3, r0
 8001eee:	220c      	movs	r2, #12
 8001ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	e009      	b.n	8001f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <_sbrk+0x64>)
 8001f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20020000 	.word	0x20020000
 8001f18:	00000400 	.word	0x00000400
 8001f1c:	20000584 	.word	0x20000584
 8001f20:	20005280 	.word	0x20005280

08001f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <SystemInit+0x20>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2e:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <SystemInit+0x20>)
 8001f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <MX_USART1_UART_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f52:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_USART1_UART_Init+0x4c>)
 8001f80:	f003 fd54 	bl	8005a2c <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f7ff fc81 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000588 	.word	0x20000588
 8001f98:	40011000 	.word	0x40011000

08001f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	@ 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_UART_MspInit+0x84>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12c      	bne.n	8002018 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ff6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002008:	2307      	movs	r3, #7
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4805      	ldr	r0, [pc, #20]	@ (8002028 <HAL_UART_MspInit+0x8c>)
 8002014:	f000 ff9e 	bl	8002f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40011000 	.word	0x40011000
 8002024:	40023800 	.word	0x40023800
 8002028:	40020000 	.word	0x40020000

0800202c <VL53L1_RdByte>:

extern I2C_HandleTypeDef VL53L1__PORT;

uint8_t amessage[521] = {'\0'};
uint8_t ret;
int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af04      	add	r7, sp, #16
 8002032:	4603      	mov	r3, r0
 8002034:	603a      	str	r2, [r7, #0]
 8002036:	80fb      	strh	r3, [r7, #6]
 8002038:	460b      	mov	r3, r1
 800203a:	80bb      	strh	r3, [r7, #4]
	HAL_Delay(100);
 800203c:	2064      	movs	r0, #100	@ 0x64
 800203e:	f000 fe83 	bl	8002d48 <HAL_Delay>
	ret = HAL_I2C_Mem_Read(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, data, 1, I2C_COMM_TIMEOUT);
 8002042:	88ba      	ldrh	r2, [r7, #4]
 8002044:	88f9      	ldrh	r1, [r7, #6]
 8002046:	2314      	movs	r3, #20
 8002048:	9302      	str	r3, [sp, #8]
 800204a:	2301      	movs	r3, #1
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2310      	movs	r3, #16
 8002054:	482d      	ldr	r0, [pc, #180]	@ (800210c <VL53L1_RdByte+0xe0>)
 8002056:	f001 fb71 	bl	800373c <HAL_I2C_Mem_Read>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	4b2c      	ldr	r3, [pc, #176]	@ (8002110 <VL53L1_RdByte+0xe4>)
 8002060:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK) {
 8002062:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <VL53L1_RdByte+0xe4>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d04a      	beq.n	8002100 <VL53L1_RdByte+0xd4>
	        // 处理错误
	        if (ret == HAL_ERROR) {
 800206a:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <VL53L1_RdByte+0xe4>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d114      	bne.n	800209c <VL53L1_RdByte+0x70>
	        			  while(1){
	        				  sprintf(amessage,"I2C Error");
 8002072:	4928      	ldr	r1, [pc, #160]	@ (8002114 <VL53L1_RdByte+0xe8>)
 8002074:	4828      	ldr	r0, [pc, #160]	@ (8002118 <VL53L1_RdByte+0xec>)
 8002076:	f007 fe4d 	bl	8009d14 <siprintf>
	        				  HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 800207a:	4827      	ldr	r0, [pc, #156]	@ (8002118 <VL53L1_RdByte+0xec>)
 800207c:	f7fe f8f8 	bl	8000270 <strlen>
 8002080:	4603      	mov	r3, r0
 8002082:	b29a      	uxth	r2, r3
 8002084:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002088:	4923      	ldr	r1, [pc, #140]	@ (8002118 <VL53L1_RdByte+0xec>)
 800208a:	4824      	ldr	r0, [pc, #144]	@ (800211c <VL53L1_RdByte+0xf0>)
 800208c:	f003 fd1e 	bl	8005acc <HAL_UART_Transmit>
	        				  HAL_Delay(1000);
 8002090:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002094:	f000 fe58 	bl	8002d48 <HAL_Delay>
	        				  sprintf(amessage,"I2C Error");
 8002098:	bf00      	nop
 800209a:	e7ea      	b.n	8002072 <VL53L1_RdByte+0x46>
	        			  }
	            // 错误处理
	            //printf("I2C Error\n");
	        } else if (ret == HAL_BUSY) {
 800209c:	4b1c      	ldr	r3, [pc, #112]	@ (8002110 <VL53L1_RdByte+0xe4>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d114      	bne.n	80020ce <VL53L1_RdByte+0xa2>
  			  while(1){
  				  sprintf(amessage,"I2C Busy");
 80020a4:	491e      	ldr	r1, [pc, #120]	@ (8002120 <VL53L1_RdByte+0xf4>)
 80020a6:	481c      	ldr	r0, [pc, #112]	@ (8002118 <VL53L1_RdByte+0xec>)
 80020a8:	f007 fe34 	bl	8009d14 <siprintf>
  				  HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 80020ac:	481a      	ldr	r0, [pc, #104]	@ (8002118 <VL53L1_RdByte+0xec>)
 80020ae:	f7fe f8df 	bl	8000270 <strlen>
 80020b2:	4603      	mov	r3, r0
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ba:	4917      	ldr	r1, [pc, #92]	@ (8002118 <VL53L1_RdByte+0xec>)
 80020bc:	4817      	ldr	r0, [pc, #92]	@ (800211c <VL53L1_RdByte+0xf0>)
 80020be:	f003 fd05 	bl	8005acc <HAL_UART_Transmit>
  				  HAL_Delay(1000);
 80020c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020c6:	f000 fe3f 	bl	8002d48 <HAL_Delay>
  				  sprintf(amessage,"I2C Busy");
 80020ca:	bf00      	nop
 80020cc:	e7ea      	b.n	80020a4 <VL53L1_RdByte+0x78>
  			  }
	            // 处理忙状态
	            //printf("I2C Busy\n");
	        } else if (ret == HAL_TIMEOUT) {
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <VL53L1_RdByte+0xe4>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d116      	bne.n	8002104 <VL53L1_RdByte+0xd8>
  			  while(1){
  				  sprintf(amessage,"I2C Timeout");
 80020d6:	4913      	ldr	r1, [pc, #76]	@ (8002124 <VL53L1_RdByte+0xf8>)
 80020d8:	480f      	ldr	r0, [pc, #60]	@ (8002118 <VL53L1_RdByte+0xec>)
 80020da:	f007 fe1b 	bl	8009d14 <siprintf>
  				  HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 80020de:	480e      	ldr	r0, [pc, #56]	@ (8002118 <VL53L1_RdByte+0xec>)
 80020e0:	f7fe f8c6 	bl	8000270 <strlen>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ec:	490a      	ldr	r1, [pc, #40]	@ (8002118 <VL53L1_RdByte+0xec>)
 80020ee:	480b      	ldr	r0, [pc, #44]	@ (800211c <VL53L1_RdByte+0xf0>)
 80020f0:	f003 fcec 	bl	8005acc <HAL_UART_Transmit>
  				  HAL_Delay(1000);
 80020f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020f8:	f000 fe26 	bl	8002d48 <HAL_Delay>
  				  sprintf(amessage,"I2C Timeout");
 80020fc:	bf00      	nop
 80020fe:	e7ea      	b.n	80020d6 <VL53L1_RdByte+0xaa>
//		  }
//		return VL53L1__IO_ERROR;
//	}

	else
		return 0;
 8002100:	2300      	movs	r3, #0
 8002102:	e7ff      	b.n	8002104 <VL53L1_RdByte+0xd8>
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2000028c 	.word	0x2000028c
 8002110:	200007d9 	.word	0x200007d9
 8002114:	0800d774 	.word	0x0800d774
 8002118:	200005d0 	.word	0x200005d0
 800211c:	20000588 	.word	0x20000588
 8002120:	0800d780 	.word	0x0800d780
 8002124:	0800d78c 	.word	0x0800d78c

08002128 <VL53L1_WrByte>:
		return VL53L1__IO_ERROR;
	else
		return 0;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af04      	add	r7, sp, #16
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
 8002132:	460b      	mov	r3, r1
 8002134:	80bb      	strh	r3, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Mem_Write(&VL53L1__PORT, dev, index, I2C_MEMADD_SIZE_16BIT, &data, 1, I2C_COMM_TIMEOUT))
 800213a:	88ba      	ldrh	r2, [r7, #4]
 800213c:	88f9      	ldrh	r1, [r7, #6]
 800213e:	2314      	movs	r3, #20
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	2301      	movs	r3, #1
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	1cfb      	adds	r3, r7, #3
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2310      	movs	r3, #16
 800214c:	4806      	ldr	r0, [pc, #24]	@ (8002168 <VL53L1_WrByte+0x40>)
 800214e:	f001 f9fb 	bl	8003548 <HAL_I2C_Mem_Write>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <VL53L1_WrByte+0x36>
		return VL53L1__IO_ERROR;
 8002158:	f06f 030c 	mvn.w	r3, #12
 800215c:	e000      	b.n	8002160 <VL53L1_WrByte+0x38>
	else
		return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000028c 	.word	0x2000028c

0800216c <VL53L1__Xshut>:
 * @brief 		set the VL53L1 Xshutdown pin
 * 				waiting for a complete boot sequence
 * @param 	1	VL53L1 enabled, wait for boot
 * 			0	VL53L1 disabled
 ****************************************************/
uint8_t VL53L1__Xshut(uint8_t level){
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
	uint8_t sensorStatus =0;
 8002176:	2300      	movs	r3, #0
 8002178:	73bb      	strb	r3, [r7, #14]
	uint8_t status =0;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, level);
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	461a      	mov	r2, r3
 8002182:	2101      	movs	r1, #1
 8002184:	4810      	ldr	r0, [pc, #64]	@ (80021c8 <VL53L1__Xshut+0x5c>)
 8002186:	f001 f881 	bl	800328c <HAL_GPIO_WritePin>
	if (level) {
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <VL53L1__Xshut+0x50>
		while (!(sensorStatus & 0x01)) {
 8002190:	e00f      	b.n	80021b2 <VL53L1__Xshut+0x46>
			HAL_Delay(2);
 8002192:	2002      	movs	r0, #2
 8002194:	f000 fdd8 	bl	8002d48 <HAL_Delay>
			status |= VL53L1X_BootState(VL53L1__ADDR, &sensorStatus);
 8002198:	f107 030e 	add.w	r3, r7, #14
 800219c:	4619      	mov	r1, r3
 800219e:	2052      	movs	r0, #82	@ 0x52
 80021a0:	f7fe ff38 	bl	8001014 <VL53L1X_BootState>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	73fb      	strb	r3, [r7, #15]
		while (!(sensorStatus & 0x01)) {
 80021b2:	7bbb      	ldrb	r3, [r7, #14]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ea      	beq.n	8002192 <VL53L1__Xshut+0x26>
		}
	}
	return (status);
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020400 	.word	0x40020400

080021cc <VL53L1__Init>:
 * 				test VL53L1 presence, initialize the sensor, and
 * 				set it the default Distance Mode, Timing Budget
 * 				and Intermeasurement time
 * @return:	0	if no errors detected in setting up VL53L1X
 ************************************************************/
uint8_t VL53L1__Init(){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
	uint8_t refRegs[4] = {0,0,0,0};
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
	uint8_t status =0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	71fb      	strb	r3, [r7, #7]

	// Enable VL53L1 sensor waiting for a complete boot sequence
#ifdef	VL53L1__USING_XSHUT
	status |= VL53L1__Xshut(1);
 80021da:	2001      	movs	r0, #1
 80021dc:	f7ff ffc6 	bl	800216c <VL53L1__Xshut>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	71fb      	strb	r3, [r7, #7]
	if (status){
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d014      	beq.n	800221a <VL53L1__Init+0x4e>
		  while(1){
			  sprintf(amessage,"Xshut failed");
 80021f0:	490c      	ldr	r1, [pc, #48]	@ (8002224 <VL53L1__Init+0x58>)
 80021f2:	480d      	ldr	r0, [pc, #52]	@ (8002228 <VL53L1__Init+0x5c>)
 80021f4:	f007 fd8e 	bl	8009d14 <siprintf>
			  HAL_UART_Transmit(&huart1, amessage, strlen(amessage), 1000);
 80021f8:	480b      	ldr	r0, [pc, #44]	@ (8002228 <VL53L1__Init+0x5c>)
 80021fa:	f7fe f839 	bl	8000270 <strlen>
 80021fe:	4603      	mov	r3, r0
 8002200:	b29a      	uxth	r2, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002206:	4908      	ldr	r1, [pc, #32]	@ (8002228 <VL53L1__Init+0x5c>)
 8002208:	4808      	ldr	r0, [pc, #32]	@ (800222c <VL53L1__Init+0x60>)
 800220a:	f003 fc5f 	bl	8005acc <HAL_UART_Transmit>
			  HAL_Delay(1000);
 800220e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002212:	f000 fd99 	bl	8002d48 <HAL_Delay>
			  sprintf(amessage,"Xshut failed");
 8002216:	bf00      	nop
 8002218:	e7ea      	b.n	80021f0 <VL53L1__Init+0x24>
		  }
	}
		return (status);
 800221a:	79fb      	ldrb	r3, [r7, #7]
	status |= VL53L1X_SetTimingBudgetInMs(VL53L1__ADDR, VL53L1__TIMING_BUDGET);
	status |= VL53L1X_SetInterMeasurementInMs(VL53L1__ADDR, VL53L1__INTERMEASUREMENT);
	status |= VL53L1X_SetDistanceThreshold(VL53L1__ADDR,VL53L1__LOWER_THRESHOLD, VL53L1__UPPER_THRESHOLD, VL53L1__WINDOW_MODE, 0);

	return (status);
};
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	0800d798 	.word	0x0800d798
 8002228:	200005d0 	.word	0x200005d0
 800222c:	20000588 	.word	0x20000588

08002230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002268 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002234:	f7ff fe76 	bl	8001f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002238:	480c      	ldr	r0, [pc, #48]	@ (800226c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800223a:	490d      	ldr	r1, [pc, #52]	@ (8002270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800223c:	4a0d      	ldr	r2, [pc, #52]	@ (8002274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002240:	e002      	b.n	8002248 <LoopCopyDataInit>

08002242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002246:	3304      	adds	r3, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800224c:	d3f9      	bcc.n	8002242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224e:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002250:	4c0a      	ldr	r4, [pc, #40]	@ (800227c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002254:	e001      	b.n	800225a <LoopFillZerobss>

08002256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002258:	3204      	adds	r2, #4

0800225a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800225c:	d3fb      	bcc.n	8002256 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800225e:	f007 fea9 	bl	8009fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002262:	f7ff fa55 	bl	8001710 <main>
  bx  lr    
 8002266:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800226c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002270:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002274:	0800dc98 	.word	0x0800dc98
  ldr r2, =_sbss
 8002278:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800227c:	2000527c 	.word	0x2000527c

08002280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC_IRQHandler>

08002282 <bmi088_init>:
 *  @brief This API is the entry point for bmi088 sensors.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel & gyro sensors.
 */
int8_t bmi088_init(struct bmi08x_dev *dev)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Initialize bmi088 accel sensor */
    rslt = bmi08a_init(dev);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f811 	bl	80022b2 <bmi08a_init>
 8002290:	4603      	mov	r3, r0
 8002292:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8002294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d104      	bne.n	80022a6 <bmi088_init+0x24>
    {
        /* Initialize bmi088 gyro sensor */
        rslt = bmi08g_init(dev);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fb2b 	bl	80028f8 <bmi08g_init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08x_dev *dev)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fa65 	bl	800278e <null_ptr_check>
 80022c4:	4603      	mov	r3, r0
 80022c6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80022c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d12d      	bne.n	800232c <bmi08a_init+0x7a>
    {
        if (dev->intf == BMI08X_SPI_INTF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	791b      	ldrb	r3, [r3, #4]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10c      	bne.n	80022f2 <bmi08a_init+0x40>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08X_ENABLE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	715a      	strb	r2, [r3, #5]

            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08X_ACCEL_CHIP_ID_REG, &chip_id, 1, dev);
 80022de:	f107 010e 	add.w	r1, r7, #14
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	2000      	movs	r0, #0
 80022e8:	f000 fa71 	bl	80027ce <get_regs>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e002      	b.n	80022f8 <bmi08a_init+0x46>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08X_DISABLE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	715a      	strb	r2, [r3, #5]
        }
        if (rslt == BMI08X_OK)
 80022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d115      	bne.n	800232c <bmi08a_init+0x7a>
        {
            rslt = get_regs(BMI08X_ACCEL_CHIP_ID_REG, &chip_id, 1, dev);
 8002300:	f107 010e 	add.w	r1, r7, #14
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	2000      	movs	r0, #0
 800230a:	f000 fa60 	bl	80027ce <get_regs>
 800230e:	4603      	mov	r3, r0
 8002310:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <bmi08a_init+0x7a>
            {
                /* Check for chip id validity */
                if (chip_id == BMI08X_ACCEL_CHIP_ID)
 800231a:	7bbb      	ldrb	r3, [r7, #14]
 800231c:	2b1e      	cmp	r3, #30
 800231e:	d103      	bne.n	8002328 <bmi08a_init+0x76>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8002320:	7bba      	ldrb	r2, [r7, #14]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e001      	b.n	800232c <bmi08a_init+0x7a>
                }
                else
                {
                    rslt = BMI08X_E_DEV_NOT_FOUND;
 8002328:	23fd      	movs	r3, #253	@ 0xfd
 800232a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800232c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	4613      	mov	r3, r2
 8002348:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa1f 	bl	800278e <null_ptr_check>
 8002350:	4603      	mov	r3, r0
 8002352:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8002354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <bmi08a_get_regs+0x48>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00e      	beq.n	8002380 <bmi08a_get_regs+0x48>
    {
        if (len > 0)
 8002362:	89bb      	ldrh	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <bmi08a_get_regs+0x42>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8002368:	89ba      	ldrh	r2, [r7, #12]
 800236a:	7bf8      	ldrb	r0, [r7, #15]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	f000 fa2d 	bl	80027ce <get_regs>
 8002374:	4603      	mov	r3, r0
 8002376:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8002378:	e004      	b.n	8002384 <bmi08a_get_regs+0x4c>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 800237a:	23f9      	movs	r3, #249	@ 0xf9
 800237c:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800237e:	e001      	b.n	8002384 <bmi08a_get_regs+0x4c>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8002380:	23ff      	movs	r3, #255	@ 0xff
 8002382:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002384:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <bmi08a_soft_reset>:

/*!
 *  @brief This API resets the accel sensor.
 */
int8_t bmi08a_soft_reset(const struct bmi08x_dev *dev)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f9f8 	bl	800278e <null_ptr_check>
 800239e:	4603      	mov	r3, r0
 80023a0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11f      	bne.n	80023ea <bmi08a_soft_reset+0x5a>
    {
        data = BMI08X_SOFT_RESET_CMD;
 80023aa:	23b6      	movs	r3, #182	@ 0xb6
 80023ac:	73bb      	strb	r3, [r7, #14]

        /* Reset accel device */
        rslt = set_regs(BMI08X_ACCEL_SOFTRESET_REG, &data, 1, dev);
 80023ae:	f107 010e 	add.w	r1, r7, #14
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	207e      	movs	r0, #126	@ 0x7e
 80023b8:	f000 fa77 	bl	80028aa <set_regs>
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 80023c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d110      	bne.n	80023ea <bmi08a_soft_reset+0x5a>
        {
            /* Delay 1 ms after reset value is written to its register */
            dev->delay_ms(BMI08X_ACCEL_SOFTRESET_DELAY_MS);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	2001      	movs	r0, #1
 80023ce:	4798      	blx	r3

            /* After soft reset SPI mode in the initialization phase, need to  perform a dummy SPI read
             * operation, The soft-reset performs a fundamental reset to the device,
             * which is largely equivalent to a power cycle. */
            if (dev->intf == BMI08X_SPI_INTF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	791b      	ldrb	r3, [r3, #4]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d108      	bne.n	80023ea <bmi08a_soft_reset+0x5a>
            {
                /* Dummy SPI read operation of Chip-ID */
                rslt = get_regs(BMI08X_ACCEL_CHIP_ID_REG, &data, 1, dev);
 80023d8:	f107 010e 	add.w	r1, r7, #14
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 f9f4 	bl	80027ce <get_regs>
 80023e6:	4603      	mov	r3, r0
 80023e8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <bmi08a_get_meas_conf>:
 * @brief This API reads the accel config value i.e. odr, band width and range from the sensor,
 * store it in the bmi08x_dev structure instance passed by the user.
 *
 */
int8_t bmi08a_get_meas_conf(struct bmi08x_dev *dev)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2];

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f9c5 	bl	800278e <null_ptr_check>
 8002404:	4603      	mov	r3, r0
 8002406:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8002408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d120      	bne.n	8002452 <bmi08a_get_meas_conf+0x5c>
    {
        rslt = get_regs(BMI08X_ACCEL_CONF_REG, data, 2, dev);
 8002410:	f107 010c 	add.w	r1, r7, #12
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	2040      	movs	r0, #64	@ 0x40
 800241a:	f000 f9d8 	bl	80027ce <get_regs>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d113      	bne.n	8002452 <bmi08a_get_meas_conf+0x5c>
        {
            dev->accel_cfg.odr = data[0] & BMI08X_ACCEL_ODR_MASK;
 800242a:	7b3b      	ldrb	r3, [r7, #12]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	725a      	strb	r2, [r3, #9]
            dev->accel_cfg.bw = (data[0] & BMI08X_ACCEL_BW_MASK) >> 4;
 8002436:	7b3b      	ldrb	r3, [r7, #12]
 8002438:	111b      	asrs	r3, r3, #4
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	b2da      	uxtb	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	721a      	strb	r2, [r3, #8]
            dev->accel_cfg.range = data[1] & BMI08X_ACCEL_RANGE_MASK;
 8002446:	7b7b      	ldrb	r3, [r7, #13]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	b2da      	uxtb	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	71da      	strb	r2, [r3, #7]
        }
    }

    return rslt;
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(const struct bmi08x_dev *dev)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8002466:	2300      	movs	r3, #0
 8002468:	81bb      	strh	r3, [r7, #12]
    uint8_t bw, range, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE, is_range_invalid = FALSE;
 800246a:	2300      	movs	r3, #0
 800246c:	75bb      	strb	r3, [r7, #22]
 800246e:	2300      	movs	r3, #0
 8002470:	757b      	strb	r3, [r7, #21]
 8002472:	2300      	movs	r3, #0
 8002474:	753b      	strb	r3, [r7, #20]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f989 	bl	800278e <null_ptr_check>
 800247c:	4603      	mov	r3, r0
 800247e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8002480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d167      	bne.n	8002558 <bmi08a_set_meas_conf+0xfa>
    {
        odr = dev->accel_cfg.odr;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7a5b      	ldrb	r3, [r3, #9]
 800248c:	74fb      	strb	r3, [r7, #19]
        bw = dev->accel_cfg.bw;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7a1b      	ldrb	r3, [r3, #8]
 8002492:	74bb      	strb	r3, [r7, #18]
        range = dev->accel_cfg.range;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	79db      	ldrb	r3, [r3, #7]
 8002498:	747b      	strb	r3, [r7, #17]

        /* Check for valid ODR */
        if ((odr < BMI08X_ACCEL_ODR_12_5_HZ) || (odr > BMI08X_ACCEL_ODR_1600_HZ))
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d902      	bls.n	80024a6 <bmi08a_set_meas_conf+0x48>
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d901      	bls.n	80024aa <bmi08a_set_meas_conf+0x4c>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75bb      	strb	r3, [r7, #22]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08X_ACCEL_BW_NORMAL)
 80024aa:	7cbb      	ldrb	r3, [r7, #18]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <bmi08a_set_meas_conf+0x56>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 80024b0:	2301      	movs	r3, #1
 80024b2:	757b      	strb	r3, [r7, #21]
        }

#elif BMI08X_FEATURE_BMI088 == 1

        /* Check for valid Range */
        if (range > BMI088_ACCEL_RANGE_24G)
 80024b4:	7c7b      	ldrb	r3, [r7, #17]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d901      	bls.n	80024be <bmi08a_set_meas_conf+0x60>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	753b      	strb	r3, [r7, #20]
        }

#endif

        /* If ODR, BW and Range are valid, write it to accel config. registers */
        if ((!is_odr_invalid) && (!is_bw_invalid) && (!is_range_invalid))
 80024be:	7dbb      	ldrb	r3, [r7, #22]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d147      	bne.n	8002554 <bmi08a_set_meas_conf+0xf6>
 80024c4:	7d7b      	ldrb	r3, [r7, #21]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d144      	bne.n	8002554 <bmi08a_set_meas_conf+0xf6>
 80024ca:	7d3b      	ldrb	r3, [r7, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d141      	bne.n	8002554 <bmi08a_set_meas_conf+0xf6>
        {
            /* Read accel config. register */
            rslt = get_regs(BMI08X_ACCEL_CONF_REG, data, 2, dev);
 80024d0:	f107 010c 	add.w	r1, r7, #12
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	2040      	movs	r0, #64	@ 0x40
 80024da:	f000 f978 	bl	80027ce <get_regs>
 80024de:	4603      	mov	r3, r0
 80024e0:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 80024e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d136      	bne.n	8002558 <bmi08a_set_meas_conf+0xfa>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_ACCEL_ODR, odr);
 80024ea:	7b3b      	ldrb	r3, [r7, #12]
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	f023 030f 	bic.w	r3, r3, #15
 80024f2:	b25a      	sxtb	r2, r3
 80024f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b25b      	sxtb	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	733b      	strb	r3, [r7, #12]
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_ACCEL_BW, bw);
 8002506:	7b3b      	ldrb	r3, [r7, #12]
 8002508:	b25b      	sxtb	r3, r3
 800250a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800250e:	b25a      	sxtb	r2, r3
 8002510:	7cbb      	ldrb	r3, [r7, #18]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	b25b      	sxtb	r3, r3
 8002516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800251a:	b25b      	sxtb	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b25b      	sxtb	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	733b      	strb	r3, [r7, #12]

                /* Update data with current range values */
                data[1] = BMI08X_SET_BITS_POS_0(data[1], BMI08X_ACCEL_RANGE, range);
 8002524:	7b7b      	ldrb	r3, [r7, #13]
 8002526:	b25b      	sxtb	r3, r3
 8002528:	f023 0303 	bic.w	r3, r3, #3
 800252c:	b25a      	sxtb	r2, r3
 800252e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	b25b      	sxtb	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	b25b      	sxtb	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	737b      	strb	r3, [r7, #13]

                /* write to range register */
                rslt = set_regs(BMI08X_ACCEL_CONF_REG, data, 2, dev);
 8002540:	f107 010c 	add.w	r1, r7, #12
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	2040      	movs	r0, #64	@ 0x40
 800254a:	f000 f9ae 	bl	80028aa <set_regs>
 800254e:	4603      	mov	r3, r0
 8002550:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8002552:	e001      	b.n	8002558 <bmi08a_set_meas_conf+0xfa>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8002554:	23f8      	movs	r3, #248	@ 0xf8
 8002556:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8002558:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <bmi08a_get_power_mode>:
/*!
 * @brief This API reads the accel power mode from the sensor, store it in the bmi08x_dev structure
 * instance passed by the user.
 */
int8_t bmi08a_get_power_mode(struct bmi08x_dev *dev)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f90e 	bl	800278e <null_ptr_check>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10f      	bne.n	800259e <bmi08a_get_power_mode+0x3a>
    {
        rslt = get_regs(BMI08X_ACCEL_PWR_CONF_REG, &data, 1, dev);
 800257e:	f107 010e 	add.w	r1, r7, #14
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	207c      	movs	r0, #124	@ 0x7c
 8002588:	f000 f921 	bl	80027ce <get_regs>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <bmi08a_get_power_mode+0x3a>
        {
            /* Updating the current power mode */
            dev->accel_cfg.power = data;
 8002598:	7bba      	ldrb	r2, [r7, #14]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	719a      	strb	r2, [r3, #6]
        }
    }

    return rslt;
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(const struct bmi08x_dev *dev)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2];

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8eb 	bl	800278e <null_ptr_check>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80025bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d13b      	bne.n	800263c <bmi08a_set_power_mode+0x92>
    {
        power_mode = dev->accel_cfg.power;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	799b      	ldrb	r3, [r3, #6]
 80025c8:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08X_ACCEL_PM_ACTIVE)
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <bmi08a_set_power_mode+0x30>
        {
            data[0] = BMI08X_ACCEL_PM_ACTIVE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_ENABLE;
 80025d4:	2304      	movs	r3, #4
 80025d6:	737b      	strb	r3, [r7, #13]
 80025d8:	e009      	b.n	80025ee <bmi08a_set_power_mode+0x44>
        }
        else if (power_mode == BMI08X_ACCEL_PM_SUSPEND)
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d104      	bne.n	80025ea <bmi08a_set_power_mode+0x40>
        {
            data[0] = BMI08X_ACCEL_PM_SUSPEND;
 80025e0:	2303      	movs	r3, #3
 80025e2:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	737b      	strb	r3, [r7, #13]
 80025e8:	e001      	b.n	80025ee <bmi08a_set_power_mode+0x44>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08X_E_INVALID_INPUT;
 80025ea:	23fb      	movs	r3, #251	@ 0xfb
 80025ec:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08X_OK)
 80025ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d122      	bne.n	800263c <bmi08a_set_power_mode+0x92>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08X_ACCEL_PWR_CONF_REG, &data[0], 1, dev);
 80025f6:	f107 010c 	add.w	r1, r7, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	207c      	movs	r0, #124	@ 0x7c
 8002600:	f000 f953 	bl	80028aa <set_regs>
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d115      	bne.n	800263c <bmi08a_set_power_mode+0x92>
            {
                /*delay between power ctrl and power config*/
                dev->delay_ms(BMI08X_POWER_CONFIG_DELAY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	2005      	movs	r0, #5
 8002616:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08X_ACCEL_PWR_CTRL_REG, &data[1], 1, dev);
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	1c59      	adds	r1, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	207d      	movs	r0, #125	@ 0x7d
 8002624:	f000 f941 	bl	80028aa <set_regs>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <bmi08a_set_power_mode+0x92>
                {
                    /*delay required to switch power modes*/
                    dev->delay_ms(BMI08X_POWER_CONFIG_DELAY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	2005      	movs	r0, #5
 800263a:	4798      	blx	r3
            }

        }
    }

    return rslt;
 800263c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08x_sensor_data *accel, const struct bmi08x_dev *dev)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f000 f89b 	bl	800278e <null_ptr_check>
 8002658:	4603      	mov	r3, r0
 800265a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (accel != NULL))
 800265c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d140      	bne.n	80026e6 <bmi08a_get_data+0x9e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d03d      	beq.n	80026e6 <bmi08a_get_data+0x9e>
    {
        /* Read accel sensor data */
        rslt = get_regs(BMI08X_ACCEL_X_LSB_REG, data, 6, dev);
 800266a:	f107 010c 	add.w	r1, r7, #12
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2206      	movs	r2, #6
 8002672:	2012      	movs	r0, #18
 8002674:	f000 f8ab 	bl	80027ce <get_regs>
 8002678:	4603      	mov	r3, r0
 800267a:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 800267c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d132      	bne.n	80026ea <bmi08a_get_data+0xa2>
        {
            lsb = data[0];
 8002684:	7b3b      	ldrb	r3, [r7, #12]
 8002686:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8002688:	7b7b      	ldrb	r3, [r7, #13]
 800268a:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 800268c:	7d7b      	ldrb	r3, [r7, #21]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	b21a      	sxth	r2, r3
 8002692:	7dbb      	ldrb	r3, [r7, #22]
 8002694:	b21b      	sxth	r3, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	b21b      	sxth	r3, r3
 800269a:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 800269c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80026ac:	7d7b      	ldrb	r3, [r7, #21]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	b21a      	sxth	r2, r3
 80026b2:	7dbb      	ldrb	r3, [r7, #22]
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 80026bc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 80026c4:	7c3b      	ldrb	r3, [r7, #16]
 80026c6:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 80026c8:	7c7b      	ldrb	r3, [r7, #17]
 80026ca:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80026cc:	7d7b      	ldrb	r3, [r7, #21]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	7dbb      	ldrb	r3, [r7, #22]
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b21b      	sxth	r3, r3
 80026da:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 80026dc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 80026e4:	e001      	b.n	80026ea <bmi08a_get_data+0xa2>
        }

    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80026e6:	23ff      	movs	r3, #255	@ 0xff
 80026e8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80026ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <bmi08a_get_sensor_temperature>:

/*!
 * @brief This API reads the temperature of the sensor in degree Celcius.
 */
int8_t bmi08a_get_sensor_temperature(const struct bmi08x_dev *dev, int32_t *sensor_temp)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8002700:	2300      	movs	r3, #0
 8002702:	81bb      	strh	r3, [r7, #12]
    uint16_t msb, lsb;
    uint16_t msblsb;
    int16_t temp;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f842 	bl	800278e <null_ptr_check>
 800270a:	4603      	mov	r3, r0
 800270c:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (sensor_temp != NULL))
 800270e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d133      	bne.n	800277e <bmi08a_get_sensor_temperature+0x88>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d030      	beq.n	800277e <bmi08a_get_sensor_temperature+0x88>
    {
        /* Read sensor temperature */
        rslt = get_regs(BMI08X_TEMP_MSB_REG, data, 2, dev);
 800271c:	f107 010c 	add.w	r1, r7, #12
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	2022      	movs	r0, #34	@ 0x22
 8002726:	f000 f852 	bl	80027ce <get_regs>
 800272a:	4603      	mov	r3, r0
 800272c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 800272e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d125      	bne.n	8002782 <bmi08a_get_sensor_temperature+0x8c>
        {
            msb = (data[0] << 3); /* MSB data */
 8002736:	7b3b      	ldrb	r3, [r7, #12]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	827b      	strh	r3, [r7, #18]
            lsb = (data[1] >> 5); /* LSB data */
 800273c:	7b7b      	ldrb	r3, [r7, #13]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	b2db      	uxtb	r3, r3
 8002742:	823b      	strh	r3, [r7, #16]
            msblsb = (uint16_t) (msb + lsb);
 8002744:	8a7a      	ldrh	r2, [r7, #18]
 8002746:	8a3b      	ldrh	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	81fb      	strh	r3, [r7, #14]

            if (msblsb > 1023)
 800274c:	89fb      	ldrh	r3, [r7, #14]
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002752:	d305      	bcc.n	8002760 <bmi08a_get_sensor_temperature+0x6a>
            {
                /* Updating the msblsb */
                temp = (int16_t) (msblsb - 2048);
 8002754:	89fb      	ldrh	r3, [r7, #14]
 8002756:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800275a:	b29b      	uxth	r3, r3
 800275c:	82bb      	strh	r3, [r7, #20]
 800275e:	e001      	b.n	8002764 <bmi08a_get_sensor_temperature+0x6e>
            }
            else
            {
                temp = (int16_t) msblsb;
 8002760:	89fb      	ldrh	r3, [r7, #14]
 8002762:	82bb      	strh	r3, [r7, #20]
            }

            /* sensor temperature */
            *sensor_temp = (temp * 125) + 23000;
 8002764:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002768:	4613      	mov	r3, r2
 800276a:	015b      	lsls	r3, r3, #5
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	f503 43b3 	add.w	r3, r3, #22912	@ 0x5980
 8002776:	3358      	adds	r3, #88	@ 0x58
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	6013      	str	r3, [r2, #0]
        if (rslt == BMI08X_OK)
 800277c:	e001      	b.n	8002782 <bmi08a_get_sensor_temperature+0x8c>
        }

    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800277e:	23ff      	movs	r3, #255	@ 0xff
 8002780:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002782:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <null_ptr_check+0x26>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <null_ptr_check+0x26>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <null_ptr_check+0x26>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 80027b4:	23ff      	movs	r3, #255	@ 0xff
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e001      	b.n	80027be <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 80027ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027d2:	b089      	sub	sp, #36	@ 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	4613      	mov	r3, r2
 80027e0:	81bb      	strh	r3, [r7, #12]
 80027e2:	466b      	mov	r3, sp
 80027e4:	461e      	mov	r6, r3
    int8_t rslt;
    uint16_t index;
    uint16_t temp_len = len + dev->dummy_byte;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	795b      	ldrb	r3, [r3, #5]
 80027ea:	461a      	mov	r2, r3
 80027ec:	89bb      	ldrh	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	837b      	strh	r3, [r7, #26]
    uint8_t temp_buff[temp_len];
 80027f2:	8b79      	ldrh	r1, [r7, #26]
 80027f4:	460b      	mov	r3, r1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	b28b      	uxth	r3, r1
 80027fc:	2200      	movs	r2, #0
 80027fe:	4698      	mov	r8, r3
 8002800:	4691      	mov	r9, r2
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800280e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002816:	b28b      	uxth	r3, r1
 8002818:	2200      	movs	r2, #0
 800281a:	461c      	mov	r4, r3
 800281c:	4615      	mov	r5, r2
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	00eb      	lsls	r3, r5, #3
 8002828:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800282c:	00e2      	lsls	r2, r4, #3
 800282e:	460b      	mov	r3, r1
 8002830:	3307      	adds	r3, #7
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	ebad 0d03 	sub.w	sp, sp, r3
 800283a:	466b      	mov	r3, sp
 800283c:	3300      	adds	r3, #0
 800283e:	613b      	str	r3, [r7, #16]

    if (dev->intf == BMI08X_SPI_INTF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d103      	bne.n	8002850 <get_regs+0x82>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08X_SPI_RD_MASK;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800284e:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    rslt = dev->read(dev->accel_id, reg_addr, temp_buff, temp_len);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699c      	ldr	r4, [r3, #24]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7898      	ldrb	r0, [r3, #2]
 8002858:	8b7b      	ldrh	r3, [r7, #26]
 800285a:	7bf9      	ldrb	r1, [r7, #15]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	47a0      	blx	r4
 8002860:	4603      	mov	r3, r0
 8002862:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMI08X_OK)
 8002864:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d114      	bne.n	8002896 <get_regs+0xc8>
    {
        for (index = 0; index < len; index++)
 800286c:	2300      	movs	r3, #0
 800286e:	83bb      	strh	r3, [r7, #28]
 8002870:	e00c      	b.n	800288c <get_regs+0xbe>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 8002872:	8bbb      	ldrh	r3, [r7, #28]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	7952      	ldrb	r2, [r2, #5]
 8002878:	441a      	add	r2, r3
 800287a:	8bbb      	ldrh	r3, [r7, #28]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	440b      	add	r3, r1
 8002880:	6939      	ldr	r1, [r7, #16]
 8002882:	5c8a      	ldrb	r2, [r1, r2]
 8002884:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 8002886:	8bbb      	ldrh	r3, [r7, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	83bb      	strh	r3, [r7, #28]
 800288c:	8bba      	ldrh	r2, [r7, #28]
 800288e:	89bb      	ldrh	r3, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d3ee      	bcc.n	8002872 <get_regs+0xa4>
 8002894:	e001      	b.n	800289a <get_regs+0xcc>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08X_E_COM_FAIL;
 8002896:	23fe      	movs	r3, #254	@ 0xfe
 8002898:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800289a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800289e:	46b5      	mov	sp, r6
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3724      	adds	r7, #36	@ 0x24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080028aa <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 80028aa:	b590      	push	{r4, r7, lr}
 80028ac:	b087      	sub	sp, #28
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	4613      	mov	r3, r2
 80028ba:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    if (dev->intf == BMI08X_SPI_INTF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	791b      	ldrb	r3, [r3, #4]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d103      	bne.n	80028cc <set_regs+0x22>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ca:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    rslt = dev->write(dev->accel_id, reg_addr, reg_data, len);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69dc      	ldr	r4, [r3, #28]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7898      	ldrb	r0, [r3, #2]
 80028d4:	89bb      	ldrh	r3, [r7, #12]
 80028d6:	7bf9      	ldrb	r1, [r7, #15]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	47a0      	blx	r4
 80028dc:	4603      	mov	r3, r0
 80028de:	75fb      	strb	r3, [r7, #23]

    if (rslt != BMI08X_OK)
 80028e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <set_regs+0x42>
    {
        /* Updating the error status */
        rslt = BMI08X_E_COM_FAIL;
 80028e8:	23fe      	movs	r3, #254	@ 0xfe
 80028ea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80028ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}

080028f8 <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08x_dev *dev)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f96f 	bl	8002be8 <null_ptr_check>
 800290a:	4603      	mov	r3, r0
 800290c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d115      	bne.n	8002942 <bmi08g_init+0x4a>
    {
        /* Read gyro chip id */
        rslt = get_regs(BMI08X_GYRO_CHIP_ID_REG, &chip_id, 1, dev);
 8002916:	f107 010e 	add.w	r1, r7, #14
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	2000      	movs	r0, #0
 8002920:	f000 f982 	bl	8002c28 <get_regs>
 8002924:	4603      	mov	r3, r0
 8002926:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8002928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d108      	bne.n	8002942 <bmi08g_init+0x4a>
        {
            if (chip_id == BMI08X_GYRO_CHIP_ID)
 8002930:	7bbb      	ldrb	r3, [r7, #14]
 8002932:	2b0f      	cmp	r3, #15
 8002934:	d103      	bne.n	800293e <bmi08g_init+0x46>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 8002936:	7bba      	ldrb	r2, [r7, #14]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	705a      	strb	r2, [r3, #1]
 800293c:	e001      	b.n	8002942 <bmi08g_init+0x4a>
            }
            else
            {
                rslt = BMI08X_E_DEV_NOT_FOUND;
 800293e:	23fd      	movs	r3, #253	@ 0xfd
 8002940:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002942:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	4603      	mov	r3, r0
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	4613      	mov	r3, r2
 800295e:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f941 	bl	8002be8 <null_ptr_check>
 8002966:	4603      	mov	r3, r0
 8002968:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 800296a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d111      	bne.n	8002996 <bmi08g_get_regs+0x48>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00e      	beq.n	8002996 <bmi08g_get_regs+0x48>
    {
        if (len > 0)
 8002978:	89bb      	ldrh	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <bmi08g_get_regs+0x42>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 800297e:	89ba      	ldrh	r2, [r7, #12]
 8002980:	7bf8      	ldrb	r0, [r7, #15]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	f000 f94f 	bl	8002c28 <get_regs>
 800298a:	4603      	mov	r3, r0
 800298c:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800298e:	e004      	b.n	800299a <bmi08g_get_regs+0x4c>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8002990:	23f9      	movs	r3, #249	@ 0xf9
 8002992:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8002994:	e001      	b.n	800299a <bmi08g_get_regs+0x4c>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8002996:	23ff      	movs	r3, #255	@ 0xff
 8002998:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800299a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(const struct bmi08x_dev *dev)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73bb      	strb	r3, [r7, #14]
 80029b2:	2300      	movs	r3, #0
 80029b4:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f916 	bl	8002be8 <null_ptr_check>
 80029bc:	4603      	mov	r3, r0
 80029be:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80029c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d166      	bne.n	8002a96 <bmi08g_set_meas_conf+0xf0>
    {
        odr = dev->gyro_cfg.odr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7b5b      	ldrb	r3, [r3, #13]
 80029cc:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7adb      	ldrb	r3, [r3, #11]
 80029d2:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08X_GYRO_BW_32_ODR_100_HZ)
 80029d4:	7b3b      	ldrb	r3, [r7, #12]
 80029d6:	2b07      	cmp	r3, #7
 80029d8:	d901      	bls.n	80029de <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 80029da:	2301      	movs	r3, #1
 80029dc:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08X_GYRO_RANGE_125_DPS)
 80029de:	7afb      	ldrb	r3, [r7, #11]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d901      	bls.n	80029e8 <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 80029e8:	7b7b      	ldrb	r3, [r7, #13]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d14f      	bne.n	8002a8e <bmi08g_set_meas_conf+0xe8>
 80029ee:	7bbb      	ldrb	r3, [r7, #14]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d14c      	bne.n	8002a8e <bmi08g_set_meas_conf+0xe8>
        {
            /* Read range value from the range register */
            rslt = get_regs(BMI08X_GYRO_BANDWIDTH_REG, &data, 1, dev);
 80029f4:	f107 010a 	add.w	r1, r7, #10
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	2010      	movs	r0, #16
 80029fe:	f000 f913 	bl	8002c28 <get_regs>
 8002a02:	4603      	mov	r3, r0
 8002a04:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d142      	bne.n	8002a94 <bmi08g_set_meas_conf+0xee>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_BW, odr);
 8002a0e:	7abb      	ldrb	r3, [r7, #10]
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	f023 030f 	bic.w	r3, r3, #15
 8002a16:	b25a      	sxtb	r2, r3
 8002a18:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	b25b      	sxtb	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = set_regs(BMI08X_GYRO_BANDWIDTH_REG, &data, 1, dev);
 8002a2a:	f107 010a 	add.w	r1, r7, #10
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	2010      	movs	r0, #16
 8002a34:	f000 f91f 	bl	8002c76 <set_regs>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d127      	bne.n	8002a94 <bmi08g_set_meas_conf+0xee>
                {
                    /* Read range value from the range register */
                    rslt = get_regs(BMI08X_GYRO_RANGE_REG, &data, 1, dev);
 8002a44:	f107 010a 	add.w	r1, r7, #10
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	200f      	movs	r0, #15
 8002a4e:	f000 f8eb 	bl	8002c28 <get_regs>
 8002a52:	4603      	mov	r3, r0
 8002a54:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08X_OK)
 8002a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11a      	bne.n	8002a94 <bmi08g_set_meas_conf+0xee>
                    {
                        data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_RANGE, range);
 8002a5e:	7abb      	ldrb	r3, [r7, #10]
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	f023 0307 	bic.w	r3, r3, #7
 8002a66:	b25a      	sxtb	r2, r3
 8002a68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	b25b      	sxtb	r3, r3
 8002a72:	4313      	orrs	r3, r2
 8002a74:	b25b      	sxtb	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	72bb      	strb	r3, [r7, #10]

                        /* Write range value to range register */
                        rslt = set_regs(BMI08X_GYRO_RANGE_REG, &data, 1, dev);
 8002a7a:	f107 010a 	add.w	r1, r7, #10
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	200f      	movs	r0, #15
 8002a84:	f000 f8f7 	bl	8002c76 <set_regs>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08X_OK)
 8002a8c:	e002      	b.n	8002a94 <bmi08g_set_meas_conf+0xee>

        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8002a8e:	23f8      	movs	r3, #248	@ 0xf8
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e000      	b.n	8002a96 <bmi08g_set_meas_conf+0xf0>
            if (rslt == BMI08X_OK)
 8002a94:	bf00      	nop
        }
    }

    return rslt;
 8002a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(const struct bmi08x_dev *dev)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f89a 	bl	8002be8 <null_ptr_check>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8002ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d136      	bne.n	8002b2e <bmi08g_set_power_mode+0x8c>
    {
        /*read the previous power state*/
        rslt = get_regs(BMI08X_GYRO_LPM1_REG, &data, 1, dev);
 8002ac0:	f107 010c 	add.w	r1, r7, #12
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2011      	movs	r0, #17
 8002aca:	f000 f8ad 	bl	8002c28 <get_regs>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8002ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d129      	bne.n	8002b2e <bmi08g_set_power_mode+0x8c>
        {
            power_mode = dev->gyro_cfg.power;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7a9b      	ldrb	r3, [r3, #10]
 8002ade:	737b      	strb	r3, [r7, #13]

            /*switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching (i.e)
             * deep suspend to suspend */
            if ((power_mode == BMI08X_GYRO_PM_SUSPEND) && (data == BMI08X_GYRO_PM_DEEP_SUSPEND))
 8002ae0:	7b7b      	ldrb	r3, [r7, #13]
 8002ae2:	2b80      	cmp	r3, #128	@ 0x80
 8002ae4:	d104      	bne.n	8002af0 <bmi08g_set_power_mode+0x4e>
 8002ae6:	7b3b      	ldrb	r3, [r7, #12]
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d101      	bne.n	8002af0 <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08X_GYRO_PM_DEEP_SUSPEND) && (data == BMI08X_GYRO_PM_SUSPEND))
 8002af0:	7b7b      	ldrb	r3, [r7, #13]
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d104      	bne.n	8002b00 <bmi08g_set_power_mode+0x5e>
 8002af6:	7b3b      	ldrb	r3, [r7, #12]
 8002af8:	2b80      	cmp	r3, #128	@ 0x80
 8002afa:	d101      	bne.n	8002b00 <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 8002b00:	7bbb      	ldrb	r3, [r7, #14]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d011      	beq.n	8002b2a <bmi08g_set_power_mode+0x88>
            {
                /* Write power to power register */
                rslt = set_regs(BMI08X_GYRO_LPM1_REG, &power_mode, 1, dev);
 8002b06:	f107 010d 	add.w	r1, r7, #13
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2011      	movs	r0, #17
 8002b10:	f000 f8b1 	bl	8002c76 <set_regs>
 8002b14:	4603      	mov	r3, r0
 8002b16:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <bmi08g_set_power_mode+0x8c>
                {
                    /* Time required to switch the power mode */
                    dev->delay_ms(BMI08X_GYRO_POWER_MODE_CONFIG_DELAY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	201e      	movs	r0, #30
 8002b26:	4798      	blx	r3
 8002b28:	e001      	b.n	8002b2e <bmi08g_set_power_mode+0x8c>

            }
            else
            {
                /* Updating the error */
                rslt = BMI08X_E_INVALID_INPUT;
 8002b2a:	23fb      	movs	r3, #251	@ 0xfb
 8002b2c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08x_sensor_data *gyro, const struct bmi08x_dev *dev)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002b44:	6838      	ldr	r0, [r7, #0]
 8002b46:	f000 f84f 	bl	8002be8 <null_ptr_check>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (gyro != NULL))
 8002b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d140      	bne.n	8002bd8 <bmi08g_get_data+0x9e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d03d      	beq.n	8002bd8 <bmi08g_get_data+0x9e>
    {
        /* read gyro sensor data */
        rslt = get_regs(BMI08X_GYRO_X_LSB_REG, data, 6, dev);
 8002b5c:	f107 010c 	add.w	r1, r7, #12
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2206      	movs	r2, #6
 8002b64:	2002      	movs	r0, #2
 8002b66:	f000 f85f 	bl	8002c28 <get_regs>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8002b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d132      	bne.n	8002bdc <bmi08g_get_data+0xa2>
        {
            lsb = data[0];
 8002b76:	7b3b      	ldrb	r3, [r7, #12]
 8002b78:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8002b7a:	7b7b      	ldrb	r3, [r7, #13]
 8002b7c:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8002b7e:	7d7b      	ldrb	r3, [r7, #21]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	b21a      	sxth	r2, r3
 8002b84:	7dbb      	ldrb	r3, [r7, #22]
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 8002b8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8002b9e:	7d7b      	ldrb	r3, [r7, #21]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	b21a      	sxth	r2, r3
 8002ba4:	7dbb      	ldrb	r3, [r7, #22]
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 8002bae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8002bb6:	7c3b      	ldrb	r3, [r7, #16]
 8002bb8:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8002bba:	7c7b      	ldrb	r3, [r7, #17]
 8002bbc:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8002bbe:	7d7b      	ldrb	r3, [r7, #21]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	b21a      	sxth	r2, r3
 8002bc4:	7dbb      	ldrb	r3, [r7, #22]
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	b21b      	sxth	r3, r3
 8002bcc:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 8002bce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8002bd6:	e001      	b.n	8002bdc <bmi08g_get_data+0xa2>
        }

    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8002bd8:	23ff      	movs	r3, #255	@ 0xff
 8002bda:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002bdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <null_ptr_check+0x26>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <null_ptr_check+0x26>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <null_ptr_check+0x26>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8002c0e:	23ff      	movs	r3, #255	@ 0xff
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e001      	b.n	8002c18 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	4603      	mov	r3, r0
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	4613      	mov	r3, r2
 8002c38:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    if (dev->intf == BMI08X_SPI_INTF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d103      	bne.n	8002c4a <get_regs+0x22>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08X_SPI_RD_MASK);
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c48:	73fb      	strb	r3, [r7, #15]
    }

    /* read a gyro register */
    rslt = dev->read(dev->gyro_id, reg_addr, reg_data, len);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699c      	ldr	r4, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	78d8      	ldrb	r0, [r3, #3]
 8002c52:	89bb      	ldrh	r3, [r7, #12]
 8002c54:	7bf9      	ldrb	r1, [r7, #15]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	47a0      	blx	r4
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	75fb      	strb	r3, [r7, #23]

    if (rslt != BMI08X_OK)
 8002c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <get_regs+0x42>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8002c66:	23fe      	movs	r3, #254	@ 0xfe
 8002c68:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd90      	pop	{r4, r7, pc}

08002c76 <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bmi08x_dev *dev)
{
 8002c76:	b590      	push	{r4, r7, lr}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	4613      	mov	r3, r2
 8002c86:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    if (dev->intf == BMI08X_SPI_INTF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	791b      	ldrb	r3, [r3, #4]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d103      	bne.n	8002c98 <set_regs+0x22>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c96:	73fb      	strb	r3, [r7, #15]
    }

    /* write to a gyro register */
    rslt = dev->write(dev->gyro_id, reg_addr, reg_data, len);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69dc      	ldr	r4, [r3, #28]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	78d8      	ldrb	r0, [r3, #3]
 8002ca0:	89bb      	ldrh	r3, [r7, #12]
 8002ca2:	7bf9      	ldrb	r1, [r7, #15]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	47a0      	blx	r4
 8002ca8:	4603      	mov	r3, r0
 8002caa:	75fb      	strb	r3, [r7, #23]

    if (rslt != BMI08X_OK)
 8002cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <set_regs+0x42>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8002cb4:	23fe      	movs	r3, #254	@ 0xfe
 8002cb6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d04 <HAL_Init+0x40>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <HAL_Init+0x40>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce0:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a07      	ldr	r2, [pc, #28]	@ (8002d04 <HAL_Init+0x40>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cec:	2003      	movs	r0, #3
 8002cee:	f000 f8fc 	bl	8002eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf2:	200f      	movs	r0, #15
 8002cf4:	f7fe ffae 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf8:	f7fe ff80 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_IncTick+0x20>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_IncTick+0x24>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	4a04      	ldr	r2, [pc, #16]	@ (8002d2c <HAL_IncTick+0x24>)
 8002d1a:	6013      	str	r3, [r2, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	2000002c 	.word	0x2000002c
 8002d2c:	200007dc 	.word	0x200007dc

08002d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return uwTick;
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <HAL_GetTick+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	200007dc 	.word	0x200007dc

08002d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff ffee 	bl	8002d30 <HAL_GetTick>
 8002d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d005      	beq.n	8002d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d62:	4b0a      	ldr	r3, [pc, #40]	@ (8002d8c <HAL_Delay+0x44>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d6e:	bf00      	nop
 8002d70:	f7ff ffde 	bl	8002d30 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d8f7      	bhi.n	8002d70 <HAL_Delay+0x28>
  {
  }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000002c 	.word	0x2000002c

08002d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dac:	4013      	ands	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc2:	4a04      	ldr	r2, [pc, #16]	@ (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	60d3      	str	r3, [r2, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ddc:	4b04      	ldr	r3, [pc, #16]	@ (8002df0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 0307 	and.w	r3, r3, #7
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db0b      	blt.n	8002e1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4907      	ldr	r1, [pc, #28]	@ (8002e2c <__NVIC_EnableIRQ+0x38>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2001      	movs	r0, #1
 8002e16:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	@ (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	@ (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	@ 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ff4c 	bl	8002d90 <__NVIC_SetPriorityGrouping>
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f12:	f7ff ff61 	bl	8002dd8 <__NVIC_GetPriorityGrouping>
 8002f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	6978      	ldr	r0, [r7, #20]
 8002f1e:	f7ff ffb1 	bl	8002e84 <NVIC_EncodePriority>
 8002f22:	4602      	mov	r2, r0
 8002f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff80 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f30:	bf00      	nop
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ff54 	bl	8002df4 <__NVIC_EnableIRQ>
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	@ 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	e16b      	b.n	8003248 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 815a 	bne.w	8003242 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d005      	beq.n	8002fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d130      	bne.n	8003008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0201 	and.w	r2, r3, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b03      	cmp	r3, #3
 8003012:	d017      	beq.n	8003044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d123      	bne.n	8003098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	08da      	lsrs	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3208      	adds	r2, #8
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	69b9      	ldr	r1, [r7, #24]
 8003094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80b4 	beq.w	8003242 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b60      	ldr	r3, [pc, #384]	@ (8003260 <HAL_GPIO_Init+0x30c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003260 <HAL_GPIO_Init+0x30c>)
 80030e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003260 <HAL_GPIO_Init+0x30c>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003264 <HAL_GPIO_Init+0x310>)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	3302      	adds	r3, #2
 80030fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	220f      	movs	r2, #15
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a52      	ldr	r2, [pc, #328]	@ (8003268 <HAL_GPIO_Init+0x314>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d02b      	beq.n	800317a <HAL_GPIO_Init+0x226>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a51      	ldr	r2, [pc, #324]	@ (800326c <HAL_GPIO_Init+0x318>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d025      	beq.n	8003176 <HAL_GPIO_Init+0x222>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a50      	ldr	r2, [pc, #320]	@ (8003270 <HAL_GPIO_Init+0x31c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01f      	beq.n	8003172 <HAL_GPIO_Init+0x21e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4f      	ldr	r2, [pc, #316]	@ (8003274 <HAL_GPIO_Init+0x320>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d019      	beq.n	800316e <HAL_GPIO_Init+0x21a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4e      	ldr	r2, [pc, #312]	@ (8003278 <HAL_GPIO_Init+0x324>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0x216>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4d      	ldr	r2, [pc, #308]	@ (800327c <HAL_GPIO_Init+0x328>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00d      	beq.n	8003166 <HAL_GPIO_Init+0x212>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4c      	ldr	r2, [pc, #304]	@ (8003280 <HAL_GPIO_Init+0x32c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x20e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4b      	ldr	r2, [pc, #300]	@ (8003284 <HAL_GPIO_Init+0x330>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_GPIO_Init+0x20a>
 800315a:	2307      	movs	r3, #7
 800315c:	e00e      	b.n	800317c <HAL_GPIO_Init+0x228>
 800315e:	2308      	movs	r3, #8
 8003160:	e00c      	b.n	800317c <HAL_GPIO_Init+0x228>
 8003162:	2306      	movs	r3, #6
 8003164:	e00a      	b.n	800317c <HAL_GPIO_Init+0x228>
 8003166:	2305      	movs	r3, #5
 8003168:	e008      	b.n	800317c <HAL_GPIO_Init+0x228>
 800316a:	2304      	movs	r3, #4
 800316c:	e006      	b.n	800317c <HAL_GPIO_Init+0x228>
 800316e:	2303      	movs	r3, #3
 8003170:	e004      	b.n	800317c <HAL_GPIO_Init+0x228>
 8003172:	2302      	movs	r3, #2
 8003174:	e002      	b.n	800317c <HAL_GPIO_Init+0x228>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_GPIO_Init+0x228>
 800317a:	2300      	movs	r3, #0
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	f002 0203 	and.w	r2, r2, #3
 8003182:	0092      	lsls	r2, r2, #2
 8003184:	4093      	lsls	r3, r2
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800318c:	4935      	ldr	r1, [pc, #212]	@ (8003264 <HAL_GPIO_Init+0x310>)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	3302      	adds	r3, #2
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319a:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <HAL_GPIO_Init+0x334>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031be:	4a32      	ldr	r2, [pc, #200]	@ (8003288 <HAL_GPIO_Init+0x334>)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c4:	4b30      	ldr	r3, [pc, #192]	@ (8003288 <HAL_GPIO_Init+0x334>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e8:	4a27      	ldr	r2, [pc, #156]	@ (8003288 <HAL_GPIO_Init+0x334>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ee:	4b26      	ldr	r3, [pc, #152]	@ (8003288 <HAL_GPIO_Init+0x334>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003212:	4a1d      	ldr	r2, [pc, #116]	@ (8003288 <HAL_GPIO_Init+0x334>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003218:	4b1b      	ldr	r3, [pc, #108]	@ (8003288 <HAL_GPIO_Init+0x334>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800323c:	4a12      	ldr	r2, [pc, #72]	@ (8003288 <HAL_GPIO_Init+0x334>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3301      	adds	r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2b0f      	cmp	r3, #15
 800324c:	f67f ae90 	bls.w	8002f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3724      	adds	r7, #36	@ 0x24
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	40013800 	.word	0x40013800
 8003268:	40020000 	.word	0x40020000
 800326c:	40020400 	.word	0x40020400
 8003270:	40020800 	.word	0x40020800
 8003274:	40020c00 	.word	0x40020c00
 8003278:	40021000 	.word	0x40021000
 800327c:	40021400 	.word	0x40021400
 8003280:	40021800 	.word	0x40021800
 8003284:	40021c00 	.word	0x40021c00
 8003288:	40013c00 	.word	0x40013c00

0800328c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
 8003298:	4613      	mov	r3, r2
 800329a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800329c:	787b      	ldrb	r3, [r7, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032a8:	e003      	b.n	80032b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	041a      	lsls	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	619a      	str	r2, [r3, #24]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e12b      	b.n	800352a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fe f996 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	@ 0x24
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003324:	f001 fc2e 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4a81      	ldr	r2, [pc, #516]	@ (8003534 <HAL_I2C_Init+0x274>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d807      	bhi.n	8003344 <HAL_I2C_Init+0x84>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a80      	ldr	r2, [pc, #512]	@ (8003538 <HAL_I2C_Init+0x278>)
 8003338:	4293      	cmp	r3, r2
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e006      	b.n	8003352 <HAL_I2C_Init+0x92>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a7d      	ldr	r2, [pc, #500]	@ (800353c <HAL_I2C_Init+0x27c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0e7      	b.n	800352a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a78      	ldr	r2, [pc, #480]	@ (8003540 <HAL_I2C_Init+0x280>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0c9b      	lsrs	r3, r3, #18
 8003364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a6a      	ldr	r2, [pc, #424]	@ (8003534 <HAL_I2C_Init+0x274>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d802      	bhi.n	8003394 <HAL_I2C_Init+0xd4>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3301      	adds	r3, #1
 8003392:	e009      	b.n	80033a8 <HAL_I2C_Init+0xe8>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	4a69      	ldr	r2, [pc, #420]	@ (8003544 <HAL_I2C_Init+0x284>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	3301      	adds	r3, #1
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	495c      	ldr	r1, [pc, #368]	@ (8003534 <HAL_I2C_Init+0x274>)
 80033c4:	428b      	cmp	r3, r1
 80033c6:	d819      	bhi.n	80033fc <HAL_I2C_Init+0x13c>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e59      	subs	r1, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d6:	1c59      	adds	r1, r3, #1
 80033d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033dc:	400b      	ands	r3, r1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_I2C_Init+0x138>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1e59      	subs	r1, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	e051      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e04f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d111      	bne.n	8003428 <HAL_I2C_Init+0x168>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e012      	b.n	800344e <HAL_I2C_Init+0x18e>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1e58      	subs	r0, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	0099      	lsls	r1, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	fbb0 f3f3 	udiv	r3, r0, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Init+0x196>
 8003452:	2301      	movs	r3, #1
 8003454:	e022      	b.n	800349c <HAL_I2C_Init+0x1dc>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <HAL_I2C_Init+0x1bc>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1e58      	subs	r0, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	440b      	add	r3, r1
 800346c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003470:	3301      	adds	r3, #1
 8003472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800347a:	e00f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	0099      	lsls	r1, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	6809      	ldr	r1, [r1, #0]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6911      	ldr	r1, [r2, #16]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68d2      	ldr	r2, [r2, #12]
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	000186a0 	.word	0x000186a0
 8003538:	001e847f 	.word	0x001e847f
 800353c:	003d08ff 	.word	0x003d08ff
 8003540:	431bde83 	.word	0x431bde83
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	461a      	mov	r2, r3
 8003556:	4603      	mov	r3, r0
 8003558:	817b      	strh	r3, [r7, #10]
 800355a:	460b      	mov	r3, r1
 800355c:	813b      	strh	r3, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003562:	f7ff fbe5 	bl	8002d30 <HAL_GetTick>
 8003566:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b20      	cmp	r3, #32
 8003572:	f040 80d9 	bne.w	8003728 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2319      	movs	r3, #25
 800357c:	2201      	movs	r2, #1
 800357e:	496d      	ldr	r1, [pc, #436]	@ (8003734 <HAL_I2C_Mem_Write+0x1ec>)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fc99 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	e0cc      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_I2C_Mem_Write+0x56>
 800359a:	2302      	movs	r3, #2
 800359c:	e0c5      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d007      	beq.n	80035c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2221      	movs	r2, #33	@ 0x21
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2240      	movs	r2, #64	@ 0x40
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a4d      	ldr	r2, [pc, #308]	@ (8003738 <HAL_I2C_Mem_Write+0x1f0>)
 8003604:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003606:	88f8      	ldrh	r0, [r7, #6]
 8003608:	893a      	ldrh	r2, [r7, #8]
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	4603      	mov	r3, r0
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fad0 	bl	8003bbc <I2C_RequestMemoryWrite>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d052      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e081      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fd5e 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	2b04      	cmp	r3, #4
 800363c:	d107      	bne.n	800364e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e06b      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d11b      	bne.n	80036c8 <HAL_I2C_Mem_Write+0x180>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d017      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1aa      	bne.n	8003626 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fd51 	bl	800417c <I2C_WaitOnBTFFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d107      	bne.n	80036f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e016      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e000      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	00100002 	.word	0x00100002
 8003738:	ffff0000 	.word	0xffff0000

0800373c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	@ 0x30
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	460b      	mov	r3, r1
 8003750:	813b      	strh	r3, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003756:	f7ff faeb 	bl	8002d30 <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 8214 	bne.w	8003b92 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2319      	movs	r3, #25
 8003770:	2201      	movs	r2, #1
 8003772:	497b      	ldr	r1, [pc, #492]	@ (8003960 <HAL_I2C_Mem_Read+0x224>)
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fb9f 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
 8003782:	e207      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_I2C_Mem_Read+0x56>
 800378e:	2302      	movs	r3, #2
 8003790:	e200      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d007      	beq.n	80037b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2222      	movs	r2, #34	@ 0x22
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	@ 0x40
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80037e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003964 <HAL_I2C_Mem_Read+0x228>)
 80037f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037fa:	88f8      	ldrh	r0, [r7, #6]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	8979      	ldrh	r1, [r7, #10]
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	4603      	mov	r3, r0
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fa6c 	bl	8003ce8 <I2C_RequestMemoryRead>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e1bc      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d113      	bne.n	800384a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003822:	2300      	movs	r3, #0
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	623b      	str	r3, [r7, #32]
 8003836:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e190      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384e:	2b01      	cmp	r3, #1
 8003850:	d11b      	bne.n	800388a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e170      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388e:	2b02      	cmp	r3, #2
 8003890:	d11b      	bne.n	80038ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	e150      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038e0:	e144      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	f200 80f1 	bhi.w	8003ace <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d123      	bne.n	800393c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fc87 	bl	800420c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e145      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800393a:	e117      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003940:	2b02      	cmp	r3, #2
 8003942:	d14e      	bne.n	80039e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394a:	2200      	movs	r2, #0
 800394c:	4906      	ldr	r1, [pc, #24]	@ (8003968 <HAL_I2C_Mem_Read+0x22c>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fab2 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e11a      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
 800395e:	bf00      	nop
 8003960:	00100002 	.word	0x00100002
 8003964:	ffff0000 	.word	0xffff0000
 8003968:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039e0:	e0c4      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e8:	2200      	movs	r2, #0
 80039ea:	496c      	ldr	r1, [pc, #432]	@ (8003b9c <HAL_I2C_Mem_Read+0x460>)
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fa63 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0cb      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a44:	2200      	movs	r2, #0
 8003a46:	4955      	ldr	r1, [pc, #340]	@ (8003b9c <HAL_I2C_Mem_Read+0x460>)
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fa35 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e09d      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003acc:	e04e      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fb9a 	bl	800420c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e058      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d124      	bne.n	8003b6c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d107      	bne.n	8003b3a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b38:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f47f aeb6 	bne.w	80038e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3728      	adds	r7, #40	@ 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	00010004 	.word	0x00010004

08003ba0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bae:	b2db      	uxtb	r3, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	817b      	strh	r3, [r7, #10]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	813b      	strh	r3, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f960 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0c:	d103      	bne.n	8003c16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e05f      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	492d      	ldr	r1, [pc, #180]	@ (8003ce4 <I2C_RequestMemoryWrite+0x128>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f9bb 	bl	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e04c      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c58:	6a39      	ldr	r1, [r7, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fa46 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d107      	bne.n	8003c7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e02b      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	611a      	str	r2, [r3, #16]
 8003c92:	e021      	b.n	8003cd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fa20 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d107      	bne.n	8003cca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e005      	b.n	8003cda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	00010002 	.word	0x00010002

08003ce8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f8c2 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d48:	d103      	bne.n	8003d52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e0aa      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	6a3a      	ldr	r2, [r7, #32]
 8003d6a:	4952      	ldr	r1, [pc, #328]	@ (8003eb4 <I2C_RequestMemoryRead+0x1cc>)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f91d 	bl	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e097      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f9a8 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d107      	bne.n	8003dba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e076      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc4:	893b      	ldrh	r3, [r7, #8]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]
 8003dce:	e021      	b.n	8003e14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de0:	6a39      	ldr	r1, [r7, #32]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f982 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00d      	beq.n	8003e0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d107      	bne.n	8003e06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e050      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0a:	893b      	ldrh	r3, [r7, #8]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e16:	6a39      	ldr	r1, [r7, #32]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f967 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d107      	bne.n	8003e3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e035      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f82b 	bl	8003eb8 <I2C_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e76:	d103      	bne.n	8003e80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e013      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e84:	897b      	ldrh	r3, [r7, #10]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	4906      	ldr	r1, [pc, #24]	@ (8003eb4 <I2C_RequestMemoryRead+0x1cc>)
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f886 	bl	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	00010002 	.word	0x00010002

08003eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec8:	e048      	b.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d044      	beq.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed2:	f7fe ff2d 	bl	8002d30 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d302      	bcc.n	8003ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d139      	bne.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d10d      	bne.n	8003f0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	e00c      	b.n	8003f28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d116      	bne.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e023      	b.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d10d      	bne.n	8003f82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4013      	ands	r3, r2
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	e00c      	b.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d093      	beq.n	8003eca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fba:	e071      	b.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fca:	d123      	bne.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	f043 0204 	orr.w	r2, r3, #4
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e067      	b.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d041      	beq.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401c:	f7fe fe88 	bl	8002d30 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d136      	bne.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d10c      	bne.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e00b      	b.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	43da      	mvns	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4013      	ands	r3, r2
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e021      	b.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	0c1b      	lsrs	r3, r3, #16
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10c      	bne.n	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	43da      	mvns	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e00b      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	43da      	mvns	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4013      	ands	r3, r2
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bf14      	ite	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	2300      	moveq	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f47f af6d 	bne.w	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f8:	e034      	b.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f8e3 	bl	80042c6 <I2C_IsAcknowledgeFailed>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e034      	b.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d028      	beq.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004112:	f7fe fe0d 	bl	8002d30 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	d302      	bcc.n	8004128 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004132:	2b80      	cmp	r3, #128	@ 0x80
 8004134:	d016      	beq.n	8004164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e007      	b.n	8004174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416e:	2b80      	cmp	r3, #128	@ 0x80
 8004170:	d1c3      	bne.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004188:	e034      	b.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f89b 	bl	80042c6 <I2C_IsAcknowledgeFailed>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e034      	b.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d028      	beq.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fe fdc5 	bl	8002d30 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11d      	bne.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d016      	beq.n	80041f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e007      	b.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d1c3      	bne.n	800418a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004218:	e049      	b.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b10      	cmp	r3, #16
 8004226:	d119      	bne.n	800425c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0210 	mvn.w	r2, #16
 8004230:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e030      	b.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425c:	f7fe fd68 	bl	8002d30 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d302      	bcc.n	8004272 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11d      	bne.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427c:	2b40      	cmp	r3, #64	@ 0x40
 800427e:	d016      	beq.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e007      	b.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d1ae      	bne.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042dc:	d11b      	bne.n	8004316 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f043 0204 	orr.w	r2, r3, #4
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e267      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d075      	beq.n	800442e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004342:	4b88      	ldr	r3, [pc, #544]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b04      	cmp	r3, #4
 800434c:	d00c      	beq.n	8004368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434e:	4b85      	ldr	r3, [pc, #532]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004356:	2b08      	cmp	r3, #8
 8004358:	d112      	bne.n	8004380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435a:	4b82      	ldr	r3, [pc, #520]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004366:	d10b      	bne.n	8004380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	4b7e      	ldr	r3, [pc, #504]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05b      	beq.n	800442c <HAL_RCC_OscConfig+0x108>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d157      	bne.n	800442c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e242      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004388:	d106      	bne.n	8004398 <HAL_RCC_OscConfig+0x74>
 800438a:	4b76      	ldr	r3, [pc, #472]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a75      	ldr	r2, [pc, #468]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e01d      	b.n	80043d4 <HAL_RCC_OscConfig+0xb0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x98>
 80043a2:	4b70      	ldr	r3, [pc, #448]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a6f      	ldr	r2, [pc, #444]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6c      	ldr	r2, [pc, #432]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0xb0>
 80043bc:	4b69      	ldr	r3, [pc, #420]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a68      	ldr	r2, [pc, #416]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b66      	ldr	r3, [pc, #408]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a65      	ldr	r2, [pc, #404]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe fca8 	bl	8002d30 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe fca4 	bl	8002d30 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	@ 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e207      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0xc0>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fe fc94 	bl	8002d30 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800440c:	f7fe fc90 	bl	8002d30 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1f3      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	4b51      	ldr	r3, [pc, #324]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0xe8>
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d063      	beq.n	8004502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800443a:	4b4a      	ldr	r3, [pc, #296]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004446:	4b47      	ldr	r3, [pc, #284]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800444e:	2b08      	cmp	r3, #8
 8004450:	d11c      	bne.n	800448c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004452:	4b44      	ldr	r3, [pc, #272]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445e:	4b41      	ldr	r3, [pc, #260]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCC_OscConfig+0x152>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e1c7      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004476:	4b3b      	ldr	r3, [pc, #236]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4937      	ldr	r1, [pc, #220]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	e03a      	b.n	8004502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004494:	4b34      	ldr	r3, [pc, #208]	@ (8004568 <HAL_RCC_OscConfig+0x244>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fe fc49 	bl	8002d30 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fe fc45 	bl	8002d30 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1a8      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b28      	ldr	r3, [pc, #160]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4925      	ldr	r1, [pc, #148]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d6:	4b24      	ldr	r3, [pc, #144]	@ (8004568 <HAL_RCC_OscConfig+0x244>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fe fc28 	bl	8002d30 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fe fc24 	bl	8002d30 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e187      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d036      	beq.n	800457c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004516:	4b15      	ldr	r3, [pc, #84]	@ (800456c <HAL_RCC_OscConfig+0x248>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fe fc08 	bl	8002d30 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004524:	f7fe fc04 	bl	8002d30 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e167      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_RCC_OscConfig+0x240>)
 8004538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x200>
 8004542:	e01b      	b.n	800457c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004544:	4b09      	ldr	r3, [pc, #36]	@ (800456c <HAL_RCC_OscConfig+0x248>)
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454a:	f7fe fbf1 	bl	8002d30 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004550:	e00e      	b.n	8004570 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004552:	f7fe fbed 	bl	8002d30 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d907      	bls.n	8004570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e150      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
 8004564:	40023800 	.word	0x40023800
 8004568:	42470000 	.word	0x42470000
 800456c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	4b88      	ldr	r3, [pc, #544]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ea      	bne.n	8004552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8097 	beq.w	80046b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458e:	4b81      	ldr	r3, [pc, #516]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	4b7d      	ldr	r3, [pc, #500]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	4a7c      	ldr	r2, [pc, #496]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	4b77      	ldr	r3, [pc, #476]	@ (8004798 <HAL_RCC_OscConfig+0x474>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d118      	bne.n	80045f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c6:	4b74      	ldr	r3, [pc, #464]	@ (8004798 <HAL_RCC_OscConfig+0x474>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a73      	ldr	r2, [pc, #460]	@ (8004798 <HAL_RCC_OscConfig+0x474>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d2:	f7fe fbad 	bl	8002d30 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045da:	f7fe fba9 	bl	8002d30 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e10c      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004798 <HAL_RCC_OscConfig+0x474>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x2ea>
 8004600:	4b64      	ldr	r3, [pc, #400]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	4a63      	ldr	r2, [pc, #396]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6713      	str	r3, [r2, #112]	@ 0x70
 800460c:	e01c      	b.n	8004648 <HAL_RCC_OscConfig+0x324>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b05      	cmp	r3, #5
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x30c>
 8004616:	4b5f      	ldr	r3, [pc, #380]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	4a5e      	ldr	r2, [pc, #376]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	6713      	str	r3, [r2, #112]	@ 0x70
 8004622:	4b5c      	ldr	r3, [pc, #368]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004626:	4a5b      	ldr	r2, [pc, #364]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6713      	str	r3, [r2, #112]	@ 0x70
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0x324>
 8004630:	4b58      	ldr	r3, [pc, #352]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	4a57      	ldr	r2, [pc, #348]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	6713      	str	r3, [r2, #112]	@ 0x70
 800463c:	4b55      	ldr	r3, [pc, #340]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004640:	4a54      	ldr	r2, [pc, #336]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004642:	f023 0304 	bic.w	r3, r3, #4
 8004646:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d015      	beq.n	800467c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fe fb6e 	bl	8002d30 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004656:	e00a      	b.n	800466e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7fe fb6a 	bl	8002d30 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e0cb      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466e:	4b49      	ldr	r3, [pc, #292]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ee      	beq.n	8004658 <HAL_RCC_OscConfig+0x334>
 800467a:	e014      	b.n	80046a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467c:	f7fe fb58 	bl	8002d30 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004682:	e00a      	b.n	800469a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fe fb54 	bl	8002d30 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0b5      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469a:	4b3e      	ldr	r3, [pc, #248]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ee      	bne.n	8004684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d105      	bne.n	80046b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ac:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	4a38      	ldr	r2, [pc, #224]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80046b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80a1 	beq.w	8004804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c2:	4b34      	ldr	r3, [pc, #208]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d05c      	beq.n	8004788 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d141      	bne.n	800475a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d6:	4b31      	ldr	r3, [pc, #196]	@ (800479c <HAL_RCC_OscConfig+0x478>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fe fb28 	bl	8002d30 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fe fb24 	bl	8002d30 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e087      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	4b27      	ldr	r3, [pc, #156]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	019b      	lsls	r3, r3, #6
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	3b01      	subs	r3, #1
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	491b      	ldr	r1, [pc, #108]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 8004728:	4313      	orrs	r3, r2
 800472a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800472c:	4b1b      	ldr	r3, [pc, #108]	@ (800479c <HAL_RCC_OscConfig+0x478>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004732:	f7fe fafd 	bl	8002d30 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473a:	f7fe faf9 	bl	8002d30 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e05c      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474c:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x416>
 8004758:	e054      	b.n	8004804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b10      	ldr	r3, [pc, #64]	@ (800479c <HAL_RCC_OscConfig+0x478>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fe fae6 	bl	8002d30 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004768:	f7fe fae2 	bl	8002d30 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e045      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_RCC_OscConfig+0x470>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x444>
 8004786:	e03d      	b.n	8004804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e038      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
 8004794:	40023800 	.word	0x40023800
 8004798:	40007000 	.word	0x40007000
 800479c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <HAL_RCC_OscConfig+0x4ec>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d028      	beq.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d121      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d11a      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d8:	4293      	cmp	r3, r2
 80047da:	d111      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	3b01      	subs	r3, #1
 80047ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800

08004814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0cc      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004828:	4b68      	ldr	r3, [pc, #416]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d90c      	bls.n	8004850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b65      	ldr	r3, [pc, #404]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b63      	ldr	r3, [pc, #396]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0b8      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004868:	4b59      	ldr	r3, [pc, #356]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a58      	ldr	r2, [pc, #352]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004880:	4b53      	ldr	r3, [pc, #332]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a52      	ldr	r2, [pc, #328]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800488a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b50      	ldr	r3, [pc, #320]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	494d      	ldr	r1, [pc, #308]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d044      	beq.n	8004934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	4b47      	ldr	r3, [pc, #284]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d119      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e07f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d003      	beq.n	80048d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d2:	4b3f      	ldr	r3, [pc, #252]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e06f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	4b3b      	ldr	r3, [pc, #236]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e067      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f2:	4b37      	ldr	r3, [pc, #220]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f023 0203 	bic.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4934      	ldr	r1, [pc, #208]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004904:	f7fe fa14 	bl	8002d30 <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	e00a      	b.n	8004922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490c:	f7fe fa10 	bl	8002d30 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e04f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 020c 	and.w	r2, r3, #12
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	429a      	cmp	r2, r3
 8004932:	d1eb      	bne.n	800490c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004934:	4b25      	ldr	r3, [pc, #148]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d20c      	bcs.n	800495c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e032      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004968:	4b19      	ldr	r3, [pc, #100]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4916      	ldr	r1, [pc, #88]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004986:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	490e      	ldr	r1, [pc, #56]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800499a:	f000 f821 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 800499e:	4602      	mov	r2, r0
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	490a      	ldr	r1, [pc, #40]	@ (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 80049ac:	5ccb      	ldrb	r3, [r1, r3]
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	4a09      	ldr	r2, [pc, #36]	@ (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049b6:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <HAL_RCC_ClockConfig+0x1c8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd f94a 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40023c00 	.word	0x40023c00
 80049d0:	40023800 	.word	0x40023800
 80049d4:	0800d844 	.word	0x0800d844
 80049d8:	20000024 	.word	0x20000024
 80049dc:	20000028 	.word	0x20000028

080049e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e4:	b090      	sub	sp, #64	@ 0x40
 80049e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ec:	2300      	movs	r3, #0
 80049ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f0:	2300      	movs	r3, #0
 80049f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f8:	4b59      	ldr	r3, [pc, #356]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d00d      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x40>
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	f200 80a1 	bhi.w	8004b4c <HAL_RCC_GetSysClockFreq+0x16c>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x34>
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a12:	e09b      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a14:	4b53      	ldr	r3, [pc, #332]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a16:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004a18:	e09b      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a1a:	4b53      	ldr	r3, [pc, #332]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a1e:	e098      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a20:	4b4f      	ldr	r3, [pc, #316]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a28:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a2a:	4b4d      	ldr	r3, [pc, #308]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d028      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a36:	4b4a      	ldr	r3, [pc, #296]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4b47      	ldr	r3, [pc, #284]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a4c:	fb03 f201 	mul.w	r2, r3, r1
 8004a50:	2300      	movs	r3, #0
 8004a52:	fb00 f303 	mul.w	r3, r0, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	4a43      	ldr	r2, [pc, #268]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a5a:	fba0 1202 	umull	r1, r2, r0, r2
 8004a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a60:	460a      	mov	r2, r1
 8004a62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a66:	4413      	add	r3, r2
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	61fa      	str	r2, [r7, #28]
 8004a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a7a:	f7fc f905 	bl	8000c88 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4613      	mov	r3, r2
 8004a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a86:	e053      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a88:	4b35      	ldr	r3, [pc, #212]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	2200      	movs	r2, #0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	617a      	str	r2, [r7, #20]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a9a:	f04f 0b00 	mov.w	fp, #0
 8004a9e:	4652      	mov	r2, sl
 8004aa0:	465b      	mov	r3, fp
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	0159      	lsls	r1, r3, #5
 8004aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab0:	0150      	lsls	r0, r2, #5
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	ebb2 080a 	subs.w	r8, r2, sl
 8004aba:	eb63 090b 	sbc.w	r9, r3, fp
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004aca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ace:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ad2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ad6:	eb63 0509 	sbc.w	r5, r3, r9
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	00eb      	lsls	r3, r5, #3
 8004ae4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae8:	00e2      	lsls	r2, r4, #3
 8004aea:	4614      	mov	r4, r2
 8004aec:	461d      	mov	r5, r3
 8004aee:	eb14 030a 	adds.w	r3, r4, sl
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	eb45 030b 	adc.w	r3, r5, fp
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b06:	4629      	mov	r1, r5
 8004b08:	028b      	lsls	r3, r1, #10
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b10:	4621      	mov	r1, r4
 8004b12:	028a      	lsls	r2, r1, #10
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	60fa      	str	r2, [r7, #12]
 8004b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b24:	f7fc f8b0 	bl	8000c88 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b30:	4b0b      	ldr	r3, [pc, #44]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004b40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3740      	adds	r7, #64	@ 0x40
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023800 	.word	0x40023800
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	017d7840 	.word	0x017d7840

08004b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b70:	4b03      	ldr	r3, [pc, #12]	@ (8004b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000024 	.word	0x20000024

08004b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b88:	f7ff fff0 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0a9b      	lsrs	r3, r3, #10
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4903      	ldr	r1, [pc, #12]	@ (8004ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	0800d854 	.word	0x0800d854

08004bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bb0:	f7ff ffdc 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0b5b      	lsrs	r3, r3, #13
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4903      	ldr	r1, [pc, #12]	@ (8004bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	0800d854 	.word	0x0800d854

08004bd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	220f      	movs	r2, #15
 8004be2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004be4:	4b12      	ldr	r3, [pc, #72]	@ (8004c30 <HAL_RCC_GetClockConfig+0x5c>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0203 	and.w	r2, r3, #3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c30 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c30 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c08:	4b09      	ldr	r3, [pc, #36]	@ (8004c30 <HAL_RCC_GetClockConfig+0x5c>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	08db      	lsrs	r3, r3, #3
 8004c0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c16:	4b07      	ldr	r3, [pc, #28]	@ (8004c34 <HAL_RCC_GetClockConfig+0x60>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0207 	and.w	r2, r3, #7
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	601a      	str	r2, [r3, #0]
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40023c00 	.word	0x40023c00

08004c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e07b      	b.n	8004d42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c5a:	d009      	beq.n	8004c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	61da      	str	r2, [r3, #28]
 8004c62:	e005      	b.n	8004c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc ff6e 	bl	8001b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ca6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf4:	ea42 0103 	orr.w	r1, r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	0c1b      	lsrs	r3, r3, #16
 8004d0e:	f003 0104 	and.w	r1, r3, #4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	f003 0210 	and.w	r2, r3, #16
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b088      	sub	sp, #32
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_SPI_Transmit+0x22>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e12d      	b.n	8004fc8 <HAL_SPI_Transmit+0x27e>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d74:	f7fd ffdc 	bl	8002d30 <HAL_GetTick>
 8004d78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d002      	beq.n	8004d90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d8e:	e116      	b.n	8004fbe <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_SPI_Transmit+0x52>
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004da0:	e10d      	b.n	8004fbe <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2203      	movs	r2, #3
 8004da6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de8:	d10f      	bne.n	8004e0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e14:	2b40      	cmp	r3, #64	@ 0x40
 8004e16:	d007      	beq.n	8004e28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e30:	d14f      	bne.n	8004ed2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_Transmit+0xf6>
 8004e3a:	8afb      	ldrh	r3, [r7, #22]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d142      	bne.n	8004ec6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	881a      	ldrh	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	1c9a      	adds	r2, r3, #2
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e64:	e02f      	b.n	8004ec6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d112      	bne.n	8004e9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e98:	e015      	b.n	8004ec6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e9a:	f7fd ff49 	bl	8002d30 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d803      	bhi.n	8004eb2 <HAL_SPI_Transmit+0x168>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d102      	bne.n	8004eb8 <HAL_SPI_Transmit+0x16e>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004ec4:	e07b      	b.n	8004fbe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ca      	bne.n	8004e66 <HAL_SPI_Transmit+0x11c>
 8004ed0:	e050      	b.n	8004f74 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_SPI_Transmit+0x196>
 8004eda:	8afb      	ldrh	r3, [r7, #22]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d144      	bne.n	8004f6a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f06:	e030      	b.n	8004f6a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d113      	bne.n	8004f3e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	330c      	adds	r3, #12
 8004f20:	7812      	ldrb	r2, [r2, #0]
 8004f22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f3c:	e015      	b.n	8004f6a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3e:	f7fd fef7 	bl	8002d30 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d803      	bhi.n	8004f56 <HAL_SPI_Transmit+0x20c>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d102      	bne.n	8004f5c <HAL_SPI_Transmit+0x212>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f68:	e029      	b.n	8004fbe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1c9      	bne.n	8004f08 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	6839      	ldr	r1, [r7, #0]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fa61 	bl	8005440 <SPI_EndRxTxTransaction>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e003      	b.n	8004fbe <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004fc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	@ 0x30
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x26>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e198      	b.n	8005328 <HAL_SPI_TransmitReceive+0x358>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ffe:	f7fd fe97 	bl	8002d30 <HAL_GetTick>
 8005002:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005014:	887b      	ldrh	r3, [r7, #2]
 8005016:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005018:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800501c:	2b01      	cmp	r3, #1
 800501e:	d00f      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x70>
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005026:	d107      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d103      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x68>
 8005030:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005034:	2b04      	cmp	r3, #4
 8005036:	d003      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005038:	2302      	movs	r3, #2
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800503e:	e16d      	b.n	800531c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_SPI_TransmitReceive+0x82>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_SPI_TransmitReceive+0x82>
 800504c:	887b      	ldrh	r3, [r7, #2]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005058:	e160      	b.n	800531c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b04      	cmp	r3, #4
 8005064:	d003      	beq.n	800506e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2205      	movs	r2, #5
 800506a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	887a      	ldrh	r2, [r7, #2]
 8005096:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ae:	2b40      	cmp	r3, #64	@ 0x40
 80050b0:	d007      	beq.n	80050c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ca:	d17c      	bne.n	80051c6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_SPI_TransmitReceive+0x10a>
 80050d4:	8b7b      	ldrh	r3, [r7, #26]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d16a      	bne.n	80051b0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050de:	881a      	ldrh	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050fe:	e057      	b.n	80051b0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	d11b      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x176>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d016      	beq.n	8005146 <HAL_SPI_TransmitReceive+0x176>
 8005118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d113      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005122:	881a      	ldrh	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d119      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x1b8>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d014      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	b292      	uxth	r2, r2
 800516a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005184:	2301      	movs	r3, #1
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005188:	f7fd fdd2 	bl	8002d30 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005194:	429a      	cmp	r2, r3
 8005196:	d80b      	bhi.n	80051b0 <HAL_SPI_TransmitReceive+0x1e0>
 8005198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d007      	beq.n	80051b0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80051ae:	e0b5      	b.n	800531c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1a2      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x130>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d19d      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x130>
 80051c4:	e080      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x204>
 80051ce:	8b7b      	ldrh	r3, [r7, #26]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d16f      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fa:	e05b      	b.n	80052b4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d11c      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x274>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d017      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x274>
 8005214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d114      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	7812      	ldrb	r2, [r2, #0]
 8005226:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d119      	bne.n	8005286 <HAL_SPI_TransmitReceive+0x2b6>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d014      	beq.n	8005286 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005282:	2301      	movs	r3, #1
 8005284:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005286:	f7fd fd53 	bl	8002d30 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005292:	429a      	cmp	r2, r3
 8005294:	d803      	bhi.n	800529e <HAL_SPI_TransmitReceive+0x2ce>
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529c:	d102      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x2d4>
 800529e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d107      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80052b2:	e033      	b.n	800531c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d19e      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x22c>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d199      	bne.n	80051fc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f8b7 	bl	8005440 <SPI_EndRxTxTransaction>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d006      	beq.n	80052e6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80052e4:	e01a      	b.n	800531c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005312:	e003      	b.n	800531c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005324:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005328:	4618      	mov	r0, r3
 800532a:	3730      	adds	r7, #48	@ 0x30
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005340:	f7fd fcf6 	bl	8002d30 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	4413      	add	r3, r2
 800534e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005350:	f7fd fcee 	bl	8002d30 <HAL_GetTick>
 8005354:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005356:	4b39      	ldr	r3, [pc, #228]	@ (800543c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	015b      	lsls	r3, r3, #5
 800535c:	0d1b      	lsrs	r3, r3, #20
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	fb02 f303 	mul.w	r3, r2, r3
 8005364:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005366:	e054      	b.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d050      	beq.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005370:	f7fd fcde 	bl	8002d30 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	429a      	cmp	r2, r3
 800537e:	d902      	bls.n	8005386 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d13d      	bne.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005394:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800539e:	d111      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a8:	d004      	beq.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b2:	d107      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053cc:	d10f      	bne.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e017      	b.n	8005432 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3b01      	subs	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	429a      	cmp	r2, r3
 8005420:	bf0c      	ite	eq
 8005422:	2301      	moveq	r3, #1
 8005424:	2300      	movne	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	429a      	cmp	r2, r3
 800542e:	d19b      	bne.n	8005368 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000024 	.word	0x20000024

08005440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2201      	movs	r2, #1
 8005454:	2102      	movs	r1, #2
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff ff6a 	bl	8005330 <SPI_WaitFlagStateUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d007      	beq.n	8005472 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e032      	b.n	80054d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005472:	4b1b      	ldr	r3, [pc, #108]	@ (80054e0 <SPI_EndRxTxTransaction+0xa0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1b      	ldr	r2, [pc, #108]	@ (80054e4 <SPI_EndRxTxTransaction+0xa4>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	0d5b      	lsrs	r3, r3, #21
 800547e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005490:	d112      	bne.n	80054b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	2180      	movs	r1, #128	@ 0x80
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f7ff ff47 	bl	8005330 <SPI_WaitFlagStateUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d016      	beq.n	80054d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e00f      	b.n	80054d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ce:	2b80      	cmp	r3, #128	@ 0x80
 80054d0:	d0f2      	beq.n	80054b8 <SPI_EndRxTxTransaction+0x78>
 80054d2:	e000      	b.n	80054d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80054d4:	bf00      	nop
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20000024 	.word	0x20000024
 80054e4:	165e9f81 	.word	0x165e9f81

080054e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e041      	b.n	800557e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f839 	bl	8005586 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f000 f9c0 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d001      	beq.n	80055b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e04e      	b.n	8005652 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a23      	ldr	r2, [pc, #140]	@ (8005660 <HAL_TIM_Base_Start_IT+0xc4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d022      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x80>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055de:	d01d      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x80>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005664 <HAL_TIM_Base_Start_IT+0xc8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d018      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x80>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005668 <HAL_TIM_Base_Start_IT+0xcc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d013      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x80>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1c      	ldr	r2, [pc, #112]	@ (800566c <HAL_TIM_Base_Start_IT+0xd0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00e      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x80>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1b      	ldr	r2, [pc, #108]	@ (8005670 <HAL_TIM_Base_Start_IT+0xd4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d009      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x80>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a19      	ldr	r2, [pc, #100]	@ (8005674 <HAL_TIM_Base_Start_IT+0xd8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d004      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x80>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a18      	ldr	r2, [pc, #96]	@ (8005678 <HAL_TIM_Base_Start_IT+0xdc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d111      	bne.n	8005640 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b06      	cmp	r3, #6
 800562c:	d010      	beq.n	8005650 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0201 	orr.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563e:	e007      	b.n	8005650 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40010000 	.word	0x40010000
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40010400 	.word	0x40010400
 8005674:	40014000 	.word	0x40014000
 8005678:	40001800 	.word	0x40001800

0800567c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d020      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0202 	mvn.w	r2, #2
 80056b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f8d2 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8c4 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f8d5 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d020      	beq.n	800572c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01b      	beq.n	800572c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0204 	mvn.w	r2, #4
 80056fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f8ac 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f89e 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f8af 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d020      	beq.n	8005778 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01b      	beq.n	8005778 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0208 	mvn.w	r2, #8
 8005748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2204      	movs	r2, #4
 800574e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f886 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f878 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f889 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b00      	cmp	r3, #0
 8005780:	d020      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0310 	and.w	r3, r3, #16
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01b      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0210 	mvn.w	r2, #16
 8005794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2208      	movs	r2, #8
 800579a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f860 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f852 	bl	800585c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f863 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00c      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0201 	mvn.w	r2, #1
 80057e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fc f842 	bl	800186c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f906 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00c      	beq.n	8005830 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f834 	bl	8005898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0220 	mvn.w	r2, #32
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8d8 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a46      	ldr	r2, [pc, #280]	@ (80059d8 <TIM_Base_SetConfig+0x12c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ca:	d00f      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a43      	ldr	r2, [pc, #268]	@ (80059dc <TIM_Base_SetConfig+0x130>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a42      	ldr	r2, [pc, #264]	@ (80059e0 <TIM_Base_SetConfig+0x134>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a41      	ldr	r2, [pc, #260]	@ (80059e4 <TIM_Base_SetConfig+0x138>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a40      	ldr	r2, [pc, #256]	@ (80059e8 <TIM_Base_SetConfig+0x13c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d108      	bne.n	80058fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a35      	ldr	r2, [pc, #212]	@ (80059d8 <TIM_Base_SetConfig+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d02b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590c:	d027      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a32      	ldr	r2, [pc, #200]	@ (80059dc <TIM_Base_SetConfig+0x130>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d023      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a31      	ldr	r2, [pc, #196]	@ (80059e0 <TIM_Base_SetConfig+0x134>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a30      	ldr	r2, [pc, #192]	@ (80059e4 <TIM_Base_SetConfig+0x138>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2f      	ldr	r2, [pc, #188]	@ (80059e8 <TIM_Base_SetConfig+0x13c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d017      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2e      	ldr	r2, [pc, #184]	@ (80059ec <TIM_Base_SetConfig+0x140>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2d      	ldr	r2, [pc, #180]	@ (80059f0 <TIM_Base_SetConfig+0x144>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2c      	ldr	r2, [pc, #176]	@ (80059f4 <TIM_Base_SetConfig+0x148>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2b      	ldr	r2, [pc, #172]	@ (80059f8 <TIM_Base_SetConfig+0x14c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2a      	ldr	r2, [pc, #168]	@ (80059fc <TIM_Base_SetConfig+0x150>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a29      	ldr	r2, [pc, #164]	@ (8005a00 <TIM_Base_SetConfig+0x154>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a10      	ldr	r2, [pc, #64]	@ (80059d8 <TIM_Base_SetConfig+0x12c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0xf8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a12      	ldr	r2, [pc, #72]	@ (80059e8 <TIM_Base_SetConfig+0x13c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d103      	bne.n	80059ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]
  }
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40010400 	.word	0x40010400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800
 80059f8:	40001800 	.word	0x40001800
 80059fc:	40001c00 	.word	0x40001c00
 8005a00:	40002000 	.word	0x40002000

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e042      	b.n	8005ac4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fc faa2 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	@ 0x24
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f973 	bl	8005d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	@ 0x28
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d175      	bne.n	8005bd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_UART_Transmit+0x2c>
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e06e      	b.n	8005bda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2221      	movs	r2, #33	@ 0x21
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b0a:	f7fd f911 	bl	8002d30 <HAL_GetTick>
 8005b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	88fa      	ldrh	r2, [r7, #6]
 8005b14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b24:	d108      	bne.n	8005b38 <HAL_UART_Transmit+0x6c>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	e003      	b.n	8005b40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b40:	e02e      	b.n	8005ba0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2180      	movs	r1, #128	@ 0x80
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f848 	bl	8005be2 <UART_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e03a      	b.n	8005bda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10b      	bne.n	8005b82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	61bb      	str	r3, [r7, #24]
 8005b80:	e007      	b.n	8005b92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	781a      	ldrb	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1cb      	bne.n	8005b42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2140      	movs	r1, #64	@ 0x40
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f814 	bl	8005be2 <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e006      	b.n	8005bda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e000      	b.n	8005bda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
  }
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	603b      	str	r3, [r7, #0]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf2:	e03b      	b.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d037      	beq.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfc:	f7fd f898 	bl	8002d30 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d302      	bcc.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e03a      	b.n	8005c8c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d023      	beq.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b80      	cmp	r3, #128	@ 0x80
 8005c28:	d020      	beq.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b40      	cmp	r3, #64	@ 0x40
 8005c2e:	d01d      	beq.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d116      	bne.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f81d 	bl	8005c94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2208      	movs	r2, #8
 8005c5e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e00f      	b.n	8005c8c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4013      	ands	r3, r2
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	bf0c      	ite	eq
 8005c7c:	2301      	moveq	r3, #1
 8005c7e:	2300      	movne	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d0b4      	beq.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b095      	sub	sp, #84	@ 0x54
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e5      	bne.n	8005c9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3314      	adds	r3, #20
 8005cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d119      	bne.n	8005d40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	330c      	adds	r3, #12
 8005d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f023 0310 	bic.w	r3, r3, #16
 8005d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d2c:	61ba      	str	r2, [r7, #24]
 8005d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6979      	ldr	r1, [r7, #20]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e5      	bne.n	8005d0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d4e:	bf00      	nop
 8005d50:	3754      	adds	r7, #84	@ 0x54
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d60:	b0c0      	sub	sp, #256	@ 0x100
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	68d9      	ldr	r1, [r3, #12]
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	ea40 0301 	orr.w	r3, r0, r1
 8005d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005db4:	f021 010c 	bic.w	r1, r1, #12
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	6999      	ldr	r1, [r3, #24]
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	ea40 0301 	orr.w	r3, r0, r1
 8005de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b8f      	ldr	r3, [pc, #572]	@ (8006028 <UART_SetConfig+0x2cc>)
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d005      	beq.n	8005dfc <UART_SetConfig+0xa0>
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b8d      	ldr	r3, [pc, #564]	@ (800602c <UART_SetConfig+0x2d0>)
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d104      	bne.n	8005e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dfc:	f7fe fed6 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 8005e00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e04:	e003      	b.n	8005e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e06:	f7fe febd 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e18:	f040 810c 	bne.w	8006034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e2e:	4622      	mov	r2, r4
 8005e30:	462b      	mov	r3, r5
 8005e32:	1891      	adds	r1, r2, r2
 8005e34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e36:	415b      	adcs	r3, r3
 8005e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e3e:	4621      	mov	r1, r4
 8005e40:	eb12 0801 	adds.w	r8, r2, r1
 8005e44:	4629      	mov	r1, r5
 8005e46:	eb43 0901 	adc.w	r9, r3, r1
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e5e:	4690      	mov	r8, r2
 8005e60:	4699      	mov	r9, r3
 8005e62:	4623      	mov	r3, r4
 8005e64:	eb18 0303 	adds.w	r3, r8, r3
 8005e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	eb49 0303 	adc.w	r3, r9, r3
 8005e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	18db      	adds	r3, r3, r3
 8005e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e90:	4613      	mov	r3, r2
 8005e92:	eb42 0303 	adc.w	r3, r2, r3
 8005e96:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ea0:	f7fa fef2 	bl	8000c88 <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4b61      	ldr	r3, [pc, #388]	@ (8006030 <UART_SetConfig+0x2d4>)
 8005eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	011c      	lsls	r4, r3, #4
 8005eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	1891      	adds	r1, r2, r2
 8005eca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ecc:	415b      	adcs	r3, r3
 8005ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8005eda:	4649      	mov	r1, r9
 8005edc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef4:	4692      	mov	sl, r2
 8005ef6:	469b      	mov	fp, r3
 8005ef8:	4643      	mov	r3, r8
 8005efa:	eb1a 0303 	adds.w	r3, sl, r3
 8005efe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f02:	464b      	mov	r3, r9
 8005f04:	eb4b 0303 	adc.w	r3, fp, r3
 8005f08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f20:	460b      	mov	r3, r1
 8005f22:	18db      	adds	r3, r3, r3
 8005f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f26:	4613      	mov	r3, r2
 8005f28:	eb42 0303 	adc.w	r3, r2, r3
 8005f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f36:	f7fa fea7 	bl	8000c88 <__aeabi_uldivmod>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4b3b      	ldr	r3, [pc, #236]	@ (8006030 <UART_SetConfig+0x2d4>)
 8005f42:	fba3 2301 	umull	r2, r3, r3, r1
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	2264      	movs	r2, #100	@ 0x64
 8005f4a:	fb02 f303 	mul.w	r3, r2, r3
 8005f4e:	1acb      	subs	r3, r1, r3
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f56:	4b36      	ldr	r3, [pc, #216]	@ (8006030 <UART_SetConfig+0x2d4>)
 8005f58:	fba3 2302 	umull	r2, r3, r3, r2
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f64:	441c      	add	r4, r3
 8005f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f78:	4642      	mov	r2, r8
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	1891      	adds	r1, r2, r2
 8005f7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f80:	415b      	adcs	r3, r3
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f88:	4641      	mov	r1, r8
 8005f8a:	1851      	adds	r1, r2, r1
 8005f8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f8e:	4649      	mov	r1, r9
 8005f90:	414b      	adcs	r3, r1
 8005f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fa0:	4659      	mov	r1, fp
 8005fa2:	00cb      	lsls	r3, r1, #3
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005faa:	4651      	mov	r1, sl
 8005fac:	00ca      	lsls	r2, r1, #3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	189b      	adds	r3, r3, r2
 8005fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	460a      	mov	r2, r1
 8005fc0:	eb42 0303 	adc.w	r3, r2, r3
 8005fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fdc:	460b      	mov	r3, r1
 8005fde:	18db      	adds	r3, r3, r3
 8005fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	eb42 0303 	adc.w	r3, r2, r3
 8005fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ff2:	f7fa fe49 	bl	8000c88 <__aeabi_uldivmod>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <UART_SetConfig+0x2d4>)
 8005ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	2164      	movs	r1, #100	@ 0x64
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	3332      	adds	r3, #50	@ 0x32
 800600e:	4a08      	ldr	r2, [pc, #32]	@ (8006030 <UART_SetConfig+0x2d4>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	f003 0207 	and.w	r2, r3, #7
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4422      	add	r2, r4
 8006022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006024:	e106      	b.n	8006234 <UART_SetConfig+0x4d8>
 8006026:	bf00      	nop
 8006028:	40011000 	.word	0x40011000
 800602c:	40011400 	.word	0x40011400
 8006030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800603e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006046:	4642      	mov	r2, r8
 8006048:	464b      	mov	r3, r9
 800604a:	1891      	adds	r1, r2, r2
 800604c:	6239      	str	r1, [r7, #32]
 800604e:	415b      	adcs	r3, r3
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
 8006052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006056:	4641      	mov	r1, r8
 8006058:	1854      	adds	r4, r2, r1
 800605a:	4649      	mov	r1, r9
 800605c:	eb43 0501 	adc.w	r5, r3, r1
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	00eb      	lsls	r3, r5, #3
 800606a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800606e:	00e2      	lsls	r2, r4, #3
 8006070:	4614      	mov	r4, r2
 8006072:	461d      	mov	r5, r3
 8006074:	4643      	mov	r3, r8
 8006076:	18e3      	adds	r3, r4, r3
 8006078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800607c:	464b      	mov	r3, r9
 800607e:	eb45 0303 	adc.w	r3, r5, r3
 8006082:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006092:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060a2:	4629      	mov	r1, r5
 80060a4:	008b      	lsls	r3, r1, #2
 80060a6:	4621      	mov	r1, r4
 80060a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ac:	4621      	mov	r1, r4
 80060ae:	008a      	lsls	r2, r1, #2
 80060b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060b4:	f7fa fde8 	bl	8000c88 <__aeabi_uldivmod>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4b60      	ldr	r3, [pc, #384]	@ (8006240 <UART_SetConfig+0x4e4>)
 80060be:	fba3 2302 	umull	r2, r3, r3, r2
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	011c      	lsls	r4, r3, #4
 80060c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	1891      	adds	r1, r2, r2
 80060de:	61b9      	str	r1, [r7, #24]
 80060e0:	415b      	adcs	r3, r3
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060e8:	4641      	mov	r1, r8
 80060ea:	1851      	adds	r1, r2, r1
 80060ec:	6139      	str	r1, [r7, #16]
 80060ee:	4649      	mov	r1, r9
 80060f0:	414b      	adcs	r3, r1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	f04f 0300 	mov.w	r3, #0
 80060fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006100:	4659      	mov	r1, fp
 8006102:	00cb      	lsls	r3, r1, #3
 8006104:	4651      	mov	r1, sl
 8006106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800610a:	4651      	mov	r1, sl
 800610c:	00ca      	lsls	r2, r1, #3
 800610e:	4610      	mov	r0, r2
 8006110:	4619      	mov	r1, r3
 8006112:	4603      	mov	r3, r0
 8006114:	4642      	mov	r2, r8
 8006116:	189b      	adds	r3, r3, r2
 8006118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800611c:	464b      	mov	r3, r9
 800611e:	460a      	mov	r2, r1
 8006120:	eb42 0303 	adc.w	r3, r2, r3
 8006124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006132:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006140:	4649      	mov	r1, r9
 8006142:	008b      	lsls	r3, r1, #2
 8006144:	4641      	mov	r1, r8
 8006146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800614a:	4641      	mov	r1, r8
 800614c:	008a      	lsls	r2, r1, #2
 800614e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006152:	f7fa fd99 	bl	8000c88 <__aeabi_uldivmod>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4611      	mov	r1, r2
 800615c:	4b38      	ldr	r3, [pc, #224]	@ (8006240 <UART_SetConfig+0x4e4>)
 800615e:	fba3 2301 	umull	r2, r3, r3, r1
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	2264      	movs	r2, #100	@ 0x64
 8006166:	fb02 f303 	mul.w	r3, r2, r3
 800616a:	1acb      	subs	r3, r1, r3
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	3332      	adds	r3, #50	@ 0x32
 8006170:	4a33      	ldr	r2, [pc, #204]	@ (8006240 <UART_SetConfig+0x4e4>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800617c:	441c      	add	r4, r3
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	673b      	str	r3, [r7, #112]	@ 0x70
 8006186:	677a      	str	r2, [r7, #116]	@ 0x74
 8006188:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800618c:	4642      	mov	r2, r8
 800618e:	464b      	mov	r3, r9
 8006190:	1891      	adds	r1, r2, r2
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	415b      	adcs	r3, r3
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800619c:	4641      	mov	r1, r8
 800619e:	1851      	adds	r1, r2, r1
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	4649      	mov	r1, r9
 80061a4:	414b      	adcs	r3, r1
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061b4:	4659      	mov	r1, fp
 80061b6:	00cb      	lsls	r3, r1, #3
 80061b8:	4651      	mov	r1, sl
 80061ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061be:	4651      	mov	r1, sl
 80061c0:	00ca      	lsls	r2, r1, #3
 80061c2:	4610      	mov	r0, r2
 80061c4:	4619      	mov	r1, r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	4642      	mov	r2, r8
 80061ca:	189b      	adds	r3, r3, r2
 80061cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061ce:	464b      	mov	r3, r9
 80061d0:	460a      	mov	r2, r1
 80061d2:	eb42 0303 	adc.w	r3, r2, r3
 80061d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80061e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061f0:	4649      	mov	r1, r9
 80061f2:	008b      	lsls	r3, r1, #2
 80061f4:	4641      	mov	r1, r8
 80061f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061fa:	4641      	mov	r1, r8
 80061fc:	008a      	lsls	r2, r1, #2
 80061fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006202:	f7fa fd41 	bl	8000c88 <__aeabi_uldivmod>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4b0d      	ldr	r3, [pc, #52]	@ (8006240 <UART_SetConfig+0x4e4>)
 800620c:	fba3 1302 	umull	r1, r3, r3, r2
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	2164      	movs	r1, #100	@ 0x64
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	3332      	adds	r3, #50	@ 0x32
 800621e:	4a08      	ldr	r2, [pc, #32]	@ (8006240 <UART_SetConfig+0x4e4>)
 8006220:	fba2 2303 	umull	r2, r3, r2, r3
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	f003 020f 	and.w	r2, r3, #15
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4422      	add	r2, r4
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800623a:	46bd      	mov	sp, r7
 800623c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006240:	51eb851f 	.word	0x51eb851f

08006244 <__NVIC_SetPriority>:
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	6039      	str	r1, [r7, #0]
 800624e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006254:	2b00      	cmp	r3, #0
 8006256:	db0a      	blt.n	800626e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	490c      	ldr	r1, [pc, #48]	@ (8006290 <__NVIC_SetPriority+0x4c>)
 800625e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006262:	0112      	lsls	r2, r2, #4
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	440b      	add	r3, r1
 8006268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800626c:	e00a      	b.n	8006284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4908      	ldr	r1, [pc, #32]	@ (8006294 <__NVIC_SetPriority+0x50>)
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	3b04      	subs	r3, #4
 800627c:	0112      	lsls	r2, r2, #4
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	440b      	add	r3, r1
 8006282:	761a      	strb	r2, [r3, #24]
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	e000e100 	.word	0xe000e100
 8006294:	e000ed00 	.word	0xe000ed00

08006298 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800629c:	4b05      	ldr	r3, [pc, #20]	@ (80062b4 <SysTick_Handler+0x1c>)
 800629e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80062a0:	f001 fd18 	bl	8007cd4 <xTaskGetSchedulerState>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d001      	beq.n	80062ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80062aa:	f002 fb0d 	bl	80088c8 <xPortSysTickHandler>
  }
}
 80062ae:	bf00      	nop
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	e000e010 	.word	0xe000e010

080062b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80062bc:	2100      	movs	r1, #0
 80062be:	f06f 0004 	mvn.w	r0, #4
 80062c2:	f7ff ffbf 	bl	8006244 <__NVIC_SetPriority>
#endif
}
 80062c6:	bf00      	nop
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d2:	f3ef 8305 	mrs	r3, IPSR
 80062d6:	603b      	str	r3, [r7, #0]
  return(result);
 80062d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80062de:	f06f 0305 	mvn.w	r3, #5
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	e00c      	b.n	8006300 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80062e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006310 <osKernelInitialize+0x44>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d105      	bne.n	80062fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80062ee:	4b08      	ldr	r3, [pc, #32]	@ (8006310 <osKernelInitialize+0x44>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	607b      	str	r3, [r7, #4]
 80062f8:	e002      	b.n	8006300 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80062fa:	f04f 33ff 	mov.w	r3, #4294967295
 80062fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006300:	687b      	ldr	r3, [r7, #4]
}
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	200007e0 	.word	0x200007e0

08006314 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800631a:	f3ef 8305 	mrs	r3, IPSR
 800631e:	603b      	str	r3, [r7, #0]
  return(result);
 8006320:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006326:	f06f 0305 	mvn.w	r3, #5
 800632a:	607b      	str	r3, [r7, #4]
 800632c:	e010      	b.n	8006350 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800632e:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <osKernelStart+0x48>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d109      	bne.n	800634a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006336:	f7ff ffbf 	bl	80062b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800633a:	4b08      	ldr	r3, [pc, #32]	@ (800635c <osKernelStart+0x48>)
 800633c:	2202      	movs	r2, #2
 800633e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006340:	f001 f87a 	bl	8007438 <vTaskStartScheduler>
      stat = osOK;
 8006344:	2300      	movs	r3, #0
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	e002      	b.n	8006350 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800634a:	f04f 33ff 	mov.w	r3, #4294967295
 800634e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006350:	687b      	ldr	r3, [r7, #4]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	200007e0 	.word	0x200007e0

08006360 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b08e      	sub	sp, #56	@ 0x38
 8006364:	af04      	add	r7, sp, #16
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006370:	f3ef 8305 	mrs	r3, IPSR
 8006374:	617b      	str	r3, [r7, #20]
  return(result);
 8006376:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006378:	2b00      	cmp	r3, #0
 800637a:	d17e      	bne.n	800647a <osThreadNew+0x11a>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d07b      	beq.n	800647a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006382:	2380      	movs	r3, #128	@ 0x80
 8006384:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006386:	2318      	movs	r3, #24
 8006388:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800638e:	f04f 33ff 	mov.w	r3, #4294967295
 8006392:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d045      	beq.n	8006426 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <osThreadNew+0x48>
        name = attr->name;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <osThreadNew+0x6e>
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2b38      	cmp	r3, #56	@ 0x38
 80063c0:	d805      	bhi.n	80063ce <osThreadNew+0x6e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <osThreadNew+0x72>
        return (NULL);
 80063ce:	2300      	movs	r3, #0
 80063d0:	e054      	b.n	800647c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	089b      	lsrs	r3, r3, #2
 80063e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <osThreadNew+0xa8>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	2b5b      	cmp	r3, #91	@ 0x5b
 80063f0:	d90a      	bls.n	8006408 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <osThreadNew+0xa8>
        mem = 1;
 8006402:	2301      	movs	r3, #1
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e010      	b.n	800642a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10c      	bne.n	800642a <osThreadNew+0xca>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d108      	bne.n	800642a <osThreadNew+0xca>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <osThreadNew+0xca>
          mem = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e001      	b.n	800642a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d110      	bne.n	8006452 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006438:	9202      	str	r2, [sp, #8]
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6a3a      	ldr	r2, [r7, #32]
 8006444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fe1a 	bl	8007080 <xTaskCreateStatic>
 800644c:	4603      	mov	r3, r0
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	e013      	b.n	800647a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d110      	bne.n	800647a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	b29a      	uxth	r2, r3
 800645c:	f107 0310 	add.w	r3, r7, #16
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fe68 	bl	8007140 <xTaskCreate>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d001      	beq.n	800647a <osThreadNew+0x11a>
            hTask = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800647a:	693b      	ldr	r3, [r7, #16]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3728      	adds	r7, #40	@ 0x28
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800648c:	f3ef 8305 	mrs	r3, IPSR
 8006490:	60bb      	str	r3, [r7, #8]
  return(result);
 8006492:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <osDelay+0x1c>
    stat = osErrorISR;
 8006498:	f06f 0305 	mvn.w	r3, #5
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	e007      	b.n	80064b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 ff8e 	bl	80073cc <vTaskDelay>
    }
  }

  return (stat);
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a07      	ldr	r2, [pc, #28]	@ (80064e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80064cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4a06      	ldr	r2, [pc, #24]	@ (80064ec <vApplicationGetIdleTaskMemory+0x30>)
 80064d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2280      	movs	r2, #128	@ 0x80
 80064d8:	601a      	str	r2, [r3, #0]
}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	200007e4 	.word	0x200007e4
 80064ec:	20000840 	.word	0x20000840

080064f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a07      	ldr	r2, [pc, #28]	@ (800651c <vApplicationGetTimerTaskMemory+0x2c>)
 8006500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4a06      	ldr	r2, [pc, #24]	@ (8006520 <vApplicationGetTimerTaskMemory+0x30>)
 8006506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800650e:	601a      	str	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	20000a40 	.word	0x20000a40
 8006520:	20000a9c 	.word	0x20000a9c

08006524 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f103 0208 	add.w	r2, r3, #8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f04f 32ff 	mov.w	r2, #4294967295
 800653c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f103 0208 	add.w	r2, r3, #8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f103 0208 	add.w	r2, r3, #8
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d103      	bne.n	80065e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e00c      	b.n	8006600 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3308      	adds	r3, #8
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	e002      	b.n	80065f4 <vListInsert+0x2e>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d2f6      	bcs.n	80065ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	601a      	str	r2, [r3, #0]
}
 800662c:	bf00      	nop
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6892      	ldr	r2, [r2, #8]
 800664e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6852      	ldr	r2, [r2, #4]
 8006658:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	429a      	cmp	r2, r3
 8006662:	d103      	bne.n	800666c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	1e5a      	subs	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10b      	bne.n	80066b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	e7fd      	b.n	80066b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066b8:	f002 f876 	bl	80087a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c4:	68f9      	ldr	r1, [r7, #12]
 80066c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	441a      	add	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e8:	3b01      	subs	r3, #1
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80066ee:	fb01 f303 	mul.w	r3, r1, r3
 80066f2:	441a      	add	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	22ff      	movs	r2, #255	@ 0xff
 80066fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	22ff      	movs	r2, #255	@ 0xff
 8006704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d114      	bne.n	8006738 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01a      	beq.n	800674c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3310      	adds	r3, #16
 800671a:	4618      	mov	r0, r3
 800671c:	f001 f91a 	bl	8007954 <xTaskRemoveFromEventList>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d012      	beq.n	800674c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006726:	4b0d      	ldr	r3, [pc, #52]	@ (800675c <xQueueGenericReset+0xd0>)
 8006728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	e009      	b.n	800674c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3310      	adds	r3, #16
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fef1 	bl	8006524 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3324      	adds	r3, #36	@ 0x24
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff feec 	bl	8006524 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800674c:	f002 f85e 	bl	800880c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006750:	2301      	movs	r3, #1
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	e000ed04 	.word	0xe000ed04

08006760 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08e      	sub	sp, #56	@ 0x38
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10b      	bne.n	800678c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006786:	bf00      	nop
 8006788:	bf00      	nop
 800678a:	e7fd      	b.n	8006788 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10b      	bne.n	80067aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	e7fd      	b.n	80067a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <xQueueGenericCreateStatic+0x56>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <xQueueGenericCreateStatic+0x5a>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <xQueueGenericCreateStatic+0x5c>
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10b      	bne.n	80067d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	623b      	str	r3, [r7, #32]
}
 80067d2:	bf00      	nop
 80067d4:	bf00      	nop
 80067d6:	e7fd      	b.n	80067d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d102      	bne.n	80067e4 <xQueueGenericCreateStatic+0x84>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <xQueueGenericCreateStatic+0x88>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <xQueueGenericCreateStatic+0x8a>
 80067e8:	2300      	movs	r3, #0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10b      	bne.n	8006806 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	61fb      	str	r3, [r7, #28]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006806:	2350      	movs	r3, #80	@ 0x50
 8006808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b50      	cmp	r3, #80	@ 0x50
 800680e:	d00b      	beq.n	8006828 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	61bb      	str	r3, [r7, #24]
}
 8006822:	bf00      	nop
 8006824:	bf00      	nop
 8006826:	e7fd      	b.n	8006824 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006828:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800682e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00d      	beq.n	8006850 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800683c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f805 	bl	800685a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006852:	4618      	mov	r0, r3
 8006854:	3730      	adds	r7, #48	@ 0x30
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	e002      	b.n	800687c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006888:	2101      	movs	r1, #1
 800688a:	69b8      	ldr	r0, [r7, #24]
 800688c:	f7ff fefe 	bl	800668c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08e      	sub	sp, #56	@ 0x38
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068ae:	2300      	movs	r3, #0
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10b      	bne.n	80068d4 <xQueueGenericSend+0x34>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	e7fd      	b.n	80068d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d103      	bne.n	80068e2 <xQueueGenericSend+0x42>
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <xQueueGenericSend+0x46>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <xQueueGenericSend+0x48>
 80068e6:	2300      	movs	r3, #0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10b      	bne.n	8006904 <xQueueGenericSend+0x64>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068fe:	bf00      	nop
 8006900:	bf00      	nop
 8006902:	e7fd      	b.n	8006900 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d103      	bne.n	8006912 <xQueueGenericSend+0x72>
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <xQueueGenericSend+0x76>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <xQueueGenericSend+0x78>
 8006916:	2300      	movs	r3, #0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10b      	bne.n	8006934 <xQueueGenericSend+0x94>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	623b      	str	r3, [r7, #32]
}
 800692e:	bf00      	nop
 8006930:	bf00      	nop
 8006932:	e7fd      	b.n	8006930 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006934:	f001 f9ce 	bl	8007cd4 <xTaskGetSchedulerState>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <xQueueGenericSend+0xa4>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <xQueueGenericSend+0xa8>
 8006944:	2301      	movs	r3, #1
 8006946:	e000      	b.n	800694a <xQueueGenericSend+0xaa>
 8006948:	2300      	movs	r3, #0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <xQueueGenericSend+0xc6>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	61fb      	str	r3, [r7, #28]
}
 8006960:	bf00      	nop
 8006962:	bf00      	nop
 8006964:	e7fd      	b.n	8006962 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006966:	f001 ff1f 	bl	80087a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800696a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <xQueueGenericSend+0xdc>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d129      	bne.n	80069d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006982:	f000 fa0f 	bl	8006da4 <prvCopyDataToQueue>
 8006986:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d010      	beq.n	80069b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	3324      	adds	r3, #36	@ 0x24
 8006994:	4618      	mov	r0, r3
 8006996:	f000 ffdd 	bl	8007954 <xTaskRemoveFromEventList>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d013      	beq.n	80069c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069a0:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa0 <xQueueGenericSend+0x200>)
 80069a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	e00a      	b.n	80069c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069b8:	4b39      	ldr	r3, [pc, #228]	@ (8006aa0 <xQueueGenericSend+0x200>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069c8:	f001 ff20 	bl	800880c <vPortExitCritical>
				return pdPASS;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e063      	b.n	8006a98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069d6:	f001 ff19 	bl	800880c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	e05c      	b.n	8006a98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069e4:	f107 0314 	add.w	r3, r7, #20
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 f817 	bl	8007a1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ee:	2301      	movs	r3, #1
 80069f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069f2:	f001 ff0b 	bl	800880c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069f6:	f000 fd87 	bl	8007508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069fa:	f001 fed5 	bl	80087a8 <vPortEnterCritical>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a04:	b25b      	sxtb	r3, r3
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d103      	bne.n	8006a14 <xQueueGenericSend+0x174>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d103      	bne.n	8006a2a <xQueueGenericSend+0x18a>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a2a:	f001 feef 	bl	800880c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a2e:	1d3a      	adds	r2, r7, #4
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	4611      	mov	r1, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 f806 	bl	8007a48 <xTaskCheckForTimeOut>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d124      	bne.n	8006a8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a44:	f000 faa6 	bl	8006f94 <prvIsQueueFull>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d018      	beq.n	8006a80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	3310      	adds	r3, #16
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 ff2a 	bl	80078b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a5e:	f000 fa31 	bl	8006ec4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a62:	f000 fd5f 	bl	8007524 <xTaskResumeAll>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f47f af7c 	bne.w	8006966 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <xQueueGenericSend+0x200>)
 8006a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	e772      	b.n	8006966 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a82:	f000 fa1f 	bl	8006ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a86:	f000 fd4d 	bl	8007524 <xTaskResumeAll>
 8006a8a:	e76c      	b.n	8006966 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a8e:	f000 fa19 	bl	8006ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a92:	f000 fd47 	bl	8007524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3738      	adds	r7, #56	@ 0x38
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b090      	sub	sp, #64	@ 0x40
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10b      	bne.n	8006ad4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	e7fd      	b.n	8006ad0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <xQueueGenericSendFromISR+0x3e>
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <xQueueGenericSendFromISR+0x42>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <xQueueGenericSendFromISR+0x44>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10b      	bne.n	8006b04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	e7fd      	b.n	8006b00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d103      	bne.n	8006b12 <xQueueGenericSendFromISR+0x6e>
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <xQueueGenericSendFromISR+0x72>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <xQueueGenericSendFromISR+0x74>
 8006b16:	2300      	movs	r3, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	623b      	str	r3, [r7, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b34:	f001 ff18 	bl	8008968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b38:	f3ef 8211 	mrs	r2, BASEPRI
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	61fa      	str	r2, [r7, #28]
 8006b4e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b50:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b52:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d302      	bcc.n	8006b66 <xQueueGenericSendFromISR+0xc2>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d12f      	bne.n	8006bc6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b7c:	f000 f912 	bl	8006da4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b80:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d112      	bne.n	8006bb0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d016      	beq.n	8006bc0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b94:	3324      	adds	r3, #36	@ 0x24
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fedc 	bl	8007954 <xTaskRemoveFromEventList>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00e      	beq.n	8006bc0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e007      	b.n	8006bc0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	b25a      	sxtb	r2, r3
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006bc4:	e001      	b.n	8006bca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bcc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3740      	adds	r7, #64	@ 0x40
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08c      	sub	sp, #48	@ 0x30
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <xQueueReceive+0x32>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	623b      	str	r3, [r7, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <xQueueReceive+0x40>
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <xQueueReceive+0x44>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <xQueueReceive+0x46>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <xQueueReceive+0x62>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	61fb      	str	r3, [r7, #28]
}
 8006c3c:	bf00      	nop
 8006c3e:	bf00      	nop
 8006c40:	e7fd      	b.n	8006c3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c42:	f001 f847 	bl	8007cd4 <xTaskGetSchedulerState>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <xQueueReceive+0x72>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <xQueueReceive+0x76>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <xQueueReceive+0x78>
 8006c56:	2300      	movs	r3, #0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10b      	bne.n	8006c74 <xQueueReceive+0x94>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	61bb      	str	r3, [r7, #24]
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	e7fd      	b.n	8006c70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c74:	f001 fd98 	bl	80087a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01f      	beq.n	8006cc4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c88:	f000 f8f6 	bl	8006e78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	1e5a      	subs	r2, r3, #1
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00f      	beq.n	8006cbc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9e:	3310      	adds	r3, #16
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fe57 	bl	8007954 <xTaskRemoveFromEventList>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cac:	4b3c      	ldr	r3, [pc, #240]	@ (8006da0 <xQueueReceive+0x1c0>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cbc:	f001 fda6 	bl	800880c <vPortExitCritical>
				return pdPASS;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e069      	b.n	8006d98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cca:	f001 fd9f 	bl	800880c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e062      	b.n	8006d98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cd8:	f107 0310 	add.w	r3, r7, #16
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fe9d 	bl	8007a1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ce6:	f001 fd91 	bl	800880c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cea:	f000 fc0d 	bl	8007508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cee:	f001 fd5b 	bl	80087a8 <vPortEnterCritical>
 8006cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cf8:	b25b      	sxtb	r3, r3
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	d103      	bne.n	8006d08 <xQueueReceive+0x128>
 8006d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d103      	bne.n	8006d1e <xQueueReceive+0x13e>
 8006d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d1e:	f001 fd75 	bl	800880c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d22:	1d3a      	adds	r2, r7, #4
 8006d24:	f107 0310 	add.w	r3, r7, #16
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fe8c 	bl	8007a48 <xTaskCheckForTimeOut>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d123      	bne.n	8006d7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d38:	f000 f916 	bl	8006f68 <prvIsQueueEmpty>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d017      	beq.n	8006d72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d44:	3324      	adds	r3, #36	@ 0x24
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fdb0 	bl	80078b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d52:	f000 f8b7 	bl	8006ec4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d56:	f000 fbe5 	bl	8007524 <xTaskResumeAll>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d189      	bne.n	8006c74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006d60:	4b0f      	ldr	r3, [pc, #60]	@ (8006da0 <xQueueReceive+0x1c0>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	e780      	b.n	8006c74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d74:	f000 f8a6 	bl	8006ec4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d78:	f000 fbd4 	bl	8007524 <xTaskResumeAll>
 8006d7c:	e77a      	b.n	8006c74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d80:	f000 f8a0 	bl	8006ec4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d84:	f000 fbce 	bl	8007524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d8a:	f000 f8ed 	bl	8006f68 <prvIsQueueEmpty>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f43f af6f 	beq.w	8006c74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3730      	adds	r7, #48	@ 0x30
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	e000ed04 	.word	0xe000ed04

08006da4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10d      	bne.n	8006dde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d14d      	bne.n	8006e66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 ff9e 	bl	8007d10 <xTaskPriorityDisinherit>
 8006dd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	609a      	str	r2, [r3, #8]
 8006ddc:	e043      	b.n	8006e66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d119      	bne.n	8006e18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6858      	ldr	r0, [r3, #4]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dec:	461a      	mov	r2, r3
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	f003 f907 	bl	800a002 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfc:	441a      	add	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d32b      	bcc.n	8006e66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	e026      	b.n	8006e66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	68d8      	ldr	r0, [r3, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e20:	461a      	mov	r2, r3
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	f003 f8ed 	bl	800a002 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e30:	425b      	negs	r3, r3
 8006e32:	441a      	add	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d207      	bcs.n	8006e54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4c:	425b      	negs	r3, r3
 8006e4e:	441a      	add	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d105      	bne.n	8006e66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e6e:	697b      	ldr	r3, [r7, #20]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d018      	beq.n	8006ebc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e92:	441a      	add	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d303      	bcc.n	8006eac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68d9      	ldr	r1, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6838      	ldr	r0, [r7, #0]
 8006eb8:	f003 f8a3 	bl	800a002 <memcpy>
	}
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ecc:	f001 fc6c 	bl	80087a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ed6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ed8:	e011      	b.n	8006efe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d012      	beq.n	8006f08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3324      	adds	r3, #36	@ 0x24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fd34 	bl	8007954 <xTaskRemoveFromEventList>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ef2:	f000 fe0d 	bl	8007b10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	dce9      	bgt.n	8006eda <prvUnlockQueue+0x16>
 8006f06:	e000      	b.n	8006f0a <prvUnlockQueue+0x46>
					break;
 8006f08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	22ff      	movs	r2, #255	@ 0xff
 8006f0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f12:	f001 fc7b 	bl	800880c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f16:	f001 fc47 	bl	80087a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f22:	e011      	b.n	8006f48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d012      	beq.n	8006f52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3310      	adds	r3, #16
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fd0f 	bl	8007954 <xTaskRemoveFromEventList>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f3c:	f000 fde8 	bl	8007b10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dce9      	bgt.n	8006f24 <prvUnlockQueue+0x60>
 8006f50:	e000      	b.n	8006f54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	22ff      	movs	r2, #255	@ 0xff
 8006f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f5c:	f001 fc56 	bl	800880c <vPortExitCritical>
}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f70:	f001 fc1a 	bl	80087a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e001      	b.n	8006f86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f86:	f001 fc41 	bl	800880c <vPortExitCritical>

	return xReturn;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f9c:	f001 fc04 	bl	80087a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d102      	bne.n	8006fb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e001      	b.n	8006fb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fb6:	f001 fc29 	bl	800880c <vPortExitCritical>

	return xReturn;
 8006fba:	68fb      	ldr	r3, [r7, #12]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e014      	b.n	8006ffe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8007014 <vQueueAddToRegistry+0x50>)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10b      	bne.n	8006ff8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fe0:	490c      	ldr	r1, [pc, #48]	@ (8007014 <vQueueAddToRegistry+0x50>)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fea:	4a0a      	ldr	r2, [pc, #40]	@ (8007014 <vQueueAddToRegistry+0x50>)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ff6:	e006      	b.n	8007006 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b07      	cmp	r3, #7
 8007002:	d9e7      	bls.n	8006fd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000e9c 	.word	0x20000e9c

08007018 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007028:	f001 fbbe 	bl	80087a8 <vPortEnterCritical>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007032:	b25b      	sxtb	r3, r3
 8007034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007038:	d103      	bne.n	8007042 <vQueueWaitForMessageRestricted+0x2a>
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007048:	b25b      	sxtb	r3, r3
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704e:	d103      	bne.n	8007058 <vQueueWaitForMessageRestricted+0x40>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007058:	f001 fbd8 	bl	800880c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	3324      	adds	r3, #36	@ 0x24
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fc45 	bl	80078fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007072:	6978      	ldr	r0, [r7, #20]
 8007074:	f7ff ff26 	bl	8006ec4 <prvUnlockQueue>
	}
 8007078:	bf00      	nop
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08e      	sub	sp, #56	@ 0x38
 8007084:	af04      	add	r7, sp, #16
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800708e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	623b      	str	r3, [r7, #32]
}
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	61fb      	str	r3, [r7, #28]
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	e7fd      	b.n	80070c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070ca:	235c      	movs	r3, #92	@ 0x5c
 80070cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80070d2:	d00b      	beq.n	80070ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80070d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	61bb      	str	r3, [r7, #24]
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	e7fd      	b.n	80070e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01e      	beq.n	8007132 <xTaskCreateStatic+0xb2>
 80070f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01b      	beq.n	8007132 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007102:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007106:	2202      	movs	r2, #2
 8007108:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800710c:	2300      	movs	r3, #0
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	9302      	str	r3, [sp, #8]
 8007114:	f107 0314 	add.w	r3, r7, #20
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f850 	bl	80071ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800712a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800712c:	f000 f8de 	bl	80072ec <prvAddNewTaskToReadyList>
 8007130:	e001      	b.n	8007136 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007136:	697b      	ldr	r3, [r7, #20]
	}
 8007138:	4618      	mov	r0, r3
 800713a:	3728      	adds	r7, #40	@ 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08c      	sub	sp, #48	@ 0x30
 8007144:	af04      	add	r7, sp, #16
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	4613      	mov	r3, r2
 800714e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fc49 	bl	80089ec <pvPortMalloc>
 800715a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007162:	205c      	movs	r0, #92	@ 0x5c
 8007164:	f001 fc42 	bl	80089ec <pvPortMalloc>
 8007168:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	631a      	str	r2, [r3, #48]	@ 0x30
 8007176:	e005      	b.n	8007184 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007178:	6978      	ldr	r0, [r7, #20]
 800717a:	f001 fd05 	bl	8008b88 <vPortFree>
 800717e:	e001      	b.n	8007184 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007180:	2300      	movs	r3, #0
 8007182:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	2300      	movs	r3, #0
 8007196:	9303      	str	r3, [sp, #12]
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	9302      	str	r3, [sp, #8]
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 f80e 	bl	80071ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071ae:	69f8      	ldr	r0, [r7, #28]
 80071b0:	f000 f89c 	bl	80072ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071b4:	2301      	movs	r3, #1
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	e002      	b.n	80071c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071ba:	f04f 33ff 	mov.w	r3, #4294967295
 80071be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071c0:	69bb      	ldr	r3, [r7, #24]
	}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b088      	sub	sp, #32
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	461a      	mov	r2, r3
 80071e2:	21a5      	movs	r1, #165	@ 0xa5
 80071e4:	f002 fe8e 	bl	8009f04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071f2:	3b01      	subs	r3, #1
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	f023 0307 	bic.w	r3, r3, #7
 8007200:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	617b      	str	r3, [r7, #20]
}
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	e7fd      	b.n	8007220 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01f      	beq.n	800726a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	e012      	b.n	8007256 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	7819      	ldrb	r1, [r3, #0]
 8007238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4413      	add	r3, r2
 800723e:	3334      	adds	r3, #52	@ 0x34
 8007240:	460a      	mov	r2, r1
 8007242:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d006      	beq.n	800725e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	3301      	adds	r3, #1
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	2b0f      	cmp	r3, #15
 800725a:	d9e9      	bls.n	8007230 <prvInitialiseNewTask+0x66>
 800725c:	e000      	b.n	8007260 <prvInitialiseNewTask+0x96>
			{
				break;
 800725e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007268:	e003      	b.n	8007272 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007274:	2b37      	cmp	r3, #55	@ 0x37
 8007276:	d901      	bls.n	800727c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007278:	2337      	movs	r3, #55	@ 0x37
 800727a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007280:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007286:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728a:	2200      	movs	r2, #0
 800728c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800728e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007290:	3304      	adds	r3, #4
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff f966 	bl	8006564 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	3318      	adds	r3, #24
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff f961 	bl	8006564 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	2200      	movs	r2, #0
 80072bc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	68f9      	ldr	r1, [r7, #12]
 80072ca:	69b8      	ldr	r0, [r7, #24]
 80072cc:	f001 f93e 	bl	800854c <pxPortInitialiseStack>
 80072d0:	4602      	mov	r2, r0
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072e2:	bf00      	nop
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072f4:	f001 fa58 	bl	80087a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072f8:	4b2d      	ldr	r3, [pc, #180]	@ (80073b0 <prvAddNewTaskToReadyList+0xc4>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3301      	adds	r3, #1
 80072fe:	4a2c      	ldr	r2, [pc, #176]	@ (80073b0 <prvAddNewTaskToReadyList+0xc4>)
 8007300:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007302:	4b2c      	ldr	r3, [pc, #176]	@ (80073b4 <prvAddNewTaskToReadyList+0xc8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800730a:	4a2a      	ldr	r2, [pc, #168]	@ (80073b4 <prvAddNewTaskToReadyList+0xc8>)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007310:	4b27      	ldr	r3, [pc, #156]	@ (80073b0 <prvAddNewTaskToReadyList+0xc4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d110      	bne.n	800733a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007318:	f000 fc1e 	bl	8007b58 <prvInitialiseTaskLists>
 800731c:	e00d      	b.n	800733a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800731e:	4b26      	ldr	r3, [pc, #152]	@ (80073b8 <prvAddNewTaskToReadyList+0xcc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007326:	4b23      	ldr	r3, [pc, #140]	@ (80073b4 <prvAddNewTaskToReadyList+0xc8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007330:	429a      	cmp	r2, r3
 8007332:	d802      	bhi.n	800733a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007334:	4a1f      	ldr	r2, [pc, #124]	@ (80073b4 <prvAddNewTaskToReadyList+0xc8>)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800733a:	4b20      	ldr	r3, [pc, #128]	@ (80073bc <prvAddNewTaskToReadyList+0xd0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3301      	adds	r3, #1
 8007340:	4a1e      	ldr	r2, [pc, #120]	@ (80073bc <prvAddNewTaskToReadyList+0xd0>)
 8007342:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007344:	4b1d      	ldr	r3, [pc, #116]	@ (80073bc <prvAddNewTaskToReadyList+0xd0>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007350:	4b1b      	ldr	r3, [pc, #108]	@ (80073c0 <prvAddNewTaskToReadyList+0xd4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	429a      	cmp	r2, r3
 8007356:	d903      	bls.n	8007360 <prvAddNewTaskToReadyList+0x74>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735c:	4a18      	ldr	r2, [pc, #96]	@ (80073c0 <prvAddNewTaskToReadyList+0xd4>)
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4a15      	ldr	r2, [pc, #84]	@ (80073c4 <prvAddNewTaskToReadyList+0xd8>)
 800736e:	441a      	add	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3304      	adds	r3, #4
 8007374:	4619      	mov	r1, r3
 8007376:	4610      	mov	r0, r2
 8007378:	f7ff f901 	bl	800657e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800737c:	f001 fa46 	bl	800880c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007380:	4b0d      	ldr	r3, [pc, #52]	@ (80073b8 <prvAddNewTaskToReadyList+0xcc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00e      	beq.n	80073a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007388:	4b0a      	ldr	r3, [pc, #40]	@ (80073b4 <prvAddNewTaskToReadyList+0xc8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007392:	429a      	cmp	r2, r3
 8007394:	d207      	bcs.n	80073a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007396:	4b0c      	ldr	r3, [pc, #48]	@ (80073c8 <prvAddNewTaskToReadyList+0xdc>)
 8007398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	200013b0 	.word	0x200013b0
 80073b4:	20000edc 	.word	0x20000edc
 80073b8:	200013bc 	.word	0x200013bc
 80073bc:	200013cc 	.word	0x200013cc
 80073c0:	200013b8 	.word	0x200013b8
 80073c4:	20000ee0 	.word	0x20000ee0
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d018      	beq.n	8007410 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073de:	4b14      	ldr	r3, [pc, #80]	@ (8007430 <vTaskDelay+0x64>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00b      	beq.n	80073fe <vTaskDelay+0x32>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	60bb      	str	r3, [r7, #8]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073fe:	f000 f883 	bl	8007508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007402:	2100      	movs	r1, #0
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fcf3 	bl	8007df0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800740a:	f000 f88b 	bl	8007524 <xTaskResumeAll>
 800740e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d107      	bne.n	8007426 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007416:	4b07      	ldr	r3, [pc, #28]	@ (8007434 <vTaskDelay+0x68>)
 8007418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	200013d8 	.word	0x200013d8
 8007434:	e000ed04 	.word	0xe000ed04

08007438 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08a      	sub	sp, #40	@ 0x28
 800743c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007446:	463a      	mov	r2, r7
 8007448:	1d39      	adds	r1, r7, #4
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff f834 	bl	80064bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	9202      	str	r2, [sp, #8]
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	2300      	movs	r3, #0
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	460a      	mov	r2, r1
 8007466:	4922      	ldr	r1, [pc, #136]	@ (80074f0 <vTaskStartScheduler+0xb8>)
 8007468:	4822      	ldr	r0, [pc, #136]	@ (80074f4 <vTaskStartScheduler+0xbc>)
 800746a:	f7ff fe09 	bl	8007080 <xTaskCreateStatic>
 800746e:	4603      	mov	r3, r0
 8007470:	4a21      	ldr	r2, [pc, #132]	@ (80074f8 <vTaskStartScheduler+0xc0>)
 8007472:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007474:	4b20      	ldr	r3, [pc, #128]	@ (80074f8 <vTaskStartScheduler+0xc0>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800747c:	2301      	movs	r3, #1
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	e001      	b.n	8007486 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d102      	bne.n	8007492 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800748c:	f000 fd04 	bl	8007e98 <xTimerCreateTimerTask>
 8007490:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d116      	bne.n	80074c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	613b      	str	r3, [r7, #16]
}
 80074aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074ac:	4b13      	ldr	r3, [pc, #76]	@ (80074fc <vTaskStartScheduler+0xc4>)
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295
 80074b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074b4:	4b12      	ldr	r3, [pc, #72]	@ (8007500 <vTaskStartScheduler+0xc8>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074ba:	4b12      	ldr	r3, [pc, #72]	@ (8007504 <vTaskStartScheduler+0xcc>)
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074c0:	f001 f8ce 	bl	8008660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074c4:	e00f      	b.n	80074e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d10b      	bne.n	80074e6 <vTaskStartScheduler+0xae>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60fb      	str	r3, [r7, #12]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <vTaskStartScheduler+0xaa>
}
 80074e6:	bf00      	nop
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	0800d808 	.word	0x0800d808
 80074f4:	08007b29 	.word	0x08007b29
 80074f8:	200013d4 	.word	0x200013d4
 80074fc:	200013d0 	.word	0x200013d0
 8007500:	200013bc 	.word	0x200013bc
 8007504:	200013b4 	.word	0x200013b4

08007508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800750c:	4b04      	ldr	r3, [pc, #16]	@ (8007520 <vTaskSuspendAll+0x18>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3301      	adds	r3, #1
 8007512:	4a03      	ldr	r2, [pc, #12]	@ (8007520 <vTaskSuspendAll+0x18>)
 8007514:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007516:	bf00      	nop
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	200013d8 	.word	0x200013d8

08007524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800752e:	2300      	movs	r3, #0
 8007530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007532:	4b42      	ldr	r3, [pc, #264]	@ (800763c <xTaskResumeAll+0x118>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10b      	bne.n	8007552 <xTaskResumeAll+0x2e>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	603b      	str	r3, [r7, #0]
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	e7fd      	b.n	800754e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007552:	f001 f929 	bl	80087a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007556:	4b39      	ldr	r3, [pc, #228]	@ (800763c <xTaskResumeAll+0x118>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3b01      	subs	r3, #1
 800755c:	4a37      	ldr	r2, [pc, #220]	@ (800763c <xTaskResumeAll+0x118>)
 800755e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007560:	4b36      	ldr	r3, [pc, #216]	@ (800763c <xTaskResumeAll+0x118>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d162      	bne.n	800762e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007568:	4b35      	ldr	r3, [pc, #212]	@ (8007640 <xTaskResumeAll+0x11c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d05e      	beq.n	800762e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007570:	e02f      	b.n	80075d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007572:	4b34      	ldr	r3, [pc, #208]	@ (8007644 <xTaskResumeAll+0x120>)
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3318      	adds	r3, #24
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff f85a 	bl	8006638 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3304      	adds	r3, #4
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff f855 	bl	8006638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007592:	4b2d      	ldr	r3, [pc, #180]	@ (8007648 <xTaskResumeAll+0x124>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d903      	bls.n	80075a2 <xTaskResumeAll+0x7e>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	4a2a      	ldr	r2, [pc, #168]	@ (8007648 <xTaskResumeAll+0x124>)
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4a27      	ldr	r2, [pc, #156]	@ (800764c <xTaskResumeAll+0x128>)
 80075b0:	441a      	add	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f7fe ffe0 	bl	800657e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c2:	4b23      	ldr	r3, [pc, #140]	@ (8007650 <xTaskResumeAll+0x12c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d302      	bcc.n	80075d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80075cc:	4b21      	ldr	r3, [pc, #132]	@ (8007654 <xTaskResumeAll+0x130>)
 80075ce:	2201      	movs	r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007644 <xTaskResumeAll+0x120>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1cb      	bne.n	8007572 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075e0:	f000 fb58 	bl	8007c94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007658 <xTaskResumeAll+0x134>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d010      	beq.n	8007612 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075f0:	f000 f846 	bl	8007680 <xTaskIncrementTick>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80075fa:	4b16      	ldr	r3, [pc, #88]	@ (8007654 <xTaskResumeAll+0x130>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3b01      	subs	r3, #1
 8007604:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1f1      	bne.n	80075f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800760c:	4b12      	ldr	r3, [pc, #72]	@ (8007658 <xTaskResumeAll+0x134>)
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007612:	4b10      	ldr	r3, [pc, #64]	@ (8007654 <xTaskResumeAll+0x130>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800761a:	2301      	movs	r3, #1
 800761c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800761e:	4b0f      	ldr	r3, [pc, #60]	@ (800765c <xTaskResumeAll+0x138>)
 8007620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800762e:	f001 f8ed 	bl	800880c <vPortExitCritical>

	return xAlreadyYielded;
 8007632:	68bb      	ldr	r3, [r7, #8]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	200013d8 	.word	0x200013d8
 8007640:	200013b0 	.word	0x200013b0
 8007644:	20001370 	.word	0x20001370
 8007648:	200013b8 	.word	0x200013b8
 800764c:	20000ee0 	.word	0x20000ee0
 8007650:	20000edc 	.word	0x20000edc
 8007654:	200013c4 	.word	0x200013c4
 8007658:	200013c0 	.word	0x200013c0
 800765c:	e000ed04 	.word	0xe000ed04

08007660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007666:	4b05      	ldr	r3, [pc, #20]	@ (800767c <xTaskGetTickCount+0x1c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800766c:	687b      	ldr	r3, [r7, #4]
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	200013b4 	.word	0x200013b4

08007680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800768a:	4b4f      	ldr	r3, [pc, #316]	@ (80077c8 <xTaskIncrementTick+0x148>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 8090 	bne.w	80077b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007694:	4b4d      	ldr	r3, [pc, #308]	@ (80077cc <xTaskIncrementTick+0x14c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3301      	adds	r3, #1
 800769a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800769c:	4a4b      	ldr	r2, [pc, #300]	@ (80077cc <xTaskIncrementTick+0x14c>)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d121      	bne.n	80076ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076a8:	4b49      	ldr	r3, [pc, #292]	@ (80077d0 <xTaskIncrementTick+0x150>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	603b      	str	r3, [r7, #0]
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	e7fd      	b.n	80076c6 <xTaskIncrementTick+0x46>
 80076ca:	4b41      	ldr	r3, [pc, #260]	@ (80077d0 <xTaskIncrementTick+0x150>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	4b40      	ldr	r3, [pc, #256]	@ (80077d4 <xTaskIncrementTick+0x154>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a3e      	ldr	r2, [pc, #248]	@ (80077d0 <xTaskIncrementTick+0x150>)
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	4a3e      	ldr	r2, [pc, #248]	@ (80077d4 <xTaskIncrementTick+0x154>)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	4b3e      	ldr	r3, [pc, #248]	@ (80077d8 <xTaskIncrementTick+0x158>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a3c      	ldr	r2, [pc, #240]	@ (80077d8 <xTaskIncrementTick+0x158>)
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	f000 fad4 	bl	8007c94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076ec:	4b3b      	ldr	r3, [pc, #236]	@ (80077dc <xTaskIncrementTick+0x15c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d349      	bcc.n	800778a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076f6:	4b36      	ldr	r3, [pc, #216]	@ (80077d0 <xTaskIncrementTick+0x150>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007700:	4b36      	ldr	r3, [pc, #216]	@ (80077dc <xTaskIncrementTick+0x15c>)
 8007702:	f04f 32ff 	mov.w	r2, #4294967295
 8007706:	601a      	str	r2, [r3, #0]
					break;
 8007708:	e03f      	b.n	800778a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770a:	4b31      	ldr	r3, [pc, #196]	@ (80077d0 <xTaskIncrementTick+0x150>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d203      	bcs.n	800772a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007722:	4a2e      	ldr	r2, [pc, #184]	@ (80077dc <xTaskIncrementTick+0x15c>)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007728:	e02f      	b.n	800778a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	3304      	adds	r3, #4
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe ff82 	bl	8006638 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007738:	2b00      	cmp	r3, #0
 800773a:	d004      	beq.n	8007746 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	3318      	adds	r3, #24
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe ff79 	bl	8006638 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774a:	4b25      	ldr	r3, [pc, #148]	@ (80077e0 <xTaskIncrementTick+0x160>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d903      	bls.n	800775a <xTaskIncrementTick+0xda>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007756:	4a22      	ldr	r2, [pc, #136]	@ (80077e0 <xTaskIncrementTick+0x160>)
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4a1f      	ldr	r2, [pc, #124]	@ (80077e4 <xTaskIncrementTick+0x164>)
 8007768:	441a      	add	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f7fe ff04 	bl	800657e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800777a:	4b1b      	ldr	r3, [pc, #108]	@ (80077e8 <xTaskIncrementTick+0x168>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	429a      	cmp	r2, r3
 8007782:	d3b8      	bcc.n	80076f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007784:	2301      	movs	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007788:	e7b5      	b.n	80076f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800778a:	4b17      	ldr	r3, [pc, #92]	@ (80077e8 <xTaskIncrementTick+0x168>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007790:	4914      	ldr	r1, [pc, #80]	@ (80077e4 <xTaskIncrementTick+0x164>)
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d901      	bls.n	80077a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80077a2:	2301      	movs	r3, #1
 80077a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077a6:	4b11      	ldr	r3, [pc, #68]	@ (80077ec <xTaskIncrementTick+0x16c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d007      	beq.n	80077be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80077ae:	2301      	movs	r3, #1
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	e004      	b.n	80077be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077b4:	4b0e      	ldr	r3, [pc, #56]	@ (80077f0 <xTaskIncrementTick+0x170>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	4a0d      	ldr	r2, [pc, #52]	@ (80077f0 <xTaskIncrementTick+0x170>)
 80077bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077be:	697b      	ldr	r3, [r7, #20]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	200013d8 	.word	0x200013d8
 80077cc:	200013b4 	.word	0x200013b4
 80077d0:	20001368 	.word	0x20001368
 80077d4:	2000136c 	.word	0x2000136c
 80077d8:	200013c8 	.word	0x200013c8
 80077dc:	200013d0 	.word	0x200013d0
 80077e0:	200013b8 	.word	0x200013b8
 80077e4:	20000ee0 	.word	0x20000ee0
 80077e8:	20000edc 	.word	0x20000edc
 80077ec:	200013c4 	.word	0x200013c4
 80077f0:	200013c0 	.word	0x200013c0

080077f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077fa:	4b28      	ldr	r3, [pc, #160]	@ (800789c <vTaskSwitchContext+0xa8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007802:	4b27      	ldr	r3, [pc, #156]	@ (80078a0 <vTaskSwitchContext+0xac>)
 8007804:	2201      	movs	r2, #1
 8007806:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007808:	e042      	b.n	8007890 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800780a:	4b25      	ldr	r3, [pc, #148]	@ (80078a0 <vTaskSwitchContext+0xac>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007810:	4b24      	ldr	r3, [pc, #144]	@ (80078a4 <vTaskSwitchContext+0xb0>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e011      	b.n	800783c <vTaskSwitchContext+0x48>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10b      	bne.n	8007836 <vTaskSwitchContext+0x42>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <vTaskSwitchContext+0x3e>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3b01      	subs	r3, #1
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	491a      	ldr	r1, [pc, #104]	@ (80078a8 <vTaskSwitchContext+0xb4>)
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0e3      	beq.n	8007818 <vTaskSwitchContext+0x24>
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4a13      	ldr	r2, [pc, #76]	@ (80078a8 <vTaskSwitchContext+0xb4>)
 800785c:	4413      	add	r3, r2
 800785e:	60bb      	str	r3, [r7, #8]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	605a      	str	r2, [r3, #4]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	3308      	adds	r3, #8
 8007872:	429a      	cmp	r2, r3
 8007874:	d104      	bne.n	8007880 <vTaskSwitchContext+0x8c>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	605a      	str	r2, [r3, #4]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	4a09      	ldr	r2, [pc, #36]	@ (80078ac <vTaskSwitchContext+0xb8>)
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	4a06      	ldr	r2, [pc, #24]	@ (80078a4 <vTaskSwitchContext+0xb0>)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6013      	str	r3, [r2, #0]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	200013d8 	.word	0x200013d8
 80078a0:	200013c4 	.word	0x200013c4
 80078a4:	200013b8 	.word	0x200013b8
 80078a8:	20000ee0 	.word	0x20000ee0
 80078ac:	20000edc 	.word	0x20000edc

080078b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10b      	bne.n	80078d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078d8:	4b07      	ldr	r3, [pc, #28]	@ (80078f8 <vTaskPlaceOnEventList+0x48>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3318      	adds	r3, #24
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7fe fe70 	bl	80065c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078e6:	2101      	movs	r1, #1
 80078e8:	6838      	ldr	r0, [r7, #0]
 80078ea:	f000 fa81 	bl	8007df0 <prvAddCurrentTaskToDelayedList>
}
 80078ee:	bf00      	nop
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000edc 	.word	0x20000edc

080078fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10b      	bne.n	8007926 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	617b      	str	r3, [r7, #20]
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007926:	4b0a      	ldr	r3, [pc, #40]	@ (8007950 <vTaskPlaceOnEventListRestricted+0x54>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3318      	adds	r3, #24
 800792c:	4619      	mov	r1, r3
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f7fe fe25 	bl	800657e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800793a:	f04f 33ff 	mov.w	r3, #4294967295
 800793e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	68b8      	ldr	r0, [r7, #8]
 8007944:	f000 fa54 	bl	8007df0 <prvAddCurrentTaskToDelayedList>
	}
 8007948:	bf00      	nop
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000edc 	.word	0x20000edc

08007954 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	60fb      	str	r3, [r7, #12]
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	e7fd      	b.n	800797e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	3318      	adds	r3, #24
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fe56 	bl	8006638 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a04 <xTaskRemoveFromEventList+0xb0>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d11d      	bne.n	80079d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	3304      	adds	r3, #4
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe fe4d 	bl	8006638 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a2:	4b19      	ldr	r3, [pc, #100]	@ (8007a08 <xTaskRemoveFromEventList+0xb4>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d903      	bls.n	80079b2 <xTaskRemoveFromEventList+0x5e>
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	4a16      	ldr	r2, [pc, #88]	@ (8007a08 <xTaskRemoveFromEventList+0xb4>)
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4a13      	ldr	r2, [pc, #76]	@ (8007a0c <xTaskRemoveFromEventList+0xb8>)
 80079c0:	441a      	add	r2, r3
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	3304      	adds	r3, #4
 80079c6:	4619      	mov	r1, r3
 80079c8:	4610      	mov	r0, r2
 80079ca:	f7fe fdd8 	bl	800657e <vListInsertEnd>
 80079ce:	e005      	b.n	80079dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	3318      	adds	r3, #24
 80079d4:	4619      	mov	r1, r3
 80079d6:	480e      	ldr	r0, [pc, #56]	@ (8007a10 <xTaskRemoveFromEventList+0xbc>)
 80079d8:	f7fe fdd1 	bl	800657e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <xTaskRemoveFromEventList+0xc0>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d905      	bls.n	80079f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079ea:	2301      	movs	r3, #1
 80079ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007a18 <xTaskRemoveFromEventList+0xc4>)
 80079f0:	2201      	movs	r2, #1
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	e001      	b.n	80079fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80079fa:	697b      	ldr	r3, [r7, #20]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	200013d8 	.word	0x200013d8
 8007a08:	200013b8 	.word	0x200013b8
 8007a0c:	20000ee0 	.word	0x20000ee0
 8007a10:	20001370 	.word	0x20001370
 8007a14:	20000edc 	.word	0x20000edc
 8007a18:	200013c4 	.word	0x200013c4

08007a1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a24:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <vTaskInternalSetTimeOutState+0x24>)
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a2c:	4b05      	ldr	r3, [pc, #20]	@ (8007a44 <vTaskInternalSetTimeOutState+0x28>)
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	605a      	str	r2, [r3, #4]
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	200013c8 	.word	0x200013c8
 8007a44:	200013b4 	.word	0x200013b4

08007a48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10b      	bne.n	8007a70 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	613b      	str	r3, [r7, #16]
}
 8007a6a:	bf00      	nop
 8007a6c:	bf00      	nop
 8007a6e:	e7fd      	b.n	8007a6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10b      	bne.n	8007a8e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60fb      	str	r3, [r7, #12]
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	e7fd      	b.n	8007a8a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a8e:	f000 fe8b 	bl	80087a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a92:	4b1d      	ldr	r3, [pc, #116]	@ (8007b08 <xTaskCheckForTimeOut+0xc0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d102      	bne.n	8007ab2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61fb      	str	r3, [r7, #28]
 8007ab0:	e023      	b.n	8007afa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4b15      	ldr	r3, [pc, #84]	@ (8007b0c <xTaskCheckForTimeOut+0xc4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d007      	beq.n	8007ace <xTaskCheckForTimeOut+0x86>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d302      	bcc.n	8007ace <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	61fb      	str	r3, [r7, #28]
 8007acc:	e015      	b.n	8007afa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d20b      	bcs.n	8007af0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff ff99 	bl	8007a1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]
 8007aee:	e004      	b.n	8007afa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007af6:	2301      	movs	r3, #1
 8007af8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007afa:	f000 fe87 	bl	800880c <vPortExitCritical>

	return xReturn;
 8007afe:	69fb      	ldr	r3, [r7, #28]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	200013b4 	.word	0x200013b4
 8007b0c:	200013c8 	.word	0x200013c8

08007b10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b14:	4b03      	ldr	r3, [pc, #12]	@ (8007b24 <vTaskMissedYield+0x14>)
 8007b16:	2201      	movs	r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
}
 8007b1a:	bf00      	nop
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	200013c4 	.word	0x200013c4

08007b28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b30:	f000 f852 	bl	8007bd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b34:	4b06      	ldr	r3, [pc, #24]	@ (8007b50 <prvIdleTask+0x28>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d9f9      	bls.n	8007b30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b3c:	4b05      	ldr	r3, [pc, #20]	@ (8007b54 <prvIdleTask+0x2c>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b4c:	e7f0      	b.n	8007b30 <prvIdleTask+0x8>
 8007b4e:	bf00      	nop
 8007b50:	20000ee0 	.word	0x20000ee0
 8007b54:	e000ed04 	.word	0xe000ed04

08007b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b5e:	2300      	movs	r3, #0
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	e00c      	b.n	8007b7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4a12      	ldr	r2, [pc, #72]	@ (8007bb8 <prvInitialiseTaskLists+0x60>)
 8007b70:	4413      	add	r3, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fe fcd6 	bl	8006524 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	607b      	str	r3, [r7, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b37      	cmp	r3, #55	@ 0x37
 8007b82:	d9ef      	bls.n	8007b64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b84:	480d      	ldr	r0, [pc, #52]	@ (8007bbc <prvInitialiseTaskLists+0x64>)
 8007b86:	f7fe fccd 	bl	8006524 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b8a:	480d      	ldr	r0, [pc, #52]	@ (8007bc0 <prvInitialiseTaskLists+0x68>)
 8007b8c:	f7fe fcca 	bl	8006524 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b90:	480c      	ldr	r0, [pc, #48]	@ (8007bc4 <prvInitialiseTaskLists+0x6c>)
 8007b92:	f7fe fcc7 	bl	8006524 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b96:	480c      	ldr	r0, [pc, #48]	@ (8007bc8 <prvInitialiseTaskLists+0x70>)
 8007b98:	f7fe fcc4 	bl	8006524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b9c:	480b      	ldr	r0, [pc, #44]	@ (8007bcc <prvInitialiseTaskLists+0x74>)
 8007b9e:	f7fe fcc1 	bl	8006524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd0 <prvInitialiseTaskLists+0x78>)
 8007ba4:	4a05      	ldr	r2, [pc, #20]	@ (8007bbc <prvInitialiseTaskLists+0x64>)
 8007ba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd4 <prvInitialiseTaskLists+0x7c>)
 8007baa:	4a05      	ldr	r2, [pc, #20]	@ (8007bc0 <prvInitialiseTaskLists+0x68>)
 8007bac:	601a      	str	r2, [r3, #0]
}
 8007bae:	bf00      	nop
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000ee0 	.word	0x20000ee0
 8007bbc:	20001340 	.word	0x20001340
 8007bc0:	20001354 	.word	0x20001354
 8007bc4:	20001370 	.word	0x20001370
 8007bc8:	20001384 	.word	0x20001384
 8007bcc:	2000139c 	.word	0x2000139c
 8007bd0:	20001368 	.word	0x20001368
 8007bd4:	2000136c 	.word	0x2000136c

08007bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bde:	e019      	b.n	8007c14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007be0:	f000 fde2 	bl	80087a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be4:	4b10      	ldr	r3, [pc, #64]	@ (8007c28 <prvCheckTasksWaitingTermination+0x50>)
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe fd21 	bl	8006638 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c2c <prvCheckTasksWaitingTermination+0x54>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8007c2c <prvCheckTasksWaitingTermination+0x54>)
 8007bfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c00:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <prvCheckTasksWaitingTermination+0x58>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	4a0a      	ldr	r2, [pc, #40]	@ (8007c30 <prvCheckTasksWaitingTermination+0x58>)
 8007c08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c0a:	f000 fdff 	bl	800880c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f810 	bl	8007c34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c14:	4b06      	ldr	r3, [pc, #24]	@ (8007c30 <prvCheckTasksWaitingTermination+0x58>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1e1      	bne.n	8007be0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20001384 	.word	0x20001384
 8007c2c:	200013b0 	.word	0x200013b0
 8007c30:	20001398 	.word	0x20001398

08007c34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d108      	bne.n	8007c58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 ff9c 	bl	8008b88 <vPortFree>
				vPortFree( pxTCB );
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 ff99 	bl	8008b88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c56:	e019      	b.n	8007c8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d103      	bne.n	8007c6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 ff90 	bl	8008b88 <vPortFree>
	}
 8007c68:	e010      	b.n	8007c8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d00b      	beq.n	8007c8c <prvDeleteTCB+0x58>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	60fb      	str	r3, [r7, #12]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <prvDeleteTCB+0x54>
	}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ccc <prvResetNextTaskUnblockTime+0x38>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d104      	bne.n	8007cae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8007caa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cac:	e008      	b.n	8007cc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cae:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <prvResetNextTaskUnblockTime+0x38>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	4a04      	ldr	r2, [pc, #16]	@ (8007cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8007cbe:	6013      	str	r3, [r2, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	20001368 	.word	0x20001368
 8007cd0:	200013d0 	.word	0x200013d0

08007cd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cda:	4b0b      	ldr	r3, [pc, #44]	@ (8007d08 <xTaskGetSchedulerState+0x34>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	607b      	str	r3, [r7, #4]
 8007ce6:	e008      	b.n	8007cfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ce8:	4b08      	ldr	r3, [pc, #32]	@ (8007d0c <xTaskGetSchedulerState+0x38>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	607b      	str	r3, [r7, #4]
 8007cf4:	e001      	b.n	8007cfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cfa:	687b      	ldr	r3, [r7, #4]
	}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	200013bc 	.word	0x200013bc
 8007d0c:	200013d8 	.word	0x200013d8

08007d10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d058      	beq.n	8007dd8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d26:	4b2f      	ldr	r3, [pc, #188]	@ (8007de4 <xTaskPriorityDisinherit+0xd4>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d00b      	beq.n	8007d48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	60fb      	str	r3, [r7, #12]
}
 8007d42:	bf00      	nop
 8007d44:	bf00      	nop
 8007d46:	e7fd      	b.n	8007d44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10b      	bne.n	8007d68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	60bb      	str	r3, [r7, #8]
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	e7fd      	b.n	8007d64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d02c      	beq.n	8007dd8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d128      	bne.n	8007dd8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fc54 	bl	8006638 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da8:	4b0f      	ldr	r3, [pc, #60]	@ (8007de8 <xTaskPriorityDisinherit+0xd8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d903      	bls.n	8007db8 <xTaskPriorityDisinherit+0xa8>
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db4:	4a0c      	ldr	r2, [pc, #48]	@ (8007de8 <xTaskPriorityDisinherit+0xd8>)
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4a09      	ldr	r2, [pc, #36]	@ (8007dec <xTaskPriorityDisinherit+0xdc>)
 8007dc6:	441a      	add	r2, r3
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7fe fbd5 	bl	800657e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007dd8:	697b      	ldr	r3, [r7, #20]
	}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20000edc 	.word	0x20000edc
 8007de8:	200013b8 	.word	0x200013b8
 8007dec:	20000ee0 	.word	0x20000ee0

08007df0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dfa:	4b21      	ldr	r3, [pc, #132]	@ (8007e80 <prvAddCurrentTaskToDelayedList+0x90>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e00:	4b20      	ldr	r3, [pc, #128]	@ (8007e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3304      	adds	r3, #4
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe fc16 	bl	8006638 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d10a      	bne.n	8007e2a <prvAddCurrentTaskToDelayedList+0x3a>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8007e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4819      	ldr	r0, [pc, #100]	@ (8007e88 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e24:	f7fe fbab 	bl	800657e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e28:	e026      	b.n	8007e78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4413      	add	r3, r2
 8007e30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e32:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d209      	bcs.n	8007e56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e42:	4b12      	ldr	r3, [pc, #72]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	4b0f      	ldr	r3, [pc, #60]	@ (8007e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4610      	mov	r0, r2
 8007e50:	f7fe fbb9 	bl	80065c6 <vListInsert>
}
 8007e54:	e010      	b.n	8007e78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e56:	4b0e      	ldr	r3, [pc, #56]	@ (8007e90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4619      	mov	r1, r3
 8007e62:	4610      	mov	r0, r2
 8007e64:	f7fe fbaf 	bl	80065c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e68:	4b0a      	ldr	r3, [pc, #40]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d202      	bcs.n	8007e78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e72:	4a08      	ldr	r2, [pc, #32]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6013      	str	r3, [r2, #0]
}
 8007e78:	bf00      	nop
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	200013b4 	.word	0x200013b4
 8007e84:	20000edc 	.word	0x20000edc
 8007e88:	2000139c 	.word	0x2000139c
 8007e8c:	2000136c 	.word	0x2000136c
 8007e90:	20001368 	.word	0x20001368
 8007e94:	200013d0 	.word	0x200013d0

08007e98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08a      	sub	sp, #40	@ 0x28
 8007e9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ea2:	f000 fb13 	bl	80084cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f1c <xTimerCreateTimerTask+0x84>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d021      	beq.n	8007ef2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007eb6:	1d3a      	adds	r2, r7, #4
 8007eb8:	f107 0108 	add.w	r1, r7, #8
 8007ebc:	f107 030c 	add.w	r3, r7, #12
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fe fb15 	bl	80064f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	9202      	str	r2, [sp, #8]
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	460a      	mov	r2, r1
 8007ed8:	4911      	ldr	r1, [pc, #68]	@ (8007f20 <xTimerCreateTimerTask+0x88>)
 8007eda:	4812      	ldr	r0, [pc, #72]	@ (8007f24 <xTimerCreateTimerTask+0x8c>)
 8007edc:	f7ff f8d0 	bl	8007080 <xTaskCreateStatic>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	4a11      	ldr	r2, [pc, #68]	@ (8007f28 <xTimerCreateTimerTask+0x90>)
 8007ee4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ee6:	4b10      	ldr	r3, [pc, #64]	@ (8007f28 <xTimerCreateTimerTask+0x90>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10b      	bne.n	8007f10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	613b      	str	r3, [r7, #16]
}
 8007f0a:	bf00      	nop
 8007f0c:	bf00      	nop
 8007f0e:	e7fd      	b.n	8007f0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f10:	697b      	ldr	r3, [r7, #20]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	2000140c 	.word	0x2000140c
 8007f20:	0800d810 	.word	0x0800d810
 8007f24:	08008065 	.word	0x08008065
 8007f28:	20001410 	.word	0x20001410

08007f2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	@ 0x28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10b      	bne.n	8007f5c <xTimerGenericCommand+0x30>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	623b      	str	r3, [r7, #32]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f5c:	4b19      	ldr	r3, [pc, #100]	@ (8007fc4 <xTimerGenericCommand+0x98>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d02a      	beq.n	8007fba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	dc18      	bgt.n	8007fa8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f76:	f7ff fead 	bl	8007cd4 <xTaskGetSchedulerState>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d109      	bne.n	8007f94 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f80:	4b10      	ldr	r3, [pc, #64]	@ (8007fc4 <xTimerGenericCommand+0x98>)
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	f107 0110 	add.w	r1, r7, #16
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f8c:	f7fe fc88 	bl	80068a0 <xQueueGenericSend>
 8007f90:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f92:	e012      	b.n	8007fba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f94:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc4 <xTimerGenericCommand+0x98>)
 8007f96:	6818      	ldr	r0, [r3, #0]
 8007f98:	f107 0110 	add.w	r1, r7, #16
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f7fe fc7e 	bl	80068a0 <xQueueGenericSend>
 8007fa4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fa6:	e008      	b.n	8007fba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fa8:	4b06      	ldr	r3, [pc, #24]	@ (8007fc4 <xTimerGenericCommand+0x98>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	f107 0110 	add.w	r1, r7, #16
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	f7fe fd76 	bl	8006aa4 <xQueueGenericSendFromISR>
 8007fb8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3728      	adds	r7, #40	@ 0x28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	2000140c 	.word	0x2000140c

08007fc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd2:	4b23      	ldr	r3, [pc, #140]	@ (8008060 <prvProcessExpiredTimer+0x98>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fb29 	bl	8006638 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fec:	f003 0304 	and.w	r3, r3, #4
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d023      	beq.n	800803c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	699a      	ldr	r2, [r3, #24]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	18d1      	adds	r1, r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	6978      	ldr	r0, [r7, #20]
 8008002:	f000 f8d5 	bl	80081b0 <prvInsertTimerInActiveList>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d020      	beq.n	800804e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800800c:	2300      	movs	r3, #0
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	2300      	movs	r3, #0
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	2100      	movs	r1, #0
 8008016:	6978      	ldr	r0, [r7, #20]
 8008018:	f7ff ff88 	bl	8007f2c <xTimerGenericCommand>
 800801c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d114      	bne.n	800804e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	60fb      	str	r3, [r7, #12]
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	e7fd      	b.n	8008038 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008042:	f023 0301 	bic.w	r3, r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	6978      	ldr	r0, [r7, #20]
 8008054:	4798      	blx	r3
}
 8008056:	bf00      	nop
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20001404 	.word	0x20001404

08008064 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800806c:	f107 0308 	add.w	r3, r7, #8
 8008070:	4618      	mov	r0, r3
 8008072:	f000 f859 	bl	8008128 <prvGetNextExpireTime>
 8008076:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4619      	mov	r1, r3
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f805 	bl	800808c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008082:	f000 f8d7 	bl	8008234 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008086:	bf00      	nop
 8008088:	e7f0      	b.n	800806c <prvTimerTask+0x8>
	...

0800808c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008096:	f7ff fa37 	bl	8007508 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800809a:	f107 0308 	add.w	r3, r7, #8
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f866 	bl	8008170 <prvSampleTimeNow>
 80080a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d130      	bne.n	800810e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <prvProcessTimerOrBlockTask+0x3c>
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d806      	bhi.n	80080c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080ba:	f7ff fa33 	bl	8007524 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080be:	68f9      	ldr	r1, [r7, #12]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff ff81 	bl	8007fc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080c6:	e024      	b.n	8008112 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d008      	beq.n	80080e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080ce:	4b13      	ldr	r3, [pc, #76]	@ (800811c <prvProcessTimerOrBlockTask+0x90>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <prvProcessTimerOrBlockTask+0x50>
 80080d8:	2301      	movs	r3, #1
 80080da:	e000      	b.n	80080de <prvProcessTimerOrBlockTask+0x52>
 80080dc:	2300      	movs	r3, #0
 80080de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008120 <prvProcessTimerOrBlockTask+0x94>)
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	4619      	mov	r1, r3
 80080ee:	f7fe ff93 	bl	8007018 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080f2:	f7ff fa17 	bl	8007524 <xTaskResumeAll>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080fc:	4b09      	ldr	r3, [pc, #36]	@ (8008124 <prvProcessTimerOrBlockTask+0x98>)
 80080fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	f3bf 8f6f 	isb	sy
}
 800810c:	e001      	b.n	8008112 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800810e:	f7ff fa09 	bl	8007524 <xTaskResumeAll>
}
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20001408 	.word	0x20001408
 8008120:	2000140c 	.word	0x2000140c
 8008124:	e000ed04 	.word	0xe000ed04

08008128 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008130:	4b0e      	ldr	r3, [pc, #56]	@ (800816c <prvGetNextExpireTime+0x44>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <prvGetNextExpireTime+0x16>
 800813a:	2201      	movs	r2, #1
 800813c:	e000      	b.n	8008140 <prvGetNextExpireTime+0x18>
 800813e:	2200      	movs	r2, #0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d105      	bne.n	8008158 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800814c:	4b07      	ldr	r3, [pc, #28]	@ (800816c <prvGetNextExpireTime+0x44>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	e001      	b.n	800815c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800815c:	68fb      	ldr	r3, [r7, #12]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	20001404 	.word	0x20001404

08008170 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008178:	f7ff fa72 	bl	8007660 <xTaskGetTickCount>
 800817c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800817e:	4b0b      	ldr	r3, [pc, #44]	@ (80081ac <prvSampleTimeNow+0x3c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	429a      	cmp	r2, r3
 8008186:	d205      	bcs.n	8008194 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008188:	f000 f93a 	bl	8008400 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	e002      	b.n	800819a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800819a:	4a04      	ldr	r2, [pc, #16]	@ (80081ac <prvSampleTimeNow+0x3c>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081a0:	68fb      	ldr	r3, [r7, #12]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20001414 	.word	0x20001414

080081b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d812      	bhi.n	80081fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	1ad2      	subs	r2, r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d302      	bcc.n	80081ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	617b      	str	r3, [r7, #20]
 80081e8:	e01b      	b.n	8008222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081ea:	4b10      	ldr	r3, [pc, #64]	@ (800822c <prvInsertTimerInActiveList+0x7c>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3304      	adds	r3, #4
 80081f2:	4619      	mov	r1, r3
 80081f4:	4610      	mov	r0, r2
 80081f6:	f7fe f9e6 	bl	80065c6 <vListInsert>
 80081fa:	e012      	b.n	8008222 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d206      	bcs.n	8008212 <prvInsertTimerInActiveList+0x62>
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d302      	bcc.n	8008212 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e007      	b.n	8008222 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008212:	4b07      	ldr	r3, [pc, #28]	@ (8008230 <prvInsertTimerInActiveList+0x80>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3304      	adds	r3, #4
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7fe f9d2 	bl	80065c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008222:	697b      	ldr	r3, [r7, #20]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20001408 	.word	0x20001408
 8008230:	20001404 	.word	0x20001404

08008234 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08e      	sub	sp, #56	@ 0x38
 8008238:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800823a:	e0ce      	b.n	80083da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	da19      	bge.n	8008276 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008242:	1d3b      	adds	r3, r7, #4
 8008244:	3304      	adds	r3, #4
 8008246:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10b      	bne.n	8008266 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	61fb      	str	r3, [r7, #28]
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	e7fd      	b.n	8008262 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800826c:	6850      	ldr	r0, [r2, #4]
 800826e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008270:	6892      	ldr	r2, [r2, #8]
 8008272:	4611      	mov	r1, r2
 8008274:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f2c0 80ae 	blt.w	80083da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d004      	beq.n	8008294 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	3304      	adds	r3, #4
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe f9d2 	bl	8006638 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008294:	463b      	mov	r3, r7
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff ff6a 	bl	8008170 <prvSampleTimeNow>
 800829c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b09      	cmp	r3, #9
 80082a2:	f200 8097 	bhi.w	80083d4 <prvProcessReceivedCommands+0x1a0>
 80082a6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <prvProcessReceivedCommands+0x78>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082d5 	.word	0x080082d5
 80082b8:	0800834b 	.word	0x0800834b
 80082bc:	0800835f 	.word	0x0800835f
 80082c0:	080083ab 	.word	0x080083ab
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082d5 	.word	0x080082d5
 80082cc:	0800834b 	.word	0x0800834b
 80082d0:	0800835f 	.word	0x0800835f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082da:	f043 0301 	orr.w	r3, r3, #1
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	18d1      	adds	r1, r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082f4:	f7ff ff5c 	bl	80081b0 <prvInsertTimerInActiveList>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d06c      	beq.n	80083d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008304:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d061      	beq.n	80083d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	441a      	add	r2, r3
 800831c:	2300      	movs	r3, #0
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	2300      	movs	r3, #0
 8008322:	2100      	movs	r1, #0
 8008324:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008326:	f7ff fe01 	bl	8007f2c <xTimerGenericCommand>
 800832a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d152      	bne.n	80083d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	61bb      	str	r3, [r7, #24]
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	e7fd      	b.n	8008346 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800834a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008350:	f023 0301 	bic.w	r3, r3, #1
 8008354:	b2da      	uxtb	r2, r3
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800835c:	e03d      	b.n	80083da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008364:	f043 0301 	orr.w	r3, r3, #1
 8008368:	b2da      	uxtb	r2, r3
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	617b      	str	r3, [r7, #20]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	18d1      	adds	r1, r2, r3
 800839e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083a4:	f7ff ff04 	bl	80081b0 <prvInsertTimerInActiveList>
					break;
 80083a8:	e017      	b.n	80083da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d103      	bne.n	80083c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80083b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ba:	f000 fbe5 	bl	8008b88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083be:	e00c      	b.n	80083da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083c6:	f023 0301 	bic.w	r3, r3, #1
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083d2:	e002      	b.n	80083da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80083d4:	bf00      	nop
 80083d6:	e000      	b.n	80083da <prvProcessReceivedCommands+0x1a6>
					break;
 80083d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083da:	4b08      	ldr	r3, [pc, #32]	@ (80083fc <prvProcessReceivedCommands+0x1c8>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	1d39      	adds	r1, r7, #4
 80083e0:	2200      	movs	r2, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fbfc 	bl	8006be0 <xQueueReceive>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f47f af26 	bne.w	800823c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083f0:	bf00      	nop
 80083f2:	bf00      	nop
 80083f4:	3730      	adds	r7, #48	@ 0x30
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	2000140c 	.word	0x2000140c

08008400 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008406:	e049      	b.n	800849c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008408:	4b2e      	ldr	r3, [pc, #184]	@ (80084c4 <prvSwitchTimerLists+0xc4>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008412:	4b2c      	ldr	r3, [pc, #176]	@ (80084c4 <prvSwitchTimerLists+0xc4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3304      	adds	r3, #4
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe f909 	bl	8006638 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b00      	cmp	r3, #0
 800843a:	d02f      	beq.n	800849c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4413      	add	r3, r2
 8008444:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	d90e      	bls.n	800846c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800845a:	4b1a      	ldr	r3, [pc, #104]	@ (80084c4 <prvSwitchTimerLists+0xc4>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3304      	adds	r3, #4
 8008462:	4619      	mov	r1, r3
 8008464:	4610      	mov	r0, r2
 8008466:	f7fe f8ae 	bl	80065c6 <vListInsert>
 800846a:	e017      	b.n	800849c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800846c:	2300      	movs	r3, #0
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	2100      	movs	r1, #0
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f7ff fd58 	bl	8007f2c <xTimerGenericCommand>
 800847c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10b      	bne.n	800849c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	603b      	str	r3, [r7, #0]
}
 8008496:	bf00      	nop
 8008498:	bf00      	nop
 800849a:	e7fd      	b.n	8008498 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800849c:	4b09      	ldr	r3, [pc, #36]	@ (80084c4 <prvSwitchTimerLists+0xc4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1b0      	bne.n	8008408 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084a6:	4b07      	ldr	r3, [pc, #28]	@ (80084c4 <prvSwitchTimerLists+0xc4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084ac:	4b06      	ldr	r3, [pc, #24]	@ (80084c8 <prvSwitchTimerLists+0xc8>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a04      	ldr	r2, [pc, #16]	@ (80084c4 <prvSwitchTimerLists+0xc4>)
 80084b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084b4:	4a04      	ldr	r2, [pc, #16]	@ (80084c8 <prvSwitchTimerLists+0xc8>)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	6013      	str	r3, [r2, #0]
}
 80084ba:	bf00      	nop
 80084bc:	3718      	adds	r7, #24
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20001404 	.word	0x20001404
 80084c8:	20001408 	.word	0x20001408

080084cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084d2:	f000 f969 	bl	80087a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084d6:	4b15      	ldr	r3, [pc, #84]	@ (800852c <prvCheckForValidListAndQueue+0x60>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d120      	bne.n	8008520 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084de:	4814      	ldr	r0, [pc, #80]	@ (8008530 <prvCheckForValidListAndQueue+0x64>)
 80084e0:	f7fe f820 	bl	8006524 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084e4:	4813      	ldr	r0, [pc, #76]	@ (8008534 <prvCheckForValidListAndQueue+0x68>)
 80084e6:	f7fe f81d 	bl	8006524 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084ea:	4b13      	ldr	r3, [pc, #76]	@ (8008538 <prvCheckForValidListAndQueue+0x6c>)
 80084ec:	4a10      	ldr	r2, [pc, #64]	@ (8008530 <prvCheckForValidListAndQueue+0x64>)
 80084ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084f0:	4b12      	ldr	r3, [pc, #72]	@ (800853c <prvCheckForValidListAndQueue+0x70>)
 80084f2:	4a10      	ldr	r2, [pc, #64]	@ (8008534 <prvCheckForValidListAndQueue+0x68>)
 80084f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084f6:	2300      	movs	r3, #0
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4b11      	ldr	r3, [pc, #68]	@ (8008540 <prvCheckForValidListAndQueue+0x74>)
 80084fc:	4a11      	ldr	r2, [pc, #68]	@ (8008544 <prvCheckForValidListAndQueue+0x78>)
 80084fe:	2110      	movs	r1, #16
 8008500:	200a      	movs	r0, #10
 8008502:	f7fe f92d 	bl	8006760 <xQueueGenericCreateStatic>
 8008506:	4603      	mov	r3, r0
 8008508:	4a08      	ldr	r2, [pc, #32]	@ (800852c <prvCheckForValidListAndQueue+0x60>)
 800850a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800850c:	4b07      	ldr	r3, [pc, #28]	@ (800852c <prvCheckForValidListAndQueue+0x60>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008514:	4b05      	ldr	r3, [pc, #20]	@ (800852c <prvCheckForValidListAndQueue+0x60>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	490b      	ldr	r1, [pc, #44]	@ (8008548 <prvCheckForValidListAndQueue+0x7c>)
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fd52 	bl	8006fc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008520:	f000 f974 	bl	800880c <vPortExitCritical>
}
 8008524:	bf00      	nop
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	2000140c 	.word	0x2000140c
 8008530:	200013dc 	.word	0x200013dc
 8008534:	200013f0 	.word	0x200013f0
 8008538:	20001404 	.word	0x20001404
 800853c:	20001408 	.word	0x20001408
 8008540:	200014b8 	.word	0x200014b8
 8008544:	20001418 	.word	0x20001418
 8008548:	0800d818 	.word	0x0800d818

0800854c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3b04      	subs	r3, #4
 800855c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3b04      	subs	r3, #4
 800856a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f023 0201 	bic.w	r2, r3, #1
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3b04      	subs	r3, #4
 800857a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800857c:	4a0c      	ldr	r2, [pc, #48]	@ (80085b0 <pxPortInitialiseStack+0x64>)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3b14      	subs	r3, #20
 8008586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3b04      	subs	r3, #4
 8008592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f06f 0202 	mvn.w	r2, #2
 800859a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	3b20      	subs	r3, #32
 80085a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085a2:	68fb      	ldr	r3, [r7, #12]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	080085b5 	.word	0x080085b5

080085b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085be:	4b13      	ldr	r3, [pc, #76]	@ (800860c <prvTaskExitError+0x58>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c6:	d00b      	beq.n	80085e0 <prvTaskExitError+0x2c>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	60fb      	str	r3, [r7, #12]
}
 80085da:	bf00      	nop
 80085dc:	bf00      	nop
 80085de:	e7fd      	b.n	80085dc <prvTaskExitError+0x28>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	60bb      	str	r3, [r7, #8]
}
 80085f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085f4:	bf00      	nop
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0fc      	beq.n	80085f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000030 	.word	0x20000030

08008610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008610:	4b07      	ldr	r3, [pc, #28]	@ (8008630 <pxCurrentTCBConst2>)
 8008612:	6819      	ldr	r1, [r3, #0]
 8008614:	6808      	ldr	r0, [r1, #0]
 8008616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861a:	f380 8809 	msr	PSP, r0
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f04f 0000 	mov.w	r0, #0
 8008626:	f380 8811 	msr	BASEPRI, r0
 800862a:	4770      	bx	lr
 800862c:	f3af 8000 	nop.w

08008630 <pxCurrentTCBConst2>:
 8008630:	20000edc 	.word	0x20000edc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop

08008638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008638:	4808      	ldr	r0, [pc, #32]	@ (800865c <prvPortStartFirstTask+0x24>)
 800863a:	6800      	ldr	r0, [r0, #0]
 800863c:	6800      	ldr	r0, [r0, #0]
 800863e:	f380 8808 	msr	MSP, r0
 8008642:	f04f 0000 	mov.w	r0, #0
 8008646:	f380 8814 	msr	CONTROL, r0
 800864a:	b662      	cpsie	i
 800864c:	b661      	cpsie	f
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	df00      	svc	0
 8008658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800865a:	bf00      	nop
 800865c:	e000ed08 	.word	0xe000ed08

08008660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008666:	4b47      	ldr	r3, [pc, #284]	@ (8008784 <xPortStartScheduler+0x124>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a47      	ldr	r2, [pc, #284]	@ (8008788 <xPortStartScheduler+0x128>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d10b      	bne.n	8008688 <xPortStartScheduler+0x28>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	613b      	str	r3, [r7, #16]
}
 8008682:	bf00      	nop
 8008684:	bf00      	nop
 8008686:	e7fd      	b.n	8008684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008688:	4b3e      	ldr	r3, [pc, #248]	@ (8008784 <xPortStartScheduler+0x124>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a3f      	ldr	r2, [pc, #252]	@ (800878c <xPortStartScheduler+0x12c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d10b      	bne.n	80086aa <xPortStartScheduler+0x4a>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60fb      	str	r3, [r7, #12]
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	e7fd      	b.n	80086a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086aa:	4b39      	ldr	r3, [pc, #228]	@ (8008790 <xPortStartScheduler+0x130>)
 80086ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	22ff      	movs	r2, #255	@ 0xff
 80086ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	4b31      	ldr	r3, [pc, #196]	@ (8008794 <xPortStartScheduler+0x134>)
 80086d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086d2:	4b31      	ldr	r3, [pc, #196]	@ (8008798 <xPortStartScheduler+0x138>)
 80086d4:	2207      	movs	r2, #7
 80086d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086d8:	e009      	b.n	80086ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80086da:	4b2f      	ldr	r3, [pc, #188]	@ (8008798 <xPortStartScheduler+0x138>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3b01      	subs	r3, #1
 80086e0:	4a2d      	ldr	r2, [pc, #180]	@ (8008798 <xPortStartScheduler+0x138>)
 80086e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f6:	2b80      	cmp	r3, #128	@ 0x80
 80086f8:	d0ef      	beq.n	80086da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086fa:	4b27      	ldr	r3, [pc, #156]	@ (8008798 <xPortStartScheduler+0x138>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f1c3 0307 	rsb	r3, r3, #7
 8008702:	2b04      	cmp	r3, #4
 8008704:	d00b      	beq.n	800871e <xPortStartScheduler+0xbe>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	60bb      	str	r3, [r7, #8]
}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	e7fd      	b.n	800871a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800871e:	4b1e      	ldr	r3, [pc, #120]	@ (8008798 <xPortStartScheduler+0x138>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	4a1c      	ldr	r2, [pc, #112]	@ (8008798 <xPortStartScheduler+0x138>)
 8008726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008728:	4b1b      	ldr	r3, [pc, #108]	@ (8008798 <xPortStartScheduler+0x138>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008730:	4a19      	ldr	r2, [pc, #100]	@ (8008798 <xPortStartScheduler+0x138>)
 8008732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	b2da      	uxtb	r2, r3
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800873c:	4b17      	ldr	r3, [pc, #92]	@ (800879c <xPortStartScheduler+0x13c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a16      	ldr	r2, [pc, #88]	@ (800879c <xPortStartScheduler+0x13c>)
 8008742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008748:	4b14      	ldr	r3, [pc, #80]	@ (800879c <xPortStartScheduler+0x13c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a13      	ldr	r2, [pc, #76]	@ (800879c <xPortStartScheduler+0x13c>)
 800874e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008754:	f000 f8da 	bl	800890c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008758:	4b11      	ldr	r3, [pc, #68]	@ (80087a0 <xPortStartScheduler+0x140>)
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800875e:	f000 f8f9 	bl	8008954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008762:	4b10      	ldr	r3, [pc, #64]	@ (80087a4 <xPortStartScheduler+0x144>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a0f      	ldr	r2, [pc, #60]	@ (80087a4 <xPortStartScheduler+0x144>)
 8008768:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800876c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800876e:	f7ff ff63 	bl	8008638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008772:	f7ff f83f 	bl	80077f4 <vTaskSwitchContext>
	prvTaskExitError();
 8008776:	f7ff ff1d 	bl	80085b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	e000ed00 	.word	0xe000ed00
 8008788:	410fc271 	.word	0x410fc271
 800878c:	410fc270 	.word	0x410fc270
 8008790:	e000e400 	.word	0xe000e400
 8008794:	20001508 	.word	0x20001508
 8008798:	2000150c 	.word	0x2000150c
 800879c:	e000ed20 	.word	0xe000ed20
 80087a0:	20000030 	.word	0x20000030
 80087a4:	e000ef34 	.word	0xe000ef34

080087a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	607b      	str	r3, [r7, #4]
}
 80087c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087c2:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <vPortEnterCritical+0x5c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3301      	adds	r3, #1
 80087c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008804 <vPortEnterCritical+0x5c>)
 80087ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <vPortEnterCritical+0x5c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d110      	bne.n	80087f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008808 <vPortEnterCritical+0x60>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00b      	beq.n	80087f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	603b      	str	r3, [r7, #0]
}
 80087f0:	bf00      	nop
 80087f2:	bf00      	nop
 80087f4:	e7fd      	b.n	80087f2 <vPortEnterCritical+0x4a>
	}
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	20000030 	.word	0x20000030
 8008808:	e000ed04 	.word	0xe000ed04

0800880c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008812:	4b12      	ldr	r3, [pc, #72]	@ (800885c <vPortExitCritical+0x50>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <vPortExitCritical+0x26>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	607b      	str	r3, [r7, #4]
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	e7fd      	b.n	800882e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008832:	4b0a      	ldr	r3, [pc, #40]	@ (800885c <vPortExitCritical+0x50>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3b01      	subs	r3, #1
 8008838:	4a08      	ldr	r2, [pc, #32]	@ (800885c <vPortExitCritical+0x50>)
 800883a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800883c:	4b07      	ldr	r3, [pc, #28]	@ (800885c <vPortExitCritical+0x50>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d105      	bne.n	8008850 <vPortExitCritical+0x44>
 8008844:	2300      	movs	r3, #0
 8008846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	f383 8811 	msr	BASEPRI, r3
}
 800884e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	20000030 	.word	0x20000030

08008860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008860:	f3ef 8009 	mrs	r0, PSP
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	4b15      	ldr	r3, [pc, #84]	@ (80088c0 <pxCurrentTCBConst>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	f01e 0f10 	tst.w	lr, #16
 8008870:	bf08      	it	eq
 8008872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887a:	6010      	str	r0, [r2, #0]
 800887c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008884:	f380 8811 	msr	BASEPRI, r0
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f7fe ffb0 	bl	80077f4 <vTaskSwitchContext>
 8008894:	f04f 0000 	mov.w	r0, #0
 8008898:	f380 8811 	msr	BASEPRI, r0
 800889c:	bc09      	pop	{r0, r3}
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	6808      	ldr	r0, [r1, #0]
 80088a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a6:	f01e 0f10 	tst.w	lr, #16
 80088aa:	bf08      	it	eq
 80088ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088b0:	f380 8809 	msr	PSP, r0
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	f3af 8000 	nop.w

080088c0 <pxCurrentTCBConst>:
 80088c0:	20000edc 	.word	0x20000edc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop

080088c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	607b      	str	r3, [r7, #4]
}
 80088e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088e2:	f7fe fecd 	bl	8007680 <xTaskIncrementTick>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088ec:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <xPortSysTickHandler+0x40>)
 80088ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	2300      	movs	r3, #0
 80088f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	f383 8811 	msr	BASEPRI, r3
}
 80088fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008910:	4b0b      	ldr	r3, [pc, #44]	@ (8008940 <vPortSetupTimerInterrupt+0x34>)
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008916:	4b0b      	ldr	r3, [pc, #44]	@ (8008944 <vPortSetupTimerInterrupt+0x38>)
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800891c:	4b0a      	ldr	r3, [pc, #40]	@ (8008948 <vPortSetupTimerInterrupt+0x3c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a0a      	ldr	r2, [pc, #40]	@ (800894c <vPortSetupTimerInterrupt+0x40>)
 8008922:	fba2 2303 	umull	r2, r3, r2, r3
 8008926:	099b      	lsrs	r3, r3, #6
 8008928:	4a09      	ldr	r2, [pc, #36]	@ (8008950 <vPortSetupTimerInterrupt+0x44>)
 800892a:	3b01      	subs	r3, #1
 800892c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800892e:	4b04      	ldr	r3, [pc, #16]	@ (8008940 <vPortSetupTimerInterrupt+0x34>)
 8008930:	2207      	movs	r2, #7
 8008932:	601a      	str	r2, [r3, #0]
}
 8008934:	bf00      	nop
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	e000e010 	.word	0xe000e010
 8008944:	e000e018 	.word	0xe000e018
 8008948:	20000024 	.word	0x20000024
 800894c:	10624dd3 	.word	0x10624dd3
 8008950:	e000e014 	.word	0xe000e014

08008954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008964 <vPortEnableVFP+0x10>
 8008958:	6801      	ldr	r1, [r0, #0]
 800895a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800895e:	6001      	str	r1, [r0, #0]
 8008960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008962:	bf00      	nop
 8008964:	e000ed88 	.word	0xe000ed88

08008968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800896e:	f3ef 8305 	mrs	r3, IPSR
 8008972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b0f      	cmp	r3, #15
 8008978:	d915      	bls.n	80089a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800897a:	4a18      	ldr	r2, [pc, #96]	@ (80089dc <vPortValidateInterruptPriority+0x74>)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008984:	4b16      	ldr	r3, [pc, #88]	@ (80089e0 <vPortValidateInterruptPriority+0x78>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	7afa      	ldrb	r2, [r7, #11]
 800898a:	429a      	cmp	r2, r3
 800898c:	d20b      	bcs.n	80089a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	607b      	str	r3, [r7, #4]
}
 80089a0:	bf00      	nop
 80089a2:	bf00      	nop
 80089a4:	e7fd      	b.n	80089a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089a6:	4b0f      	ldr	r3, [pc, #60]	@ (80089e4 <vPortValidateInterruptPriority+0x7c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80089ae:	4b0e      	ldr	r3, [pc, #56]	@ (80089e8 <vPortValidateInterruptPriority+0x80>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d90b      	bls.n	80089ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	603b      	str	r3, [r7, #0]
}
 80089c8:	bf00      	nop
 80089ca:	bf00      	nop
 80089cc:	e7fd      	b.n	80089ca <vPortValidateInterruptPriority+0x62>
	}
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	e000e3f0 	.word	0xe000e3f0
 80089e0:	20001508 	.word	0x20001508
 80089e4:	e000ed0c 	.word	0xe000ed0c
 80089e8:	2000150c 	.word	0x2000150c

080089ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08a      	sub	sp, #40	@ 0x28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089f4:	2300      	movs	r3, #0
 80089f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089f8:	f7fe fd86 	bl	8007508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008b70 <pvPortMalloc+0x184>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a04:	f000 f924 	bl	8008c50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a08:	4b5a      	ldr	r3, [pc, #360]	@ (8008b74 <pvPortMalloc+0x188>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4013      	ands	r3, r2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f040 8095 	bne.w	8008b40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01e      	beq.n	8008a5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4413      	add	r3, r2
 8008a22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f003 0307 	and.w	r3, r3, #7
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d015      	beq.n	8008a5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f023 0307 	bic.w	r3, r3, #7
 8008a34:	3308      	adds	r3, #8
 8008a36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00b      	beq.n	8008a5a <pvPortMalloc+0x6e>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	617b      	str	r3, [r7, #20]
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	e7fd      	b.n	8008a56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d06f      	beq.n	8008b40 <pvPortMalloc+0x154>
 8008a60:	4b45      	ldr	r3, [pc, #276]	@ (8008b78 <pvPortMalloc+0x18c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d86a      	bhi.n	8008b40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a6a:	4b44      	ldr	r3, [pc, #272]	@ (8008b7c <pvPortMalloc+0x190>)
 8008a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a6e:	4b43      	ldr	r3, [pc, #268]	@ (8008b7c <pvPortMalloc+0x190>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a74:	e004      	b.n	8008a80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d903      	bls.n	8008a92 <pvPortMalloc+0xa6>
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f1      	bne.n	8008a76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a92:	4b37      	ldr	r3, [pc, #220]	@ (8008b70 <pvPortMalloc+0x184>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d051      	beq.n	8008b40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2208      	movs	r2, #8
 8008aa2:	4413      	add	r3, r2
 8008aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	1ad2      	subs	r2, r2, r3
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d920      	bls.n	8008b00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	613b      	str	r3, [r7, #16]
}
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008afa:	69b8      	ldr	r0, [r7, #24]
 8008afc:	f000 f90a 	bl	8008d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b00:	4b1d      	ldr	r3, [pc, #116]	@ (8008b78 <pvPortMalloc+0x18c>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8008b78 <pvPortMalloc+0x18c>)
 8008b0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008b78 <pvPortMalloc+0x18c>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b1b      	ldr	r3, [pc, #108]	@ (8008b80 <pvPortMalloc+0x194>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d203      	bcs.n	8008b22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b1a:	4b17      	ldr	r3, [pc, #92]	@ (8008b78 <pvPortMalloc+0x18c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a18      	ldr	r2, [pc, #96]	@ (8008b80 <pvPortMalloc+0x194>)
 8008b20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	4b13      	ldr	r3, [pc, #76]	@ (8008b74 <pvPortMalloc+0x188>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b36:	4b13      	ldr	r3, [pc, #76]	@ (8008b84 <pvPortMalloc+0x198>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	4a11      	ldr	r2, [pc, #68]	@ (8008b84 <pvPortMalloc+0x198>)
 8008b3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b40:	f7fe fcf0 	bl	8007524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <pvPortMalloc+0x17a>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	60fb      	str	r3, [r7, #12]
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	e7fd      	b.n	8008b62 <pvPortMalloc+0x176>
	return pvReturn;
 8008b66:	69fb      	ldr	r3, [r7, #28]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3728      	adds	r7, #40	@ 0x28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20005118 	.word	0x20005118
 8008b74:	2000512c 	.word	0x2000512c
 8008b78:	2000511c 	.word	0x2000511c
 8008b7c:	20005110 	.word	0x20005110
 8008b80:	20005120 	.word	0x20005120
 8008b84:	20005124 	.word	0x20005124

08008b88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d04f      	beq.n	8008c3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b9a:	2308      	movs	r3, #8
 8008b9c:	425b      	negs	r3, r3
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	4b25      	ldr	r3, [pc, #148]	@ (8008c44 <vPortFree+0xbc>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10b      	bne.n	8008bce <vPortFree+0x46>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	60fb      	str	r3, [r7, #12]
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	e7fd      	b.n	8008bca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00b      	beq.n	8008bee <vPortFree+0x66>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	60bb      	str	r3, [r7, #8]
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	e7fd      	b.n	8008bea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	4b14      	ldr	r3, [pc, #80]	@ (8008c44 <vPortFree+0xbc>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01e      	beq.n	8008c3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d11a      	bne.n	8008c3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	4b0e      	ldr	r3, [pc, #56]	@ (8008c44 <vPortFree+0xbc>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	401a      	ands	r2, r3
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c14:	f7fe fc78 	bl	8007508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c48 <vPortFree+0xc0>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4413      	add	r3, r2
 8008c22:	4a09      	ldr	r2, [pc, #36]	@ (8008c48 <vPortFree+0xc0>)
 8008c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c26:	6938      	ldr	r0, [r7, #16]
 8008c28:	f000 f874 	bl	8008d14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c2c:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <vPortFree+0xc4>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3301      	adds	r3, #1
 8008c32:	4a06      	ldr	r2, [pc, #24]	@ (8008c4c <vPortFree+0xc4>)
 8008c34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c36:	f7fe fc75 	bl	8007524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c3a:	bf00      	nop
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	2000512c 	.word	0x2000512c
 8008c48:	2000511c 	.word	0x2000511c
 8008c4c:	20005128 	.word	0x20005128

08008c50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008c5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c5c:	4b27      	ldr	r3, [pc, #156]	@ (8008cfc <prvHeapInit+0xac>)
 8008c5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00c      	beq.n	8008c84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3307      	adds	r3, #7
 8008c6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 0307 	bic.w	r3, r3, #7
 8008c76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8008cfc <prvHeapInit+0xac>)
 8008c80:	4413      	add	r3, r2
 8008c82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c88:	4a1d      	ldr	r2, [pc, #116]	@ (8008d00 <prvHeapInit+0xb0>)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8008d00 <prvHeapInit+0xb0>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	4413      	add	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c9c:	2208      	movs	r2, #8
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	1a9b      	subs	r3, r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0307 	bic.w	r3, r3, #7
 8008caa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4a15      	ldr	r2, [pc, #84]	@ (8008d04 <prvHeapInit+0xb4>)
 8008cb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cb2:	4b14      	ldr	r3, [pc, #80]	@ (8008d04 <prvHeapInit+0xb4>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cba:	4b12      	ldr	r3, [pc, #72]	@ (8008d04 <prvHeapInit+0xb4>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	1ad2      	subs	r2, r2, r3
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d04 <prvHeapInit+0xb4>)
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8008d08 <prvHeapInit+0xb8>)
 8008cde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4a09      	ldr	r2, [pc, #36]	@ (8008d0c <prvHeapInit+0xbc>)
 8008ce6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ce8:	4b09      	ldr	r3, [pc, #36]	@ (8008d10 <prvHeapInit+0xc0>)
 8008cea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008cee:	601a      	str	r2, [r3, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	20001510 	.word	0x20001510
 8008d00:	20005110 	.word	0x20005110
 8008d04:	20005118 	.word	0x20005118
 8008d08:	20005120 	.word	0x20005120
 8008d0c:	2000511c 	.word	0x2000511c
 8008d10:	2000512c 	.word	0x2000512c

08008d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d1c:	4b28      	ldr	r3, [pc, #160]	@ (8008dc0 <prvInsertBlockIntoFreeList+0xac>)
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	e002      	b.n	8008d28 <prvInsertBlockIntoFreeList+0x14>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d8f7      	bhi.n	8008d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d108      	bne.n	8008d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	441a      	add	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	441a      	add	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d118      	bne.n	8008d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b15      	ldr	r3, [pc, #84]	@ (8008dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d00d      	beq.n	8008d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	441a      	add	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	e008      	b.n	8008da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d92:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	e003      	b.n	8008da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d002      	beq.n	8008db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008db2:	bf00      	nop
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	20005110 	.word	0x20005110
 8008dc4:	20005118 	.word	0x20005118

08008dc8 <__cvt>:
 8008dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dcc:	ec57 6b10 	vmov	r6, r7, d0
 8008dd0:	2f00      	cmp	r7, #0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	bfbb      	ittet	lt
 8008dda:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008dde:	461f      	movlt	r7, r3
 8008de0:	2300      	movge	r3, #0
 8008de2:	232d      	movlt	r3, #45	@ 0x2d
 8008de4:	700b      	strb	r3, [r1, #0]
 8008de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008de8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008dec:	4691      	mov	r9, r2
 8008dee:	f023 0820 	bic.w	r8, r3, #32
 8008df2:	bfbc      	itt	lt
 8008df4:	4632      	movlt	r2, r6
 8008df6:	4616      	movlt	r6, r2
 8008df8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008dfc:	d005      	beq.n	8008e0a <__cvt+0x42>
 8008dfe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e02:	d100      	bne.n	8008e06 <__cvt+0x3e>
 8008e04:	3401      	adds	r4, #1
 8008e06:	2102      	movs	r1, #2
 8008e08:	e000      	b.n	8008e0c <__cvt+0x44>
 8008e0a:	2103      	movs	r1, #3
 8008e0c:	ab03      	add	r3, sp, #12
 8008e0e:	9301      	str	r3, [sp, #4]
 8008e10:	ab02      	add	r3, sp, #8
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	ec47 6b10 	vmov	d0, r6, r7
 8008e18:	4653      	mov	r3, sl
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	f001 f990 	bl	800a140 <_dtoa_r>
 8008e20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008e24:	4605      	mov	r5, r0
 8008e26:	d119      	bne.n	8008e5c <__cvt+0x94>
 8008e28:	f019 0f01 	tst.w	r9, #1
 8008e2c:	d00e      	beq.n	8008e4c <__cvt+0x84>
 8008e2e:	eb00 0904 	add.w	r9, r0, r4
 8008e32:	2200      	movs	r2, #0
 8008e34:	2300      	movs	r3, #0
 8008e36:	4630      	mov	r0, r6
 8008e38:	4639      	mov	r1, r7
 8008e3a:	f7f7 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e3e:	b108      	cbz	r0, 8008e44 <__cvt+0x7c>
 8008e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e44:	2230      	movs	r2, #48	@ 0x30
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	454b      	cmp	r3, r9
 8008e4a:	d31e      	bcc.n	8008e8a <__cvt+0xc2>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e50:	1b5b      	subs	r3, r3, r5
 8008e52:	4628      	mov	r0, r5
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	b004      	add	sp, #16
 8008e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e60:	eb00 0904 	add.w	r9, r0, r4
 8008e64:	d1e5      	bne.n	8008e32 <__cvt+0x6a>
 8008e66:	7803      	ldrb	r3, [r0, #0]
 8008e68:	2b30      	cmp	r3, #48	@ 0x30
 8008e6a:	d10a      	bne.n	8008e82 <__cvt+0xba>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e78:	b918      	cbnz	r0, 8008e82 <__cvt+0xba>
 8008e7a:	f1c4 0401 	rsb	r4, r4, #1
 8008e7e:	f8ca 4000 	str.w	r4, [sl]
 8008e82:	f8da 3000 	ldr.w	r3, [sl]
 8008e86:	4499      	add	r9, r3
 8008e88:	e7d3      	b.n	8008e32 <__cvt+0x6a>
 8008e8a:	1c59      	adds	r1, r3, #1
 8008e8c:	9103      	str	r1, [sp, #12]
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	e7d9      	b.n	8008e46 <__cvt+0x7e>

08008e92 <__exponent>:
 8008e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e94:	2900      	cmp	r1, #0
 8008e96:	bfba      	itte	lt
 8008e98:	4249      	neglt	r1, r1
 8008e9a:	232d      	movlt	r3, #45	@ 0x2d
 8008e9c:	232b      	movge	r3, #43	@ 0x2b
 8008e9e:	2909      	cmp	r1, #9
 8008ea0:	7002      	strb	r2, [r0, #0]
 8008ea2:	7043      	strb	r3, [r0, #1]
 8008ea4:	dd29      	ble.n	8008efa <__exponent+0x68>
 8008ea6:	f10d 0307 	add.w	r3, sp, #7
 8008eaa:	461d      	mov	r5, r3
 8008eac:	270a      	movs	r7, #10
 8008eae:	461a      	mov	r2, r3
 8008eb0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008eb4:	fb07 1416 	mls	r4, r7, r6, r1
 8008eb8:	3430      	adds	r4, #48	@ 0x30
 8008eba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	2c63      	cmp	r4, #99	@ 0x63
 8008ec2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	dcf1      	bgt.n	8008eae <__exponent+0x1c>
 8008eca:	3130      	adds	r1, #48	@ 0x30
 8008ecc:	1e94      	subs	r4, r2, #2
 8008ece:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ed2:	1c41      	adds	r1, r0, #1
 8008ed4:	4623      	mov	r3, r4
 8008ed6:	42ab      	cmp	r3, r5
 8008ed8:	d30a      	bcc.n	8008ef0 <__exponent+0x5e>
 8008eda:	f10d 0309 	add.w	r3, sp, #9
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	42ac      	cmp	r4, r5
 8008ee2:	bf88      	it	hi
 8008ee4:	2300      	movhi	r3, #0
 8008ee6:	3302      	adds	r3, #2
 8008ee8:	4403      	add	r3, r0
 8008eea:	1a18      	subs	r0, r3, r0
 8008eec:	b003      	add	sp, #12
 8008eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ef4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ef8:	e7ed      	b.n	8008ed6 <__exponent+0x44>
 8008efa:	2330      	movs	r3, #48	@ 0x30
 8008efc:	3130      	adds	r1, #48	@ 0x30
 8008efe:	7083      	strb	r3, [r0, #2]
 8008f00:	70c1      	strb	r1, [r0, #3]
 8008f02:	1d03      	adds	r3, r0, #4
 8008f04:	e7f1      	b.n	8008eea <__exponent+0x58>
	...

08008f08 <_printf_float>:
 8008f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	b08d      	sub	sp, #52	@ 0x34
 8008f0e:	460c      	mov	r4, r1
 8008f10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008f14:	4616      	mov	r6, r2
 8008f16:	461f      	mov	r7, r3
 8008f18:	4605      	mov	r5, r0
 8008f1a:	f000 fffb 	bl	8009f14 <_localeconv_r>
 8008f1e:	6803      	ldr	r3, [r0, #0]
 8008f20:	9304      	str	r3, [sp, #16]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7f7 f9a4 	bl	8000270 <strlen>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f30:	9005      	str	r0, [sp, #20]
 8008f32:	3307      	adds	r3, #7
 8008f34:	f023 0307 	bic.w	r3, r3, #7
 8008f38:	f103 0208 	add.w	r2, r3, #8
 8008f3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f40:	f8d4 b000 	ldr.w	fp, [r4]
 8008f44:	f8c8 2000 	str.w	r2, [r8]
 8008f48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f50:	9307      	str	r3, [sp, #28]
 8008f52:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f5e:	4b9c      	ldr	r3, [pc, #624]	@ (80091d0 <_printf_float+0x2c8>)
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295
 8008f64:	f7f7 fde2 	bl	8000b2c <__aeabi_dcmpun>
 8008f68:	bb70      	cbnz	r0, 8008fc8 <_printf_float+0xc0>
 8008f6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f6e:	4b98      	ldr	r3, [pc, #608]	@ (80091d0 <_printf_float+0x2c8>)
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	f7f7 fdbc 	bl	8000af0 <__aeabi_dcmple>
 8008f78:	bb30      	cbnz	r0, 8008fc8 <_printf_float+0xc0>
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f7f7 fdab 	bl	8000adc <__aeabi_dcmplt>
 8008f86:	b110      	cbz	r0, 8008f8e <_printf_float+0x86>
 8008f88:	232d      	movs	r3, #45	@ 0x2d
 8008f8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f8e:	4a91      	ldr	r2, [pc, #580]	@ (80091d4 <_printf_float+0x2cc>)
 8008f90:	4b91      	ldr	r3, [pc, #580]	@ (80091d8 <_printf_float+0x2d0>)
 8008f92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f96:	bf94      	ite	ls
 8008f98:	4690      	movls	r8, r2
 8008f9a:	4698      	movhi	r8, r3
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	f02b 0304 	bic.w	r3, fp, #4
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	f04f 0900 	mov.w	r9, #0
 8008faa:	9700      	str	r7, [sp, #0]
 8008fac:	4633      	mov	r3, r6
 8008fae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f9d2 	bl	800935c <_printf_common>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f040 808d 	bne.w	80090d8 <_printf_float+0x1d0>
 8008fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc2:	b00d      	add	sp, #52	@ 0x34
 8008fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc8:	4642      	mov	r2, r8
 8008fca:	464b      	mov	r3, r9
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4649      	mov	r1, r9
 8008fd0:	f7f7 fdac 	bl	8000b2c <__aeabi_dcmpun>
 8008fd4:	b140      	cbz	r0, 8008fe8 <_printf_float+0xe0>
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfbc      	itt	lt
 8008fdc:	232d      	movlt	r3, #45	@ 0x2d
 8008fde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80091dc <_printf_float+0x2d4>)
 8008fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80091e0 <_printf_float+0x2d8>)
 8008fe6:	e7d4      	b.n	8008f92 <_printf_float+0x8a>
 8008fe8:	6863      	ldr	r3, [r4, #4]
 8008fea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008fee:	9206      	str	r2, [sp, #24]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	d13b      	bne.n	800906c <_printf_float+0x164>
 8008ff4:	2306      	movs	r3, #6
 8008ff6:	6063      	str	r3, [r4, #4]
 8008ff8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	6022      	str	r2, [r4, #0]
 8009000:	9303      	str	r3, [sp, #12]
 8009002:	ab0a      	add	r3, sp, #40	@ 0x28
 8009004:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009008:	ab09      	add	r3, sp, #36	@ 0x24
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	6861      	ldr	r1, [r4, #4]
 800900e:	ec49 8b10 	vmov	d0, r8, r9
 8009012:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009016:	4628      	mov	r0, r5
 8009018:	f7ff fed6 	bl	8008dc8 <__cvt>
 800901c:	9b06      	ldr	r3, [sp, #24]
 800901e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009020:	2b47      	cmp	r3, #71	@ 0x47
 8009022:	4680      	mov	r8, r0
 8009024:	d129      	bne.n	800907a <_printf_float+0x172>
 8009026:	1cc8      	adds	r0, r1, #3
 8009028:	db02      	blt.n	8009030 <_printf_float+0x128>
 800902a:	6863      	ldr	r3, [r4, #4]
 800902c:	4299      	cmp	r1, r3
 800902e:	dd41      	ble.n	80090b4 <_printf_float+0x1ac>
 8009030:	f1aa 0a02 	sub.w	sl, sl, #2
 8009034:	fa5f fa8a 	uxtb.w	sl, sl
 8009038:	3901      	subs	r1, #1
 800903a:	4652      	mov	r2, sl
 800903c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009040:	9109      	str	r1, [sp, #36]	@ 0x24
 8009042:	f7ff ff26 	bl	8008e92 <__exponent>
 8009046:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009048:	1813      	adds	r3, r2, r0
 800904a:	2a01      	cmp	r2, #1
 800904c:	4681      	mov	r9, r0
 800904e:	6123      	str	r3, [r4, #16]
 8009050:	dc02      	bgt.n	8009058 <_printf_float+0x150>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	07d2      	lsls	r2, r2, #31
 8009056:	d501      	bpl.n	800905c <_printf_float+0x154>
 8009058:	3301      	adds	r3, #1
 800905a:	6123      	str	r3, [r4, #16]
 800905c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0a2      	beq.n	8008faa <_printf_float+0xa2>
 8009064:	232d      	movs	r3, #45	@ 0x2d
 8009066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800906a:	e79e      	b.n	8008faa <_printf_float+0xa2>
 800906c:	9a06      	ldr	r2, [sp, #24]
 800906e:	2a47      	cmp	r2, #71	@ 0x47
 8009070:	d1c2      	bne.n	8008ff8 <_printf_float+0xf0>
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1c0      	bne.n	8008ff8 <_printf_float+0xf0>
 8009076:	2301      	movs	r3, #1
 8009078:	e7bd      	b.n	8008ff6 <_printf_float+0xee>
 800907a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800907e:	d9db      	bls.n	8009038 <_printf_float+0x130>
 8009080:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009084:	d118      	bne.n	80090b8 <_printf_float+0x1b0>
 8009086:	2900      	cmp	r1, #0
 8009088:	6863      	ldr	r3, [r4, #4]
 800908a:	dd0b      	ble.n	80090a4 <_printf_float+0x19c>
 800908c:	6121      	str	r1, [r4, #16]
 800908e:	b913      	cbnz	r3, 8009096 <_printf_float+0x18e>
 8009090:	6822      	ldr	r2, [r4, #0]
 8009092:	07d0      	lsls	r0, r2, #31
 8009094:	d502      	bpl.n	800909c <_printf_float+0x194>
 8009096:	3301      	adds	r3, #1
 8009098:	440b      	add	r3, r1
 800909a:	6123      	str	r3, [r4, #16]
 800909c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800909e:	f04f 0900 	mov.w	r9, #0
 80090a2:	e7db      	b.n	800905c <_printf_float+0x154>
 80090a4:	b913      	cbnz	r3, 80090ac <_printf_float+0x1a4>
 80090a6:	6822      	ldr	r2, [r4, #0]
 80090a8:	07d2      	lsls	r2, r2, #31
 80090aa:	d501      	bpl.n	80090b0 <_printf_float+0x1a8>
 80090ac:	3302      	adds	r3, #2
 80090ae:	e7f4      	b.n	800909a <_printf_float+0x192>
 80090b0:	2301      	movs	r3, #1
 80090b2:	e7f2      	b.n	800909a <_printf_float+0x192>
 80090b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80090b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ba:	4299      	cmp	r1, r3
 80090bc:	db05      	blt.n	80090ca <_printf_float+0x1c2>
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	6121      	str	r1, [r4, #16]
 80090c2:	07d8      	lsls	r0, r3, #31
 80090c4:	d5ea      	bpl.n	800909c <_printf_float+0x194>
 80090c6:	1c4b      	adds	r3, r1, #1
 80090c8:	e7e7      	b.n	800909a <_printf_float+0x192>
 80090ca:	2900      	cmp	r1, #0
 80090cc:	bfd4      	ite	le
 80090ce:	f1c1 0202 	rsble	r2, r1, #2
 80090d2:	2201      	movgt	r2, #1
 80090d4:	4413      	add	r3, r2
 80090d6:	e7e0      	b.n	800909a <_printf_float+0x192>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	055a      	lsls	r2, r3, #21
 80090dc:	d407      	bmi.n	80090ee <_printf_float+0x1e6>
 80090de:	6923      	ldr	r3, [r4, #16]
 80090e0:	4642      	mov	r2, r8
 80090e2:	4631      	mov	r1, r6
 80090e4:	4628      	mov	r0, r5
 80090e6:	47b8      	blx	r7
 80090e8:	3001      	adds	r0, #1
 80090ea:	d12b      	bne.n	8009144 <_printf_float+0x23c>
 80090ec:	e767      	b.n	8008fbe <_printf_float+0xb6>
 80090ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80090f2:	f240 80dd 	bls.w	80092b0 <_printf_float+0x3a8>
 80090f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090fa:	2200      	movs	r2, #0
 80090fc:	2300      	movs	r3, #0
 80090fe:	f7f7 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009102:	2800      	cmp	r0, #0
 8009104:	d033      	beq.n	800916e <_printf_float+0x266>
 8009106:	4a37      	ldr	r2, [pc, #220]	@ (80091e4 <_printf_float+0x2dc>)
 8009108:	2301      	movs	r3, #1
 800910a:	4631      	mov	r1, r6
 800910c:	4628      	mov	r0, r5
 800910e:	47b8      	blx	r7
 8009110:	3001      	adds	r0, #1
 8009112:	f43f af54 	beq.w	8008fbe <_printf_float+0xb6>
 8009116:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800911a:	4543      	cmp	r3, r8
 800911c:	db02      	blt.n	8009124 <_printf_float+0x21c>
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	07d8      	lsls	r0, r3, #31
 8009122:	d50f      	bpl.n	8009144 <_printf_float+0x23c>
 8009124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009128:	4631      	mov	r1, r6
 800912a:	4628      	mov	r0, r5
 800912c:	47b8      	blx	r7
 800912e:	3001      	adds	r0, #1
 8009130:	f43f af45 	beq.w	8008fbe <_printf_float+0xb6>
 8009134:	f04f 0900 	mov.w	r9, #0
 8009138:	f108 38ff 	add.w	r8, r8, #4294967295
 800913c:	f104 0a1a 	add.w	sl, r4, #26
 8009140:	45c8      	cmp	r8, r9
 8009142:	dc09      	bgt.n	8009158 <_printf_float+0x250>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	079b      	lsls	r3, r3, #30
 8009148:	f100 8103 	bmi.w	8009352 <_printf_float+0x44a>
 800914c:	68e0      	ldr	r0, [r4, #12]
 800914e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009150:	4298      	cmp	r0, r3
 8009152:	bfb8      	it	lt
 8009154:	4618      	movlt	r0, r3
 8009156:	e734      	b.n	8008fc2 <_printf_float+0xba>
 8009158:	2301      	movs	r3, #1
 800915a:	4652      	mov	r2, sl
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	f43f af2b 	beq.w	8008fbe <_printf_float+0xb6>
 8009168:	f109 0901 	add.w	r9, r9, #1
 800916c:	e7e8      	b.n	8009140 <_printf_float+0x238>
 800916e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009170:	2b00      	cmp	r3, #0
 8009172:	dc39      	bgt.n	80091e8 <_printf_float+0x2e0>
 8009174:	4a1b      	ldr	r2, [pc, #108]	@ (80091e4 <_printf_float+0x2dc>)
 8009176:	2301      	movs	r3, #1
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	f43f af1d 	beq.w	8008fbe <_printf_float+0xb6>
 8009184:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009188:	ea59 0303 	orrs.w	r3, r9, r3
 800918c:	d102      	bne.n	8009194 <_printf_float+0x28c>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	07d9      	lsls	r1, r3, #31
 8009192:	d5d7      	bpl.n	8009144 <_printf_float+0x23c>
 8009194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009198:	4631      	mov	r1, r6
 800919a:	4628      	mov	r0, r5
 800919c:	47b8      	blx	r7
 800919e:	3001      	adds	r0, #1
 80091a0:	f43f af0d 	beq.w	8008fbe <_printf_float+0xb6>
 80091a4:	f04f 0a00 	mov.w	sl, #0
 80091a8:	f104 0b1a 	add.w	fp, r4, #26
 80091ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ae:	425b      	negs	r3, r3
 80091b0:	4553      	cmp	r3, sl
 80091b2:	dc01      	bgt.n	80091b8 <_printf_float+0x2b0>
 80091b4:	464b      	mov	r3, r9
 80091b6:	e793      	b.n	80090e0 <_printf_float+0x1d8>
 80091b8:	2301      	movs	r3, #1
 80091ba:	465a      	mov	r2, fp
 80091bc:	4631      	mov	r1, r6
 80091be:	4628      	mov	r0, r5
 80091c0:	47b8      	blx	r7
 80091c2:	3001      	adds	r0, #1
 80091c4:	f43f aefb 	beq.w	8008fbe <_printf_float+0xb6>
 80091c8:	f10a 0a01 	add.w	sl, sl, #1
 80091cc:	e7ee      	b.n	80091ac <_printf_float+0x2a4>
 80091ce:	bf00      	nop
 80091d0:	7fefffff 	.word	0x7fefffff
 80091d4:	0800d85c 	.word	0x0800d85c
 80091d8:	0800d860 	.word	0x0800d860
 80091dc:	0800d864 	.word	0x0800d864
 80091e0:	0800d868 	.word	0x0800d868
 80091e4:	0800d86c 	.word	0x0800d86c
 80091e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091ee:	4553      	cmp	r3, sl
 80091f0:	bfa8      	it	ge
 80091f2:	4653      	movge	r3, sl
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	4699      	mov	r9, r3
 80091f8:	dc36      	bgt.n	8009268 <_printf_float+0x360>
 80091fa:	f04f 0b00 	mov.w	fp, #0
 80091fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009202:	f104 021a 	add.w	r2, r4, #26
 8009206:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009208:	9306      	str	r3, [sp, #24]
 800920a:	eba3 0309 	sub.w	r3, r3, r9
 800920e:	455b      	cmp	r3, fp
 8009210:	dc31      	bgt.n	8009276 <_printf_float+0x36e>
 8009212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009214:	459a      	cmp	sl, r3
 8009216:	dc3a      	bgt.n	800928e <_printf_float+0x386>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	07da      	lsls	r2, r3, #31
 800921c:	d437      	bmi.n	800928e <_printf_float+0x386>
 800921e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009220:	ebaa 0903 	sub.w	r9, sl, r3
 8009224:	9b06      	ldr	r3, [sp, #24]
 8009226:	ebaa 0303 	sub.w	r3, sl, r3
 800922a:	4599      	cmp	r9, r3
 800922c:	bfa8      	it	ge
 800922e:	4699      	movge	r9, r3
 8009230:	f1b9 0f00 	cmp.w	r9, #0
 8009234:	dc33      	bgt.n	800929e <_printf_float+0x396>
 8009236:	f04f 0800 	mov.w	r8, #0
 800923a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800923e:	f104 0b1a 	add.w	fp, r4, #26
 8009242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009244:	ebaa 0303 	sub.w	r3, sl, r3
 8009248:	eba3 0309 	sub.w	r3, r3, r9
 800924c:	4543      	cmp	r3, r8
 800924e:	f77f af79 	ble.w	8009144 <_printf_float+0x23c>
 8009252:	2301      	movs	r3, #1
 8009254:	465a      	mov	r2, fp
 8009256:	4631      	mov	r1, r6
 8009258:	4628      	mov	r0, r5
 800925a:	47b8      	blx	r7
 800925c:	3001      	adds	r0, #1
 800925e:	f43f aeae 	beq.w	8008fbe <_printf_float+0xb6>
 8009262:	f108 0801 	add.w	r8, r8, #1
 8009266:	e7ec      	b.n	8009242 <_printf_float+0x33a>
 8009268:	4642      	mov	r2, r8
 800926a:	4631      	mov	r1, r6
 800926c:	4628      	mov	r0, r5
 800926e:	47b8      	blx	r7
 8009270:	3001      	adds	r0, #1
 8009272:	d1c2      	bne.n	80091fa <_printf_float+0x2f2>
 8009274:	e6a3      	b.n	8008fbe <_printf_float+0xb6>
 8009276:	2301      	movs	r3, #1
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	9206      	str	r2, [sp, #24]
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	f43f ae9c 	beq.w	8008fbe <_printf_float+0xb6>
 8009286:	9a06      	ldr	r2, [sp, #24]
 8009288:	f10b 0b01 	add.w	fp, fp, #1
 800928c:	e7bb      	b.n	8009206 <_printf_float+0x2fe>
 800928e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	d1c0      	bne.n	800921e <_printf_float+0x316>
 800929c:	e68f      	b.n	8008fbe <_printf_float+0xb6>
 800929e:	9a06      	ldr	r2, [sp, #24]
 80092a0:	464b      	mov	r3, r9
 80092a2:	4442      	add	r2, r8
 80092a4:	4631      	mov	r1, r6
 80092a6:	4628      	mov	r0, r5
 80092a8:	47b8      	blx	r7
 80092aa:	3001      	adds	r0, #1
 80092ac:	d1c3      	bne.n	8009236 <_printf_float+0x32e>
 80092ae:	e686      	b.n	8008fbe <_printf_float+0xb6>
 80092b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80092b4:	f1ba 0f01 	cmp.w	sl, #1
 80092b8:	dc01      	bgt.n	80092be <_printf_float+0x3b6>
 80092ba:	07db      	lsls	r3, r3, #31
 80092bc:	d536      	bpl.n	800932c <_printf_float+0x424>
 80092be:	2301      	movs	r3, #1
 80092c0:	4642      	mov	r2, r8
 80092c2:	4631      	mov	r1, r6
 80092c4:	4628      	mov	r0, r5
 80092c6:	47b8      	blx	r7
 80092c8:	3001      	adds	r0, #1
 80092ca:	f43f ae78 	beq.w	8008fbe <_printf_float+0xb6>
 80092ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092d2:	4631      	mov	r1, r6
 80092d4:	4628      	mov	r0, r5
 80092d6:	47b8      	blx	r7
 80092d8:	3001      	adds	r0, #1
 80092da:	f43f ae70 	beq.w	8008fbe <_printf_float+0xb6>
 80092de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092e2:	2200      	movs	r2, #0
 80092e4:	2300      	movs	r3, #0
 80092e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092ea:	f7f7 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ee:	b9c0      	cbnz	r0, 8009322 <_printf_float+0x41a>
 80092f0:	4653      	mov	r3, sl
 80092f2:	f108 0201 	add.w	r2, r8, #1
 80092f6:	4631      	mov	r1, r6
 80092f8:	4628      	mov	r0, r5
 80092fa:	47b8      	blx	r7
 80092fc:	3001      	adds	r0, #1
 80092fe:	d10c      	bne.n	800931a <_printf_float+0x412>
 8009300:	e65d      	b.n	8008fbe <_printf_float+0xb6>
 8009302:	2301      	movs	r3, #1
 8009304:	465a      	mov	r2, fp
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	47b8      	blx	r7
 800930c:	3001      	adds	r0, #1
 800930e:	f43f ae56 	beq.w	8008fbe <_printf_float+0xb6>
 8009312:	f108 0801 	add.w	r8, r8, #1
 8009316:	45d0      	cmp	r8, sl
 8009318:	dbf3      	blt.n	8009302 <_printf_float+0x3fa>
 800931a:	464b      	mov	r3, r9
 800931c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009320:	e6df      	b.n	80090e2 <_printf_float+0x1da>
 8009322:	f04f 0800 	mov.w	r8, #0
 8009326:	f104 0b1a 	add.w	fp, r4, #26
 800932a:	e7f4      	b.n	8009316 <_printf_float+0x40e>
 800932c:	2301      	movs	r3, #1
 800932e:	4642      	mov	r2, r8
 8009330:	e7e1      	b.n	80092f6 <_printf_float+0x3ee>
 8009332:	2301      	movs	r3, #1
 8009334:	464a      	mov	r2, r9
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	47b8      	blx	r7
 800933c:	3001      	adds	r0, #1
 800933e:	f43f ae3e 	beq.w	8008fbe <_printf_float+0xb6>
 8009342:	f108 0801 	add.w	r8, r8, #1
 8009346:	68e3      	ldr	r3, [r4, #12]
 8009348:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800934a:	1a5b      	subs	r3, r3, r1
 800934c:	4543      	cmp	r3, r8
 800934e:	dcf0      	bgt.n	8009332 <_printf_float+0x42a>
 8009350:	e6fc      	b.n	800914c <_printf_float+0x244>
 8009352:	f04f 0800 	mov.w	r8, #0
 8009356:	f104 0919 	add.w	r9, r4, #25
 800935a:	e7f4      	b.n	8009346 <_printf_float+0x43e>

0800935c <_printf_common>:
 800935c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009360:	4616      	mov	r6, r2
 8009362:	4698      	mov	r8, r3
 8009364:	688a      	ldr	r2, [r1, #8]
 8009366:	690b      	ldr	r3, [r1, #16]
 8009368:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800936c:	4293      	cmp	r3, r2
 800936e:	bfb8      	it	lt
 8009370:	4613      	movlt	r3, r2
 8009372:	6033      	str	r3, [r6, #0]
 8009374:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009378:	4607      	mov	r7, r0
 800937a:	460c      	mov	r4, r1
 800937c:	b10a      	cbz	r2, 8009382 <_printf_common+0x26>
 800937e:	3301      	adds	r3, #1
 8009380:	6033      	str	r3, [r6, #0]
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	0699      	lsls	r1, r3, #26
 8009386:	bf42      	ittt	mi
 8009388:	6833      	ldrmi	r3, [r6, #0]
 800938a:	3302      	addmi	r3, #2
 800938c:	6033      	strmi	r3, [r6, #0]
 800938e:	6825      	ldr	r5, [r4, #0]
 8009390:	f015 0506 	ands.w	r5, r5, #6
 8009394:	d106      	bne.n	80093a4 <_printf_common+0x48>
 8009396:	f104 0a19 	add.w	sl, r4, #25
 800939a:	68e3      	ldr	r3, [r4, #12]
 800939c:	6832      	ldr	r2, [r6, #0]
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	42ab      	cmp	r3, r5
 80093a2:	dc26      	bgt.n	80093f2 <_printf_common+0x96>
 80093a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093a8:	6822      	ldr	r2, [r4, #0]
 80093aa:	3b00      	subs	r3, #0
 80093ac:	bf18      	it	ne
 80093ae:	2301      	movne	r3, #1
 80093b0:	0692      	lsls	r2, r2, #26
 80093b2:	d42b      	bmi.n	800940c <_printf_common+0xb0>
 80093b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093b8:	4641      	mov	r1, r8
 80093ba:	4638      	mov	r0, r7
 80093bc:	47c8      	blx	r9
 80093be:	3001      	adds	r0, #1
 80093c0:	d01e      	beq.n	8009400 <_printf_common+0xa4>
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	6922      	ldr	r2, [r4, #16]
 80093c6:	f003 0306 	and.w	r3, r3, #6
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	bf02      	ittt	eq
 80093ce:	68e5      	ldreq	r5, [r4, #12]
 80093d0:	6833      	ldreq	r3, [r6, #0]
 80093d2:	1aed      	subeq	r5, r5, r3
 80093d4:	68a3      	ldr	r3, [r4, #8]
 80093d6:	bf0c      	ite	eq
 80093d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093dc:	2500      	movne	r5, #0
 80093de:	4293      	cmp	r3, r2
 80093e0:	bfc4      	itt	gt
 80093e2:	1a9b      	subgt	r3, r3, r2
 80093e4:	18ed      	addgt	r5, r5, r3
 80093e6:	2600      	movs	r6, #0
 80093e8:	341a      	adds	r4, #26
 80093ea:	42b5      	cmp	r5, r6
 80093ec:	d11a      	bne.n	8009424 <_printf_common+0xc8>
 80093ee:	2000      	movs	r0, #0
 80093f0:	e008      	b.n	8009404 <_printf_common+0xa8>
 80093f2:	2301      	movs	r3, #1
 80093f4:	4652      	mov	r2, sl
 80093f6:	4641      	mov	r1, r8
 80093f8:	4638      	mov	r0, r7
 80093fa:	47c8      	blx	r9
 80093fc:	3001      	adds	r0, #1
 80093fe:	d103      	bne.n	8009408 <_printf_common+0xac>
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009408:	3501      	adds	r5, #1
 800940a:	e7c6      	b.n	800939a <_printf_common+0x3e>
 800940c:	18e1      	adds	r1, r4, r3
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	2030      	movs	r0, #48	@ 0x30
 8009412:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009416:	4422      	add	r2, r4
 8009418:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800941c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009420:	3302      	adds	r3, #2
 8009422:	e7c7      	b.n	80093b4 <_printf_common+0x58>
 8009424:	2301      	movs	r3, #1
 8009426:	4622      	mov	r2, r4
 8009428:	4641      	mov	r1, r8
 800942a:	4638      	mov	r0, r7
 800942c:	47c8      	blx	r9
 800942e:	3001      	adds	r0, #1
 8009430:	d0e6      	beq.n	8009400 <_printf_common+0xa4>
 8009432:	3601      	adds	r6, #1
 8009434:	e7d9      	b.n	80093ea <_printf_common+0x8e>
	...

08009438 <_printf_i>:
 8009438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800943c:	7e0f      	ldrb	r7, [r1, #24]
 800943e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009440:	2f78      	cmp	r7, #120	@ 0x78
 8009442:	4691      	mov	r9, r2
 8009444:	4680      	mov	r8, r0
 8009446:	460c      	mov	r4, r1
 8009448:	469a      	mov	sl, r3
 800944a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800944e:	d807      	bhi.n	8009460 <_printf_i+0x28>
 8009450:	2f62      	cmp	r7, #98	@ 0x62
 8009452:	d80a      	bhi.n	800946a <_printf_i+0x32>
 8009454:	2f00      	cmp	r7, #0
 8009456:	f000 80d2 	beq.w	80095fe <_printf_i+0x1c6>
 800945a:	2f58      	cmp	r7, #88	@ 0x58
 800945c:	f000 80b9 	beq.w	80095d2 <_printf_i+0x19a>
 8009460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009464:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009468:	e03a      	b.n	80094e0 <_printf_i+0xa8>
 800946a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800946e:	2b15      	cmp	r3, #21
 8009470:	d8f6      	bhi.n	8009460 <_printf_i+0x28>
 8009472:	a101      	add	r1, pc, #4	@ (adr r1, 8009478 <_printf_i+0x40>)
 8009474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009478:	080094d1 	.word	0x080094d1
 800947c:	080094e5 	.word	0x080094e5
 8009480:	08009461 	.word	0x08009461
 8009484:	08009461 	.word	0x08009461
 8009488:	08009461 	.word	0x08009461
 800948c:	08009461 	.word	0x08009461
 8009490:	080094e5 	.word	0x080094e5
 8009494:	08009461 	.word	0x08009461
 8009498:	08009461 	.word	0x08009461
 800949c:	08009461 	.word	0x08009461
 80094a0:	08009461 	.word	0x08009461
 80094a4:	080095e5 	.word	0x080095e5
 80094a8:	0800950f 	.word	0x0800950f
 80094ac:	0800959f 	.word	0x0800959f
 80094b0:	08009461 	.word	0x08009461
 80094b4:	08009461 	.word	0x08009461
 80094b8:	08009607 	.word	0x08009607
 80094bc:	08009461 	.word	0x08009461
 80094c0:	0800950f 	.word	0x0800950f
 80094c4:	08009461 	.word	0x08009461
 80094c8:	08009461 	.word	0x08009461
 80094cc:	080095a7 	.word	0x080095a7
 80094d0:	6833      	ldr	r3, [r6, #0]
 80094d2:	1d1a      	adds	r2, r3, #4
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6032      	str	r2, [r6, #0]
 80094d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094e0:	2301      	movs	r3, #1
 80094e2:	e09d      	b.n	8009620 <_printf_i+0x1e8>
 80094e4:	6833      	ldr	r3, [r6, #0]
 80094e6:	6820      	ldr	r0, [r4, #0]
 80094e8:	1d19      	adds	r1, r3, #4
 80094ea:	6031      	str	r1, [r6, #0]
 80094ec:	0606      	lsls	r6, r0, #24
 80094ee:	d501      	bpl.n	80094f4 <_printf_i+0xbc>
 80094f0:	681d      	ldr	r5, [r3, #0]
 80094f2:	e003      	b.n	80094fc <_printf_i+0xc4>
 80094f4:	0645      	lsls	r5, r0, #25
 80094f6:	d5fb      	bpl.n	80094f0 <_printf_i+0xb8>
 80094f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	da03      	bge.n	8009508 <_printf_i+0xd0>
 8009500:	232d      	movs	r3, #45	@ 0x2d
 8009502:	426d      	negs	r5, r5
 8009504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009508:	4859      	ldr	r0, [pc, #356]	@ (8009670 <_printf_i+0x238>)
 800950a:	230a      	movs	r3, #10
 800950c:	e011      	b.n	8009532 <_printf_i+0xfa>
 800950e:	6821      	ldr	r1, [r4, #0]
 8009510:	6833      	ldr	r3, [r6, #0]
 8009512:	0608      	lsls	r0, r1, #24
 8009514:	f853 5b04 	ldr.w	r5, [r3], #4
 8009518:	d402      	bmi.n	8009520 <_printf_i+0xe8>
 800951a:	0649      	lsls	r1, r1, #25
 800951c:	bf48      	it	mi
 800951e:	b2ad      	uxthmi	r5, r5
 8009520:	2f6f      	cmp	r7, #111	@ 0x6f
 8009522:	4853      	ldr	r0, [pc, #332]	@ (8009670 <_printf_i+0x238>)
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	bf14      	ite	ne
 8009528:	230a      	movne	r3, #10
 800952a:	2308      	moveq	r3, #8
 800952c:	2100      	movs	r1, #0
 800952e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009532:	6866      	ldr	r6, [r4, #4]
 8009534:	60a6      	str	r6, [r4, #8]
 8009536:	2e00      	cmp	r6, #0
 8009538:	bfa2      	ittt	ge
 800953a:	6821      	ldrge	r1, [r4, #0]
 800953c:	f021 0104 	bicge.w	r1, r1, #4
 8009540:	6021      	strge	r1, [r4, #0]
 8009542:	b90d      	cbnz	r5, 8009548 <_printf_i+0x110>
 8009544:	2e00      	cmp	r6, #0
 8009546:	d04b      	beq.n	80095e0 <_printf_i+0x1a8>
 8009548:	4616      	mov	r6, r2
 800954a:	fbb5 f1f3 	udiv	r1, r5, r3
 800954e:	fb03 5711 	mls	r7, r3, r1, r5
 8009552:	5dc7      	ldrb	r7, [r0, r7]
 8009554:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009558:	462f      	mov	r7, r5
 800955a:	42bb      	cmp	r3, r7
 800955c:	460d      	mov	r5, r1
 800955e:	d9f4      	bls.n	800954a <_printf_i+0x112>
 8009560:	2b08      	cmp	r3, #8
 8009562:	d10b      	bne.n	800957c <_printf_i+0x144>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	07df      	lsls	r7, r3, #31
 8009568:	d508      	bpl.n	800957c <_printf_i+0x144>
 800956a:	6923      	ldr	r3, [r4, #16]
 800956c:	6861      	ldr	r1, [r4, #4]
 800956e:	4299      	cmp	r1, r3
 8009570:	bfde      	ittt	le
 8009572:	2330      	movle	r3, #48	@ 0x30
 8009574:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009578:	f106 36ff 	addle.w	r6, r6, #4294967295
 800957c:	1b92      	subs	r2, r2, r6
 800957e:	6122      	str	r2, [r4, #16]
 8009580:	f8cd a000 	str.w	sl, [sp]
 8009584:	464b      	mov	r3, r9
 8009586:	aa03      	add	r2, sp, #12
 8009588:	4621      	mov	r1, r4
 800958a:	4640      	mov	r0, r8
 800958c:	f7ff fee6 	bl	800935c <_printf_common>
 8009590:	3001      	adds	r0, #1
 8009592:	d14a      	bne.n	800962a <_printf_i+0x1f2>
 8009594:	f04f 30ff 	mov.w	r0, #4294967295
 8009598:	b004      	add	sp, #16
 800959a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	f043 0320 	orr.w	r3, r3, #32
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	4833      	ldr	r0, [pc, #204]	@ (8009674 <_printf_i+0x23c>)
 80095a8:	2778      	movs	r7, #120	@ 0x78
 80095aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	6831      	ldr	r1, [r6, #0]
 80095b2:	061f      	lsls	r7, r3, #24
 80095b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80095b8:	d402      	bmi.n	80095c0 <_printf_i+0x188>
 80095ba:	065f      	lsls	r7, r3, #25
 80095bc:	bf48      	it	mi
 80095be:	b2ad      	uxthmi	r5, r5
 80095c0:	6031      	str	r1, [r6, #0]
 80095c2:	07d9      	lsls	r1, r3, #31
 80095c4:	bf44      	itt	mi
 80095c6:	f043 0320 	orrmi.w	r3, r3, #32
 80095ca:	6023      	strmi	r3, [r4, #0]
 80095cc:	b11d      	cbz	r5, 80095d6 <_printf_i+0x19e>
 80095ce:	2310      	movs	r3, #16
 80095d0:	e7ac      	b.n	800952c <_printf_i+0xf4>
 80095d2:	4827      	ldr	r0, [pc, #156]	@ (8009670 <_printf_i+0x238>)
 80095d4:	e7e9      	b.n	80095aa <_printf_i+0x172>
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	f023 0320 	bic.w	r3, r3, #32
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	e7f6      	b.n	80095ce <_printf_i+0x196>
 80095e0:	4616      	mov	r6, r2
 80095e2:	e7bd      	b.n	8009560 <_printf_i+0x128>
 80095e4:	6833      	ldr	r3, [r6, #0]
 80095e6:	6825      	ldr	r5, [r4, #0]
 80095e8:	6961      	ldr	r1, [r4, #20]
 80095ea:	1d18      	adds	r0, r3, #4
 80095ec:	6030      	str	r0, [r6, #0]
 80095ee:	062e      	lsls	r6, r5, #24
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	d501      	bpl.n	80095f8 <_printf_i+0x1c0>
 80095f4:	6019      	str	r1, [r3, #0]
 80095f6:	e002      	b.n	80095fe <_printf_i+0x1c6>
 80095f8:	0668      	lsls	r0, r5, #25
 80095fa:	d5fb      	bpl.n	80095f4 <_printf_i+0x1bc>
 80095fc:	8019      	strh	r1, [r3, #0]
 80095fe:	2300      	movs	r3, #0
 8009600:	6123      	str	r3, [r4, #16]
 8009602:	4616      	mov	r6, r2
 8009604:	e7bc      	b.n	8009580 <_printf_i+0x148>
 8009606:	6833      	ldr	r3, [r6, #0]
 8009608:	1d1a      	adds	r2, r3, #4
 800960a:	6032      	str	r2, [r6, #0]
 800960c:	681e      	ldr	r6, [r3, #0]
 800960e:	6862      	ldr	r2, [r4, #4]
 8009610:	2100      	movs	r1, #0
 8009612:	4630      	mov	r0, r6
 8009614:	f7f6 fddc 	bl	80001d0 <memchr>
 8009618:	b108      	cbz	r0, 800961e <_printf_i+0x1e6>
 800961a:	1b80      	subs	r0, r0, r6
 800961c:	6060      	str	r0, [r4, #4]
 800961e:	6863      	ldr	r3, [r4, #4]
 8009620:	6123      	str	r3, [r4, #16]
 8009622:	2300      	movs	r3, #0
 8009624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009628:	e7aa      	b.n	8009580 <_printf_i+0x148>
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	4632      	mov	r2, r6
 800962e:	4649      	mov	r1, r9
 8009630:	4640      	mov	r0, r8
 8009632:	47d0      	blx	sl
 8009634:	3001      	adds	r0, #1
 8009636:	d0ad      	beq.n	8009594 <_printf_i+0x15c>
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	079b      	lsls	r3, r3, #30
 800963c:	d413      	bmi.n	8009666 <_printf_i+0x22e>
 800963e:	68e0      	ldr	r0, [r4, #12]
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	4298      	cmp	r0, r3
 8009644:	bfb8      	it	lt
 8009646:	4618      	movlt	r0, r3
 8009648:	e7a6      	b.n	8009598 <_printf_i+0x160>
 800964a:	2301      	movs	r3, #1
 800964c:	4632      	mov	r2, r6
 800964e:	4649      	mov	r1, r9
 8009650:	4640      	mov	r0, r8
 8009652:	47d0      	blx	sl
 8009654:	3001      	adds	r0, #1
 8009656:	d09d      	beq.n	8009594 <_printf_i+0x15c>
 8009658:	3501      	adds	r5, #1
 800965a:	68e3      	ldr	r3, [r4, #12]
 800965c:	9903      	ldr	r1, [sp, #12]
 800965e:	1a5b      	subs	r3, r3, r1
 8009660:	42ab      	cmp	r3, r5
 8009662:	dcf2      	bgt.n	800964a <_printf_i+0x212>
 8009664:	e7eb      	b.n	800963e <_printf_i+0x206>
 8009666:	2500      	movs	r5, #0
 8009668:	f104 0619 	add.w	r6, r4, #25
 800966c:	e7f5      	b.n	800965a <_printf_i+0x222>
 800966e:	bf00      	nop
 8009670:	0800d86e 	.word	0x0800d86e
 8009674:	0800d87f 	.word	0x0800d87f

08009678 <_scanf_float>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	b087      	sub	sp, #28
 800967e:	4617      	mov	r7, r2
 8009680:	9303      	str	r3, [sp, #12]
 8009682:	688b      	ldr	r3, [r1, #8]
 8009684:	1e5a      	subs	r2, r3, #1
 8009686:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800968a:	bf81      	itttt	hi
 800968c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009690:	eb03 0b05 	addhi.w	fp, r3, r5
 8009694:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009698:	608b      	strhi	r3, [r1, #8]
 800969a:	680b      	ldr	r3, [r1, #0]
 800969c:	460a      	mov	r2, r1
 800969e:	f04f 0500 	mov.w	r5, #0
 80096a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80096a6:	f842 3b1c 	str.w	r3, [r2], #28
 80096aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80096ae:	4680      	mov	r8, r0
 80096b0:	460c      	mov	r4, r1
 80096b2:	bf98      	it	ls
 80096b4:	f04f 0b00 	movls.w	fp, #0
 80096b8:	9201      	str	r2, [sp, #4]
 80096ba:	4616      	mov	r6, r2
 80096bc:	46aa      	mov	sl, r5
 80096be:	46a9      	mov	r9, r5
 80096c0:	9502      	str	r5, [sp, #8]
 80096c2:	68a2      	ldr	r2, [r4, #8]
 80096c4:	b152      	cbz	r2, 80096dc <_scanf_float+0x64>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b4e      	cmp	r3, #78	@ 0x4e
 80096cc:	d864      	bhi.n	8009798 <_scanf_float+0x120>
 80096ce:	2b40      	cmp	r3, #64	@ 0x40
 80096d0:	d83c      	bhi.n	800974c <_scanf_float+0xd4>
 80096d2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80096d6:	b2c8      	uxtb	r0, r1
 80096d8:	280e      	cmp	r0, #14
 80096da:	d93a      	bls.n	8009752 <_scanf_float+0xda>
 80096dc:	f1b9 0f00 	cmp.w	r9, #0
 80096e0:	d003      	beq.n	80096ea <_scanf_float+0x72>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096ee:	f1ba 0f01 	cmp.w	sl, #1
 80096f2:	f200 8117 	bhi.w	8009924 <_scanf_float+0x2ac>
 80096f6:	9b01      	ldr	r3, [sp, #4]
 80096f8:	429e      	cmp	r6, r3
 80096fa:	f200 8108 	bhi.w	800990e <_scanf_float+0x296>
 80096fe:	2001      	movs	r0, #1
 8009700:	b007      	add	sp, #28
 8009702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009706:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800970a:	2a0d      	cmp	r2, #13
 800970c:	d8e6      	bhi.n	80096dc <_scanf_float+0x64>
 800970e:	a101      	add	r1, pc, #4	@ (adr r1, 8009714 <_scanf_float+0x9c>)
 8009710:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009714:	0800985b 	.word	0x0800985b
 8009718:	080096dd 	.word	0x080096dd
 800971c:	080096dd 	.word	0x080096dd
 8009720:	080096dd 	.word	0x080096dd
 8009724:	080098bb 	.word	0x080098bb
 8009728:	08009893 	.word	0x08009893
 800972c:	080096dd 	.word	0x080096dd
 8009730:	080096dd 	.word	0x080096dd
 8009734:	08009869 	.word	0x08009869
 8009738:	080096dd 	.word	0x080096dd
 800973c:	080096dd 	.word	0x080096dd
 8009740:	080096dd 	.word	0x080096dd
 8009744:	080096dd 	.word	0x080096dd
 8009748:	08009821 	.word	0x08009821
 800974c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009750:	e7db      	b.n	800970a <_scanf_float+0x92>
 8009752:	290e      	cmp	r1, #14
 8009754:	d8c2      	bhi.n	80096dc <_scanf_float+0x64>
 8009756:	a001      	add	r0, pc, #4	@ (adr r0, 800975c <_scanf_float+0xe4>)
 8009758:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800975c:	08009811 	.word	0x08009811
 8009760:	080096dd 	.word	0x080096dd
 8009764:	08009811 	.word	0x08009811
 8009768:	080098a7 	.word	0x080098a7
 800976c:	080096dd 	.word	0x080096dd
 8009770:	080097b9 	.word	0x080097b9
 8009774:	080097f7 	.word	0x080097f7
 8009778:	080097f7 	.word	0x080097f7
 800977c:	080097f7 	.word	0x080097f7
 8009780:	080097f7 	.word	0x080097f7
 8009784:	080097f7 	.word	0x080097f7
 8009788:	080097f7 	.word	0x080097f7
 800978c:	080097f7 	.word	0x080097f7
 8009790:	080097f7 	.word	0x080097f7
 8009794:	080097f7 	.word	0x080097f7
 8009798:	2b6e      	cmp	r3, #110	@ 0x6e
 800979a:	d809      	bhi.n	80097b0 <_scanf_float+0x138>
 800979c:	2b60      	cmp	r3, #96	@ 0x60
 800979e:	d8b2      	bhi.n	8009706 <_scanf_float+0x8e>
 80097a0:	2b54      	cmp	r3, #84	@ 0x54
 80097a2:	d07b      	beq.n	800989c <_scanf_float+0x224>
 80097a4:	2b59      	cmp	r3, #89	@ 0x59
 80097a6:	d199      	bne.n	80096dc <_scanf_float+0x64>
 80097a8:	2d07      	cmp	r5, #7
 80097aa:	d197      	bne.n	80096dc <_scanf_float+0x64>
 80097ac:	2508      	movs	r5, #8
 80097ae:	e02c      	b.n	800980a <_scanf_float+0x192>
 80097b0:	2b74      	cmp	r3, #116	@ 0x74
 80097b2:	d073      	beq.n	800989c <_scanf_float+0x224>
 80097b4:	2b79      	cmp	r3, #121	@ 0x79
 80097b6:	e7f6      	b.n	80097a6 <_scanf_float+0x12e>
 80097b8:	6821      	ldr	r1, [r4, #0]
 80097ba:	05c8      	lsls	r0, r1, #23
 80097bc:	d51b      	bpl.n	80097f6 <_scanf_float+0x17e>
 80097be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80097c2:	6021      	str	r1, [r4, #0]
 80097c4:	f109 0901 	add.w	r9, r9, #1
 80097c8:	f1bb 0f00 	cmp.w	fp, #0
 80097cc:	d003      	beq.n	80097d6 <_scanf_float+0x15e>
 80097ce:	3201      	adds	r2, #1
 80097d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097d4:	60a2      	str	r2, [r4, #8]
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	3b01      	subs	r3, #1
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	3301      	adds	r3, #1
 80097e0:	6123      	str	r3, [r4, #16]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	607b      	str	r3, [r7, #4]
 80097ea:	f340 8087 	ble.w	80098fc <_scanf_float+0x284>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	3301      	adds	r3, #1
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	e765      	b.n	80096c2 <_scanf_float+0x4a>
 80097f6:	eb1a 0105 	adds.w	r1, sl, r5
 80097fa:	f47f af6f 	bne.w	80096dc <_scanf_float+0x64>
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009804:	6022      	str	r2, [r4, #0]
 8009806:	460d      	mov	r5, r1
 8009808:	468a      	mov	sl, r1
 800980a:	f806 3b01 	strb.w	r3, [r6], #1
 800980e:	e7e2      	b.n	80097d6 <_scanf_float+0x15e>
 8009810:	6822      	ldr	r2, [r4, #0]
 8009812:	0610      	lsls	r0, r2, #24
 8009814:	f57f af62 	bpl.w	80096dc <_scanf_float+0x64>
 8009818:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800981c:	6022      	str	r2, [r4, #0]
 800981e:	e7f4      	b.n	800980a <_scanf_float+0x192>
 8009820:	f1ba 0f00 	cmp.w	sl, #0
 8009824:	d10e      	bne.n	8009844 <_scanf_float+0x1cc>
 8009826:	f1b9 0f00 	cmp.w	r9, #0
 800982a:	d10e      	bne.n	800984a <_scanf_float+0x1d2>
 800982c:	6822      	ldr	r2, [r4, #0]
 800982e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009832:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009836:	d108      	bne.n	800984a <_scanf_float+0x1d2>
 8009838:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800983c:	6022      	str	r2, [r4, #0]
 800983e:	f04f 0a01 	mov.w	sl, #1
 8009842:	e7e2      	b.n	800980a <_scanf_float+0x192>
 8009844:	f1ba 0f02 	cmp.w	sl, #2
 8009848:	d055      	beq.n	80098f6 <_scanf_float+0x27e>
 800984a:	2d01      	cmp	r5, #1
 800984c:	d002      	beq.n	8009854 <_scanf_float+0x1dc>
 800984e:	2d04      	cmp	r5, #4
 8009850:	f47f af44 	bne.w	80096dc <_scanf_float+0x64>
 8009854:	3501      	adds	r5, #1
 8009856:	b2ed      	uxtb	r5, r5
 8009858:	e7d7      	b.n	800980a <_scanf_float+0x192>
 800985a:	f1ba 0f01 	cmp.w	sl, #1
 800985e:	f47f af3d 	bne.w	80096dc <_scanf_float+0x64>
 8009862:	f04f 0a02 	mov.w	sl, #2
 8009866:	e7d0      	b.n	800980a <_scanf_float+0x192>
 8009868:	b97d      	cbnz	r5, 800988a <_scanf_float+0x212>
 800986a:	f1b9 0f00 	cmp.w	r9, #0
 800986e:	f47f af38 	bne.w	80096e2 <_scanf_float+0x6a>
 8009872:	6822      	ldr	r2, [r4, #0]
 8009874:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009878:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800987c:	f040 8108 	bne.w	8009a90 <_scanf_float+0x418>
 8009880:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009884:	6022      	str	r2, [r4, #0]
 8009886:	2501      	movs	r5, #1
 8009888:	e7bf      	b.n	800980a <_scanf_float+0x192>
 800988a:	2d03      	cmp	r5, #3
 800988c:	d0e2      	beq.n	8009854 <_scanf_float+0x1dc>
 800988e:	2d05      	cmp	r5, #5
 8009890:	e7de      	b.n	8009850 <_scanf_float+0x1d8>
 8009892:	2d02      	cmp	r5, #2
 8009894:	f47f af22 	bne.w	80096dc <_scanf_float+0x64>
 8009898:	2503      	movs	r5, #3
 800989a:	e7b6      	b.n	800980a <_scanf_float+0x192>
 800989c:	2d06      	cmp	r5, #6
 800989e:	f47f af1d 	bne.w	80096dc <_scanf_float+0x64>
 80098a2:	2507      	movs	r5, #7
 80098a4:	e7b1      	b.n	800980a <_scanf_float+0x192>
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	0591      	lsls	r1, r2, #22
 80098aa:	f57f af17 	bpl.w	80096dc <_scanf_float+0x64>
 80098ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80098b2:	6022      	str	r2, [r4, #0]
 80098b4:	f8cd 9008 	str.w	r9, [sp, #8]
 80098b8:	e7a7      	b.n	800980a <_scanf_float+0x192>
 80098ba:	6822      	ldr	r2, [r4, #0]
 80098bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80098c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80098c4:	d006      	beq.n	80098d4 <_scanf_float+0x25c>
 80098c6:	0550      	lsls	r0, r2, #21
 80098c8:	f57f af08 	bpl.w	80096dc <_scanf_float+0x64>
 80098cc:	f1b9 0f00 	cmp.w	r9, #0
 80098d0:	f000 80de 	beq.w	8009a90 <_scanf_float+0x418>
 80098d4:	0591      	lsls	r1, r2, #22
 80098d6:	bf58      	it	pl
 80098d8:	9902      	ldrpl	r1, [sp, #8]
 80098da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80098de:	bf58      	it	pl
 80098e0:	eba9 0101 	subpl.w	r1, r9, r1
 80098e4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80098e8:	bf58      	it	pl
 80098ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098ee:	6022      	str	r2, [r4, #0]
 80098f0:	f04f 0900 	mov.w	r9, #0
 80098f4:	e789      	b.n	800980a <_scanf_float+0x192>
 80098f6:	f04f 0a03 	mov.w	sl, #3
 80098fa:	e786      	b.n	800980a <_scanf_float+0x192>
 80098fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009900:	4639      	mov	r1, r7
 8009902:	4640      	mov	r0, r8
 8009904:	4798      	blx	r3
 8009906:	2800      	cmp	r0, #0
 8009908:	f43f aedb 	beq.w	80096c2 <_scanf_float+0x4a>
 800990c:	e6e6      	b.n	80096dc <_scanf_float+0x64>
 800990e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009912:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009916:	463a      	mov	r2, r7
 8009918:	4640      	mov	r0, r8
 800991a:	4798      	blx	r3
 800991c:	6923      	ldr	r3, [r4, #16]
 800991e:	3b01      	subs	r3, #1
 8009920:	6123      	str	r3, [r4, #16]
 8009922:	e6e8      	b.n	80096f6 <_scanf_float+0x7e>
 8009924:	1e6b      	subs	r3, r5, #1
 8009926:	2b06      	cmp	r3, #6
 8009928:	d824      	bhi.n	8009974 <_scanf_float+0x2fc>
 800992a:	2d02      	cmp	r5, #2
 800992c:	d836      	bhi.n	800999c <_scanf_float+0x324>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	429e      	cmp	r6, r3
 8009932:	f67f aee4 	bls.w	80096fe <_scanf_float+0x86>
 8009936:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800993a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800993e:	463a      	mov	r2, r7
 8009940:	4640      	mov	r0, r8
 8009942:	4798      	blx	r3
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	3b01      	subs	r3, #1
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	e7f0      	b.n	800992e <_scanf_float+0x2b6>
 800994c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009950:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009954:	463a      	mov	r2, r7
 8009956:	4640      	mov	r0, r8
 8009958:	4798      	blx	r3
 800995a:	6923      	ldr	r3, [r4, #16]
 800995c:	3b01      	subs	r3, #1
 800995e:	6123      	str	r3, [r4, #16]
 8009960:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009964:	fa5f fa8a 	uxtb.w	sl, sl
 8009968:	f1ba 0f02 	cmp.w	sl, #2
 800996c:	d1ee      	bne.n	800994c <_scanf_float+0x2d4>
 800996e:	3d03      	subs	r5, #3
 8009970:	b2ed      	uxtb	r5, r5
 8009972:	1b76      	subs	r6, r6, r5
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	05da      	lsls	r2, r3, #23
 8009978:	d530      	bpl.n	80099dc <_scanf_float+0x364>
 800997a:	055b      	lsls	r3, r3, #21
 800997c:	d511      	bpl.n	80099a2 <_scanf_float+0x32a>
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	429e      	cmp	r6, r3
 8009982:	f67f aebc 	bls.w	80096fe <_scanf_float+0x86>
 8009986:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800998a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800998e:	463a      	mov	r2, r7
 8009990:	4640      	mov	r0, r8
 8009992:	4798      	blx	r3
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	3b01      	subs	r3, #1
 8009998:	6123      	str	r3, [r4, #16]
 800999a:	e7f0      	b.n	800997e <_scanf_float+0x306>
 800999c:	46aa      	mov	sl, r5
 800999e:	46b3      	mov	fp, r6
 80099a0:	e7de      	b.n	8009960 <_scanf_float+0x2e8>
 80099a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	2965      	cmp	r1, #101	@ 0x65
 80099aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80099ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	d00c      	beq.n	80099d0 <_scanf_float+0x358>
 80099b6:	2945      	cmp	r1, #69	@ 0x45
 80099b8:	d00a      	beq.n	80099d0 <_scanf_float+0x358>
 80099ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099be:	463a      	mov	r2, r7
 80099c0:	4640      	mov	r0, r8
 80099c2:	4798      	blx	r3
 80099c4:	6923      	ldr	r3, [r4, #16]
 80099c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	1eb5      	subs	r5, r6, #2
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099d4:	463a      	mov	r2, r7
 80099d6:	4640      	mov	r0, r8
 80099d8:	4798      	blx	r3
 80099da:	462e      	mov	r6, r5
 80099dc:	6822      	ldr	r2, [r4, #0]
 80099de:	f012 0210 	ands.w	r2, r2, #16
 80099e2:	d001      	beq.n	80099e8 <_scanf_float+0x370>
 80099e4:	2000      	movs	r0, #0
 80099e6:	e68b      	b.n	8009700 <_scanf_float+0x88>
 80099e8:	7032      	strb	r2, [r6, #0]
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80099f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099f4:	d11c      	bne.n	8009a30 <_scanf_float+0x3b8>
 80099f6:	9b02      	ldr	r3, [sp, #8]
 80099f8:	454b      	cmp	r3, r9
 80099fa:	eba3 0209 	sub.w	r2, r3, r9
 80099fe:	d123      	bne.n	8009a48 <_scanf_float+0x3d0>
 8009a00:	9901      	ldr	r1, [sp, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	4640      	mov	r0, r8
 8009a06:	f002 fd13 	bl	800c430 <_strtod_r>
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	6821      	ldr	r1, [r4, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f011 0f02 	tst.w	r1, #2
 8009a14:	ec57 6b10 	vmov	r6, r7, d0
 8009a18:	f103 0204 	add.w	r2, r3, #4
 8009a1c:	d01f      	beq.n	8009a5e <_scanf_float+0x3e6>
 8009a1e:	9903      	ldr	r1, [sp, #12]
 8009a20:	600a      	str	r2, [r1, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	e9c3 6700 	strd	r6, r7, [r3]
 8009a28:	68e3      	ldr	r3, [r4, #12]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	60e3      	str	r3, [r4, #12]
 8009a2e:	e7d9      	b.n	80099e4 <_scanf_float+0x36c>
 8009a30:	9b04      	ldr	r3, [sp, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0e4      	beq.n	8009a00 <_scanf_float+0x388>
 8009a36:	9905      	ldr	r1, [sp, #20]
 8009a38:	230a      	movs	r3, #10
 8009a3a:	3101      	adds	r1, #1
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	f002 fd77 	bl	800c530 <_strtol_r>
 8009a42:	9b04      	ldr	r3, [sp, #16]
 8009a44:	9e05      	ldr	r6, [sp, #20]
 8009a46:	1ac2      	subs	r2, r0, r3
 8009a48:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009a4c:	429e      	cmp	r6, r3
 8009a4e:	bf28      	it	cs
 8009a50:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009a54:	4910      	ldr	r1, [pc, #64]	@ (8009a98 <_scanf_float+0x420>)
 8009a56:	4630      	mov	r0, r6
 8009a58:	f000 f95c 	bl	8009d14 <siprintf>
 8009a5c:	e7d0      	b.n	8009a00 <_scanf_float+0x388>
 8009a5e:	f011 0f04 	tst.w	r1, #4
 8009a62:	9903      	ldr	r1, [sp, #12]
 8009a64:	600a      	str	r2, [r1, #0]
 8009a66:	d1dc      	bne.n	8009a22 <_scanf_float+0x3aa>
 8009a68:	681d      	ldr	r5, [r3, #0]
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	463b      	mov	r3, r7
 8009a6e:	4630      	mov	r0, r6
 8009a70:	4639      	mov	r1, r7
 8009a72:	f7f7 f85b 	bl	8000b2c <__aeabi_dcmpun>
 8009a76:	b128      	cbz	r0, 8009a84 <_scanf_float+0x40c>
 8009a78:	4808      	ldr	r0, [pc, #32]	@ (8009a9c <_scanf_float+0x424>)
 8009a7a:	f000 fad1 	bl	800a020 <nanf>
 8009a7e:	ed85 0a00 	vstr	s0, [r5]
 8009a82:	e7d1      	b.n	8009a28 <_scanf_float+0x3b0>
 8009a84:	4630      	mov	r0, r6
 8009a86:	4639      	mov	r1, r7
 8009a88:	f7f7 f8ae 	bl	8000be8 <__aeabi_d2f>
 8009a8c:	6028      	str	r0, [r5, #0]
 8009a8e:	e7cb      	b.n	8009a28 <_scanf_float+0x3b0>
 8009a90:	f04f 0900 	mov.w	r9, #0
 8009a94:	e629      	b.n	80096ea <_scanf_float+0x72>
 8009a96:	bf00      	nop
 8009a98:	0800d890 	.word	0x0800d890
 8009a9c:	0800dc25 	.word	0x0800dc25

08009aa0 <std>:
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	b510      	push	{r4, lr}
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8009aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aae:	6083      	str	r3, [r0, #8]
 8009ab0:	8181      	strh	r1, [r0, #12]
 8009ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ab4:	81c2      	strh	r2, [r0, #14]
 8009ab6:	6183      	str	r3, [r0, #24]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	2208      	movs	r2, #8
 8009abc:	305c      	adds	r0, #92	@ 0x5c
 8009abe:	f000 fa21 	bl	8009f04 <memset>
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8009af8 <std+0x58>)
 8009ac4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8009afc <std+0x5c>)
 8009ac8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009aca:	4b0d      	ldr	r3, [pc, #52]	@ (8009b00 <std+0x60>)
 8009acc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ace:	4b0d      	ldr	r3, [pc, #52]	@ (8009b04 <std+0x64>)
 8009ad0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8009b08 <std+0x68>)
 8009ad4:	6224      	str	r4, [r4, #32]
 8009ad6:	429c      	cmp	r4, r3
 8009ad8:	d006      	beq.n	8009ae8 <std+0x48>
 8009ada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009ade:	4294      	cmp	r4, r2
 8009ae0:	d002      	beq.n	8009ae8 <std+0x48>
 8009ae2:	33d0      	adds	r3, #208	@ 0xd0
 8009ae4:	429c      	cmp	r4, r3
 8009ae6:	d105      	bne.n	8009af4 <std+0x54>
 8009ae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af0:	f000 ba84 	b.w	8009ffc <__retarget_lock_init_recursive>
 8009af4:	bd10      	pop	{r4, pc}
 8009af6:	bf00      	nop
 8009af8:	08009d55 	.word	0x08009d55
 8009afc:	08009d77 	.word	0x08009d77
 8009b00:	08009daf 	.word	0x08009daf
 8009b04:	08009dd3 	.word	0x08009dd3
 8009b08:	20005130 	.word	0x20005130

08009b0c <stdio_exit_handler>:
 8009b0c:	4a02      	ldr	r2, [pc, #8]	@ (8009b18 <stdio_exit_handler+0xc>)
 8009b0e:	4903      	ldr	r1, [pc, #12]	@ (8009b1c <stdio_exit_handler+0x10>)
 8009b10:	4803      	ldr	r0, [pc, #12]	@ (8009b20 <stdio_exit_handler+0x14>)
 8009b12:	f000 b869 	b.w	8009be8 <_fwalk_sglue>
 8009b16:	bf00      	nop
 8009b18:	20000034 	.word	0x20000034
 8009b1c:	0800cb71 	.word	0x0800cb71
 8009b20:	20000044 	.word	0x20000044

08009b24 <cleanup_stdio>:
 8009b24:	6841      	ldr	r1, [r0, #4]
 8009b26:	4b0c      	ldr	r3, [pc, #48]	@ (8009b58 <cleanup_stdio+0x34>)
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	b510      	push	{r4, lr}
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	d001      	beq.n	8009b34 <cleanup_stdio+0x10>
 8009b30:	f003 f81e 	bl	800cb70 <_fflush_r>
 8009b34:	68a1      	ldr	r1, [r4, #8]
 8009b36:	4b09      	ldr	r3, [pc, #36]	@ (8009b5c <cleanup_stdio+0x38>)
 8009b38:	4299      	cmp	r1, r3
 8009b3a:	d002      	beq.n	8009b42 <cleanup_stdio+0x1e>
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f003 f817 	bl	800cb70 <_fflush_r>
 8009b42:	68e1      	ldr	r1, [r4, #12]
 8009b44:	4b06      	ldr	r3, [pc, #24]	@ (8009b60 <cleanup_stdio+0x3c>)
 8009b46:	4299      	cmp	r1, r3
 8009b48:	d004      	beq.n	8009b54 <cleanup_stdio+0x30>
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b50:	f003 b80e 	b.w	800cb70 <_fflush_r>
 8009b54:	bd10      	pop	{r4, pc}
 8009b56:	bf00      	nop
 8009b58:	20005130 	.word	0x20005130
 8009b5c:	20005198 	.word	0x20005198
 8009b60:	20005200 	.word	0x20005200

08009b64 <global_stdio_init.part.0>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	4b0b      	ldr	r3, [pc, #44]	@ (8009b94 <global_stdio_init.part.0+0x30>)
 8009b68:	4c0b      	ldr	r4, [pc, #44]	@ (8009b98 <global_stdio_init.part.0+0x34>)
 8009b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8009b9c <global_stdio_init.part.0+0x38>)
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	4620      	mov	r0, r4
 8009b70:	2200      	movs	r2, #0
 8009b72:	2104      	movs	r1, #4
 8009b74:	f7ff ff94 	bl	8009aa0 <std>
 8009b78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	2109      	movs	r1, #9
 8009b80:	f7ff ff8e 	bl	8009aa0 <std>
 8009b84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b88:	2202      	movs	r2, #2
 8009b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b8e:	2112      	movs	r1, #18
 8009b90:	f7ff bf86 	b.w	8009aa0 <std>
 8009b94:	20005268 	.word	0x20005268
 8009b98:	20005130 	.word	0x20005130
 8009b9c:	08009b0d 	.word	0x08009b0d

08009ba0 <__sfp_lock_acquire>:
 8009ba0:	4801      	ldr	r0, [pc, #4]	@ (8009ba8 <__sfp_lock_acquire+0x8>)
 8009ba2:	f000 ba2c 	b.w	8009ffe <__retarget_lock_acquire_recursive>
 8009ba6:	bf00      	nop
 8009ba8:	20005271 	.word	0x20005271

08009bac <__sfp_lock_release>:
 8009bac:	4801      	ldr	r0, [pc, #4]	@ (8009bb4 <__sfp_lock_release+0x8>)
 8009bae:	f000 ba27 	b.w	800a000 <__retarget_lock_release_recursive>
 8009bb2:	bf00      	nop
 8009bb4:	20005271 	.word	0x20005271

08009bb8 <__sinit>:
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	4604      	mov	r4, r0
 8009bbc:	f7ff fff0 	bl	8009ba0 <__sfp_lock_acquire>
 8009bc0:	6a23      	ldr	r3, [r4, #32]
 8009bc2:	b11b      	cbz	r3, 8009bcc <__sinit+0x14>
 8009bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc8:	f7ff bff0 	b.w	8009bac <__sfp_lock_release>
 8009bcc:	4b04      	ldr	r3, [pc, #16]	@ (8009be0 <__sinit+0x28>)
 8009bce:	6223      	str	r3, [r4, #32]
 8009bd0:	4b04      	ldr	r3, [pc, #16]	@ (8009be4 <__sinit+0x2c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1f5      	bne.n	8009bc4 <__sinit+0xc>
 8009bd8:	f7ff ffc4 	bl	8009b64 <global_stdio_init.part.0>
 8009bdc:	e7f2      	b.n	8009bc4 <__sinit+0xc>
 8009bde:	bf00      	nop
 8009be0:	08009b25 	.word	0x08009b25
 8009be4:	20005268 	.word	0x20005268

08009be8 <_fwalk_sglue>:
 8009be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bec:	4607      	mov	r7, r0
 8009bee:	4688      	mov	r8, r1
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	2600      	movs	r6, #0
 8009bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8009bfc:	d505      	bpl.n	8009c0a <_fwalk_sglue+0x22>
 8009bfe:	6824      	ldr	r4, [r4, #0]
 8009c00:	2c00      	cmp	r4, #0
 8009c02:	d1f7      	bne.n	8009bf4 <_fwalk_sglue+0xc>
 8009c04:	4630      	mov	r0, r6
 8009c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c0a:	89ab      	ldrh	r3, [r5, #12]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d907      	bls.n	8009c20 <_fwalk_sglue+0x38>
 8009c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c14:	3301      	adds	r3, #1
 8009c16:	d003      	beq.n	8009c20 <_fwalk_sglue+0x38>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	47c0      	blx	r8
 8009c1e:	4306      	orrs	r6, r0
 8009c20:	3568      	adds	r5, #104	@ 0x68
 8009c22:	e7e9      	b.n	8009bf8 <_fwalk_sglue+0x10>

08009c24 <iprintf>:
 8009c24:	b40f      	push	{r0, r1, r2, r3}
 8009c26:	b507      	push	{r0, r1, r2, lr}
 8009c28:	4906      	ldr	r1, [pc, #24]	@ (8009c44 <iprintf+0x20>)
 8009c2a:	ab04      	add	r3, sp, #16
 8009c2c:	6808      	ldr	r0, [r1, #0]
 8009c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c32:	6881      	ldr	r1, [r0, #8]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	f002 fdff 	bl	800c838 <_vfiprintf_r>
 8009c3a:	b003      	add	sp, #12
 8009c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c40:	b004      	add	sp, #16
 8009c42:	4770      	bx	lr
 8009c44:	20000040 	.word	0x20000040

08009c48 <putchar>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	@ (8009c54 <putchar+0xc>)
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	6882      	ldr	r2, [r0, #8]
 8009c50:	f003 b818 	b.w	800cc84 <_putc_r>
 8009c54:	20000040 	.word	0x20000040

08009c58 <_puts_r>:
 8009c58:	6a03      	ldr	r3, [r0, #32]
 8009c5a:	b570      	push	{r4, r5, r6, lr}
 8009c5c:	6884      	ldr	r4, [r0, #8]
 8009c5e:	4605      	mov	r5, r0
 8009c60:	460e      	mov	r6, r1
 8009c62:	b90b      	cbnz	r3, 8009c68 <_puts_r+0x10>
 8009c64:	f7ff ffa8 	bl	8009bb8 <__sinit>
 8009c68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c6a:	07db      	lsls	r3, r3, #31
 8009c6c:	d405      	bmi.n	8009c7a <_puts_r+0x22>
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	0598      	lsls	r0, r3, #22
 8009c72:	d402      	bmi.n	8009c7a <_puts_r+0x22>
 8009c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c76:	f000 f9c2 	bl	8009ffe <__retarget_lock_acquire_recursive>
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	0719      	lsls	r1, r3, #28
 8009c7e:	d502      	bpl.n	8009c86 <_puts_r+0x2e>
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d135      	bne.n	8009cf2 <_puts_r+0x9a>
 8009c86:	4621      	mov	r1, r4
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f000 f8e5 	bl	8009e58 <__swsetup_r>
 8009c8e:	b380      	cbz	r0, 8009cf2 <_puts_r+0x9a>
 8009c90:	f04f 35ff 	mov.w	r5, #4294967295
 8009c94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c96:	07da      	lsls	r2, r3, #31
 8009c98:	d405      	bmi.n	8009ca6 <_puts_r+0x4e>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	059b      	lsls	r3, r3, #22
 8009c9e:	d402      	bmi.n	8009ca6 <_puts_r+0x4e>
 8009ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ca2:	f000 f9ad 	bl	800a000 <__retarget_lock_release_recursive>
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	bd70      	pop	{r4, r5, r6, pc}
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	da04      	bge.n	8009cb8 <_puts_r+0x60>
 8009cae:	69a2      	ldr	r2, [r4, #24]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	dc17      	bgt.n	8009ce4 <_puts_r+0x8c>
 8009cb4:	290a      	cmp	r1, #10
 8009cb6:	d015      	beq.n	8009ce4 <_puts_r+0x8c>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	6022      	str	r2, [r4, #0]
 8009cbe:	7019      	strb	r1, [r3, #0]
 8009cc0:	68a3      	ldr	r3, [r4, #8]
 8009cc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	60a3      	str	r3, [r4, #8]
 8009cca:	2900      	cmp	r1, #0
 8009ccc:	d1ed      	bne.n	8009caa <_puts_r+0x52>
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da11      	bge.n	8009cf6 <_puts_r+0x9e>
 8009cd2:	4622      	mov	r2, r4
 8009cd4:	210a      	movs	r1, #10
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 f87f 	bl	8009dda <__swbuf_r>
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d0d7      	beq.n	8009c90 <_puts_r+0x38>
 8009ce0:	250a      	movs	r5, #10
 8009ce2:	e7d7      	b.n	8009c94 <_puts_r+0x3c>
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 f877 	bl	8009dda <__swbuf_r>
 8009cec:	3001      	adds	r0, #1
 8009cee:	d1e7      	bne.n	8009cc0 <_puts_r+0x68>
 8009cf0:	e7ce      	b.n	8009c90 <_puts_r+0x38>
 8009cf2:	3e01      	subs	r6, #1
 8009cf4:	e7e4      	b.n	8009cc0 <_puts_r+0x68>
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	6022      	str	r2, [r4, #0]
 8009cfc:	220a      	movs	r2, #10
 8009cfe:	701a      	strb	r2, [r3, #0]
 8009d00:	e7ee      	b.n	8009ce0 <_puts_r+0x88>
	...

08009d04 <puts>:
 8009d04:	4b02      	ldr	r3, [pc, #8]	@ (8009d10 <puts+0xc>)
 8009d06:	4601      	mov	r1, r0
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	f7ff bfa5 	b.w	8009c58 <_puts_r>
 8009d0e:	bf00      	nop
 8009d10:	20000040 	.word	0x20000040

08009d14 <siprintf>:
 8009d14:	b40e      	push	{r1, r2, r3}
 8009d16:	b500      	push	{lr}
 8009d18:	b09c      	sub	sp, #112	@ 0x70
 8009d1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009d1c:	9002      	str	r0, [sp, #8]
 8009d1e:	9006      	str	r0, [sp, #24]
 8009d20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d24:	4809      	ldr	r0, [pc, #36]	@ (8009d4c <siprintf+0x38>)
 8009d26:	9107      	str	r1, [sp, #28]
 8009d28:	9104      	str	r1, [sp, #16]
 8009d2a:	4909      	ldr	r1, [pc, #36]	@ (8009d50 <siprintf+0x3c>)
 8009d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d30:	9105      	str	r1, [sp, #20]
 8009d32:	6800      	ldr	r0, [r0, #0]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	a902      	add	r1, sp, #8
 8009d38:	f002 fc58 	bl	800c5ec <_svfiprintf_r>
 8009d3c:	9b02      	ldr	r3, [sp, #8]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]
 8009d42:	b01c      	add	sp, #112	@ 0x70
 8009d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d48:	b003      	add	sp, #12
 8009d4a:	4770      	bx	lr
 8009d4c:	20000040 	.word	0x20000040
 8009d50:	ffff0208 	.word	0xffff0208

08009d54 <__sread>:
 8009d54:	b510      	push	{r4, lr}
 8009d56:	460c      	mov	r4, r1
 8009d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5c:	f000 f900 	bl	8009f60 <_read_r>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	bfab      	itete	ge
 8009d64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d66:	89a3      	ldrhlt	r3, [r4, #12]
 8009d68:	181b      	addge	r3, r3, r0
 8009d6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d6e:	bfac      	ite	ge
 8009d70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d72:	81a3      	strhlt	r3, [r4, #12]
 8009d74:	bd10      	pop	{r4, pc}

08009d76 <__swrite>:
 8009d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7a:	461f      	mov	r7, r3
 8009d7c:	898b      	ldrh	r3, [r1, #12]
 8009d7e:	05db      	lsls	r3, r3, #23
 8009d80:	4605      	mov	r5, r0
 8009d82:	460c      	mov	r4, r1
 8009d84:	4616      	mov	r6, r2
 8009d86:	d505      	bpl.n	8009d94 <__swrite+0x1e>
 8009d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f000 f8d4 	bl	8009f3c <_lseek_r>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	4632      	mov	r2, r6
 8009da2:	463b      	mov	r3, r7
 8009da4:	4628      	mov	r0, r5
 8009da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009daa:	f000 b8eb 	b.w	8009f84 <_write_r>

08009dae <__sseek>:
 8009dae:	b510      	push	{r4, lr}
 8009db0:	460c      	mov	r4, r1
 8009db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db6:	f000 f8c1 	bl	8009f3c <_lseek_r>
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	bf15      	itete	ne
 8009dc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009dc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009dc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009dca:	81a3      	strheq	r3, [r4, #12]
 8009dcc:	bf18      	it	ne
 8009dce:	81a3      	strhne	r3, [r4, #12]
 8009dd0:	bd10      	pop	{r4, pc}

08009dd2 <__sclose>:
 8009dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd6:	f000 b8a1 	b.w	8009f1c <_close_r>

08009dda <__swbuf_r>:
 8009dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ddc:	460e      	mov	r6, r1
 8009dde:	4614      	mov	r4, r2
 8009de0:	4605      	mov	r5, r0
 8009de2:	b118      	cbz	r0, 8009dec <__swbuf_r+0x12>
 8009de4:	6a03      	ldr	r3, [r0, #32]
 8009de6:	b90b      	cbnz	r3, 8009dec <__swbuf_r+0x12>
 8009de8:	f7ff fee6 	bl	8009bb8 <__sinit>
 8009dec:	69a3      	ldr	r3, [r4, #24]
 8009dee:	60a3      	str	r3, [r4, #8]
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	071a      	lsls	r2, r3, #28
 8009df4:	d501      	bpl.n	8009dfa <__swbuf_r+0x20>
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	b943      	cbnz	r3, 8009e0c <__swbuf_r+0x32>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f000 f82b 	bl	8009e58 <__swsetup_r>
 8009e02:	b118      	cbz	r0, 8009e0c <__swbuf_r+0x32>
 8009e04:	f04f 37ff 	mov.w	r7, #4294967295
 8009e08:	4638      	mov	r0, r7
 8009e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e0c:	6823      	ldr	r3, [r4, #0]
 8009e0e:	6922      	ldr	r2, [r4, #16]
 8009e10:	1a98      	subs	r0, r3, r2
 8009e12:	6963      	ldr	r3, [r4, #20]
 8009e14:	b2f6      	uxtb	r6, r6
 8009e16:	4283      	cmp	r3, r0
 8009e18:	4637      	mov	r7, r6
 8009e1a:	dc05      	bgt.n	8009e28 <__swbuf_r+0x4e>
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f002 fea6 	bl	800cb70 <_fflush_r>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d1ed      	bne.n	8009e04 <__swbuf_r+0x2a>
 8009e28:	68a3      	ldr	r3, [r4, #8]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	60a3      	str	r3, [r4, #8]
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	1c5a      	adds	r2, r3, #1
 8009e32:	6022      	str	r2, [r4, #0]
 8009e34:	701e      	strb	r6, [r3, #0]
 8009e36:	6962      	ldr	r2, [r4, #20]
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d004      	beq.n	8009e48 <__swbuf_r+0x6e>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	07db      	lsls	r3, r3, #31
 8009e42:	d5e1      	bpl.n	8009e08 <__swbuf_r+0x2e>
 8009e44:	2e0a      	cmp	r6, #10
 8009e46:	d1df      	bne.n	8009e08 <__swbuf_r+0x2e>
 8009e48:	4621      	mov	r1, r4
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f002 fe90 	bl	800cb70 <_fflush_r>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d0d9      	beq.n	8009e08 <__swbuf_r+0x2e>
 8009e54:	e7d6      	b.n	8009e04 <__swbuf_r+0x2a>
	...

08009e58 <__swsetup_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4b29      	ldr	r3, [pc, #164]	@ (8009f00 <__swsetup_r+0xa8>)
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	6818      	ldr	r0, [r3, #0]
 8009e60:	460c      	mov	r4, r1
 8009e62:	b118      	cbz	r0, 8009e6c <__swsetup_r+0x14>
 8009e64:	6a03      	ldr	r3, [r0, #32]
 8009e66:	b90b      	cbnz	r3, 8009e6c <__swsetup_r+0x14>
 8009e68:	f7ff fea6 	bl	8009bb8 <__sinit>
 8009e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e70:	0719      	lsls	r1, r3, #28
 8009e72:	d422      	bmi.n	8009eba <__swsetup_r+0x62>
 8009e74:	06da      	lsls	r2, r3, #27
 8009e76:	d407      	bmi.n	8009e88 <__swsetup_r+0x30>
 8009e78:	2209      	movs	r2, #9
 8009e7a:	602a      	str	r2, [r5, #0]
 8009e7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e80:	81a3      	strh	r3, [r4, #12]
 8009e82:	f04f 30ff 	mov.w	r0, #4294967295
 8009e86:	e033      	b.n	8009ef0 <__swsetup_r+0x98>
 8009e88:	0758      	lsls	r0, r3, #29
 8009e8a:	d512      	bpl.n	8009eb2 <__swsetup_r+0x5a>
 8009e8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e8e:	b141      	cbz	r1, 8009ea2 <__swsetup_r+0x4a>
 8009e90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e94:	4299      	cmp	r1, r3
 8009e96:	d002      	beq.n	8009e9e <__swsetup_r+0x46>
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f000 ff15 	bl	800acc8 <_free_r>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ea8:	81a3      	strh	r3, [r4, #12]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	6063      	str	r3, [r4, #4]
 8009eae:	6923      	ldr	r3, [r4, #16]
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	f043 0308 	orr.w	r3, r3, #8
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	6923      	ldr	r3, [r4, #16]
 8009ebc:	b94b      	cbnz	r3, 8009ed2 <__swsetup_r+0x7a>
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ec8:	d003      	beq.n	8009ed2 <__swsetup_r+0x7a>
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f002 fe9d 	bl	800cc0c <__smakebuf_r>
 8009ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed6:	f013 0201 	ands.w	r2, r3, #1
 8009eda:	d00a      	beq.n	8009ef2 <__swsetup_r+0x9a>
 8009edc:	2200      	movs	r2, #0
 8009ede:	60a2      	str	r2, [r4, #8]
 8009ee0:	6962      	ldr	r2, [r4, #20]
 8009ee2:	4252      	negs	r2, r2
 8009ee4:	61a2      	str	r2, [r4, #24]
 8009ee6:	6922      	ldr	r2, [r4, #16]
 8009ee8:	b942      	cbnz	r2, 8009efc <__swsetup_r+0xa4>
 8009eea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009eee:	d1c5      	bne.n	8009e7c <__swsetup_r+0x24>
 8009ef0:	bd38      	pop	{r3, r4, r5, pc}
 8009ef2:	0799      	lsls	r1, r3, #30
 8009ef4:	bf58      	it	pl
 8009ef6:	6962      	ldrpl	r2, [r4, #20]
 8009ef8:	60a2      	str	r2, [r4, #8]
 8009efa:	e7f4      	b.n	8009ee6 <__swsetup_r+0x8e>
 8009efc:	2000      	movs	r0, #0
 8009efe:	e7f7      	b.n	8009ef0 <__swsetup_r+0x98>
 8009f00:	20000040 	.word	0x20000040

08009f04 <memset>:
 8009f04:	4402      	add	r2, r0
 8009f06:	4603      	mov	r3, r0
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d100      	bne.n	8009f0e <memset+0xa>
 8009f0c:	4770      	bx	lr
 8009f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f12:	e7f9      	b.n	8009f08 <memset+0x4>

08009f14 <_localeconv_r>:
 8009f14:	4800      	ldr	r0, [pc, #0]	@ (8009f18 <_localeconv_r+0x4>)
 8009f16:	4770      	bx	lr
 8009f18:	20000180 	.word	0x20000180

08009f1c <_close_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d06      	ldr	r5, [pc, #24]	@ (8009f38 <_close_r+0x1c>)
 8009f20:	2300      	movs	r3, #0
 8009f22:	4604      	mov	r4, r0
 8009f24:	4608      	mov	r0, r1
 8009f26:	602b      	str	r3, [r5, #0]
 8009f28:	f7f7 ff92 	bl	8001e50 <_close>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d102      	bne.n	8009f36 <_close_r+0x1a>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	b103      	cbz	r3, 8009f36 <_close_r+0x1a>
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	2000526c 	.word	0x2000526c

08009f3c <_lseek_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d07      	ldr	r5, [pc, #28]	@ (8009f5c <_lseek_r+0x20>)
 8009f40:	4604      	mov	r4, r0
 8009f42:	4608      	mov	r0, r1
 8009f44:	4611      	mov	r1, r2
 8009f46:	2200      	movs	r2, #0
 8009f48:	602a      	str	r2, [r5, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f7f7 ffa7 	bl	8001e9e <_lseek>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_lseek_r+0x1e>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_lseek_r+0x1e>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	2000526c 	.word	0x2000526c

08009f60 <_read_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d07      	ldr	r5, [pc, #28]	@ (8009f80 <_read_r+0x20>)
 8009f64:	4604      	mov	r4, r0
 8009f66:	4608      	mov	r0, r1
 8009f68:	4611      	mov	r1, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	602a      	str	r2, [r5, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f7f7 ff35 	bl	8001dde <_read>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_read_r+0x1e>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_read_r+0x1e>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	2000526c 	.word	0x2000526c

08009f84 <_write_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4d07      	ldr	r5, [pc, #28]	@ (8009fa4 <_write_r+0x20>)
 8009f88:	4604      	mov	r4, r0
 8009f8a:	4608      	mov	r0, r1
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	2200      	movs	r2, #0
 8009f90:	602a      	str	r2, [r5, #0]
 8009f92:	461a      	mov	r2, r3
 8009f94:	f7f7 ff40 	bl	8001e18 <_write>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d102      	bne.n	8009fa2 <_write_r+0x1e>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <_write_r+0x1e>
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	2000526c 	.word	0x2000526c

08009fa8 <__errno>:
 8009fa8:	4b01      	ldr	r3, [pc, #4]	@ (8009fb0 <__errno+0x8>)
 8009faa:	6818      	ldr	r0, [r3, #0]
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	20000040 	.word	0x20000040

08009fb4 <__libc_init_array>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8009fec <__libc_init_array+0x38>)
 8009fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8009ff0 <__libc_init_array+0x3c>)
 8009fba:	1b64      	subs	r4, r4, r5
 8009fbc:	10a4      	asrs	r4, r4, #2
 8009fbe:	2600      	movs	r6, #0
 8009fc0:	42a6      	cmp	r6, r4
 8009fc2:	d109      	bne.n	8009fd8 <__libc_init_array+0x24>
 8009fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8009ff4 <__libc_init_array+0x40>)
 8009fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8009ff8 <__libc_init_array+0x44>)
 8009fc8:	f003 fb14 	bl	800d5f4 <_init>
 8009fcc:	1b64      	subs	r4, r4, r5
 8009fce:	10a4      	asrs	r4, r4, #2
 8009fd0:	2600      	movs	r6, #0
 8009fd2:	42a6      	cmp	r6, r4
 8009fd4:	d105      	bne.n	8009fe2 <__libc_init_array+0x2e>
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fdc:	4798      	blx	r3
 8009fde:	3601      	adds	r6, #1
 8009fe0:	e7ee      	b.n	8009fc0 <__libc_init_array+0xc>
 8009fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fe6:	4798      	blx	r3
 8009fe8:	3601      	adds	r6, #1
 8009fea:	e7f2      	b.n	8009fd2 <__libc_init_array+0x1e>
 8009fec:	0800dc90 	.word	0x0800dc90
 8009ff0:	0800dc90 	.word	0x0800dc90
 8009ff4:	0800dc90 	.word	0x0800dc90
 8009ff8:	0800dc94 	.word	0x0800dc94

08009ffc <__retarget_lock_init_recursive>:
 8009ffc:	4770      	bx	lr

08009ffe <__retarget_lock_acquire_recursive>:
 8009ffe:	4770      	bx	lr

0800a000 <__retarget_lock_release_recursive>:
 800a000:	4770      	bx	lr

0800a002 <memcpy>:
 800a002:	440a      	add	r2, r1
 800a004:	4291      	cmp	r1, r2
 800a006:	f100 33ff 	add.w	r3, r0, #4294967295
 800a00a:	d100      	bne.n	800a00e <memcpy+0xc>
 800a00c:	4770      	bx	lr
 800a00e:	b510      	push	{r4, lr}
 800a010:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a014:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a018:	4291      	cmp	r1, r2
 800a01a:	d1f9      	bne.n	800a010 <memcpy+0xe>
 800a01c:	bd10      	pop	{r4, pc}
	...

0800a020 <nanf>:
 800a020:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a028 <nanf+0x8>
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	7fc00000 	.word	0x7fc00000

0800a02c <quorem>:
 800a02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	6903      	ldr	r3, [r0, #16]
 800a032:	690c      	ldr	r4, [r1, #16]
 800a034:	42a3      	cmp	r3, r4
 800a036:	4607      	mov	r7, r0
 800a038:	db7e      	blt.n	800a138 <quorem+0x10c>
 800a03a:	3c01      	subs	r4, #1
 800a03c:	f101 0814 	add.w	r8, r1, #20
 800a040:	00a3      	lsls	r3, r4, #2
 800a042:	f100 0514 	add.w	r5, r0, #20
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a056:	3301      	adds	r3, #1
 800a058:	429a      	cmp	r2, r3
 800a05a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a05e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a062:	d32e      	bcc.n	800a0c2 <quorem+0x96>
 800a064:	f04f 0a00 	mov.w	sl, #0
 800a068:	46c4      	mov	ip, r8
 800a06a:	46ae      	mov	lr, r5
 800a06c:	46d3      	mov	fp, sl
 800a06e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a072:	b298      	uxth	r0, r3
 800a074:	fb06 a000 	mla	r0, r6, r0, sl
 800a078:	0c02      	lsrs	r2, r0, #16
 800a07a:	0c1b      	lsrs	r3, r3, #16
 800a07c:	fb06 2303 	mla	r3, r6, r3, r2
 800a080:	f8de 2000 	ldr.w	r2, [lr]
 800a084:	b280      	uxth	r0, r0
 800a086:	b292      	uxth	r2, r2
 800a088:	1a12      	subs	r2, r2, r0
 800a08a:	445a      	add	r2, fp
 800a08c:	f8de 0000 	ldr.w	r0, [lr]
 800a090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a094:	b29b      	uxth	r3, r3
 800a096:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a09a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a09e:	b292      	uxth	r2, r2
 800a0a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a0a4:	45e1      	cmp	r9, ip
 800a0a6:	f84e 2b04 	str.w	r2, [lr], #4
 800a0aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a0ae:	d2de      	bcs.n	800a06e <quorem+0x42>
 800a0b0:	9b00      	ldr	r3, [sp, #0]
 800a0b2:	58eb      	ldr	r3, [r5, r3]
 800a0b4:	b92b      	cbnz	r3, 800a0c2 <quorem+0x96>
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	3b04      	subs	r3, #4
 800a0ba:	429d      	cmp	r5, r3
 800a0bc:	461a      	mov	r2, r3
 800a0be:	d32f      	bcc.n	800a120 <quorem+0xf4>
 800a0c0:	613c      	str	r4, [r7, #16]
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	f001 f9c4 	bl	800b450 <__mcmp>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	db25      	blt.n	800a118 <quorem+0xec>
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0d4:	f8d1 c000 	ldr.w	ip, [r1]
 800a0d8:	fa1f fe82 	uxth.w	lr, r2
 800a0dc:	fa1f f38c 	uxth.w	r3, ip
 800a0e0:	eba3 030e 	sub.w	r3, r3, lr
 800a0e4:	4403      	add	r3, r0
 800a0e6:	0c12      	lsrs	r2, r2, #16
 800a0e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a0ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0f6:	45c1      	cmp	r9, r8
 800a0f8:	f841 3b04 	str.w	r3, [r1], #4
 800a0fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a100:	d2e6      	bcs.n	800a0d0 <quorem+0xa4>
 800a102:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a10a:	b922      	cbnz	r2, 800a116 <quorem+0xea>
 800a10c:	3b04      	subs	r3, #4
 800a10e:	429d      	cmp	r5, r3
 800a110:	461a      	mov	r2, r3
 800a112:	d30b      	bcc.n	800a12c <quorem+0x100>
 800a114:	613c      	str	r4, [r7, #16]
 800a116:	3601      	adds	r6, #1
 800a118:	4630      	mov	r0, r6
 800a11a:	b003      	add	sp, #12
 800a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a120:	6812      	ldr	r2, [r2, #0]
 800a122:	3b04      	subs	r3, #4
 800a124:	2a00      	cmp	r2, #0
 800a126:	d1cb      	bne.n	800a0c0 <quorem+0x94>
 800a128:	3c01      	subs	r4, #1
 800a12a:	e7c6      	b.n	800a0ba <quorem+0x8e>
 800a12c:	6812      	ldr	r2, [r2, #0]
 800a12e:	3b04      	subs	r3, #4
 800a130:	2a00      	cmp	r2, #0
 800a132:	d1ef      	bne.n	800a114 <quorem+0xe8>
 800a134:	3c01      	subs	r4, #1
 800a136:	e7ea      	b.n	800a10e <quorem+0xe2>
 800a138:	2000      	movs	r0, #0
 800a13a:	e7ee      	b.n	800a11a <quorem+0xee>
 800a13c:	0000      	movs	r0, r0
	...

0800a140 <_dtoa_r>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	69c7      	ldr	r7, [r0, #28]
 800a146:	b099      	sub	sp, #100	@ 0x64
 800a148:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a14c:	ec55 4b10 	vmov	r4, r5, d0
 800a150:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a152:	9109      	str	r1, [sp, #36]	@ 0x24
 800a154:	4683      	mov	fp, r0
 800a156:	920e      	str	r2, [sp, #56]	@ 0x38
 800a158:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a15a:	b97f      	cbnz	r7, 800a17c <_dtoa_r+0x3c>
 800a15c:	2010      	movs	r0, #16
 800a15e:	f000 fdfd 	bl	800ad5c <malloc>
 800a162:	4602      	mov	r2, r0
 800a164:	f8cb 001c 	str.w	r0, [fp, #28]
 800a168:	b920      	cbnz	r0, 800a174 <_dtoa_r+0x34>
 800a16a:	4ba7      	ldr	r3, [pc, #668]	@ (800a408 <_dtoa_r+0x2c8>)
 800a16c:	21ef      	movs	r1, #239	@ 0xef
 800a16e:	48a7      	ldr	r0, [pc, #668]	@ (800a40c <_dtoa_r+0x2cc>)
 800a170:	f002 fe22 	bl	800cdb8 <__assert_func>
 800a174:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a178:	6007      	str	r7, [r0, #0]
 800a17a:	60c7      	str	r7, [r0, #12]
 800a17c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a180:	6819      	ldr	r1, [r3, #0]
 800a182:	b159      	cbz	r1, 800a19c <_dtoa_r+0x5c>
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	604a      	str	r2, [r1, #4]
 800a188:	2301      	movs	r3, #1
 800a18a:	4093      	lsls	r3, r2
 800a18c:	608b      	str	r3, [r1, #8]
 800a18e:	4658      	mov	r0, fp
 800a190:	f000 feda 	bl	800af48 <_Bfree>
 800a194:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	1e2b      	subs	r3, r5, #0
 800a19e:	bfb9      	ittee	lt
 800a1a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a1a4:	9303      	strlt	r3, [sp, #12]
 800a1a6:	2300      	movge	r3, #0
 800a1a8:	6033      	strge	r3, [r6, #0]
 800a1aa:	9f03      	ldr	r7, [sp, #12]
 800a1ac:	4b98      	ldr	r3, [pc, #608]	@ (800a410 <_dtoa_r+0x2d0>)
 800a1ae:	bfbc      	itt	lt
 800a1b0:	2201      	movlt	r2, #1
 800a1b2:	6032      	strlt	r2, [r6, #0]
 800a1b4:	43bb      	bics	r3, r7
 800a1b6:	d112      	bne.n	800a1de <_dtoa_r+0x9e>
 800a1b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a1c4:	4323      	orrs	r3, r4
 800a1c6:	f000 854d 	beq.w	800ac64 <_dtoa_r+0xb24>
 800a1ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a424 <_dtoa_r+0x2e4>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 854f 	beq.w	800ac74 <_dtoa_r+0xb34>
 800a1d6:	f10a 0303 	add.w	r3, sl, #3
 800a1da:	f000 bd49 	b.w	800ac70 <_dtoa_r+0xb30>
 800a1de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	ec51 0b17 	vmov	r0, r1, d7
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a1ee:	f7f6 fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1f2:	4680      	mov	r8, r0
 800a1f4:	b158      	cbz	r0, 800a20e <_dtoa_r+0xce>
 800a1f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1fe:	b113      	cbz	r3, 800a206 <_dtoa_r+0xc6>
 800a200:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a202:	4b84      	ldr	r3, [pc, #528]	@ (800a414 <_dtoa_r+0x2d4>)
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a428 <_dtoa_r+0x2e8>
 800a20a:	f000 bd33 	b.w	800ac74 <_dtoa_r+0xb34>
 800a20e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a212:	aa16      	add	r2, sp, #88	@ 0x58
 800a214:	a917      	add	r1, sp, #92	@ 0x5c
 800a216:	4658      	mov	r0, fp
 800a218:	f001 fa3a 	bl	800b690 <__d2b>
 800a21c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a220:	4681      	mov	r9, r0
 800a222:	2e00      	cmp	r6, #0
 800a224:	d077      	beq.n	800a316 <_dtoa_r+0x1d6>
 800a226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a228:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a22c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a234:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a238:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a23c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a240:	4619      	mov	r1, r3
 800a242:	2200      	movs	r2, #0
 800a244:	4b74      	ldr	r3, [pc, #464]	@ (800a418 <_dtoa_r+0x2d8>)
 800a246:	f7f6 f81f 	bl	8000288 <__aeabi_dsub>
 800a24a:	a369      	add	r3, pc, #420	@ (adr r3, 800a3f0 <_dtoa_r+0x2b0>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f7f6 f9d2 	bl	80005f8 <__aeabi_dmul>
 800a254:	a368      	add	r3, pc, #416	@ (adr r3, 800a3f8 <_dtoa_r+0x2b8>)
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	f7f6 f817 	bl	800028c <__adddf3>
 800a25e:	4604      	mov	r4, r0
 800a260:	4630      	mov	r0, r6
 800a262:	460d      	mov	r5, r1
 800a264:	f7f6 f95e 	bl	8000524 <__aeabi_i2d>
 800a268:	a365      	add	r3, pc, #404	@ (adr r3, 800a400 <_dtoa_r+0x2c0>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f7f6 f9c3 	bl	80005f8 <__aeabi_dmul>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4620      	mov	r0, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	f7f6 f807 	bl	800028c <__adddf3>
 800a27e:	4604      	mov	r4, r0
 800a280:	460d      	mov	r5, r1
 800a282:	f7f6 fc69 	bl	8000b58 <__aeabi_d2iz>
 800a286:	2200      	movs	r2, #0
 800a288:	4607      	mov	r7, r0
 800a28a:	2300      	movs	r3, #0
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 fc24 	bl	8000adc <__aeabi_dcmplt>
 800a294:	b140      	cbz	r0, 800a2a8 <_dtoa_r+0x168>
 800a296:	4638      	mov	r0, r7
 800a298:	f7f6 f944 	bl	8000524 <__aeabi_i2d>
 800a29c:	4622      	mov	r2, r4
 800a29e:	462b      	mov	r3, r5
 800a2a0:	f7f6 fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2a4:	b900      	cbnz	r0, 800a2a8 <_dtoa_r+0x168>
 800a2a6:	3f01      	subs	r7, #1
 800a2a8:	2f16      	cmp	r7, #22
 800a2aa:	d851      	bhi.n	800a350 <_dtoa_r+0x210>
 800a2ac:	4b5b      	ldr	r3, [pc, #364]	@ (800a41c <_dtoa_r+0x2dc>)
 800a2ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2ba:	f7f6 fc0f 	bl	8000adc <__aeabi_dcmplt>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d048      	beq.n	800a354 <_dtoa_r+0x214>
 800a2c2:	3f01      	subs	r7, #1
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a2c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a2ca:	1b9b      	subs	r3, r3, r6
 800a2cc:	1e5a      	subs	r2, r3, #1
 800a2ce:	bf44      	itt	mi
 800a2d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a2d4:	2300      	movmi	r3, #0
 800a2d6:	9208      	str	r2, [sp, #32]
 800a2d8:	bf54      	ite	pl
 800a2da:	f04f 0800 	movpl.w	r8, #0
 800a2de:	9308      	strmi	r3, [sp, #32]
 800a2e0:	2f00      	cmp	r7, #0
 800a2e2:	db39      	blt.n	800a358 <_dtoa_r+0x218>
 800a2e4:	9b08      	ldr	r3, [sp, #32]
 800a2e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a2e8:	443b      	add	r3, r7
 800a2ea:	9308      	str	r3, [sp, #32]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f2:	2b09      	cmp	r3, #9
 800a2f4:	d864      	bhi.n	800a3c0 <_dtoa_r+0x280>
 800a2f6:	2b05      	cmp	r3, #5
 800a2f8:	bfc4      	itt	gt
 800a2fa:	3b04      	subgt	r3, #4
 800a2fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a300:	f1a3 0302 	sub.w	r3, r3, #2
 800a304:	bfcc      	ite	gt
 800a306:	2400      	movgt	r4, #0
 800a308:	2401      	movle	r4, #1
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d863      	bhi.n	800a3d6 <_dtoa_r+0x296>
 800a30e:	e8df f003 	tbb	[pc, r3]
 800a312:	372a      	.short	0x372a
 800a314:	5535      	.short	0x5535
 800a316:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a31a:	441e      	add	r6, r3
 800a31c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a320:	2b20      	cmp	r3, #32
 800a322:	bfc1      	itttt	gt
 800a324:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a328:	409f      	lslgt	r7, r3
 800a32a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a32e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a332:	bfd6      	itet	le
 800a334:	f1c3 0320 	rsble	r3, r3, #32
 800a338:	ea47 0003 	orrgt.w	r0, r7, r3
 800a33c:	fa04 f003 	lslle.w	r0, r4, r3
 800a340:	f7f6 f8e0 	bl	8000504 <__aeabi_ui2d>
 800a344:	2201      	movs	r2, #1
 800a346:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a34a:	3e01      	subs	r6, #1
 800a34c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a34e:	e777      	b.n	800a240 <_dtoa_r+0x100>
 800a350:	2301      	movs	r3, #1
 800a352:	e7b8      	b.n	800a2c6 <_dtoa_r+0x186>
 800a354:	9012      	str	r0, [sp, #72]	@ 0x48
 800a356:	e7b7      	b.n	800a2c8 <_dtoa_r+0x188>
 800a358:	427b      	negs	r3, r7
 800a35a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a35c:	2300      	movs	r3, #0
 800a35e:	eba8 0807 	sub.w	r8, r8, r7
 800a362:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a364:	e7c4      	b.n	800a2f0 <_dtoa_r+0x1b0>
 800a366:	2300      	movs	r3, #0
 800a368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a36a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	dc35      	bgt.n	800a3dc <_dtoa_r+0x29c>
 800a370:	2301      	movs	r3, #1
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	9307      	str	r3, [sp, #28]
 800a376:	461a      	mov	r2, r3
 800a378:	920e      	str	r2, [sp, #56]	@ 0x38
 800a37a:	e00b      	b.n	800a394 <_dtoa_r+0x254>
 800a37c:	2301      	movs	r3, #1
 800a37e:	e7f3      	b.n	800a368 <_dtoa_r+0x228>
 800a380:	2300      	movs	r3, #0
 800a382:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a386:	18fb      	adds	r3, r7, r3
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	3301      	adds	r3, #1
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	9307      	str	r3, [sp, #28]
 800a390:	bfb8      	it	lt
 800a392:	2301      	movlt	r3, #1
 800a394:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a398:	2100      	movs	r1, #0
 800a39a:	2204      	movs	r2, #4
 800a39c:	f102 0514 	add.w	r5, r2, #20
 800a3a0:	429d      	cmp	r5, r3
 800a3a2:	d91f      	bls.n	800a3e4 <_dtoa_r+0x2a4>
 800a3a4:	6041      	str	r1, [r0, #4]
 800a3a6:	4658      	mov	r0, fp
 800a3a8:	f000 fd8e 	bl	800aec8 <_Balloc>
 800a3ac:	4682      	mov	sl, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d13c      	bne.n	800a42c <_dtoa_r+0x2ec>
 800a3b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a420 <_dtoa_r+0x2e0>)
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a3ba:	e6d8      	b.n	800a16e <_dtoa_r+0x2e>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e7e0      	b.n	800a382 <_dtoa_r+0x242>
 800a3c0:	2401      	movs	r4, #1
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	9307      	str	r3, [sp, #28]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	2312      	movs	r3, #18
 800a3d4:	e7d0      	b.n	800a378 <_dtoa_r+0x238>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3da:	e7f5      	b.n	800a3c8 <_dtoa_r+0x288>
 800a3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	9307      	str	r3, [sp, #28]
 800a3e2:	e7d7      	b.n	800a394 <_dtoa_r+0x254>
 800a3e4:	3101      	adds	r1, #1
 800a3e6:	0052      	lsls	r2, r2, #1
 800a3e8:	e7d8      	b.n	800a39c <_dtoa_r+0x25c>
 800a3ea:	bf00      	nop
 800a3ec:	f3af 8000 	nop.w
 800a3f0:	636f4361 	.word	0x636f4361
 800a3f4:	3fd287a7 	.word	0x3fd287a7
 800a3f8:	8b60c8b3 	.word	0x8b60c8b3
 800a3fc:	3fc68a28 	.word	0x3fc68a28
 800a400:	509f79fb 	.word	0x509f79fb
 800a404:	3fd34413 	.word	0x3fd34413
 800a408:	0800d8a2 	.word	0x0800d8a2
 800a40c:	0800d8b9 	.word	0x0800d8b9
 800a410:	7ff00000 	.word	0x7ff00000
 800a414:	0800d86d 	.word	0x0800d86d
 800a418:	3ff80000 	.word	0x3ff80000
 800a41c:	0800d9b0 	.word	0x0800d9b0
 800a420:	0800d911 	.word	0x0800d911
 800a424:	0800d89e 	.word	0x0800d89e
 800a428:	0800d86c 	.word	0x0800d86c
 800a42c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a430:	6018      	str	r0, [r3, #0]
 800a432:	9b07      	ldr	r3, [sp, #28]
 800a434:	2b0e      	cmp	r3, #14
 800a436:	f200 80a4 	bhi.w	800a582 <_dtoa_r+0x442>
 800a43a:	2c00      	cmp	r4, #0
 800a43c:	f000 80a1 	beq.w	800a582 <_dtoa_r+0x442>
 800a440:	2f00      	cmp	r7, #0
 800a442:	dd33      	ble.n	800a4ac <_dtoa_r+0x36c>
 800a444:	4bad      	ldr	r3, [pc, #692]	@ (800a6fc <_dtoa_r+0x5bc>)
 800a446:	f007 020f 	and.w	r2, r7, #15
 800a44a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a44e:	ed93 7b00 	vldr	d7, [r3]
 800a452:	05f8      	lsls	r0, r7, #23
 800a454:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a458:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a45c:	d516      	bpl.n	800a48c <_dtoa_r+0x34c>
 800a45e:	4ba8      	ldr	r3, [pc, #672]	@ (800a700 <_dtoa_r+0x5c0>)
 800a460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a464:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a468:	f7f6 f9f0 	bl	800084c <__aeabi_ddiv>
 800a46c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a470:	f004 040f 	and.w	r4, r4, #15
 800a474:	2603      	movs	r6, #3
 800a476:	4da2      	ldr	r5, [pc, #648]	@ (800a700 <_dtoa_r+0x5c0>)
 800a478:	b954      	cbnz	r4, 800a490 <_dtoa_r+0x350>
 800a47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a482:	f7f6 f9e3 	bl	800084c <__aeabi_ddiv>
 800a486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a48a:	e028      	b.n	800a4de <_dtoa_r+0x39e>
 800a48c:	2602      	movs	r6, #2
 800a48e:	e7f2      	b.n	800a476 <_dtoa_r+0x336>
 800a490:	07e1      	lsls	r1, r4, #31
 800a492:	d508      	bpl.n	800a4a6 <_dtoa_r+0x366>
 800a494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a498:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a49c:	f7f6 f8ac 	bl	80005f8 <__aeabi_dmul>
 800a4a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4a4:	3601      	adds	r6, #1
 800a4a6:	1064      	asrs	r4, r4, #1
 800a4a8:	3508      	adds	r5, #8
 800a4aa:	e7e5      	b.n	800a478 <_dtoa_r+0x338>
 800a4ac:	f000 80d2 	beq.w	800a654 <_dtoa_r+0x514>
 800a4b0:	427c      	negs	r4, r7
 800a4b2:	4b92      	ldr	r3, [pc, #584]	@ (800a6fc <_dtoa_r+0x5bc>)
 800a4b4:	4d92      	ldr	r5, [pc, #584]	@ (800a700 <_dtoa_r+0x5c0>)
 800a4b6:	f004 020f 	and.w	r2, r4, #15
 800a4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4c6:	f7f6 f897 	bl	80005f8 <__aeabi_dmul>
 800a4ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4ce:	1124      	asrs	r4, r4, #4
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2602      	movs	r6, #2
 800a4d4:	2c00      	cmp	r4, #0
 800a4d6:	f040 80b2 	bne.w	800a63e <_dtoa_r+0x4fe>
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1d3      	bne.n	800a486 <_dtoa_r+0x346>
 800a4de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80b7 	beq.w	800a658 <_dtoa_r+0x518>
 800a4ea:	4b86      	ldr	r3, [pc, #536]	@ (800a704 <_dtoa_r+0x5c4>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f6 faf3 	bl	8000adc <__aeabi_dcmplt>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f000 80ae 	beq.w	800a658 <_dtoa_r+0x518>
 800a4fc:	9b07      	ldr	r3, [sp, #28]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 80aa 	beq.w	800a658 <_dtoa_r+0x518>
 800a504:	9b00      	ldr	r3, [sp, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	dd37      	ble.n	800a57a <_dtoa_r+0x43a>
 800a50a:	1e7b      	subs	r3, r7, #1
 800a50c:	9304      	str	r3, [sp, #16]
 800a50e:	4620      	mov	r0, r4
 800a510:	4b7d      	ldr	r3, [pc, #500]	@ (800a708 <_dtoa_r+0x5c8>)
 800a512:	2200      	movs	r2, #0
 800a514:	4629      	mov	r1, r5
 800a516:	f7f6 f86f 	bl	80005f8 <__aeabi_dmul>
 800a51a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a51e:	9c00      	ldr	r4, [sp, #0]
 800a520:	3601      	adds	r6, #1
 800a522:	4630      	mov	r0, r6
 800a524:	f7f5 fffe 	bl	8000524 <__aeabi_i2d>
 800a528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a52c:	f7f6 f864 	bl	80005f8 <__aeabi_dmul>
 800a530:	4b76      	ldr	r3, [pc, #472]	@ (800a70c <_dtoa_r+0x5cc>)
 800a532:	2200      	movs	r2, #0
 800a534:	f7f5 feaa 	bl	800028c <__adddf3>
 800a538:	4605      	mov	r5, r0
 800a53a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a53e:	2c00      	cmp	r4, #0
 800a540:	f040 808d 	bne.w	800a65e <_dtoa_r+0x51e>
 800a544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a548:	4b71      	ldr	r3, [pc, #452]	@ (800a710 <_dtoa_r+0x5d0>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	f7f5 fe9c 	bl	8000288 <__aeabi_dsub>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a558:	462a      	mov	r2, r5
 800a55a:	4633      	mov	r3, r6
 800a55c:	f7f6 fadc 	bl	8000b18 <__aeabi_dcmpgt>
 800a560:	2800      	cmp	r0, #0
 800a562:	f040 828b 	bne.w	800aa7c <_dtoa_r+0x93c>
 800a566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a56a:	462a      	mov	r2, r5
 800a56c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a570:	f7f6 fab4 	bl	8000adc <__aeabi_dcmplt>
 800a574:	2800      	cmp	r0, #0
 800a576:	f040 8128 	bne.w	800a7ca <_dtoa_r+0x68a>
 800a57a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a57e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a582:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a584:	2b00      	cmp	r3, #0
 800a586:	f2c0 815a 	blt.w	800a83e <_dtoa_r+0x6fe>
 800a58a:	2f0e      	cmp	r7, #14
 800a58c:	f300 8157 	bgt.w	800a83e <_dtoa_r+0x6fe>
 800a590:	4b5a      	ldr	r3, [pc, #360]	@ (800a6fc <_dtoa_r+0x5bc>)
 800a592:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a596:	ed93 7b00 	vldr	d7, [r3]
 800a59a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	ed8d 7b00 	vstr	d7, [sp]
 800a5a2:	da03      	bge.n	800a5ac <_dtoa_r+0x46c>
 800a5a4:	9b07      	ldr	r3, [sp, #28]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f340 8101 	ble.w	800a7ae <_dtoa_r+0x66e>
 800a5ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a5b0:	4656      	mov	r6, sl
 800a5b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	f7f6 f947 	bl	800084c <__aeabi_ddiv>
 800a5be:	f7f6 facb 	bl	8000b58 <__aeabi_d2iz>
 800a5c2:	4680      	mov	r8, r0
 800a5c4:	f7f5 ffae 	bl	8000524 <__aeabi_i2d>
 800a5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5cc:	f7f6 f814 	bl	80005f8 <__aeabi_dmul>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a5dc:	f7f5 fe54 	bl	8000288 <__aeabi_dsub>
 800a5e0:	f806 4b01 	strb.w	r4, [r6], #1
 800a5e4:	9d07      	ldr	r5, [sp, #28]
 800a5e6:	eba6 040a 	sub.w	r4, r6, sl
 800a5ea:	42a5      	cmp	r5, r4
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	f040 8117 	bne.w	800a822 <_dtoa_r+0x6e2>
 800a5f4:	f7f5 fe4a 	bl	800028c <__adddf3>
 800a5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	460d      	mov	r5, r1
 800a600:	f7f6 fa8a 	bl	8000b18 <__aeabi_dcmpgt>
 800a604:	2800      	cmp	r0, #0
 800a606:	f040 80f9 	bne.w	800a7fc <_dtoa_r+0x6bc>
 800a60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f6 fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 800a616:	b118      	cbz	r0, 800a620 <_dtoa_r+0x4e0>
 800a618:	f018 0f01 	tst.w	r8, #1
 800a61c:	f040 80ee 	bne.w	800a7fc <_dtoa_r+0x6bc>
 800a620:	4649      	mov	r1, r9
 800a622:	4658      	mov	r0, fp
 800a624:	f000 fc90 	bl	800af48 <_Bfree>
 800a628:	2300      	movs	r3, #0
 800a62a:	7033      	strb	r3, [r6, #0]
 800a62c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a62e:	3701      	adds	r7, #1
 800a630:	601f      	str	r7, [r3, #0]
 800a632:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 831d 	beq.w	800ac74 <_dtoa_r+0xb34>
 800a63a:	601e      	str	r6, [r3, #0]
 800a63c:	e31a      	b.n	800ac74 <_dtoa_r+0xb34>
 800a63e:	07e2      	lsls	r2, r4, #31
 800a640:	d505      	bpl.n	800a64e <_dtoa_r+0x50e>
 800a642:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a646:	f7f5 ffd7 	bl	80005f8 <__aeabi_dmul>
 800a64a:	3601      	adds	r6, #1
 800a64c:	2301      	movs	r3, #1
 800a64e:	1064      	asrs	r4, r4, #1
 800a650:	3508      	adds	r5, #8
 800a652:	e73f      	b.n	800a4d4 <_dtoa_r+0x394>
 800a654:	2602      	movs	r6, #2
 800a656:	e742      	b.n	800a4de <_dtoa_r+0x39e>
 800a658:	9c07      	ldr	r4, [sp, #28]
 800a65a:	9704      	str	r7, [sp, #16]
 800a65c:	e761      	b.n	800a522 <_dtoa_r+0x3e2>
 800a65e:	4b27      	ldr	r3, [pc, #156]	@ (800a6fc <_dtoa_r+0x5bc>)
 800a660:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a662:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a666:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a66a:	4454      	add	r4, sl
 800a66c:	2900      	cmp	r1, #0
 800a66e:	d053      	beq.n	800a718 <_dtoa_r+0x5d8>
 800a670:	4928      	ldr	r1, [pc, #160]	@ (800a714 <_dtoa_r+0x5d4>)
 800a672:	2000      	movs	r0, #0
 800a674:	f7f6 f8ea 	bl	800084c <__aeabi_ddiv>
 800a678:	4633      	mov	r3, r6
 800a67a:	462a      	mov	r2, r5
 800a67c:	f7f5 fe04 	bl	8000288 <__aeabi_dsub>
 800a680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a684:	4656      	mov	r6, sl
 800a686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a68a:	f7f6 fa65 	bl	8000b58 <__aeabi_d2iz>
 800a68e:	4605      	mov	r5, r0
 800a690:	f7f5 ff48 	bl	8000524 <__aeabi_i2d>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a69c:	f7f5 fdf4 	bl	8000288 <__aeabi_dsub>
 800a6a0:	3530      	adds	r5, #48	@ 0x30
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6aa:	f806 5b01 	strb.w	r5, [r6], #1
 800a6ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6b2:	f7f6 fa13 	bl	8000adc <__aeabi_dcmplt>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d171      	bne.n	800a79e <_dtoa_r+0x65e>
 800a6ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6be:	4911      	ldr	r1, [pc, #68]	@ (800a704 <_dtoa_r+0x5c4>)
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	f7f5 fde1 	bl	8000288 <__aeabi_dsub>
 800a6c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a6ca:	f7f6 fa07 	bl	8000adc <__aeabi_dcmplt>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f040 8095 	bne.w	800a7fe <_dtoa_r+0x6be>
 800a6d4:	42a6      	cmp	r6, r4
 800a6d6:	f43f af50 	beq.w	800a57a <_dtoa_r+0x43a>
 800a6da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a6de:	4b0a      	ldr	r3, [pc, #40]	@ (800a708 <_dtoa_r+0x5c8>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f7f5 ff89 	bl	80005f8 <__aeabi_dmul>
 800a6e6:	4b08      	ldr	r3, [pc, #32]	@ (800a708 <_dtoa_r+0x5c8>)
 800a6e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f2:	f7f5 ff81 	bl	80005f8 <__aeabi_dmul>
 800a6f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6fa:	e7c4      	b.n	800a686 <_dtoa_r+0x546>
 800a6fc:	0800d9b0 	.word	0x0800d9b0
 800a700:	0800d988 	.word	0x0800d988
 800a704:	3ff00000 	.word	0x3ff00000
 800a708:	40240000 	.word	0x40240000
 800a70c:	401c0000 	.word	0x401c0000
 800a710:	40140000 	.word	0x40140000
 800a714:	3fe00000 	.word	0x3fe00000
 800a718:	4631      	mov	r1, r6
 800a71a:	4628      	mov	r0, r5
 800a71c:	f7f5 ff6c 	bl	80005f8 <__aeabi_dmul>
 800a720:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a724:	9415      	str	r4, [sp, #84]	@ 0x54
 800a726:	4656      	mov	r6, sl
 800a728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a72c:	f7f6 fa14 	bl	8000b58 <__aeabi_d2iz>
 800a730:	4605      	mov	r5, r0
 800a732:	f7f5 fef7 	bl	8000524 <__aeabi_i2d>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a73e:	f7f5 fda3 	bl	8000288 <__aeabi_dsub>
 800a742:	3530      	adds	r5, #48	@ 0x30
 800a744:	f806 5b01 	strb.w	r5, [r6], #1
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	42a6      	cmp	r6, r4
 800a74e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a752:	f04f 0200 	mov.w	r2, #0
 800a756:	d124      	bne.n	800a7a2 <_dtoa_r+0x662>
 800a758:	4bac      	ldr	r3, [pc, #688]	@ (800aa0c <_dtoa_r+0x8cc>)
 800a75a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a75e:	f7f5 fd95 	bl	800028c <__adddf3>
 800a762:	4602      	mov	r2, r0
 800a764:	460b      	mov	r3, r1
 800a766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a76a:	f7f6 f9d5 	bl	8000b18 <__aeabi_dcmpgt>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d145      	bne.n	800a7fe <_dtoa_r+0x6be>
 800a772:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a776:	49a5      	ldr	r1, [pc, #660]	@ (800aa0c <_dtoa_r+0x8cc>)
 800a778:	2000      	movs	r0, #0
 800a77a:	f7f5 fd85 	bl	8000288 <__aeabi_dsub>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a786:	f7f6 f9a9 	bl	8000adc <__aeabi_dcmplt>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	f43f aef5 	beq.w	800a57a <_dtoa_r+0x43a>
 800a790:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a792:	1e73      	subs	r3, r6, #1
 800a794:	9315      	str	r3, [sp, #84]	@ 0x54
 800a796:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a79a:	2b30      	cmp	r3, #48	@ 0x30
 800a79c:	d0f8      	beq.n	800a790 <_dtoa_r+0x650>
 800a79e:	9f04      	ldr	r7, [sp, #16]
 800a7a0:	e73e      	b.n	800a620 <_dtoa_r+0x4e0>
 800a7a2:	4b9b      	ldr	r3, [pc, #620]	@ (800aa10 <_dtoa_r+0x8d0>)
 800a7a4:	f7f5 ff28 	bl	80005f8 <__aeabi_dmul>
 800a7a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7ac:	e7bc      	b.n	800a728 <_dtoa_r+0x5e8>
 800a7ae:	d10c      	bne.n	800a7ca <_dtoa_r+0x68a>
 800a7b0:	4b98      	ldr	r3, [pc, #608]	@ (800aa14 <_dtoa_r+0x8d4>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7b8:	f7f5 ff1e 	bl	80005f8 <__aeabi_dmul>
 800a7bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7c0:	f7f6 f9a0 	bl	8000b04 <__aeabi_dcmpge>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	f000 8157 	beq.w	800aa78 <_dtoa_r+0x938>
 800a7ca:	2400      	movs	r4, #0
 800a7cc:	4625      	mov	r5, r4
 800a7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7d0:	43db      	mvns	r3, r3
 800a7d2:	9304      	str	r3, [sp, #16]
 800a7d4:	4656      	mov	r6, sl
 800a7d6:	2700      	movs	r7, #0
 800a7d8:	4621      	mov	r1, r4
 800a7da:	4658      	mov	r0, fp
 800a7dc:	f000 fbb4 	bl	800af48 <_Bfree>
 800a7e0:	2d00      	cmp	r5, #0
 800a7e2:	d0dc      	beq.n	800a79e <_dtoa_r+0x65e>
 800a7e4:	b12f      	cbz	r7, 800a7f2 <_dtoa_r+0x6b2>
 800a7e6:	42af      	cmp	r7, r5
 800a7e8:	d003      	beq.n	800a7f2 <_dtoa_r+0x6b2>
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	4658      	mov	r0, fp
 800a7ee:	f000 fbab 	bl	800af48 <_Bfree>
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	4658      	mov	r0, fp
 800a7f6:	f000 fba7 	bl	800af48 <_Bfree>
 800a7fa:	e7d0      	b.n	800a79e <_dtoa_r+0x65e>
 800a7fc:	9704      	str	r7, [sp, #16]
 800a7fe:	4633      	mov	r3, r6
 800a800:	461e      	mov	r6, r3
 800a802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a806:	2a39      	cmp	r2, #57	@ 0x39
 800a808:	d107      	bne.n	800a81a <_dtoa_r+0x6da>
 800a80a:	459a      	cmp	sl, r3
 800a80c:	d1f8      	bne.n	800a800 <_dtoa_r+0x6c0>
 800a80e:	9a04      	ldr	r2, [sp, #16]
 800a810:	3201      	adds	r2, #1
 800a812:	9204      	str	r2, [sp, #16]
 800a814:	2230      	movs	r2, #48	@ 0x30
 800a816:	f88a 2000 	strb.w	r2, [sl]
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	3201      	adds	r2, #1
 800a81e:	701a      	strb	r2, [r3, #0]
 800a820:	e7bd      	b.n	800a79e <_dtoa_r+0x65e>
 800a822:	4b7b      	ldr	r3, [pc, #492]	@ (800aa10 <_dtoa_r+0x8d0>)
 800a824:	2200      	movs	r2, #0
 800a826:	f7f5 fee7 	bl	80005f8 <__aeabi_dmul>
 800a82a:	2200      	movs	r2, #0
 800a82c:	2300      	movs	r3, #0
 800a82e:	4604      	mov	r4, r0
 800a830:	460d      	mov	r5, r1
 800a832:	f7f6 f949 	bl	8000ac8 <__aeabi_dcmpeq>
 800a836:	2800      	cmp	r0, #0
 800a838:	f43f aebb 	beq.w	800a5b2 <_dtoa_r+0x472>
 800a83c:	e6f0      	b.n	800a620 <_dtoa_r+0x4e0>
 800a83e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a840:	2a00      	cmp	r2, #0
 800a842:	f000 80db 	beq.w	800a9fc <_dtoa_r+0x8bc>
 800a846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a848:	2a01      	cmp	r2, #1
 800a84a:	f300 80bf 	bgt.w	800a9cc <_dtoa_r+0x88c>
 800a84e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a850:	2a00      	cmp	r2, #0
 800a852:	f000 80b7 	beq.w	800a9c4 <_dtoa_r+0x884>
 800a856:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a85a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a85c:	4646      	mov	r6, r8
 800a85e:	9a08      	ldr	r2, [sp, #32]
 800a860:	2101      	movs	r1, #1
 800a862:	441a      	add	r2, r3
 800a864:	4658      	mov	r0, fp
 800a866:	4498      	add	r8, r3
 800a868:	9208      	str	r2, [sp, #32]
 800a86a:	f000 fc6b 	bl	800b144 <__i2b>
 800a86e:	4605      	mov	r5, r0
 800a870:	b15e      	cbz	r6, 800a88a <_dtoa_r+0x74a>
 800a872:	9b08      	ldr	r3, [sp, #32]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dd08      	ble.n	800a88a <_dtoa_r+0x74a>
 800a878:	42b3      	cmp	r3, r6
 800a87a:	9a08      	ldr	r2, [sp, #32]
 800a87c:	bfa8      	it	ge
 800a87e:	4633      	movge	r3, r6
 800a880:	eba8 0803 	sub.w	r8, r8, r3
 800a884:	1af6      	subs	r6, r6, r3
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	9308      	str	r3, [sp, #32]
 800a88a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a88c:	b1f3      	cbz	r3, 800a8cc <_dtoa_r+0x78c>
 800a88e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 80b7 	beq.w	800aa04 <_dtoa_r+0x8c4>
 800a896:	b18c      	cbz	r4, 800a8bc <_dtoa_r+0x77c>
 800a898:	4629      	mov	r1, r5
 800a89a:	4622      	mov	r2, r4
 800a89c:	4658      	mov	r0, fp
 800a89e:	f000 fd11 	bl	800b2c4 <__pow5mult>
 800a8a2:	464a      	mov	r2, r9
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	4658      	mov	r0, fp
 800a8aa:	f000 fc61 	bl	800b170 <__multiply>
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	9004      	str	r0, [sp, #16]
 800a8b2:	4658      	mov	r0, fp
 800a8b4:	f000 fb48 	bl	800af48 <_Bfree>
 800a8b8:	9b04      	ldr	r3, [sp, #16]
 800a8ba:	4699      	mov	r9, r3
 800a8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8be:	1b1a      	subs	r2, r3, r4
 800a8c0:	d004      	beq.n	800a8cc <_dtoa_r+0x78c>
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	4658      	mov	r0, fp
 800a8c6:	f000 fcfd 	bl	800b2c4 <__pow5mult>
 800a8ca:	4681      	mov	r9, r0
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	4658      	mov	r0, fp
 800a8d0:	f000 fc38 	bl	800b144 <__i2b>
 800a8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 81cf 	beq.w	800ac7c <_dtoa_r+0xb3c>
 800a8de:	461a      	mov	r2, r3
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	4658      	mov	r0, fp
 800a8e4:	f000 fcee 	bl	800b2c4 <__pow5mult>
 800a8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	f300 8095 	bgt.w	800aa1c <_dtoa_r+0x8dc>
 800a8f2:	9b02      	ldr	r3, [sp, #8]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f040 8087 	bne.w	800aa08 <_dtoa_r+0x8c8>
 800a8fa:	9b03      	ldr	r3, [sp, #12]
 800a8fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a900:	2b00      	cmp	r3, #0
 800a902:	f040 8089 	bne.w	800aa18 <_dtoa_r+0x8d8>
 800a906:	9b03      	ldr	r3, [sp, #12]
 800a908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a90c:	0d1b      	lsrs	r3, r3, #20
 800a90e:	051b      	lsls	r3, r3, #20
 800a910:	b12b      	cbz	r3, 800a91e <_dtoa_r+0x7de>
 800a912:	9b08      	ldr	r3, [sp, #32]
 800a914:	3301      	adds	r3, #1
 800a916:	9308      	str	r3, [sp, #32]
 800a918:	f108 0801 	add.w	r8, r8, #1
 800a91c:	2301      	movs	r3, #1
 800a91e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 81b0 	beq.w	800ac88 <_dtoa_r+0xb48>
 800a928:	6923      	ldr	r3, [r4, #16]
 800a92a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a92e:	6918      	ldr	r0, [r3, #16]
 800a930:	f000 fbbc 	bl	800b0ac <__hi0bits>
 800a934:	f1c0 0020 	rsb	r0, r0, #32
 800a938:	9b08      	ldr	r3, [sp, #32]
 800a93a:	4418      	add	r0, r3
 800a93c:	f010 001f 	ands.w	r0, r0, #31
 800a940:	d077      	beq.n	800aa32 <_dtoa_r+0x8f2>
 800a942:	f1c0 0320 	rsb	r3, r0, #32
 800a946:	2b04      	cmp	r3, #4
 800a948:	dd6b      	ble.n	800aa22 <_dtoa_r+0x8e2>
 800a94a:	9b08      	ldr	r3, [sp, #32]
 800a94c:	f1c0 001c 	rsb	r0, r0, #28
 800a950:	4403      	add	r3, r0
 800a952:	4480      	add	r8, r0
 800a954:	4406      	add	r6, r0
 800a956:	9308      	str	r3, [sp, #32]
 800a958:	f1b8 0f00 	cmp.w	r8, #0
 800a95c:	dd05      	ble.n	800a96a <_dtoa_r+0x82a>
 800a95e:	4649      	mov	r1, r9
 800a960:	4642      	mov	r2, r8
 800a962:	4658      	mov	r0, fp
 800a964:	f000 fd08 	bl	800b378 <__lshift>
 800a968:	4681      	mov	r9, r0
 800a96a:	9b08      	ldr	r3, [sp, #32]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	dd05      	ble.n	800a97c <_dtoa_r+0x83c>
 800a970:	4621      	mov	r1, r4
 800a972:	461a      	mov	r2, r3
 800a974:	4658      	mov	r0, fp
 800a976:	f000 fcff 	bl	800b378 <__lshift>
 800a97a:	4604      	mov	r4, r0
 800a97c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d059      	beq.n	800aa36 <_dtoa_r+0x8f6>
 800a982:	4621      	mov	r1, r4
 800a984:	4648      	mov	r0, r9
 800a986:	f000 fd63 	bl	800b450 <__mcmp>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	da53      	bge.n	800aa36 <_dtoa_r+0x8f6>
 800a98e:	1e7b      	subs	r3, r7, #1
 800a990:	9304      	str	r3, [sp, #16]
 800a992:	4649      	mov	r1, r9
 800a994:	2300      	movs	r3, #0
 800a996:	220a      	movs	r2, #10
 800a998:	4658      	mov	r0, fp
 800a99a:	f000 faf7 	bl	800af8c <__multadd>
 800a99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9a0:	4681      	mov	r9, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f000 8172 	beq.w	800ac8c <_dtoa_r+0xb4c>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	220a      	movs	r2, #10
 800a9ae:	4658      	mov	r0, fp
 800a9b0:	f000 faec 	bl	800af8c <__multadd>
 800a9b4:	9b00      	ldr	r3, [sp, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	dc67      	bgt.n	800aa8c <_dtoa_r+0x94c>
 800a9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	dc41      	bgt.n	800aa46 <_dtoa_r+0x906>
 800a9c2:	e063      	b.n	800aa8c <_dtoa_r+0x94c>
 800a9c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a9c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a9ca:	e746      	b.n	800a85a <_dtoa_r+0x71a>
 800a9cc:	9b07      	ldr	r3, [sp, #28]
 800a9ce:	1e5c      	subs	r4, r3, #1
 800a9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9d2:	42a3      	cmp	r3, r4
 800a9d4:	bfbf      	itttt	lt
 800a9d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a9d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a9da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a9dc:	1ae3      	sublt	r3, r4, r3
 800a9de:	bfb4      	ite	lt
 800a9e0:	18d2      	addlt	r2, r2, r3
 800a9e2:	1b1c      	subge	r4, r3, r4
 800a9e4:	9b07      	ldr	r3, [sp, #28]
 800a9e6:	bfbc      	itt	lt
 800a9e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a9ea:	2400      	movlt	r4, #0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfb5      	itete	lt
 800a9f0:	eba8 0603 	sublt.w	r6, r8, r3
 800a9f4:	9b07      	ldrge	r3, [sp, #28]
 800a9f6:	2300      	movlt	r3, #0
 800a9f8:	4646      	movge	r6, r8
 800a9fa:	e730      	b.n	800a85e <_dtoa_r+0x71e>
 800a9fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa00:	4646      	mov	r6, r8
 800aa02:	e735      	b.n	800a870 <_dtoa_r+0x730>
 800aa04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa06:	e75c      	b.n	800a8c2 <_dtoa_r+0x782>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e788      	b.n	800a91e <_dtoa_r+0x7de>
 800aa0c:	3fe00000 	.word	0x3fe00000
 800aa10:	40240000 	.word	0x40240000
 800aa14:	40140000 	.word	0x40140000
 800aa18:	9b02      	ldr	r3, [sp, #8]
 800aa1a:	e780      	b.n	800a91e <_dtoa_r+0x7de>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa20:	e782      	b.n	800a928 <_dtoa_r+0x7e8>
 800aa22:	d099      	beq.n	800a958 <_dtoa_r+0x818>
 800aa24:	9a08      	ldr	r2, [sp, #32]
 800aa26:	331c      	adds	r3, #28
 800aa28:	441a      	add	r2, r3
 800aa2a:	4498      	add	r8, r3
 800aa2c:	441e      	add	r6, r3
 800aa2e:	9208      	str	r2, [sp, #32]
 800aa30:	e792      	b.n	800a958 <_dtoa_r+0x818>
 800aa32:	4603      	mov	r3, r0
 800aa34:	e7f6      	b.n	800aa24 <_dtoa_r+0x8e4>
 800aa36:	9b07      	ldr	r3, [sp, #28]
 800aa38:	9704      	str	r7, [sp, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dc20      	bgt.n	800aa80 <_dtoa_r+0x940>
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	dd1e      	ble.n	800aa84 <_dtoa_r+0x944>
 800aa46:	9b00      	ldr	r3, [sp, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f47f aec0 	bne.w	800a7ce <_dtoa_r+0x68e>
 800aa4e:	4621      	mov	r1, r4
 800aa50:	2205      	movs	r2, #5
 800aa52:	4658      	mov	r0, fp
 800aa54:	f000 fa9a 	bl	800af8c <__multadd>
 800aa58:	4601      	mov	r1, r0
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	4648      	mov	r0, r9
 800aa5e:	f000 fcf7 	bl	800b450 <__mcmp>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	f77f aeb3 	ble.w	800a7ce <_dtoa_r+0x68e>
 800aa68:	4656      	mov	r6, sl
 800aa6a:	2331      	movs	r3, #49	@ 0x31
 800aa6c:	f806 3b01 	strb.w	r3, [r6], #1
 800aa70:	9b04      	ldr	r3, [sp, #16]
 800aa72:	3301      	adds	r3, #1
 800aa74:	9304      	str	r3, [sp, #16]
 800aa76:	e6ae      	b.n	800a7d6 <_dtoa_r+0x696>
 800aa78:	9c07      	ldr	r4, [sp, #28]
 800aa7a:	9704      	str	r7, [sp, #16]
 800aa7c:	4625      	mov	r5, r4
 800aa7e:	e7f3      	b.n	800aa68 <_dtoa_r+0x928>
 800aa80:	9b07      	ldr	r3, [sp, #28]
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 8104 	beq.w	800ac94 <_dtoa_r+0xb54>
 800aa8c:	2e00      	cmp	r6, #0
 800aa8e:	dd05      	ble.n	800aa9c <_dtoa_r+0x95c>
 800aa90:	4629      	mov	r1, r5
 800aa92:	4632      	mov	r2, r6
 800aa94:	4658      	mov	r0, fp
 800aa96:	f000 fc6f 	bl	800b378 <__lshift>
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d05a      	beq.n	800ab58 <_dtoa_r+0xa18>
 800aaa2:	6869      	ldr	r1, [r5, #4]
 800aaa4:	4658      	mov	r0, fp
 800aaa6:	f000 fa0f 	bl	800aec8 <_Balloc>
 800aaaa:	4606      	mov	r6, r0
 800aaac:	b928      	cbnz	r0, 800aaba <_dtoa_r+0x97a>
 800aaae:	4b84      	ldr	r3, [pc, #528]	@ (800acc0 <_dtoa_r+0xb80>)
 800aab0:	4602      	mov	r2, r0
 800aab2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aab6:	f7ff bb5a 	b.w	800a16e <_dtoa_r+0x2e>
 800aaba:	692a      	ldr	r2, [r5, #16]
 800aabc:	3202      	adds	r2, #2
 800aabe:	0092      	lsls	r2, r2, #2
 800aac0:	f105 010c 	add.w	r1, r5, #12
 800aac4:	300c      	adds	r0, #12
 800aac6:	f7ff fa9c 	bl	800a002 <memcpy>
 800aaca:	2201      	movs	r2, #1
 800aacc:	4631      	mov	r1, r6
 800aace:	4658      	mov	r0, fp
 800aad0:	f000 fc52 	bl	800b378 <__lshift>
 800aad4:	f10a 0301 	add.w	r3, sl, #1
 800aad8:	9307      	str	r3, [sp, #28]
 800aada:	9b00      	ldr	r3, [sp, #0]
 800aadc:	4453      	add	r3, sl
 800aade:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aae0:	9b02      	ldr	r3, [sp, #8]
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	462f      	mov	r7, r5
 800aae8:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaea:	4605      	mov	r5, r0
 800aaec:	9b07      	ldr	r3, [sp, #28]
 800aaee:	4621      	mov	r1, r4
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	4648      	mov	r0, r9
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	f7ff fa99 	bl	800a02c <quorem>
 800aafa:	4639      	mov	r1, r7
 800aafc:	9002      	str	r0, [sp, #8]
 800aafe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab02:	4648      	mov	r0, r9
 800ab04:	f000 fca4 	bl	800b450 <__mcmp>
 800ab08:	462a      	mov	r2, r5
 800ab0a:	9008      	str	r0, [sp, #32]
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4658      	mov	r0, fp
 800ab10:	f000 fcba 	bl	800b488 <__mdiff>
 800ab14:	68c2      	ldr	r2, [r0, #12]
 800ab16:	4606      	mov	r6, r0
 800ab18:	bb02      	cbnz	r2, 800ab5c <_dtoa_r+0xa1c>
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	4648      	mov	r0, r9
 800ab1e:	f000 fc97 	bl	800b450 <__mcmp>
 800ab22:	4602      	mov	r2, r0
 800ab24:	4631      	mov	r1, r6
 800ab26:	4658      	mov	r0, fp
 800ab28:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab2a:	f000 fa0d 	bl	800af48 <_Bfree>
 800ab2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab32:	9e07      	ldr	r6, [sp, #28]
 800ab34:	ea43 0102 	orr.w	r1, r3, r2
 800ab38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab3a:	4319      	orrs	r1, r3
 800ab3c:	d110      	bne.n	800ab60 <_dtoa_r+0xa20>
 800ab3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab42:	d029      	beq.n	800ab98 <_dtoa_r+0xa58>
 800ab44:	9b08      	ldr	r3, [sp, #32]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	dd02      	ble.n	800ab50 <_dtoa_r+0xa10>
 800ab4a:	9b02      	ldr	r3, [sp, #8]
 800ab4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ab50:	9b00      	ldr	r3, [sp, #0]
 800ab52:	f883 8000 	strb.w	r8, [r3]
 800ab56:	e63f      	b.n	800a7d8 <_dtoa_r+0x698>
 800ab58:	4628      	mov	r0, r5
 800ab5a:	e7bb      	b.n	800aad4 <_dtoa_r+0x994>
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	e7e1      	b.n	800ab24 <_dtoa_r+0x9e4>
 800ab60:	9b08      	ldr	r3, [sp, #32]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	db04      	blt.n	800ab70 <_dtoa_r+0xa30>
 800ab66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab68:	430b      	orrs	r3, r1
 800ab6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	d120      	bne.n	800abb2 <_dtoa_r+0xa72>
 800ab70:	2a00      	cmp	r2, #0
 800ab72:	dded      	ble.n	800ab50 <_dtoa_r+0xa10>
 800ab74:	4649      	mov	r1, r9
 800ab76:	2201      	movs	r2, #1
 800ab78:	4658      	mov	r0, fp
 800ab7a:	f000 fbfd 	bl	800b378 <__lshift>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4681      	mov	r9, r0
 800ab82:	f000 fc65 	bl	800b450 <__mcmp>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	dc03      	bgt.n	800ab92 <_dtoa_r+0xa52>
 800ab8a:	d1e1      	bne.n	800ab50 <_dtoa_r+0xa10>
 800ab8c:	f018 0f01 	tst.w	r8, #1
 800ab90:	d0de      	beq.n	800ab50 <_dtoa_r+0xa10>
 800ab92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab96:	d1d8      	bne.n	800ab4a <_dtoa_r+0xa0a>
 800ab98:	9a00      	ldr	r2, [sp, #0]
 800ab9a:	2339      	movs	r3, #57	@ 0x39
 800ab9c:	7013      	strb	r3, [r2, #0]
 800ab9e:	4633      	mov	r3, r6
 800aba0:	461e      	mov	r6, r3
 800aba2:	3b01      	subs	r3, #1
 800aba4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aba8:	2a39      	cmp	r2, #57	@ 0x39
 800abaa:	d052      	beq.n	800ac52 <_dtoa_r+0xb12>
 800abac:	3201      	adds	r2, #1
 800abae:	701a      	strb	r2, [r3, #0]
 800abb0:	e612      	b.n	800a7d8 <_dtoa_r+0x698>
 800abb2:	2a00      	cmp	r2, #0
 800abb4:	dd07      	ble.n	800abc6 <_dtoa_r+0xa86>
 800abb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abba:	d0ed      	beq.n	800ab98 <_dtoa_r+0xa58>
 800abbc:	9a00      	ldr	r2, [sp, #0]
 800abbe:	f108 0301 	add.w	r3, r8, #1
 800abc2:	7013      	strb	r3, [r2, #0]
 800abc4:	e608      	b.n	800a7d8 <_dtoa_r+0x698>
 800abc6:	9b07      	ldr	r3, [sp, #28]
 800abc8:	9a07      	ldr	r2, [sp, #28]
 800abca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800abce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d028      	beq.n	800ac26 <_dtoa_r+0xae6>
 800abd4:	4649      	mov	r1, r9
 800abd6:	2300      	movs	r3, #0
 800abd8:	220a      	movs	r2, #10
 800abda:	4658      	mov	r0, fp
 800abdc:	f000 f9d6 	bl	800af8c <__multadd>
 800abe0:	42af      	cmp	r7, r5
 800abe2:	4681      	mov	r9, r0
 800abe4:	f04f 0300 	mov.w	r3, #0
 800abe8:	f04f 020a 	mov.w	r2, #10
 800abec:	4639      	mov	r1, r7
 800abee:	4658      	mov	r0, fp
 800abf0:	d107      	bne.n	800ac02 <_dtoa_r+0xac2>
 800abf2:	f000 f9cb 	bl	800af8c <__multadd>
 800abf6:	4607      	mov	r7, r0
 800abf8:	4605      	mov	r5, r0
 800abfa:	9b07      	ldr	r3, [sp, #28]
 800abfc:	3301      	adds	r3, #1
 800abfe:	9307      	str	r3, [sp, #28]
 800ac00:	e774      	b.n	800aaec <_dtoa_r+0x9ac>
 800ac02:	f000 f9c3 	bl	800af8c <__multadd>
 800ac06:	4629      	mov	r1, r5
 800ac08:	4607      	mov	r7, r0
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	220a      	movs	r2, #10
 800ac0e:	4658      	mov	r0, fp
 800ac10:	f000 f9bc 	bl	800af8c <__multadd>
 800ac14:	4605      	mov	r5, r0
 800ac16:	e7f0      	b.n	800abfa <_dtoa_r+0xaba>
 800ac18:	9b00      	ldr	r3, [sp, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	bfcc      	ite	gt
 800ac1e:	461e      	movgt	r6, r3
 800ac20:	2601      	movle	r6, #1
 800ac22:	4456      	add	r6, sl
 800ac24:	2700      	movs	r7, #0
 800ac26:	4649      	mov	r1, r9
 800ac28:	2201      	movs	r2, #1
 800ac2a:	4658      	mov	r0, fp
 800ac2c:	f000 fba4 	bl	800b378 <__lshift>
 800ac30:	4621      	mov	r1, r4
 800ac32:	4681      	mov	r9, r0
 800ac34:	f000 fc0c 	bl	800b450 <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	dcb0      	bgt.n	800ab9e <_dtoa_r+0xa5e>
 800ac3c:	d102      	bne.n	800ac44 <_dtoa_r+0xb04>
 800ac3e:	f018 0f01 	tst.w	r8, #1
 800ac42:	d1ac      	bne.n	800ab9e <_dtoa_r+0xa5e>
 800ac44:	4633      	mov	r3, r6
 800ac46:	461e      	mov	r6, r3
 800ac48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac4c:	2a30      	cmp	r2, #48	@ 0x30
 800ac4e:	d0fa      	beq.n	800ac46 <_dtoa_r+0xb06>
 800ac50:	e5c2      	b.n	800a7d8 <_dtoa_r+0x698>
 800ac52:	459a      	cmp	sl, r3
 800ac54:	d1a4      	bne.n	800aba0 <_dtoa_r+0xa60>
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	2331      	movs	r3, #49	@ 0x31
 800ac5e:	f88a 3000 	strb.w	r3, [sl]
 800ac62:	e5b9      	b.n	800a7d8 <_dtoa_r+0x698>
 800ac64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800acc4 <_dtoa_r+0xb84>
 800ac6a:	b11b      	cbz	r3, 800ac74 <_dtoa_r+0xb34>
 800ac6c:	f10a 0308 	add.w	r3, sl, #8
 800ac70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac72:	6013      	str	r3, [r2, #0]
 800ac74:	4650      	mov	r0, sl
 800ac76:	b019      	add	sp, #100	@ 0x64
 800ac78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	f77f ae37 	ble.w	800a8f2 <_dtoa_r+0x7b2>
 800ac84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac88:	2001      	movs	r0, #1
 800ac8a:	e655      	b.n	800a938 <_dtoa_r+0x7f8>
 800ac8c:	9b00      	ldr	r3, [sp, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f77f aed6 	ble.w	800aa40 <_dtoa_r+0x900>
 800ac94:	4656      	mov	r6, sl
 800ac96:	4621      	mov	r1, r4
 800ac98:	4648      	mov	r0, r9
 800ac9a:	f7ff f9c7 	bl	800a02c <quorem>
 800ac9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aca2:	f806 8b01 	strb.w	r8, [r6], #1
 800aca6:	9b00      	ldr	r3, [sp, #0]
 800aca8:	eba6 020a 	sub.w	r2, r6, sl
 800acac:	4293      	cmp	r3, r2
 800acae:	ddb3      	ble.n	800ac18 <_dtoa_r+0xad8>
 800acb0:	4649      	mov	r1, r9
 800acb2:	2300      	movs	r3, #0
 800acb4:	220a      	movs	r2, #10
 800acb6:	4658      	mov	r0, fp
 800acb8:	f000 f968 	bl	800af8c <__multadd>
 800acbc:	4681      	mov	r9, r0
 800acbe:	e7ea      	b.n	800ac96 <_dtoa_r+0xb56>
 800acc0:	0800d911 	.word	0x0800d911
 800acc4:	0800d895 	.word	0x0800d895

0800acc8 <_free_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	4605      	mov	r5, r0
 800accc:	2900      	cmp	r1, #0
 800acce:	d041      	beq.n	800ad54 <_free_r+0x8c>
 800acd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd4:	1f0c      	subs	r4, r1, #4
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bfb8      	it	lt
 800acda:	18e4      	addlt	r4, r4, r3
 800acdc:	f000 f8e8 	bl	800aeb0 <__malloc_lock>
 800ace0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad58 <_free_r+0x90>)
 800ace2:	6813      	ldr	r3, [r2, #0]
 800ace4:	b933      	cbnz	r3, 800acf4 <_free_r+0x2c>
 800ace6:	6063      	str	r3, [r4, #4]
 800ace8:	6014      	str	r4, [r2, #0]
 800acea:	4628      	mov	r0, r5
 800acec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf0:	f000 b8e4 	b.w	800aebc <__malloc_unlock>
 800acf4:	42a3      	cmp	r3, r4
 800acf6:	d908      	bls.n	800ad0a <_free_r+0x42>
 800acf8:	6820      	ldr	r0, [r4, #0]
 800acfa:	1821      	adds	r1, r4, r0
 800acfc:	428b      	cmp	r3, r1
 800acfe:	bf01      	itttt	eq
 800ad00:	6819      	ldreq	r1, [r3, #0]
 800ad02:	685b      	ldreq	r3, [r3, #4]
 800ad04:	1809      	addeq	r1, r1, r0
 800ad06:	6021      	streq	r1, [r4, #0]
 800ad08:	e7ed      	b.n	800ace6 <_free_r+0x1e>
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	b10b      	cbz	r3, 800ad14 <_free_r+0x4c>
 800ad10:	42a3      	cmp	r3, r4
 800ad12:	d9fa      	bls.n	800ad0a <_free_r+0x42>
 800ad14:	6811      	ldr	r1, [r2, #0]
 800ad16:	1850      	adds	r0, r2, r1
 800ad18:	42a0      	cmp	r0, r4
 800ad1a:	d10b      	bne.n	800ad34 <_free_r+0x6c>
 800ad1c:	6820      	ldr	r0, [r4, #0]
 800ad1e:	4401      	add	r1, r0
 800ad20:	1850      	adds	r0, r2, r1
 800ad22:	4283      	cmp	r3, r0
 800ad24:	6011      	str	r1, [r2, #0]
 800ad26:	d1e0      	bne.n	800acea <_free_r+0x22>
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	6053      	str	r3, [r2, #4]
 800ad2e:	4408      	add	r0, r1
 800ad30:	6010      	str	r0, [r2, #0]
 800ad32:	e7da      	b.n	800acea <_free_r+0x22>
 800ad34:	d902      	bls.n	800ad3c <_free_r+0x74>
 800ad36:	230c      	movs	r3, #12
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	e7d6      	b.n	800acea <_free_r+0x22>
 800ad3c:	6820      	ldr	r0, [r4, #0]
 800ad3e:	1821      	adds	r1, r4, r0
 800ad40:	428b      	cmp	r3, r1
 800ad42:	bf04      	itt	eq
 800ad44:	6819      	ldreq	r1, [r3, #0]
 800ad46:	685b      	ldreq	r3, [r3, #4]
 800ad48:	6063      	str	r3, [r4, #4]
 800ad4a:	bf04      	itt	eq
 800ad4c:	1809      	addeq	r1, r1, r0
 800ad4e:	6021      	streq	r1, [r4, #0]
 800ad50:	6054      	str	r4, [r2, #4]
 800ad52:	e7ca      	b.n	800acea <_free_r+0x22>
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	20005278 	.word	0x20005278

0800ad5c <malloc>:
 800ad5c:	4b02      	ldr	r3, [pc, #8]	@ (800ad68 <malloc+0xc>)
 800ad5e:	4601      	mov	r1, r0
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	f000 b825 	b.w	800adb0 <_malloc_r>
 800ad66:	bf00      	nop
 800ad68:	20000040 	.word	0x20000040

0800ad6c <sbrk_aligned>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	4e0f      	ldr	r6, [pc, #60]	@ (800adac <sbrk_aligned+0x40>)
 800ad70:	460c      	mov	r4, r1
 800ad72:	6831      	ldr	r1, [r6, #0]
 800ad74:	4605      	mov	r5, r0
 800ad76:	b911      	cbnz	r1, 800ad7e <sbrk_aligned+0x12>
 800ad78:	f002 f806 	bl	800cd88 <_sbrk_r>
 800ad7c:	6030      	str	r0, [r6, #0]
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4628      	mov	r0, r5
 800ad82:	f002 f801 	bl	800cd88 <_sbrk_r>
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	d103      	bne.n	800ad92 <sbrk_aligned+0x26>
 800ad8a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad8e:	4620      	mov	r0, r4
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	1cc4      	adds	r4, r0, #3
 800ad94:	f024 0403 	bic.w	r4, r4, #3
 800ad98:	42a0      	cmp	r0, r4
 800ad9a:	d0f8      	beq.n	800ad8e <sbrk_aligned+0x22>
 800ad9c:	1a21      	subs	r1, r4, r0
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f001 fff2 	bl	800cd88 <_sbrk_r>
 800ada4:	3001      	adds	r0, #1
 800ada6:	d1f2      	bne.n	800ad8e <sbrk_aligned+0x22>
 800ada8:	e7ef      	b.n	800ad8a <sbrk_aligned+0x1e>
 800adaa:	bf00      	nop
 800adac:	20005274 	.word	0x20005274

0800adb0 <_malloc_r>:
 800adb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb4:	1ccd      	adds	r5, r1, #3
 800adb6:	f025 0503 	bic.w	r5, r5, #3
 800adba:	3508      	adds	r5, #8
 800adbc:	2d0c      	cmp	r5, #12
 800adbe:	bf38      	it	cc
 800adc0:	250c      	movcc	r5, #12
 800adc2:	2d00      	cmp	r5, #0
 800adc4:	4606      	mov	r6, r0
 800adc6:	db01      	blt.n	800adcc <_malloc_r+0x1c>
 800adc8:	42a9      	cmp	r1, r5
 800adca:	d904      	bls.n	800add6 <_malloc_r+0x26>
 800adcc:	230c      	movs	r3, #12
 800adce:	6033      	str	r3, [r6, #0]
 800add0:	2000      	movs	r0, #0
 800add2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aeac <_malloc_r+0xfc>
 800adda:	f000 f869 	bl	800aeb0 <__malloc_lock>
 800adde:	f8d8 3000 	ldr.w	r3, [r8]
 800ade2:	461c      	mov	r4, r3
 800ade4:	bb44      	cbnz	r4, 800ae38 <_malloc_r+0x88>
 800ade6:	4629      	mov	r1, r5
 800ade8:	4630      	mov	r0, r6
 800adea:	f7ff ffbf 	bl	800ad6c <sbrk_aligned>
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	4604      	mov	r4, r0
 800adf2:	d158      	bne.n	800aea6 <_malloc_r+0xf6>
 800adf4:	f8d8 4000 	ldr.w	r4, [r8]
 800adf8:	4627      	mov	r7, r4
 800adfa:	2f00      	cmp	r7, #0
 800adfc:	d143      	bne.n	800ae86 <_malloc_r+0xd6>
 800adfe:	2c00      	cmp	r4, #0
 800ae00:	d04b      	beq.n	800ae9a <_malloc_r+0xea>
 800ae02:	6823      	ldr	r3, [r4, #0]
 800ae04:	4639      	mov	r1, r7
 800ae06:	4630      	mov	r0, r6
 800ae08:	eb04 0903 	add.w	r9, r4, r3
 800ae0c:	f001 ffbc 	bl	800cd88 <_sbrk_r>
 800ae10:	4581      	cmp	r9, r0
 800ae12:	d142      	bne.n	800ae9a <_malloc_r+0xea>
 800ae14:	6821      	ldr	r1, [r4, #0]
 800ae16:	1a6d      	subs	r5, r5, r1
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ffa6 	bl	800ad6c <sbrk_aligned>
 800ae20:	3001      	adds	r0, #1
 800ae22:	d03a      	beq.n	800ae9a <_malloc_r+0xea>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	442b      	add	r3, r5
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	bb62      	cbnz	r2, 800ae8c <_malloc_r+0xdc>
 800ae32:	f8c8 7000 	str.w	r7, [r8]
 800ae36:	e00f      	b.n	800ae58 <_malloc_r+0xa8>
 800ae38:	6822      	ldr	r2, [r4, #0]
 800ae3a:	1b52      	subs	r2, r2, r5
 800ae3c:	d420      	bmi.n	800ae80 <_malloc_r+0xd0>
 800ae3e:	2a0b      	cmp	r2, #11
 800ae40:	d917      	bls.n	800ae72 <_malloc_r+0xc2>
 800ae42:	1961      	adds	r1, r4, r5
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	6025      	str	r5, [r4, #0]
 800ae48:	bf18      	it	ne
 800ae4a:	6059      	strne	r1, [r3, #4]
 800ae4c:	6863      	ldr	r3, [r4, #4]
 800ae4e:	bf08      	it	eq
 800ae50:	f8c8 1000 	streq.w	r1, [r8]
 800ae54:	5162      	str	r2, [r4, r5]
 800ae56:	604b      	str	r3, [r1, #4]
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f000 f82f 	bl	800aebc <__malloc_unlock>
 800ae5e:	f104 000b 	add.w	r0, r4, #11
 800ae62:	1d23      	adds	r3, r4, #4
 800ae64:	f020 0007 	bic.w	r0, r0, #7
 800ae68:	1ac2      	subs	r2, r0, r3
 800ae6a:	bf1c      	itt	ne
 800ae6c:	1a1b      	subne	r3, r3, r0
 800ae6e:	50a3      	strne	r3, [r4, r2]
 800ae70:	e7af      	b.n	800add2 <_malloc_r+0x22>
 800ae72:	6862      	ldr	r2, [r4, #4]
 800ae74:	42a3      	cmp	r3, r4
 800ae76:	bf0c      	ite	eq
 800ae78:	f8c8 2000 	streq.w	r2, [r8]
 800ae7c:	605a      	strne	r2, [r3, #4]
 800ae7e:	e7eb      	b.n	800ae58 <_malloc_r+0xa8>
 800ae80:	4623      	mov	r3, r4
 800ae82:	6864      	ldr	r4, [r4, #4]
 800ae84:	e7ae      	b.n	800ade4 <_malloc_r+0x34>
 800ae86:	463c      	mov	r4, r7
 800ae88:	687f      	ldr	r7, [r7, #4]
 800ae8a:	e7b6      	b.n	800adfa <_malloc_r+0x4a>
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	42a3      	cmp	r3, r4
 800ae92:	d1fb      	bne.n	800ae8c <_malloc_r+0xdc>
 800ae94:	2300      	movs	r3, #0
 800ae96:	6053      	str	r3, [r2, #4]
 800ae98:	e7de      	b.n	800ae58 <_malloc_r+0xa8>
 800ae9a:	230c      	movs	r3, #12
 800ae9c:	6033      	str	r3, [r6, #0]
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f000 f80c 	bl	800aebc <__malloc_unlock>
 800aea4:	e794      	b.n	800add0 <_malloc_r+0x20>
 800aea6:	6005      	str	r5, [r0, #0]
 800aea8:	e7d6      	b.n	800ae58 <_malloc_r+0xa8>
 800aeaa:	bf00      	nop
 800aeac:	20005278 	.word	0x20005278

0800aeb0 <__malloc_lock>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	@ (800aeb8 <__malloc_lock+0x8>)
 800aeb2:	f7ff b8a4 	b.w	8009ffe <__retarget_lock_acquire_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	20005270 	.word	0x20005270

0800aebc <__malloc_unlock>:
 800aebc:	4801      	ldr	r0, [pc, #4]	@ (800aec4 <__malloc_unlock+0x8>)
 800aebe:	f7ff b89f 	b.w	800a000 <__retarget_lock_release_recursive>
 800aec2:	bf00      	nop
 800aec4:	20005270 	.word	0x20005270

0800aec8 <_Balloc>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	69c6      	ldr	r6, [r0, #28]
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
 800aed0:	b976      	cbnz	r6, 800aef0 <_Balloc+0x28>
 800aed2:	2010      	movs	r0, #16
 800aed4:	f7ff ff42 	bl	800ad5c <malloc>
 800aed8:	4602      	mov	r2, r0
 800aeda:	61e0      	str	r0, [r4, #28]
 800aedc:	b920      	cbnz	r0, 800aee8 <_Balloc+0x20>
 800aede:	4b18      	ldr	r3, [pc, #96]	@ (800af40 <_Balloc+0x78>)
 800aee0:	4818      	ldr	r0, [pc, #96]	@ (800af44 <_Balloc+0x7c>)
 800aee2:	216b      	movs	r1, #107	@ 0x6b
 800aee4:	f001 ff68 	bl	800cdb8 <__assert_func>
 800aee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeec:	6006      	str	r6, [r0, #0]
 800aeee:	60c6      	str	r6, [r0, #12]
 800aef0:	69e6      	ldr	r6, [r4, #28]
 800aef2:	68f3      	ldr	r3, [r6, #12]
 800aef4:	b183      	cbz	r3, 800af18 <_Balloc+0x50>
 800aef6:	69e3      	ldr	r3, [r4, #28]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aefe:	b9b8      	cbnz	r0, 800af30 <_Balloc+0x68>
 800af00:	2101      	movs	r1, #1
 800af02:	fa01 f605 	lsl.w	r6, r1, r5
 800af06:	1d72      	adds	r2, r6, #5
 800af08:	0092      	lsls	r2, r2, #2
 800af0a:	4620      	mov	r0, r4
 800af0c:	f001 ff72 	bl	800cdf4 <_calloc_r>
 800af10:	b160      	cbz	r0, 800af2c <_Balloc+0x64>
 800af12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af16:	e00e      	b.n	800af36 <_Balloc+0x6e>
 800af18:	2221      	movs	r2, #33	@ 0x21
 800af1a:	2104      	movs	r1, #4
 800af1c:	4620      	mov	r0, r4
 800af1e:	f001 ff69 	bl	800cdf4 <_calloc_r>
 800af22:	69e3      	ldr	r3, [r4, #28]
 800af24:	60f0      	str	r0, [r6, #12]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1e4      	bne.n	800aef6 <_Balloc+0x2e>
 800af2c:	2000      	movs	r0, #0
 800af2e:	bd70      	pop	{r4, r5, r6, pc}
 800af30:	6802      	ldr	r2, [r0, #0]
 800af32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af36:	2300      	movs	r3, #0
 800af38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af3c:	e7f7      	b.n	800af2e <_Balloc+0x66>
 800af3e:	bf00      	nop
 800af40:	0800d8a2 	.word	0x0800d8a2
 800af44:	0800d922 	.word	0x0800d922

0800af48 <_Bfree>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	69c6      	ldr	r6, [r0, #28]
 800af4c:	4605      	mov	r5, r0
 800af4e:	460c      	mov	r4, r1
 800af50:	b976      	cbnz	r6, 800af70 <_Bfree+0x28>
 800af52:	2010      	movs	r0, #16
 800af54:	f7ff ff02 	bl	800ad5c <malloc>
 800af58:	4602      	mov	r2, r0
 800af5a:	61e8      	str	r0, [r5, #28]
 800af5c:	b920      	cbnz	r0, 800af68 <_Bfree+0x20>
 800af5e:	4b09      	ldr	r3, [pc, #36]	@ (800af84 <_Bfree+0x3c>)
 800af60:	4809      	ldr	r0, [pc, #36]	@ (800af88 <_Bfree+0x40>)
 800af62:	218f      	movs	r1, #143	@ 0x8f
 800af64:	f001 ff28 	bl	800cdb8 <__assert_func>
 800af68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af6c:	6006      	str	r6, [r0, #0]
 800af6e:	60c6      	str	r6, [r0, #12]
 800af70:	b13c      	cbz	r4, 800af82 <_Bfree+0x3a>
 800af72:	69eb      	ldr	r3, [r5, #28]
 800af74:	6862      	ldr	r2, [r4, #4]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af7c:	6021      	str	r1, [r4, #0]
 800af7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af82:	bd70      	pop	{r4, r5, r6, pc}
 800af84:	0800d8a2 	.word	0x0800d8a2
 800af88:	0800d922 	.word	0x0800d922

0800af8c <__multadd>:
 800af8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af90:	690d      	ldr	r5, [r1, #16]
 800af92:	4607      	mov	r7, r0
 800af94:	460c      	mov	r4, r1
 800af96:	461e      	mov	r6, r3
 800af98:	f101 0c14 	add.w	ip, r1, #20
 800af9c:	2000      	movs	r0, #0
 800af9e:	f8dc 3000 	ldr.w	r3, [ip]
 800afa2:	b299      	uxth	r1, r3
 800afa4:	fb02 6101 	mla	r1, r2, r1, r6
 800afa8:	0c1e      	lsrs	r6, r3, #16
 800afaa:	0c0b      	lsrs	r3, r1, #16
 800afac:	fb02 3306 	mla	r3, r2, r6, r3
 800afb0:	b289      	uxth	r1, r1
 800afb2:	3001      	adds	r0, #1
 800afb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afb8:	4285      	cmp	r5, r0
 800afba:	f84c 1b04 	str.w	r1, [ip], #4
 800afbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afc2:	dcec      	bgt.n	800af9e <__multadd+0x12>
 800afc4:	b30e      	cbz	r6, 800b00a <__multadd+0x7e>
 800afc6:	68a3      	ldr	r3, [r4, #8]
 800afc8:	42ab      	cmp	r3, r5
 800afca:	dc19      	bgt.n	800b000 <__multadd+0x74>
 800afcc:	6861      	ldr	r1, [r4, #4]
 800afce:	4638      	mov	r0, r7
 800afd0:	3101      	adds	r1, #1
 800afd2:	f7ff ff79 	bl	800aec8 <_Balloc>
 800afd6:	4680      	mov	r8, r0
 800afd8:	b928      	cbnz	r0, 800afe6 <__multadd+0x5a>
 800afda:	4602      	mov	r2, r0
 800afdc:	4b0c      	ldr	r3, [pc, #48]	@ (800b010 <__multadd+0x84>)
 800afde:	480d      	ldr	r0, [pc, #52]	@ (800b014 <__multadd+0x88>)
 800afe0:	21ba      	movs	r1, #186	@ 0xba
 800afe2:	f001 fee9 	bl	800cdb8 <__assert_func>
 800afe6:	6922      	ldr	r2, [r4, #16]
 800afe8:	3202      	adds	r2, #2
 800afea:	f104 010c 	add.w	r1, r4, #12
 800afee:	0092      	lsls	r2, r2, #2
 800aff0:	300c      	adds	r0, #12
 800aff2:	f7ff f806 	bl	800a002 <memcpy>
 800aff6:	4621      	mov	r1, r4
 800aff8:	4638      	mov	r0, r7
 800affa:	f7ff ffa5 	bl	800af48 <_Bfree>
 800affe:	4644      	mov	r4, r8
 800b000:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b004:	3501      	adds	r5, #1
 800b006:	615e      	str	r6, [r3, #20]
 800b008:	6125      	str	r5, [r4, #16]
 800b00a:	4620      	mov	r0, r4
 800b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b010:	0800d911 	.word	0x0800d911
 800b014:	0800d922 	.word	0x0800d922

0800b018 <__s2b>:
 800b018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b01c:	460c      	mov	r4, r1
 800b01e:	4615      	mov	r5, r2
 800b020:	461f      	mov	r7, r3
 800b022:	2209      	movs	r2, #9
 800b024:	3308      	adds	r3, #8
 800b026:	4606      	mov	r6, r0
 800b028:	fb93 f3f2 	sdiv	r3, r3, r2
 800b02c:	2100      	movs	r1, #0
 800b02e:	2201      	movs	r2, #1
 800b030:	429a      	cmp	r2, r3
 800b032:	db09      	blt.n	800b048 <__s2b+0x30>
 800b034:	4630      	mov	r0, r6
 800b036:	f7ff ff47 	bl	800aec8 <_Balloc>
 800b03a:	b940      	cbnz	r0, 800b04e <__s2b+0x36>
 800b03c:	4602      	mov	r2, r0
 800b03e:	4b19      	ldr	r3, [pc, #100]	@ (800b0a4 <__s2b+0x8c>)
 800b040:	4819      	ldr	r0, [pc, #100]	@ (800b0a8 <__s2b+0x90>)
 800b042:	21d3      	movs	r1, #211	@ 0xd3
 800b044:	f001 feb8 	bl	800cdb8 <__assert_func>
 800b048:	0052      	lsls	r2, r2, #1
 800b04a:	3101      	adds	r1, #1
 800b04c:	e7f0      	b.n	800b030 <__s2b+0x18>
 800b04e:	9b08      	ldr	r3, [sp, #32]
 800b050:	6143      	str	r3, [r0, #20]
 800b052:	2d09      	cmp	r5, #9
 800b054:	f04f 0301 	mov.w	r3, #1
 800b058:	6103      	str	r3, [r0, #16]
 800b05a:	dd16      	ble.n	800b08a <__s2b+0x72>
 800b05c:	f104 0909 	add.w	r9, r4, #9
 800b060:	46c8      	mov	r8, r9
 800b062:	442c      	add	r4, r5
 800b064:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b068:	4601      	mov	r1, r0
 800b06a:	3b30      	subs	r3, #48	@ 0x30
 800b06c:	220a      	movs	r2, #10
 800b06e:	4630      	mov	r0, r6
 800b070:	f7ff ff8c 	bl	800af8c <__multadd>
 800b074:	45a0      	cmp	r8, r4
 800b076:	d1f5      	bne.n	800b064 <__s2b+0x4c>
 800b078:	f1a5 0408 	sub.w	r4, r5, #8
 800b07c:	444c      	add	r4, r9
 800b07e:	1b2d      	subs	r5, r5, r4
 800b080:	1963      	adds	r3, r4, r5
 800b082:	42bb      	cmp	r3, r7
 800b084:	db04      	blt.n	800b090 <__s2b+0x78>
 800b086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b08a:	340a      	adds	r4, #10
 800b08c:	2509      	movs	r5, #9
 800b08e:	e7f6      	b.n	800b07e <__s2b+0x66>
 800b090:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b094:	4601      	mov	r1, r0
 800b096:	3b30      	subs	r3, #48	@ 0x30
 800b098:	220a      	movs	r2, #10
 800b09a:	4630      	mov	r0, r6
 800b09c:	f7ff ff76 	bl	800af8c <__multadd>
 800b0a0:	e7ee      	b.n	800b080 <__s2b+0x68>
 800b0a2:	bf00      	nop
 800b0a4:	0800d911 	.word	0x0800d911
 800b0a8:	0800d922 	.word	0x0800d922

0800b0ac <__hi0bits>:
 800b0ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	bf36      	itet	cc
 800b0b4:	0403      	lslcc	r3, r0, #16
 800b0b6:	2000      	movcs	r0, #0
 800b0b8:	2010      	movcc	r0, #16
 800b0ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0be:	bf3c      	itt	cc
 800b0c0:	021b      	lslcc	r3, r3, #8
 800b0c2:	3008      	addcc	r0, #8
 800b0c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0c8:	bf3c      	itt	cc
 800b0ca:	011b      	lslcc	r3, r3, #4
 800b0cc:	3004      	addcc	r0, #4
 800b0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0d2:	bf3c      	itt	cc
 800b0d4:	009b      	lslcc	r3, r3, #2
 800b0d6:	3002      	addcc	r0, #2
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	db05      	blt.n	800b0e8 <__hi0bits+0x3c>
 800b0dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b0e0:	f100 0001 	add.w	r0, r0, #1
 800b0e4:	bf08      	it	eq
 800b0e6:	2020      	moveq	r0, #32
 800b0e8:	4770      	bx	lr

0800b0ea <__lo0bits>:
 800b0ea:	6803      	ldr	r3, [r0, #0]
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	f013 0007 	ands.w	r0, r3, #7
 800b0f2:	d00b      	beq.n	800b10c <__lo0bits+0x22>
 800b0f4:	07d9      	lsls	r1, r3, #31
 800b0f6:	d421      	bmi.n	800b13c <__lo0bits+0x52>
 800b0f8:	0798      	lsls	r0, r3, #30
 800b0fa:	bf49      	itett	mi
 800b0fc:	085b      	lsrmi	r3, r3, #1
 800b0fe:	089b      	lsrpl	r3, r3, #2
 800b100:	2001      	movmi	r0, #1
 800b102:	6013      	strmi	r3, [r2, #0]
 800b104:	bf5c      	itt	pl
 800b106:	6013      	strpl	r3, [r2, #0]
 800b108:	2002      	movpl	r0, #2
 800b10a:	4770      	bx	lr
 800b10c:	b299      	uxth	r1, r3
 800b10e:	b909      	cbnz	r1, 800b114 <__lo0bits+0x2a>
 800b110:	0c1b      	lsrs	r3, r3, #16
 800b112:	2010      	movs	r0, #16
 800b114:	b2d9      	uxtb	r1, r3
 800b116:	b909      	cbnz	r1, 800b11c <__lo0bits+0x32>
 800b118:	3008      	adds	r0, #8
 800b11a:	0a1b      	lsrs	r3, r3, #8
 800b11c:	0719      	lsls	r1, r3, #28
 800b11e:	bf04      	itt	eq
 800b120:	091b      	lsreq	r3, r3, #4
 800b122:	3004      	addeq	r0, #4
 800b124:	0799      	lsls	r1, r3, #30
 800b126:	bf04      	itt	eq
 800b128:	089b      	lsreq	r3, r3, #2
 800b12a:	3002      	addeq	r0, #2
 800b12c:	07d9      	lsls	r1, r3, #31
 800b12e:	d403      	bmi.n	800b138 <__lo0bits+0x4e>
 800b130:	085b      	lsrs	r3, r3, #1
 800b132:	f100 0001 	add.w	r0, r0, #1
 800b136:	d003      	beq.n	800b140 <__lo0bits+0x56>
 800b138:	6013      	str	r3, [r2, #0]
 800b13a:	4770      	bx	lr
 800b13c:	2000      	movs	r0, #0
 800b13e:	4770      	bx	lr
 800b140:	2020      	movs	r0, #32
 800b142:	4770      	bx	lr

0800b144 <__i2b>:
 800b144:	b510      	push	{r4, lr}
 800b146:	460c      	mov	r4, r1
 800b148:	2101      	movs	r1, #1
 800b14a:	f7ff febd 	bl	800aec8 <_Balloc>
 800b14e:	4602      	mov	r2, r0
 800b150:	b928      	cbnz	r0, 800b15e <__i2b+0x1a>
 800b152:	4b05      	ldr	r3, [pc, #20]	@ (800b168 <__i2b+0x24>)
 800b154:	4805      	ldr	r0, [pc, #20]	@ (800b16c <__i2b+0x28>)
 800b156:	f240 1145 	movw	r1, #325	@ 0x145
 800b15a:	f001 fe2d 	bl	800cdb8 <__assert_func>
 800b15e:	2301      	movs	r3, #1
 800b160:	6144      	str	r4, [r0, #20]
 800b162:	6103      	str	r3, [r0, #16]
 800b164:	bd10      	pop	{r4, pc}
 800b166:	bf00      	nop
 800b168:	0800d911 	.word	0x0800d911
 800b16c:	0800d922 	.word	0x0800d922

0800b170 <__multiply>:
 800b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b174:	4614      	mov	r4, r2
 800b176:	690a      	ldr	r2, [r1, #16]
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	bfa8      	it	ge
 800b17e:	4623      	movge	r3, r4
 800b180:	460f      	mov	r7, r1
 800b182:	bfa4      	itt	ge
 800b184:	460c      	movge	r4, r1
 800b186:	461f      	movge	r7, r3
 800b188:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b18c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b190:	68a3      	ldr	r3, [r4, #8]
 800b192:	6861      	ldr	r1, [r4, #4]
 800b194:	eb0a 0609 	add.w	r6, sl, r9
 800b198:	42b3      	cmp	r3, r6
 800b19a:	b085      	sub	sp, #20
 800b19c:	bfb8      	it	lt
 800b19e:	3101      	addlt	r1, #1
 800b1a0:	f7ff fe92 	bl	800aec8 <_Balloc>
 800b1a4:	b930      	cbnz	r0, 800b1b4 <__multiply+0x44>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	4b44      	ldr	r3, [pc, #272]	@ (800b2bc <__multiply+0x14c>)
 800b1aa:	4845      	ldr	r0, [pc, #276]	@ (800b2c0 <__multiply+0x150>)
 800b1ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b1b0:	f001 fe02 	bl	800cdb8 <__assert_func>
 800b1b4:	f100 0514 	add.w	r5, r0, #20
 800b1b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1bc:	462b      	mov	r3, r5
 800b1be:	2200      	movs	r2, #0
 800b1c0:	4543      	cmp	r3, r8
 800b1c2:	d321      	bcc.n	800b208 <__multiply+0x98>
 800b1c4:	f107 0114 	add.w	r1, r7, #20
 800b1c8:	f104 0214 	add.w	r2, r4, #20
 800b1cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b1d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b1d4:	9302      	str	r3, [sp, #8]
 800b1d6:	1b13      	subs	r3, r2, r4
 800b1d8:	3b15      	subs	r3, #21
 800b1da:	f023 0303 	bic.w	r3, r3, #3
 800b1de:	3304      	adds	r3, #4
 800b1e0:	f104 0715 	add.w	r7, r4, #21
 800b1e4:	42ba      	cmp	r2, r7
 800b1e6:	bf38      	it	cc
 800b1e8:	2304      	movcc	r3, #4
 800b1ea:	9301      	str	r3, [sp, #4]
 800b1ec:	9b02      	ldr	r3, [sp, #8]
 800b1ee:	9103      	str	r1, [sp, #12]
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	d80c      	bhi.n	800b20e <__multiply+0x9e>
 800b1f4:	2e00      	cmp	r6, #0
 800b1f6:	dd03      	ble.n	800b200 <__multiply+0x90>
 800b1f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d05b      	beq.n	800b2b8 <__multiply+0x148>
 800b200:	6106      	str	r6, [r0, #16]
 800b202:	b005      	add	sp, #20
 800b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b208:	f843 2b04 	str.w	r2, [r3], #4
 800b20c:	e7d8      	b.n	800b1c0 <__multiply+0x50>
 800b20e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b212:	f1ba 0f00 	cmp.w	sl, #0
 800b216:	d024      	beq.n	800b262 <__multiply+0xf2>
 800b218:	f104 0e14 	add.w	lr, r4, #20
 800b21c:	46a9      	mov	r9, r5
 800b21e:	f04f 0c00 	mov.w	ip, #0
 800b222:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b226:	f8d9 3000 	ldr.w	r3, [r9]
 800b22a:	fa1f fb87 	uxth.w	fp, r7
 800b22e:	b29b      	uxth	r3, r3
 800b230:	fb0a 330b 	mla	r3, sl, fp, r3
 800b234:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b238:	f8d9 7000 	ldr.w	r7, [r9]
 800b23c:	4463      	add	r3, ip
 800b23e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b242:	fb0a c70b 	mla	r7, sl, fp, ip
 800b246:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b250:	4572      	cmp	r2, lr
 800b252:	f849 3b04 	str.w	r3, [r9], #4
 800b256:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b25a:	d8e2      	bhi.n	800b222 <__multiply+0xb2>
 800b25c:	9b01      	ldr	r3, [sp, #4]
 800b25e:	f845 c003 	str.w	ip, [r5, r3]
 800b262:	9b03      	ldr	r3, [sp, #12]
 800b264:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b268:	3104      	adds	r1, #4
 800b26a:	f1b9 0f00 	cmp.w	r9, #0
 800b26e:	d021      	beq.n	800b2b4 <__multiply+0x144>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	f104 0c14 	add.w	ip, r4, #20
 800b276:	46ae      	mov	lr, r5
 800b278:	f04f 0a00 	mov.w	sl, #0
 800b27c:	f8bc b000 	ldrh.w	fp, [ip]
 800b280:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b284:	fb09 770b 	mla	r7, r9, fp, r7
 800b288:	4457      	add	r7, sl
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b290:	f84e 3b04 	str.w	r3, [lr], #4
 800b294:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b298:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b29c:	f8be 3000 	ldrh.w	r3, [lr]
 800b2a0:	fb09 330a 	mla	r3, r9, sl, r3
 800b2a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b2a8:	4562      	cmp	r2, ip
 800b2aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2ae:	d8e5      	bhi.n	800b27c <__multiply+0x10c>
 800b2b0:	9f01      	ldr	r7, [sp, #4]
 800b2b2:	51eb      	str	r3, [r5, r7]
 800b2b4:	3504      	adds	r5, #4
 800b2b6:	e799      	b.n	800b1ec <__multiply+0x7c>
 800b2b8:	3e01      	subs	r6, #1
 800b2ba:	e79b      	b.n	800b1f4 <__multiply+0x84>
 800b2bc:	0800d911 	.word	0x0800d911
 800b2c0:	0800d922 	.word	0x0800d922

0800b2c4 <__pow5mult>:
 800b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	4615      	mov	r5, r2
 800b2ca:	f012 0203 	ands.w	r2, r2, #3
 800b2ce:	4607      	mov	r7, r0
 800b2d0:	460e      	mov	r6, r1
 800b2d2:	d007      	beq.n	800b2e4 <__pow5mult+0x20>
 800b2d4:	4c25      	ldr	r4, [pc, #148]	@ (800b36c <__pow5mult+0xa8>)
 800b2d6:	3a01      	subs	r2, #1
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2de:	f7ff fe55 	bl	800af8c <__multadd>
 800b2e2:	4606      	mov	r6, r0
 800b2e4:	10ad      	asrs	r5, r5, #2
 800b2e6:	d03d      	beq.n	800b364 <__pow5mult+0xa0>
 800b2e8:	69fc      	ldr	r4, [r7, #28]
 800b2ea:	b97c      	cbnz	r4, 800b30c <__pow5mult+0x48>
 800b2ec:	2010      	movs	r0, #16
 800b2ee:	f7ff fd35 	bl	800ad5c <malloc>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	61f8      	str	r0, [r7, #28]
 800b2f6:	b928      	cbnz	r0, 800b304 <__pow5mult+0x40>
 800b2f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b370 <__pow5mult+0xac>)
 800b2fa:	481e      	ldr	r0, [pc, #120]	@ (800b374 <__pow5mult+0xb0>)
 800b2fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b300:	f001 fd5a 	bl	800cdb8 <__assert_func>
 800b304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b308:	6004      	str	r4, [r0, #0]
 800b30a:	60c4      	str	r4, [r0, #12]
 800b30c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b314:	b94c      	cbnz	r4, 800b32a <__pow5mult+0x66>
 800b316:	f240 2171 	movw	r1, #625	@ 0x271
 800b31a:	4638      	mov	r0, r7
 800b31c:	f7ff ff12 	bl	800b144 <__i2b>
 800b320:	2300      	movs	r3, #0
 800b322:	f8c8 0008 	str.w	r0, [r8, #8]
 800b326:	4604      	mov	r4, r0
 800b328:	6003      	str	r3, [r0, #0]
 800b32a:	f04f 0900 	mov.w	r9, #0
 800b32e:	07eb      	lsls	r3, r5, #31
 800b330:	d50a      	bpl.n	800b348 <__pow5mult+0x84>
 800b332:	4631      	mov	r1, r6
 800b334:	4622      	mov	r2, r4
 800b336:	4638      	mov	r0, r7
 800b338:	f7ff ff1a 	bl	800b170 <__multiply>
 800b33c:	4631      	mov	r1, r6
 800b33e:	4680      	mov	r8, r0
 800b340:	4638      	mov	r0, r7
 800b342:	f7ff fe01 	bl	800af48 <_Bfree>
 800b346:	4646      	mov	r6, r8
 800b348:	106d      	asrs	r5, r5, #1
 800b34a:	d00b      	beq.n	800b364 <__pow5mult+0xa0>
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	b938      	cbnz	r0, 800b360 <__pow5mult+0x9c>
 800b350:	4622      	mov	r2, r4
 800b352:	4621      	mov	r1, r4
 800b354:	4638      	mov	r0, r7
 800b356:	f7ff ff0b 	bl	800b170 <__multiply>
 800b35a:	6020      	str	r0, [r4, #0]
 800b35c:	f8c0 9000 	str.w	r9, [r0]
 800b360:	4604      	mov	r4, r0
 800b362:	e7e4      	b.n	800b32e <__pow5mult+0x6a>
 800b364:	4630      	mov	r0, r6
 800b366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36a:	bf00      	nop
 800b36c:	0800d97c 	.word	0x0800d97c
 800b370:	0800d8a2 	.word	0x0800d8a2
 800b374:	0800d922 	.word	0x0800d922

0800b378 <__lshift>:
 800b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	460c      	mov	r4, r1
 800b37e:	6849      	ldr	r1, [r1, #4]
 800b380:	6923      	ldr	r3, [r4, #16]
 800b382:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b386:	68a3      	ldr	r3, [r4, #8]
 800b388:	4607      	mov	r7, r0
 800b38a:	4691      	mov	r9, r2
 800b38c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b390:	f108 0601 	add.w	r6, r8, #1
 800b394:	42b3      	cmp	r3, r6
 800b396:	db0b      	blt.n	800b3b0 <__lshift+0x38>
 800b398:	4638      	mov	r0, r7
 800b39a:	f7ff fd95 	bl	800aec8 <_Balloc>
 800b39e:	4605      	mov	r5, r0
 800b3a0:	b948      	cbnz	r0, 800b3b6 <__lshift+0x3e>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	4b28      	ldr	r3, [pc, #160]	@ (800b448 <__lshift+0xd0>)
 800b3a6:	4829      	ldr	r0, [pc, #164]	@ (800b44c <__lshift+0xd4>)
 800b3a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b3ac:	f001 fd04 	bl	800cdb8 <__assert_func>
 800b3b0:	3101      	adds	r1, #1
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	e7ee      	b.n	800b394 <__lshift+0x1c>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f100 0114 	add.w	r1, r0, #20
 800b3bc:	f100 0210 	add.w	r2, r0, #16
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	4553      	cmp	r3, sl
 800b3c4:	db33      	blt.n	800b42e <__lshift+0xb6>
 800b3c6:	6920      	ldr	r0, [r4, #16]
 800b3c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3cc:	f104 0314 	add.w	r3, r4, #20
 800b3d0:	f019 091f 	ands.w	r9, r9, #31
 800b3d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3dc:	d02b      	beq.n	800b436 <__lshift+0xbe>
 800b3de:	f1c9 0e20 	rsb	lr, r9, #32
 800b3e2:	468a      	mov	sl, r1
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	6818      	ldr	r0, [r3, #0]
 800b3e8:	fa00 f009 	lsl.w	r0, r0, r9
 800b3ec:	4310      	orrs	r0, r2
 800b3ee:	f84a 0b04 	str.w	r0, [sl], #4
 800b3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f6:	459c      	cmp	ip, r3
 800b3f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3fc:	d8f3      	bhi.n	800b3e6 <__lshift+0x6e>
 800b3fe:	ebac 0304 	sub.w	r3, ip, r4
 800b402:	3b15      	subs	r3, #21
 800b404:	f023 0303 	bic.w	r3, r3, #3
 800b408:	3304      	adds	r3, #4
 800b40a:	f104 0015 	add.w	r0, r4, #21
 800b40e:	4584      	cmp	ip, r0
 800b410:	bf38      	it	cc
 800b412:	2304      	movcc	r3, #4
 800b414:	50ca      	str	r2, [r1, r3]
 800b416:	b10a      	cbz	r2, 800b41c <__lshift+0xa4>
 800b418:	f108 0602 	add.w	r6, r8, #2
 800b41c:	3e01      	subs	r6, #1
 800b41e:	4638      	mov	r0, r7
 800b420:	612e      	str	r6, [r5, #16]
 800b422:	4621      	mov	r1, r4
 800b424:	f7ff fd90 	bl	800af48 <_Bfree>
 800b428:	4628      	mov	r0, r5
 800b42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b42e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b432:	3301      	adds	r3, #1
 800b434:	e7c5      	b.n	800b3c2 <__lshift+0x4a>
 800b436:	3904      	subs	r1, #4
 800b438:	f853 2b04 	ldr.w	r2, [r3], #4
 800b43c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b440:	459c      	cmp	ip, r3
 800b442:	d8f9      	bhi.n	800b438 <__lshift+0xc0>
 800b444:	e7ea      	b.n	800b41c <__lshift+0xa4>
 800b446:	bf00      	nop
 800b448:	0800d911 	.word	0x0800d911
 800b44c:	0800d922 	.word	0x0800d922

0800b450 <__mcmp>:
 800b450:	690a      	ldr	r2, [r1, #16]
 800b452:	4603      	mov	r3, r0
 800b454:	6900      	ldr	r0, [r0, #16]
 800b456:	1a80      	subs	r0, r0, r2
 800b458:	b530      	push	{r4, r5, lr}
 800b45a:	d10e      	bne.n	800b47a <__mcmp+0x2a>
 800b45c:	3314      	adds	r3, #20
 800b45e:	3114      	adds	r1, #20
 800b460:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b464:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b468:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b46c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b470:	4295      	cmp	r5, r2
 800b472:	d003      	beq.n	800b47c <__mcmp+0x2c>
 800b474:	d205      	bcs.n	800b482 <__mcmp+0x32>
 800b476:	f04f 30ff 	mov.w	r0, #4294967295
 800b47a:	bd30      	pop	{r4, r5, pc}
 800b47c:	42a3      	cmp	r3, r4
 800b47e:	d3f3      	bcc.n	800b468 <__mcmp+0x18>
 800b480:	e7fb      	b.n	800b47a <__mcmp+0x2a>
 800b482:	2001      	movs	r0, #1
 800b484:	e7f9      	b.n	800b47a <__mcmp+0x2a>
	...

0800b488 <__mdiff>:
 800b488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	4689      	mov	r9, r1
 800b48e:	4606      	mov	r6, r0
 800b490:	4611      	mov	r1, r2
 800b492:	4648      	mov	r0, r9
 800b494:	4614      	mov	r4, r2
 800b496:	f7ff ffdb 	bl	800b450 <__mcmp>
 800b49a:	1e05      	subs	r5, r0, #0
 800b49c:	d112      	bne.n	800b4c4 <__mdiff+0x3c>
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f7ff fd11 	bl	800aec8 <_Balloc>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	b928      	cbnz	r0, 800b4b6 <__mdiff+0x2e>
 800b4aa:	4b3f      	ldr	r3, [pc, #252]	@ (800b5a8 <__mdiff+0x120>)
 800b4ac:	f240 2137 	movw	r1, #567	@ 0x237
 800b4b0:	483e      	ldr	r0, [pc, #248]	@ (800b5ac <__mdiff+0x124>)
 800b4b2:	f001 fc81 	bl	800cdb8 <__assert_func>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4bc:	4610      	mov	r0, r2
 800b4be:	b003      	add	sp, #12
 800b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c4:	bfbc      	itt	lt
 800b4c6:	464b      	movlt	r3, r9
 800b4c8:	46a1      	movlt	r9, r4
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b4d0:	bfba      	itte	lt
 800b4d2:	461c      	movlt	r4, r3
 800b4d4:	2501      	movlt	r5, #1
 800b4d6:	2500      	movge	r5, #0
 800b4d8:	f7ff fcf6 	bl	800aec8 <_Balloc>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	b918      	cbnz	r0, 800b4e8 <__mdiff+0x60>
 800b4e0:	4b31      	ldr	r3, [pc, #196]	@ (800b5a8 <__mdiff+0x120>)
 800b4e2:	f240 2145 	movw	r1, #581	@ 0x245
 800b4e6:	e7e3      	b.n	800b4b0 <__mdiff+0x28>
 800b4e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b4ec:	6926      	ldr	r6, [r4, #16]
 800b4ee:	60c5      	str	r5, [r0, #12]
 800b4f0:	f109 0310 	add.w	r3, r9, #16
 800b4f4:	f109 0514 	add.w	r5, r9, #20
 800b4f8:	f104 0e14 	add.w	lr, r4, #20
 800b4fc:	f100 0b14 	add.w	fp, r0, #20
 800b500:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b504:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	46d9      	mov	r9, fp
 800b50c:	f04f 0c00 	mov.w	ip, #0
 800b510:	9b01      	ldr	r3, [sp, #4]
 800b512:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b516:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b51a:	9301      	str	r3, [sp, #4]
 800b51c:	fa1f f38a 	uxth.w	r3, sl
 800b520:	4619      	mov	r1, r3
 800b522:	b283      	uxth	r3, r0
 800b524:	1acb      	subs	r3, r1, r3
 800b526:	0c00      	lsrs	r0, r0, #16
 800b528:	4463      	add	r3, ip
 800b52a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b52e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b532:	b29b      	uxth	r3, r3
 800b534:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b538:	4576      	cmp	r6, lr
 800b53a:	f849 3b04 	str.w	r3, [r9], #4
 800b53e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b542:	d8e5      	bhi.n	800b510 <__mdiff+0x88>
 800b544:	1b33      	subs	r3, r6, r4
 800b546:	3b15      	subs	r3, #21
 800b548:	f023 0303 	bic.w	r3, r3, #3
 800b54c:	3415      	adds	r4, #21
 800b54e:	3304      	adds	r3, #4
 800b550:	42a6      	cmp	r6, r4
 800b552:	bf38      	it	cc
 800b554:	2304      	movcc	r3, #4
 800b556:	441d      	add	r5, r3
 800b558:	445b      	add	r3, fp
 800b55a:	461e      	mov	r6, r3
 800b55c:	462c      	mov	r4, r5
 800b55e:	4544      	cmp	r4, r8
 800b560:	d30e      	bcc.n	800b580 <__mdiff+0xf8>
 800b562:	f108 0103 	add.w	r1, r8, #3
 800b566:	1b49      	subs	r1, r1, r5
 800b568:	f021 0103 	bic.w	r1, r1, #3
 800b56c:	3d03      	subs	r5, #3
 800b56e:	45a8      	cmp	r8, r5
 800b570:	bf38      	it	cc
 800b572:	2100      	movcc	r1, #0
 800b574:	440b      	add	r3, r1
 800b576:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b57a:	b191      	cbz	r1, 800b5a2 <__mdiff+0x11a>
 800b57c:	6117      	str	r7, [r2, #16]
 800b57e:	e79d      	b.n	800b4bc <__mdiff+0x34>
 800b580:	f854 1b04 	ldr.w	r1, [r4], #4
 800b584:	46e6      	mov	lr, ip
 800b586:	0c08      	lsrs	r0, r1, #16
 800b588:	fa1c fc81 	uxtah	ip, ip, r1
 800b58c:	4471      	add	r1, lr
 800b58e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b592:	b289      	uxth	r1, r1
 800b594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b598:	f846 1b04 	str.w	r1, [r6], #4
 800b59c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5a0:	e7dd      	b.n	800b55e <__mdiff+0xd6>
 800b5a2:	3f01      	subs	r7, #1
 800b5a4:	e7e7      	b.n	800b576 <__mdiff+0xee>
 800b5a6:	bf00      	nop
 800b5a8:	0800d911 	.word	0x0800d911
 800b5ac:	0800d922 	.word	0x0800d922

0800b5b0 <__ulp>:
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	ed8d 0b00 	vstr	d0, [sp]
 800b5b6:	9a01      	ldr	r2, [sp, #4]
 800b5b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f8 <__ulp+0x48>)
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dc08      	bgt.n	800b5d6 <__ulp+0x26>
 800b5c4:	425b      	negs	r3, r3
 800b5c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b5ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5ce:	da04      	bge.n	800b5da <__ulp+0x2a>
 800b5d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b5d4:	4113      	asrs	r3, r2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	e008      	b.n	800b5ec <__ulp+0x3c>
 800b5da:	f1a2 0314 	sub.w	r3, r2, #20
 800b5de:	2b1e      	cmp	r3, #30
 800b5e0:	bfda      	itte	le
 800b5e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b5e6:	40da      	lsrle	r2, r3
 800b5e8:	2201      	movgt	r2, #1
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	4610      	mov	r0, r2
 800b5f0:	ec41 0b10 	vmov	d0, r0, r1
 800b5f4:	b002      	add	sp, #8
 800b5f6:	4770      	bx	lr
 800b5f8:	7ff00000 	.word	0x7ff00000

0800b5fc <__b2d>:
 800b5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b600:	6906      	ldr	r6, [r0, #16]
 800b602:	f100 0814 	add.w	r8, r0, #20
 800b606:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b60a:	1f37      	subs	r7, r6, #4
 800b60c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b610:	4610      	mov	r0, r2
 800b612:	f7ff fd4b 	bl	800b0ac <__hi0bits>
 800b616:	f1c0 0320 	rsb	r3, r0, #32
 800b61a:	280a      	cmp	r0, #10
 800b61c:	600b      	str	r3, [r1, #0]
 800b61e:	491b      	ldr	r1, [pc, #108]	@ (800b68c <__b2d+0x90>)
 800b620:	dc15      	bgt.n	800b64e <__b2d+0x52>
 800b622:	f1c0 0c0b 	rsb	ip, r0, #11
 800b626:	fa22 f30c 	lsr.w	r3, r2, ip
 800b62a:	45b8      	cmp	r8, r7
 800b62c:	ea43 0501 	orr.w	r5, r3, r1
 800b630:	bf34      	ite	cc
 800b632:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b636:	2300      	movcs	r3, #0
 800b638:	3015      	adds	r0, #21
 800b63a:	fa02 f000 	lsl.w	r0, r2, r0
 800b63e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b642:	4303      	orrs	r3, r0
 800b644:	461c      	mov	r4, r3
 800b646:	ec45 4b10 	vmov	d0, r4, r5
 800b64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b64e:	45b8      	cmp	r8, r7
 800b650:	bf3a      	itte	cc
 800b652:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b656:	f1a6 0708 	subcc.w	r7, r6, #8
 800b65a:	2300      	movcs	r3, #0
 800b65c:	380b      	subs	r0, #11
 800b65e:	d012      	beq.n	800b686 <__b2d+0x8a>
 800b660:	f1c0 0120 	rsb	r1, r0, #32
 800b664:	fa23 f401 	lsr.w	r4, r3, r1
 800b668:	4082      	lsls	r2, r0
 800b66a:	4322      	orrs	r2, r4
 800b66c:	4547      	cmp	r7, r8
 800b66e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b672:	bf8c      	ite	hi
 800b674:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b678:	2200      	movls	r2, #0
 800b67a:	4083      	lsls	r3, r0
 800b67c:	40ca      	lsrs	r2, r1
 800b67e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b682:	4313      	orrs	r3, r2
 800b684:	e7de      	b.n	800b644 <__b2d+0x48>
 800b686:	ea42 0501 	orr.w	r5, r2, r1
 800b68a:	e7db      	b.n	800b644 <__b2d+0x48>
 800b68c:	3ff00000 	.word	0x3ff00000

0800b690 <__d2b>:
 800b690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b694:	460f      	mov	r7, r1
 800b696:	2101      	movs	r1, #1
 800b698:	ec59 8b10 	vmov	r8, r9, d0
 800b69c:	4616      	mov	r6, r2
 800b69e:	f7ff fc13 	bl	800aec8 <_Balloc>
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	b930      	cbnz	r0, 800b6b4 <__d2b+0x24>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	4b23      	ldr	r3, [pc, #140]	@ (800b738 <__d2b+0xa8>)
 800b6aa:	4824      	ldr	r0, [pc, #144]	@ (800b73c <__d2b+0xac>)
 800b6ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800b6b0:	f001 fb82 	bl	800cdb8 <__assert_func>
 800b6b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6bc:	b10d      	cbz	r5, 800b6c2 <__d2b+0x32>
 800b6be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6c2:	9301      	str	r3, [sp, #4]
 800b6c4:	f1b8 0300 	subs.w	r3, r8, #0
 800b6c8:	d023      	beq.n	800b712 <__d2b+0x82>
 800b6ca:	4668      	mov	r0, sp
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	f7ff fd0c 	bl	800b0ea <__lo0bits>
 800b6d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6d6:	b1d0      	cbz	r0, 800b70e <__d2b+0x7e>
 800b6d8:	f1c0 0320 	rsb	r3, r0, #32
 800b6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e0:	430b      	orrs	r3, r1
 800b6e2:	40c2      	lsrs	r2, r0
 800b6e4:	6163      	str	r3, [r4, #20]
 800b6e6:	9201      	str	r2, [sp, #4]
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	61a3      	str	r3, [r4, #24]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	bf0c      	ite	eq
 800b6f0:	2201      	moveq	r2, #1
 800b6f2:	2202      	movne	r2, #2
 800b6f4:	6122      	str	r2, [r4, #16]
 800b6f6:	b1a5      	cbz	r5, 800b722 <__d2b+0x92>
 800b6f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6fc:	4405      	add	r5, r0
 800b6fe:	603d      	str	r5, [r7, #0]
 800b700:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b704:	6030      	str	r0, [r6, #0]
 800b706:	4620      	mov	r0, r4
 800b708:	b003      	add	sp, #12
 800b70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b70e:	6161      	str	r1, [r4, #20]
 800b710:	e7ea      	b.n	800b6e8 <__d2b+0x58>
 800b712:	a801      	add	r0, sp, #4
 800b714:	f7ff fce9 	bl	800b0ea <__lo0bits>
 800b718:	9b01      	ldr	r3, [sp, #4]
 800b71a:	6163      	str	r3, [r4, #20]
 800b71c:	3020      	adds	r0, #32
 800b71e:	2201      	movs	r2, #1
 800b720:	e7e8      	b.n	800b6f4 <__d2b+0x64>
 800b722:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b726:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b72a:	6038      	str	r0, [r7, #0]
 800b72c:	6918      	ldr	r0, [r3, #16]
 800b72e:	f7ff fcbd 	bl	800b0ac <__hi0bits>
 800b732:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b736:	e7e5      	b.n	800b704 <__d2b+0x74>
 800b738:	0800d911 	.word	0x0800d911
 800b73c:	0800d922 	.word	0x0800d922

0800b740 <__ratio>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	b085      	sub	sp, #20
 800b746:	e9cd 1000 	strd	r1, r0, [sp]
 800b74a:	a902      	add	r1, sp, #8
 800b74c:	f7ff ff56 	bl	800b5fc <__b2d>
 800b750:	9800      	ldr	r0, [sp, #0]
 800b752:	a903      	add	r1, sp, #12
 800b754:	ec55 4b10 	vmov	r4, r5, d0
 800b758:	f7ff ff50 	bl	800b5fc <__b2d>
 800b75c:	9b01      	ldr	r3, [sp, #4]
 800b75e:	6919      	ldr	r1, [r3, #16]
 800b760:	9b00      	ldr	r3, [sp, #0]
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	1ac9      	subs	r1, r1, r3
 800b766:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b76a:	1a9b      	subs	r3, r3, r2
 800b76c:	ec5b ab10 	vmov	sl, fp, d0
 800b770:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b774:	2b00      	cmp	r3, #0
 800b776:	bfce      	itee	gt
 800b778:	462a      	movgt	r2, r5
 800b77a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b77e:	465a      	movle	r2, fp
 800b780:	462f      	mov	r7, r5
 800b782:	46d9      	mov	r9, fp
 800b784:	bfcc      	ite	gt
 800b786:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b78a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b78e:	464b      	mov	r3, r9
 800b790:	4652      	mov	r2, sl
 800b792:	4620      	mov	r0, r4
 800b794:	4639      	mov	r1, r7
 800b796:	f7f5 f859 	bl	800084c <__aeabi_ddiv>
 800b79a:	ec41 0b10 	vmov	d0, r0, r1
 800b79e:	b005      	add	sp, #20
 800b7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7a4 <__copybits>:
 800b7a4:	3901      	subs	r1, #1
 800b7a6:	b570      	push	{r4, r5, r6, lr}
 800b7a8:	1149      	asrs	r1, r1, #5
 800b7aa:	6914      	ldr	r4, [r2, #16]
 800b7ac:	3101      	adds	r1, #1
 800b7ae:	f102 0314 	add.w	r3, r2, #20
 800b7b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7ba:	1f05      	subs	r5, r0, #4
 800b7bc:	42a3      	cmp	r3, r4
 800b7be:	d30c      	bcc.n	800b7da <__copybits+0x36>
 800b7c0:	1aa3      	subs	r3, r4, r2
 800b7c2:	3b11      	subs	r3, #17
 800b7c4:	f023 0303 	bic.w	r3, r3, #3
 800b7c8:	3211      	adds	r2, #17
 800b7ca:	42a2      	cmp	r2, r4
 800b7cc:	bf88      	it	hi
 800b7ce:	2300      	movhi	r3, #0
 800b7d0:	4418      	add	r0, r3
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	4288      	cmp	r0, r1
 800b7d6:	d305      	bcc.n	800b7e4 <__copybits+0x40>
 800b7d8:	bd70      	pop	{r4, r5, r6, pc}
 800b7da:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7de:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7e2:	e7eb      	b.n	800b7bc <__copybits+0x18>
 800b7e4:	f840 3b04 	str.w	r3, [r0], #4
 800b7e8:	e7f4      	b.n	800b7d4 <__copybits+0x30>

0800b7ea <__any_on>:
 800b7ea:	f100 0214 	add.w	r2, r0, #20
 800b7ee:	6900      	ldr	r0, [r0, #16]
 800b7f0:	114b      	asrs	r3, r1, #5
 800b7f2:	4298      	cmp	r0, r3
 800b7f4:	b510      	push	{r4, lr}
 800b7f6:	db11      	blt.n	800b81c <__any_on+0x32>
 800b7f8:	dd0a      	ble.n	800b810 <__any_on+0x26>
 800b7fa:	f011 011f 	ands.w	r1, r1, #31
 800b7fe:	d007      	beq.n	800b810 <__any_on+0x26>
 800b800:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b804:	fa24 f001 	lsr.w	r0, r4, r1
 800b808:	fa00 f101 	lsl.w	r1, r0, r1
 800b80c:	428c      	cmp	r4, r1
 800b80e:	d10b      	bne.n	800b828 <__any_on+0x3e>
 800b810:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b814:	4293      	cmp	r3, r2
 800b816:	d803      	bhi.n	800b820 <__any_on+0x36>
 800b818:	2000      	movs	r0, #0
 800b81a:	bd10      	pop	{r4, pc}
 800b81c:	4603      	mov	r3, r0
 800b81e:	e7f7      	b.n	800b810 <__any_on+0x26>
 800b820:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b824:	2900      	cmp	r1, #0
 800b826:	d0f5      	beq.n	800b814 <__any_on+0x2a>
 800b828:	2001      	movs	r0, #1
 800b82a:	e7f6      	b.n	800b81a <__any_on+0x30>

0800b82c <sulp>:
 800b82c:	b570      	push	{r4, r5, r6, lr}
 800b82e:	4604      	mov	r4, r0
 800b830:	460d      	mov	r5, r1
 800b832:	ec45 4b10 	vmov	d0, r4, r5
 800b836:	4616      	mov	r6, r2
 800b838:	f7ff feba 	bl	800b5b0 <__ulp>
 800b83c:	ec51 0b10 	vmov	r0, r1, d0
 800b840:	b17e      	cbz	r6, 800b862 <sulp+0x36>
 800b842:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b846:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	dd09      	ble.n	800b862 <sulp+0x36>
 800b84e:	051b      	lsls	r3, r3, #20
 800b850:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b854:	2400      	movs	r4, #0
 800b856:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b85a:	4622      	mov	r2, r4
 800b85c:	462b      	mov	r3, r5
 800b85e:	f7f4 fecb 	bl	80005f8 <__aeabi_dmul>
 800b862:	ec41 0b10 	vmov	d0, r0, r1
 800b866:	bd70      	pop	{r4, r5, r6, pc}

0800b868 <_strtod_l>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	b09f      	sub	sp, #124	@ 0x7c
 800b86e:	460c      	mov	r4, r1
 800b870:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b872:	2200      	movs	r2, #0
 800b874:	921a      	str	r2, [sp, #104]	@ 0x68
 800b876:	9005      	str	r0, [sp, #20]
 800b878:	f04f 0a00 	mov.w	sl, #0
 800b87c:	f04f 0b00 	mov.w	fp, #0
 800b880:	460a      	mov	r2, r1
 800b882:	9219      	str	r2, [sp, #100]	@ 0x64
 800b884:	7811      	ldrb	r1, [r2, #0]
 800b886:	292b      	cmp	r1, #43	@ 0x2b
 800b888:	d04a      	beq.n	800b920 <_strtod_l+0xb8>
 800b88a:	d838      	bhi.n	800b8fe <_strtod_l+0x96>
 800b88c:	290d      	cmp	r1, #13
 800b88e:	d832      	bhi.n	800b8f6 <_strtod_l+0x8e>
 800b890:	2908      	cmp	r1, #8
 800b892:	d832      	bhi.n	800b8fa <_strtod_l+0x92>
 800b894:	2900      	cmp	r1, #0
 800b896:	d03b      	beq.n	800b910 <_strtod_l+0xa8>
 800b898:	2200      	movs	r2, #0
 800b89a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b89c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b89e:	782a      	ldrb	r2, [r5, #0]
 800b8a0:	2a30      	cmp	r2, #48	@ 0x30
 800b8a2:	f040 80b3 	bne.w	800ba0c <_strtod_l+0x1a4>
 800b8a6:	786a      	ldrb	r2, [r5, #1]
 800b8a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b8ac:	2a58      	cmp	r2, #88	@ 0x58
 800b8ae:	d16e      	bne.n	800b98e <_strtod_l+0x126>
 800b8b0:	9302      	str	r3, [sp, #8]
 800b8b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	4a8e      	ldr	r2, [pc, #568]	@ (800baf4 <_strtod_l+0x28c>)
 800b8bc:	9805      	ldr	r0, [sp, #20]
 800b8be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b8c0:	a919      	add	r1, sp, #100	@ 0x64
 800b8c2:	f001 fb13 	bl	800ceec <__gethex>
 800b8c6:	f010 060f 	ands.w	r6, r0, #15
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	d005      	beq.n	800b8da <_strtod_l+0x72>
 800b8ce:	2e06      	cmp	r6, #6
 800b8d0:	d128      	bne.n	800b924 <_strtod_l+0xbc>
 800b8d2:	3501      	adds	r5, #1
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b8d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f040 858e 	bne.w	800c3fe <_strtod_l+0xb96>
 800b8e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8e4:	b1cb      	cbz	r3, 800b91a <_strtod_l+0xb2>
 800b8e6:	4652      	mov	r2, sl
 800b8e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b8ec:	ec43 2b10 	vmov	d0, r2, r3
 800b8f0:	b01f      	add	sp, #124	@ 0x7c
 800b8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f6:	2920      	cmp	r1, #32
 800b8f8:	d1ce      	bne.n	800b898 <_strtod_l+0x30>
 800b8fa:	3201      	adds	r2, #1
 800b8fc:	e7c1      	b.n	800b882 <_strtod_l+0x1a>
 800b8fe:	292d      	cmp	r1, #45	@ 0x2d
 800b900:	d1ca      	bne.n	800b898 <_strtod_l+0x30>
 800b902:	2101      	movs	r1, #1
 800b904:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b906:	1c51      	adds	r1, r2, #1
 800b908:	9119      	str	r1, [sp, #100]	@ 0x64
 800b90a:	7852      	ldrb	r2, [r2, #1]
 800b90c:	2a00      	cmp	r2, #0
 800b90e:	d1c5      	bne.n	800b89c <_strtod_l+0x34>
 800b910:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b912:	9419      	str	r4, [sp, #100]	@ 0x64
 800b914:	2b00      	cmp	r3, #0
 800b916:	f040 8570 	bne.w	800c3fa <_strtod_l+0xb92>
 800b91a:	4652      	mov	r2, sl
 800b91c:	465b      	mov	r3, fp
 800b91e:	e7e5      	b.n	800b8ec <_strtod_l+0x84>
 800b920:	2100      	movs	r1, #0
 800b922:	e7ef      	b.n	800b904 <_strtod_l+0x9c>
 800b924:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b926:	b13a      	cbz	r2, 800b938 <_strtod_l+0xd0>
 800b928:	2135      	movs	r1, #53	@ 0x35
 800b92a:	a81c      	add	r0, sp, #112	@ 0x70
 800b92c:	f7ff ff3a 	bl	800b7a4 <__copybits>
 800b930:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b932:	9805      	ldr	r0, [sp, #20]
 800b934:	f7ff fb08 	bl	800af48 <_Bfree>
 800b938:	3e01      	subs	r6, #1
 800b93a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b93c:	2e04      	cmp	r6, #4
 800b93e:	d806      	bhi.n	800b94e <_strtod_l+0xe6>
 800b940:	e8df f006 	tbb	[pc, r6]
 800b944:	201d0314 	.word	0x201d0314
 800b948:	14          	.byte	0x14
 800b949:	00          	.byte	0x00
 800b94a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b94e:	05e1      	lsls	r1, r4, #23
 800b950:	bf48      	it	mi
 800b952:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b956:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b95a:	0d1b      	lsrs	r3, r3, #20
 800b95c:	051b      	lsls	r3, r3, #20
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1bb      	bne.n	800b8da <_strtod_l+0x72>
 800b962:	f7fe fb21 	bl	8009fa8 <__errno>
 800b966:	2322      	movs	r3, #34	@ 0x22
 800b968:	6003      	str	r3, [r0, #0]
 800b96a:	e7b6      	b.n	800b8da <_strtod_l+0x72>
 800b96c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b970:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b974:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b978:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b97c:	e7e7      	b.n	800b94e <_strtod_l+0xe6>
 800b97e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bafc <_strtod_l+0x294>
 800b982:	e7e4      	b.n	800b94e <_strtod_l+0xe6>
 800b984:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b988:	f04f 3aff 	mov.w	sl, #4294967295
 800b98c:	e7df      	b.n	800b94e <_strtod_l+0xe6>
 800b98e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	9219      	str	r2, [sp, #100]	@ 0x64
 800b994:	785b      	ldrb	r3, [r3, #1]
 800b996:	2b30      	cmp	r3, #48	@ 0x30
 800b998:	d0f9      	beq.n	800b98e <_strtod_l+0x126>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d09d      	beq.n	800b8da <_strtod_l+0x72>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	9308      	str	r3, [sp, #32]
 800b9aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9ac:	461f      	mov	r7, r3
 800b9ae:	220a      	movs	r2, #10
 800b9b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b9b2:	7805      	ldrb	r5, [r0, #0]
 800b9b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b9b8:	b2d9      	uxtb	r1, r3
 800b9ba:	2909      	cmp	r1, #9
 800b9bc:	d928      	bls.n	800ba10 <_strtod_l+0x1a8>
 800b9be:	494e      	ldr	r1, [pc, #312]	@ (800baf8 <_strtod_l+0x290>)
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f001 f9ad 	bl	800cd20 <strncmp>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d032      	beq.n	800ba30 <_strtod_l+0x1c8>
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	462a      	mov	r2, r5
 800b9ce:	4681      	mov	r9, r0
 800b9d0:	463d      	mov	r5, r7
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2a65      	cmp	r2, #101	@ 0x65
 800b9d6:	d001      	beq.n	800b9dc <_strtod_l+0x174>
 800b9d8:	2a45      	cmp	r2, #69	@ 0x45
 800b9da:	d114      	bne.n	800ba06 <_strtod_l+0x19e>
 800b9dc:	b91d      	cbnz	r5, 800b9e6 <_strtod_l+0x17e>
 800b9de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9e0:	4302      	orrs	r2, r0
 800b9e2:	d095      	beq.n	800b910 <_strtod_l+0xa8>
 800b9e4:	2500      	movs	r5, #0
 800b9e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b9e8:	1c62      	adds	r2, r4, #1
 800b9ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9ec:	7862      	ldrb	r2, [r4, #1]
 800b9ee:	2a2b      	cmp	r2, #43	@ 0x2b
 800b9f0:	d077      	beq.n	800bae2 <_strtod_l+0x27a>
 800b9f2:	2a2d      	cmp	r2, #45	@ 0x2d
 800b9f4:	d07b      	beq.n	800baee <_strtod_l+0x286>
 800b9f6:	f04f 0c00 	mov.w	ip, #0
 800b9fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b9fe:	2909      	cmp	r1, #9
 800ba00:	f240 8082 	bls.w	800bb08 <_strtod_l+0x2a0>
 800ba04:	9419      	str	r4, [sp, #100]	@ 0x64
 800ba06:	f04f 0800 	mov.w	r8, #0
 800ba0a:	e0a2      	b.n	800bb52 <_strtod_l+0x2ea>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	e7c7      	b.n	800b9a0 <_strtod_l+0x138>
 800ba10:	2f08      	cmp	r7, #8
 800ba12:	bfd5      	itete	le
 800ba14:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ba16:	9908      	ldrgt	r1, [sp, #32]
 800ba18:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ba20:	f100 0001 	add.w	r0, r0, #1
 800ba24:	bfd4      	ite	le
 800ba26:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ba28:	9308      	strgt	r3, [sp, #32]
 800ba2a:	3701      	adds	r7, #1
 800ba2c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba2e:	e7bf      	b.n	800b9b0 <_strtod_l+0x148>
 800ba30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba32:	1c5a      	adds	r2, r3, #1
 800ba34:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba36:	785a      	ldrb	r2, [r3, #1]
 800ba38:	b37f      	cbz	r7, 800ba9a <_strtod_l+0x232>
 800ba3a:	4681      	mov	r9, r0
 800ba3c:	463d      	mov	r5, r7
 800ba3e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ba42:	2b09      	cmp	r3, #9
 800ba44:	d912      	bls.n	800ba6c <_strtod_l+0x204>
 800ba46:	2301      	movs	r3, #1
 800ba48:	e7c4      	b.n	800b9d4 <_strtod_l+0x16c>
 800ba4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba50:	785a      	ldrb	r2, [r3, #1]
 800ba52:	3001      	adds	r0, #1
 800ba54:	2a30      	cmp	r2, #48	@ 0x30
 800ba56:	d0f8      	beq.n	800ba4a <_strtod_l+0x1e2>
 800ba58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ba5c:	2b08      	cmp	r3, #8
 800ba5e:	f200 84d3 	bhi.w	800c408 <_strtod_l+0xba0>
 800ba62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba64:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba66:	4681      	mov	r9, r0
 800ba68:	2000      	movs	r0, #0
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	3a30      	subs	r2, #48	@ 0x30
 800ba6e:	f100 0301 	add.w	r3, r0, #1
 800ba72:	d02a      	beq.n	800baca <_strtod_l+0x262>
 800ba74:	4499      	add	r9, r3
 800ba76:	eb00 0c05 	add.w	ip, r0, r5
 800ba7a:	462b      	mov	r3, r5
 800ba7c:	210a      	movs	r1, #10
 800ba7e:	4563      	cmp	r3, ip
 800ba80:	d10d      	bne.n	800ba9e <_strtod_l+0x236>
 800ba82:	1c69      	adds	r1, r5, #1
 800ba84:	4401      	add	r1, r0
 800ba86:	4428      	add	r0, r5
 800ba88:	2808      	cmp	r0, #8
 800ba8a:	dc16      	bgt.n	800baba <_strtod_l+0x252>
 800ba8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba8e:	230a      	movs	r3, #10
 800ba90:	fb03 2300 	mla	r3, r3, r0, r2
 800ba94:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba96:	2300      	movs	r3, #0
 800ba98:	e018      	b.n	800bacc <_strtod_l+0x264>
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	e7da      	b.n	800ba54 <_strtod_l+0x1ec>
 800ba9e:	2b08      	cmp	r3, #8
 800baa0:	f103 0301 	add.w	r3, r3, #1
 800baa4:	dc03      	bgt.n	800baae <_strtod_l+0x246>
 800baa6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800baa8:	434e      	muls	r6, r1
 800baaa:	960a      	str	r6, [sp, #40]	@ 0x28
 800baac:	e7e7      	b.n	800ba7e <_strtod_l+0x216>
 800baae:	2b10      	cmp	r3, #16
 800bab0:	bfde      	ittt	le
 800bab2:	9e08      	ldrle	r6, [sp, #32]
 800bab4:	434e      	mulle	r6, r1
 800bab6:	9608      	strle	r6, [sp, #32]
 800bab8:	e7e1      	b.n	800ba7e <_strtod_l+0x216>
 800baba:	280f      	cmp	r0, #15
 800babc:	dceb      	bgt.n	800ba96 <_strtod_l+0x22e>
 800babe:	9808      	ldr	r0, [sp, #32]
 800bac0:	230a      	movs	r3, #10
 800bac2:	fb03 2300 	mla	r3, r3, r0, r2
 800bac6:	9308      	str	r3, [sp, #32]
 800bac8:	e7e5      	b.n	800ba96 <_strtod_l+0x22e>
 800baca:	4629      	mov	r1, r5
 800bacc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bace:	1c50      	adds	r0, r2, #1
 800bad0:	9019      	str	r0, [sp, #100]	@ 0x64
 800bad2:	7852      	ldrb	r2, [r2, #1]
 800bad4:	4618      	mov	r0, r3
 800bad6:	460d      	mov	r5, r1
 800bad8:	e7b1      	b.n	800ba3e <_strtod_l+0x1d6>
 800bada:	f04f 0900 	mov.w	r9, #0
 800bade:	2301      	movs	r3, #1
 800bae0:	e77d      	b.n	800b9de <_strtod_l+0x176>
 800bae2:	f04f 0c00 	mov.w	ip, #0
 800bae6:	1ca2      	adds	r2, r4, #2
 800bae8:	9219      	str	r2, [sp, #100]	@ 0x64
 800baea:	78a2      	ldrb	r2, [r4, #2]
 800baec:	e785      	b.n	800b9fa <_strtod_l+0x192>
 800baee:	f04f 0c01 	mov.w	ip, #1
 800baf2:	e7f8      	b.n	800bae6 <_strtod_l+0x27e>
 800baf4:	0800da90 	.word	0x0800da90
 800baf8:	0800da78 	.word	0x0800da78
 800bafc:	7ff00000 	.word	0x7ff00000
 800bb00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb02:	1c51      	adds	r1, r2, #1
 800bb04:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb06:	7852      	ldrb	r2, [r2, #1]
 800bb08:	2a30      	cmp	r2, #48	@ 0x30
 800bb0a:	d0f9      	beq.n	800bb00 <_strtod_l+0x298>
 800bb0c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bb10:	2908      	cmp	r1, #8
 800bb12:	f63f af78 	bhi.w	800ba06 <_strtod_l+0x19e>
 800bb16:	3a30      	subs	r2, #48	@ 0x30
 800bb18:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bb1e:	f04f 080a 	mov.w	r8, #10
 800bb22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb24:	1c56      	adds	r6, r2, #1
 800bb26:	9619      	str	r6, [sp, #100]	@ 0x64
 800bb28:	7852      	ldrb	r2, [r2, #1]
 800bb2a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bb2e:	f1be 0f09 	cmp.w	lr, #9
 800bb32:	d939      	bls.n	800bba8 <_strtod_l+0x340>
 800bb34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bb36:	1a76      	subs	r6, r6, r1
 800bb38:	2e08      	cmp	r6, #8
 800bb3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bb3e:	dc03      	bgt.n	800bb48 <_strtod_l+0x2e0>
 800bb40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb42:	4588      	cmp	r8, r1
 800bb44:	bfa8      	it	ge
 800bb46:	4688      	movge	r8, r1
 800bb48:	f1bc 0f00 	cmp.w	ip, #0
 800bb4c:	d001      	beq.n	800bb52 <_strtod_l+0x2ea>
 800bb4e:	f1c8 0800 	rsb	r8, r8, #0
 800bb52:	2d00      	cmp	r5, #0
 800bb54:	d14e      	bne.n	800bbf4 <_strtod_l+0x38c>
 800bb56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb58:	4308      	orrs	r0, r1
 800bb5a:	f47f aebe 	bne.w	800b8da <_strtod_l+0x72>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f47f aed6 	bne.w	800b910 <_strtod_l+0xa8>
 800bb64:	2a69      	cmp	r2, #105	@ 0x69
 800bb66:	d028      	beq.n	800bbba <_strtod_l+0x352>
 800bb68:	dc25      	bgt.n	800bbb6 <_strtod_l+0x34e>
 800bb6a:	2a49      	cmp	r2, #73	@ 0x49
 800bb6c:	d025      	beq.n	800bbba <_strtod_l+0x352>
 800bb6e:	2a4e      	cmp	r2, #78	@ 0x4e
 800bb70:	f47f aece 	bne.w	800b910 <_strtod_l+0xa8>
 800bb74:	499b      	ldr	r1, [pc, #620]	@ (800bde4 <_strtod_l+0x57c>)
 800bb76:	a819      	add	r0, sp, #100	@ 0x64
 800bb78:	f001 fbda 	bl	800d330 <__match>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	f43f aec7 	beq.w	800b910 <_strtod_l+0xa8>
 800bb82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b28      	cmp	r3, #40	@ 0x28
 800bb88:	d12e      	bne.n	800bbe8 <_strtod_l+0x380>
 800bb8a:	4997      	ldr	r1, [pc, #604]	@ (800bde8 <_strtod_l+0x580>)
 800bb8c:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb8e:	a819      	add	r0, sp, #100	@ 0x64
 800bb90:	f001 fbe2 	bl	800d358 <__hexnan>
 800bb94:	2805      	cmp	r0, #5
 800bb96:	d127      	bne.n	800bbe8 <_strtod_l+0x380>
 800bb98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bb9a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bb9e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bba2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bba6:	e698      	b.n	800b8da <_strtod_l+0x72>
 800bba8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bbaa:	fb08 2101 	mla	r1, r8, r1, r2
 800bbae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bbb2:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbb4:	e7b5      	b.n	800bb22 <_strtod_l+0x2ba>
 800bbb6:	2a6e      	cmp	r2, #110	@ 0x6e
 800bbb8:	e7da      	b.n	800bb70 <_strtod_l+0x308>
 800bbba:	498c      	ldr	r1, [pc, #560]	@ (800bdec <_strtod_l+0x584>)
 800bbbc:	a819      	add	r0, sp, #100	@ 0x64
 800bbbe:	f001 fbb7 	bl	800d330 <__match>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	f43f aea4 	beq.w	800b910 <_strtod_l+0xa8>
 800bbc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbca:	4989      	ldr	r1, [pc, #548]	@ (800bdf0 <_strtod_l+0x588>)
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	a819      	add	r0, sp, #100	@ 0x64
 800bbd0:	9319      	str	r3, [sp, #100]	@ 0x64
 800bbd2:	f001 fbad 	bl	800d330 <__match>
 800bbd6:	b910      	cbnz	r0, 800bbde <_strtod_l+0x376>
 800bbd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbda:	3301      	adds	r3, #1
 800bbdc:	9319      	str	r3, [sp, #100]	@ 0x64
 800bbde:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800be00 <_strtod_l+0x598>
 800bbe2:	f04f 0a00 	mov.w	sl, #0
 800bbe6:	e678      	b.n	800b8da <_strtod_l+0x72>
 800bbe8:	4882      	ldr	r0, [pc, #520]	@ (800bdf4 <_strtod_l+0x58c>)
 800bbea:	f001 f8dd 	bl	800cda8 <nan>
 800bbee:	ec5b ab10 	vmov	sl, fp, d0
 800bbf2:	e672      	b.n	800b8da <_strtod_l+0x72>
 800bbf4:	eba8 0309 	sub.w	r3, r8, r9
 800bbf8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbfc:	2f00      	cmp	r7, #0
 800bbfe:	bf08      	it	eq
 800bc00:	462f      	moveq	r7, r5
 800bc02:	2d10      	cmp	r5, #16
 800bc04:	462c      	mov	r4, r5
 800bc06:	bfa8      	it	ge
 800bc08:	2410      	movge	r4, #16
 800bc0a:	f7f4 fc7b 	bl	8000504 <__aeabi_ui2d>
 800bc0e:	2d09      	cmp	r5, #9
 800bc10:	4682      	mov	sl, r0
 800bc12:	468b      	mov	fp, r1
 800bc14:	dc13      	bgt.n	800bc3e <_strtod_l+0x3d6>
 800bc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f43f ae5e 	beq.w	800b8da <_strtod_l+0x72>
 800bc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc20:	dd78      	ble.n	800bd14 <_strtod_l+0x4ac>
 800bc22:	2b16      	cmp	r3, #22
 800bc24:	dc5f      	bgt.n	800bce6 <_strtod_l+0x47e>
 800bc26:	4974      	ldr	r1, [pc, #464]	@ (800bdf8 <_strtod_l+0x590>)
 800bc28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc30:	4652      	mov	r2, sl
 800bc32:	465b      	mov	r3, fp
 800bc34:	f7f4 fce0 	bl	80005f8 <__aeabi_dmul>
 800bc38:	4682      	mov	sl, r0
 800bc3a:	468b      	mov	fp, r1
 800bc3c:	e64d      	b.n	800b8da <_strtod_l+0x72>
 800bc3e:	4b6e      	ldr	r3, [pc, #440]	@ (800bdf8 <_strtod_l+0x590>)
 800bc40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bc48:	f7f4 fcd6 	bl	80005f8 <__aeabi_dmul>
 800bc4c:	4682      	mov	sl, r0
 800bc4e:	9808      	ldr	r0, [sp, #32]
 800bc50:	468b      	mov	fp, r1
 800bc52:	f7f4 fc57 	bl	8000504 <__aeabi_ui2d>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4650      	mov	r0, sl
 800bc5c:	4659      	mov	r1, fp
 800bc5e:	f7f4 fb15 	bl	800028c <__adddf3>
 800bc62:	2d0f      	cmp	r5, #15
 800bc64:	4682      	mov	sl, r0
 800bc66:	468b      	mov	fp, r1
 800bc68:	ddd5      	ble.n	800bc16 <_strtod_l+0x3ae>
 800bc6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc6c:	1b2c      	subs	r4, r5, r4
 800bc6e:	441c      	add	r4, r3
 800bc70:	2c00      	cmp	r4, #0
 800bc72:	f340 8096 	ble.w	800bda2 <_strtod_l+0x53a>
 800bc76:	f014 030f 	ands.w	r3, r4, #15
 800bc7a:	d00a      	beq.n	800bc92 <_strtod_l+0x42a>
 800bc7c:	495e      	ldr	r1, [pc, #376]	@ (800bdf8 <_strtod_l+0x590>)
 800bc7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc82:	4652      	mov	r2, sl
 800bc84:	465b      	mov	r3, fp
 800bc86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc8a:	f7f4 fcb5 	bl	80005f8 <__aeabi_dmul>
 800bc8e:	4682      	mov	sl, r0
 800bc90:	468b      	mov	fp, r1
 800bc92:	f034 040f 	bics.w	r4, r4, #15
 800bc96:	d073      	beq.n	800bd80 <_strtod_l+0x518>
 800bc98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bc9c:	dd48      	ble.n	800bd30 <_strtod_l+0x4c8>
 800bc9e:	2400      	movs	r4, #0
 800bca0:	46a0      	mov	r8, r4
 800bca2:	940a      	str	r4, [sp, #40]	@ 0x28
 800bca4:	46a1      	mov	r9, r4
 800bca6:	9a05      	ldr	r2, [sp, #20]
 800bca8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800be00 <_strtod_l+0x598>
 800bcac:	2322      	movs	r3, #34	@ 0x22
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	f04f 0a00 	mov.w	sl, #0
 800bcb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f43f ae0f 	beq.w	800b8da <_strtod_l+0x72>
 800bcbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcbe:	9805      	ldr	r0, [sp, #20]
 800bcc0:	f7ff f942 	bl	800af48 <_Bfree>
 800bcc4:	9805      	ldr	r0, [sp, #20]
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	f7ff f93e 	bl	800af48 <_Bfree>
 800bccc:	9805      	ldr	r0, [sp, #20]
 800bcce:	4641      	mov	r1, r8
 800bcd0:	f7ff f93a 	bl	800af48 <_Bfree>
 800bcd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bcd6:	9805      	ldr	r0, [sp, #20]
 800bcd8:	f7ff f936 	bl	800af48 <_Bfree>
 800bcdc:	9805      	ldr	r0, [sp, #20]
 800bcde:	4621      	mov	r1, r4
 800bce0:	f7ff f932 	bl	800af48 <_Bfree>
 800bce4:	e5f9      	b.n	800b8da <_strtod_l+0x72>
 800bce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bce8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bcec:	4293      	cmp	r3, r2
 800bcee:	dbbc      	blt.n	800bc6a <_strtod_l+0x402>
 800bcf0:	4c41      	ldr	r4, [pc, #260]	@ (800bdf8 <_strtod_l+0x590>)
 800bcf2:	f1c5 050f 	rsb	r5, r5, #15
 800bcf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	465b      	mov	r3, fp
 800bcfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd02:	f7f4 fc79 	bl	80005f8 <__aeabi_dmul>
 800bd06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd08:	1b5d      	subs	r5, r3, r5
 800bd0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bd0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd12:	e78f      	b.n	800bc34 <_strtod_l+0x3cc>
 800bd14:	3316      	adds	r3, #22
 800bd16:	dba8      	blt.n	800bc6a <_strtod_l+0x402>
 800bd18:	4b37      	ldr	r3, [pc, #220]	@ (800bdf8 <_strtod_l+0x590>)
 800bd1a:	eba9 0808 	sub.w	r8, r9, r8
 800bd1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bd22:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bd26:	4650      	mov	r0, sl
 800bd28:	4659      	mov	r1, fp
 800bd2a:	f7f4 fd8f 	bl	800084c <__aeabi_ddiv>
 800bd2e:	e783      	b.n	800bc38 <_strtod_l+0x3d0>
 800bd30:	4b32      	ldr	r3, [pc, #200]	@ (800bdfc <_strtod_l+0x594>)
 800bd32:	9308      	str	r3, [sp, #32]
 800bd34:	2300      	movs	r3, #0
 800bd36:	1124      	asrs	r4, r4, #4
 800bd38:	4650      	mov	r0, sl
 800bd3a:	4659      	mov	r1, fp
 800bd3c:	461e      	mov	r6, r3
 800bd3e:	2c01      	cmp	r4, #1
 800bd40:	dc21      	bgt.n	800bd86 <_strtod_l+0x51e>
 800bd42:	b10b      	cbz	r3, 800bd48 <_strtod_l+0x4e0>
 800bd44:	4682      	mov	sl, r0
 800bd46:	468b      	mov	fp, r1
 800bd48:	492c      	ldr	r1, [pc, #176]	@ (800bdfc <_strtod_l+0x594>)
 800bd4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bd4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bd52:	4652      	mov	r2, sl
 800bd54:	465b      	mov	r3, fp
 800bd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd5a:	f7f4 fc4d 	bl	80005f8 <__aeabi_dmul>
 800bd5e:	4b28      	ldr	r3, [pc, #160]	@ (800be00 <_strtod_l+0x598>)
 800bd60:	460a      	mov	r2, r1
 800bd62:	400b      	ands	r3, r1
 800bd64:	4927      	ldr	r1, [pc, #156]	@ (800be04 <_strtod_l+0x59c>)
 800bd66:	428b      	cmp	r3, r1
 800bd68:	4682      	mov	sl, r0
 800bd6a:	d898      	bhi.n	800bc9e <_strtod_l+0x436>
 800bd6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bd70:	428b      	cmp	r3, r1
 800bd72:	bf86      	itte	hi
 800bd74:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800be08 <_strtod_l+0x5a0>
 800bd78:	f04f 3aff 	movhi.w	sl, #4294967295
 800bd7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bd80:	2300      	movs	r3, #0
 800bd82:	9308      	str	r3, [sp, #32]
 800bd84:	e07a      	b.n	800be7c <_strtod_l+0x614>
 800bd86:	07e2      	lsls	r2, r4, #31
 800bd88:	d505      	bpl.n	800bd96 <_strtod_l+0x52e>
 800bd8a:	9b08      	ldr	r3, [sp, #32]
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f7f4 fc32 	bl	80005f8 <__aeabi_dmul>
 800bd94:	2301      	movs	r3, #1
 800bd96:	9a08      	ldr	r2, [sp, #32]
 800bd98:	3208      	adds	r2, #8
 800bd9a:	3601      	adds	r6, #1
 800bd9c:	1064      	asrs	r4, r4, #1
 800bd9e:	9208      	str	r2, [sp, #32]
 800bda0:	e7cd      	b.n	800bd3e <_strtod_l+0x4d6>
 800bda2:	d0ed      	beq.n	800bd80 <_strtod_l+0x518>
 800bda4:	4264      	negs	r4, r4
 800bda6:	f014 020f 	ands.w	r2, r4, #15
 800bdaa:	d00a      	beq.n	800bdc2 <_strtod_l+0x55a>
 800bdac:	4b12      	ldr	r3, [pc, #72]	@ (800bdf8 <_strtod_l+0x590>)
 800bdae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	4659      	mov	r1, fp
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f7f4 fd47 	bl	800084c <__aeabi_ddiv>
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	468b      	mov	fp, r1
 800bdc2:	1124      	asrs	r4, r4, #4
 800bdc4:	d0dc      	beq.n	800bd80 <_strtod_l+0x518>
 800bdc6:	2c1f      	cmp	r4, #31
 800bdc8:	dd20      	ble.n	800be0c <_strtod_l+0x5a4>
 800bdca:	2400      	movs	r4, #0
 800bdcc:	46a0      	mov	r8, r4
 800bdce:	940a      	str	r4, [sp, #40]	@ 0x28
 800bdd0:	46a1      	mov	r9, r4
 800bdd2:	9a05      	ldr	r2, [sp, #20]
 800bdd4:	2322      	movs	r3, #34	@ 0x22
 800bdd6:	f04f 0a00 	mov.w	sl, #0
 800bdda:	f04f 0b00 	mov.w	fp, #0
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	e768      	b.n	800bcb4 <_strtod_l+0x44c>
 800bde2:	bf00      	nop
 800bde4:	0800d869 	.word	0x0800d869
 800bde8:	0800da7c 	.word	0x0800da7c
 800bdec:	0800d861 	.word	0x0800d861
 800bdf0:	0800d898 	.word	0x0800d898
 800bdf4:	0800dc25 	.word	0x0800dc25
 800bdf8:	0800d9b0 	.word	0x0800d9b0
 800bdfc:	0800d988 	.word	0x0800d988
 800be00:	7ff00000 	.word	0x7ff00000
 800be04:	7ca00000 	.word	0x7ca00000
 800be08:	7fefffff 	.word	0x7fefffff
 800be0c:	f014 0310 	ands.w	r3, r4, #16
 800be10:	bf18      	it	ne
 800be12:	236a      	movne	r3, #106	@ 0x6a
 800be14:	4ea9      	ldr	r6, [pc, #676]	@ (800c0bc <_strtod_l+0x854>)
 800be16:	9308      	str	r3, [sp, #32]
 800be18:	4650      	mov	r0, sl
 800be1a:	4659      	mov	r1, fp
 800be1c:	2300      	movs	r3, #0
 800be1e:	07e2      	lsls	r2, r4, #31
 800be20:	d504      	bpl.n	800be2c <_strtod_l+0x5c4>
 800be22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be26:	f7f4 fbe7 	bl	80005f8 <__aeabi_dmul>
 800be2a:	2301      	movs	r3, #1
 800be2c:	1064      	asrs	r4, r4, #1
 800be2e:	f106 0608 	add.w	r6, r6, #8
 800be32:	d1f4      	bne.n	800be1e <_strtod_l+0x5b6>
 800be34:	b10b      	cbz	r3, 800be3a <_strtod_l+0x5d2>
 800be36:	4682      	mov	sl, r0
 800be38:	468b      	mov	fp, r1
 800be3a:	9b08      	ldr	r3, [sp, #32]
 800be3c:	b1b3      	cbz	r3, 800be6c <_strtod_l+0x604>
 800be3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800be46:	2b00      	cmp	r3, #0
 800be48:	4659      	mov	r1, fp
 800be4a:	dd0f      	ble.n	800be6c <_strtod_l+0x604>
 800be4c:	2b1f      	cmp	r3, #31
 800be4e:	dd55      	ble.n	800befc <_strtod_l+0x694>
 800be50:	2b34      	cmp	r3, #52	@ 0x34
 800be52:	bfde      	ittt	le
 800be54:	f04f 33ff 	movle.w	r3, #4294967295
 800be58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800be5c:	4093      	lslle	r3, r2
 800be5e:	f04f 0a00 	mov.w	sl, #0
 800be62:	bfcc      	ite	gt
 800be64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800be68:	ea03 0b01 	andle.w	fp, r3, r1
 800be6c:	2200      	movs	r2, #0
 800be6e:	2300      	movs	r3, #0
 800be70:	4650      	mov	r0, sl
 800be72:	4659      	mov	r1, fp
 800be74:	f7f4 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d1a6      	bne.n	800bdca <_strtod_l+0x562>
 800be7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800be82:	9805      	ldr	r0, [sp, #20]
 800be84:	462b      	mov	r3, r5
 800be86:	463a      	mov	r2, r7
 800be88:	f7ff f8c6 	bl	800b018 <__s2b>
 800be8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800be8e:	2800      	cmp	r0, #0
 800be90:	f43f af05 	beq.w	800bc9e <_strtod_l+0x436>
 800be94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be96:	2a00      	cmp	r2, #0
 800be98:	eba9 0308 	sub.w	r3, r9, r8
 800be9c:	bfa8      	it	ge
 800be9e:	2300      	movge	r3, #0
 800bea0:	9312      	str	r3, [sp, #72]	@ 0x48
 800bea2:	2400      	movs	r4, #0
 800bea4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bea8:	9316      	str	r3, [sp, #88]	@ 0x58
 800beaa:	46a0      	mov	r8, r4
 800beac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beae:	9805      	ldr	r0, [sp, #20]
 800beb0:	6859      	ldr	r1, [r3, #4]
 800beb2:	f7ff f809 	bl	800aec8 <_Balloc>
 800beb6:	4681      	mov	r9, r0
 800beb8:	2800      	cmp	r0, #0
 800beba:	f43f aef4 	beq.w	800bca6 <_strtod_l+0x43e>
 800bebe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bec0:	691a      	ldr	r2, [r3, #16]
 800bec2:	3202      	adds	r2, #2
 800bec4:	f103 010c 	add.w	r1, r3, #12
 800bec8:	0092      	lsls	r2, r2, #2
 800beca:	300c      	adds	r0, #12
 800becc:	f7fe f899 	bl	800a002 <memcpy>
 800bed0:	ec4b ab10 	vmov	d0, sl, fp
 800bed4:	9805      	ldr	r0, [sp, #20]
 800bed6:	aa1c      	add	r2, sp, #112	@ 0x70
 800bed8:	a91b      	add	r1, sp, #108	@ 0x6c
 800beda:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bede:	f7ff fbd7 	bl	800b690 <__d2b>
 800bee2:	901a      	str	r0, [sp, #104]	@ 0x68
 800bee4:	2800      	cmp	r0, #0
 800bee6:	f43f aede 	beq.w	800bca6 <_strtod_l+0x43e>
 800beea:	9805      	ldr	r0, [sp, #20]
 800beec:	2101      	movs	r1, #1
 800beee:	f7ff f929 	bl	800b144 <__i2b>
 800bef2:	4680      	mov	r8, r0
 800bef4:	b948      	cbnz	r0, 800bf0a <_strtod_l+0x6a2>
 800bef6:	f04f 0800 	mov.w	r8, #0
 800befa:	e6d4      	b.n	800bca6 <_strtod_l+0x43e>
 800befc:	f04f 32ff 	mov.w	r2, #4294967295
 800bf00:	fa02 f303 	lsl.w	r3, r2, r3
 800bf04:	ea03 0a0a 	and.w	sl, r3, sl
 800bf08:	e7b0      	b.n	800be6c <_strtod_l+0x604>
 800bf0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bf0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bf0e:	2d00      	cmp	r5, #0
 800bf10:	bfab      	itete	ge
 800bf12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bf14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bf16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bf18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bf1a:	bfac      	ite	ge
 800bf1c:	18ef      	addge	r7, r5, r3
 800bf1e:	1b5e      	sublt	r6, r3, r5
 800bf20:	9b08      	ldr	r3, [sp, #32]
 800bf22:	1aed      	subs	r5, r5, r3
 800bf24:	4415      	add	r5, r2
 800bf26:	4b66      	ldr	r3, [pc, #408]	@ (800c0c0 <_strtod_l+0x858>)
 800bf28:	3d01      	subs	r5, #1
 800bf2a:	429d      	cmp	r5, r3
 800bf2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bf30:	da50      	bge.n	800bfd4 <_strtod_l+0x76c>
 800bf32:	1b5b      	subs	r3, r3, r5
 800bf34:	2b1f      	cmp	r3, #31
 800bf36:	eba2 0203 	sub.w	r2, r2, r3
 800bf3a:	f04f 0101 	mov.w	r1, #1
 800bf3e:	dc3d      	bgt.n	800bfbc <_strtod_l+0x754>
 800bf40:	fa01 f303 	lsl.w	r3, r1, r3
 800bf44:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf46:	2300      	movs	r3, #0
 800bf48:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf4a:	18bd      	adds	r5, r7, r2
 800bf4c:	9b08      	ldr	r3, [sp, #32]
 800bf4e:	42af      	cmp	r7, r5
 800bf50:	4416      	add	r6, r2
 800bf52:	441e      	add	r6, r3
 800bf54:	463b      	mov	r3, r7
 800bf56:	bfa8      	it	ge
 800bf58:	462b      	movge	r3, r5
 800bf5a:	42b3      	cmp	r3, r6
 800bf5c:	bfa8      	it	ge
 800bf5e:	4633      	movge	r3, r6
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	bfc2      	ittt	gt
 800bf64:	1aed      	subgt	r5, r5, r3
 800bf66:	1af6      	subgt	r6, r6, r3
 800bf68:	1aff      	subgt	r7, r7, r3
 800bf6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dd16      	ble.n	800bf9e <_strtod_l+0x736>
 800bf70:	4641      	mov	r1, r8
 800bf72:	9805      	ldr	r0, [sp, #20]
 800bf74:	461a      	mov	r2, r3
 800bf76:	f7ff f9a5 	bl	800b2c4 <__pow5mult>
 800bf7a:	4680      	mov	r8, r0
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d0ba      	beq.n	800bef6 <_strtod_l+0x68e>
 800bf80:	4601      	mov	r1, r0
 800bf82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf84:	9805      	ldr	r0, [sp, #20]
 800bf86:	f7ff f8f3 	bl	800b170 <__multiply>
 800bf8a:	900e      	str	r0, [sp, #56]	@ 0x38
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	f43f ae8a 	beq.w	800bca6 <_strtod_l+0x43e>
 800bf92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf94:	9805      	ldr	r0, [sp, #20]
 800bf96:	f7fe ffd7 	bl	800af48 <_Bfree>
 800bf9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf9e:	2d00      	cmp	r5, #0
 800bfa0:	dc1d      	bgt.n	800bfde <_strtod_l+0x776>
 800bfa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	dd23      	ble.n	800bff0 <_strtod_l+0x788>
 800bfa8:	4649      	mov	r1, r9
 800bfaa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bfac:	9805      	ldr	r0, [sp, #20]
 800bfae:	f7ff f989 	bl	800b2c4 <__pow5mult>
 800bfb2:	4681      	mov	r9, r0
 800bfb4:	b9e0      	cbnz	r0, 800bff0 <_strtod_l+0x788>
 800bfb6:	f04f 0900 	mov.w	r9, #0
 800bfba:	e674      	b.n	800bca6 <_strtod_l+0x43e>
 800bfbc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bfc0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bfc4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bfc8:	35e2      	adds	r5, #226	@ 0xe2
 800bfca:	fa01 f305 	lsl.w	r3, r1, r5
 800bfce:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfd0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bfd2:	e7ba      	b.n	800bf4a <_strtod_l+0x6e2>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfd8:	2301      	movs	r3, #1
 800bfda:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfdc:	e7b5      	b.n	800bf4a <_strtod_l+0x6e2>
 800bfde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfe0:	9805      	ldr	r0, [sp, #20]
 800bfe2:	462a      	mov	r2, r5
 800bfe4:	f7ff f9c8 	bl	800b378 <__lshift>
 800bfe8:	901a      	str	r0, [sp, #104]	@ 0x68
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d1d9      	bne.n	800bfa2 <_strtod_l+0x73a>
 800bfee:	e65a      	b.n	800bca6 <_strtod_l+0x43e>
 800bff0:	2e00      	cmp	r6, #0
 800bff2:	dd07      	ble.n	800c004 <_strtod_l+0x79c>
 800bff4:	4649      	mov	r1, r9
 800bff6:	9805      	ldr	r0, [sp, #20]
 800bff8:	4632      	mov	r2, r6
 800bffa:	f7ff f9bd 	bl	800b378 <__lshift>
 800bffe:	4681      	mov	r9, r0
 800c000:	2800      	cmp	r0, #0
 800c002:	d0d8      	beq.n	800bfb6 <_strtod_l+0x74e>
 800c004:	2f00      	cmp	r7, #0
 800c006:	dd08      	ble.n	800c01a <_strtod_l+0x7b2>
 800c008:	4641      	mov	r1, r8
 800c00a:	9805      	ldr	r0, [sp, #20]
 800c00c:	463a      	mov	r2, r7
 800c00e:	f7ff f9b3 	bl	800b378 <__lshift>
 800c012:	4680      	mov	r8, r0
 800c014:	2800      	cmp	r0, #0
 800c016:	f43f ae46 	beq.w	800bca6 <_strtod_l+0x43e>
 800c01a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c01c:	9805      	ldr	r0, [sp, #20]
 800c01e:	464a      	mov	r2, r9
 800c020:	f7ff fa32 	bl	800b488 <__mdiff>
 800c024:	4604      	mov	r4, r0
 800c026:	2800      	cmp	r0, #0
 800c028:	f43f ae3d 	beq.w	800bca6 <_strtod_l+0x43e>
 800c02c:	68c3      	ldr	r3, [r0, #12]
 800c02e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c030:	2300      	movs	r3, #0
 800c032:	60c3      	str	r3, [r0, #12]
 800c034:	4641      	mov	r1, r8
 800c036:	f7ff fa0b 	bl	800b450 <__mcmp>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	da46      	bge.n	800c0cc <_strtod_l+0x864>
 800c03e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c040:	ea53 030a 	orrs.w	r3, r3, sl
 800c044:	d16c      	bne.n	800c120 <_strtod_l+0x8b8>
 800c046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d168      	bne.n	800c120 <_strtod_l+0x8b8>
 800c04e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c052:	0d1b      	lsrs	r3, r3, #20
 800c054:	051b      	lsls	r3, r3, #20
 800c056:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c05a:	d961      	bls.n	800c120 <_strtod_l+0x8b8>
 800c05c:	6963      	ldr	r3, [r4, #20]
 800c05e:	b913      	cbnz	r3, 800c066 <_strtod_l+0x7fe>
 800c060:	6923      	ldr	r3, [r4, #16]
 800c062:	2b01      	cmp	r3, #1
 800c064:	dd5c      	ble.n	800c120 <_strtod_l+0x8b8>
 800c066:	4621      	mov	r1, r4
 800c068:	2201      	movs	r2, #1
 800c06a:	9805      	ldr	r0, [sp, #20]
 800c06c:	f7ff f984 	bl	800b378 <__lshift>
 800c070:	4641      	mov	r1, r8
 800c072:	4604      	mov	r4, r0
 800c074:	f7ff f9ec 	bl	800b450 <__mcmp>
 800c078:	2800      	cmp	r0, #0
 800c07a:	dd51      	ble.n	800c120 <_strtod_l+0x8b8>
 800c07c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c080:	9a08      	ldr	r2, [sp, #32]
 800c082:	0d1b      	lsrs	r3, r3, #20
 800c084:	051b      	lsls	r3, r3, #20
 800c086:	2a00      	cmp	r2, #0
 800c088:	d06b      	beq.n	800c162 <_strtod_l+0x8fa>
 800c08a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c08e:	d868      	bhi.n	800c162 <_strtod_l+0x8fa>
 800c090:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c094:	f67f ae9d 	bls.w	800bdd2 <_strtod_l+0x56a>
 800c098:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c4 <_strtod_l+0x85c>)
 800c09a:	4650      	mov	r0, sl
 800c09c:	4659      	mov	r1, fp
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f7f4 faaa 	bl	80005f8 <__aeabi_dmul>
 800c0a4:	4b08      	ldr	r3, [pc, #32]	@ (800c0c8 <_strtod_l+0x860>)
 800c0a6:	400b      	ands	r3, r1
 800c0a8:	4682      	mov	sl, r0
 800c0aa:	468b      	mov	fp, r1
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f47f ae05 	bne.w	800bcbc <_strtod_l+0x454>
 800c0b2:	9a05      	ldr	r2, [sp, #20]
 800c0b4:	2322      	movs	r3, #34	@ 0x22
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	e600      	b.n	800bcbc <_strtod_l+0x454>
 800c0ba:	bf00      	nop
 800c0bc:	0800daa8 	.word	0x0800daa8
 800c0c0:	fffffc02 	.word	0xfffffc02
 800c0c4:	39500000 	.word	0x39500000
 800c0c8:	7ff00000 	.word	0x7ff00000
 800c0cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c0d0:	d165      	bne.n	800c19e <_strtod_l+0x936>
 800c0d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c0d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0d8:	b35a      	cbz	r2, 800c132 <_strtod_l+0x8ca>
 800c0da:	4a9f      	ldr	r2, [pc, #636]	@ (800c358 <_strtod_l+0xaf0>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d12b      	bne.n	800c138 <_strtod_l+0x8d0>
 800c0e0:	9b08      	ldr	r3, [sp, #32]
 800c0e2:	4651      	mov	r1, sl
 800c0e4:	b303      	cbz	r3, 800c128 <_strtod_l+0x8c0>
 800c0e6:	4b9d      	ldr	r3, [pc, #628]	@ (800c35c <_strtod_l+0xaf4>)
 800c0e8:	465a      	mov	r2, fp
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f4:	d81b      	bhi.n	800c12e <_strtod_l+0x8c6>
 800c0f6:	0d1b      	lsrs	r3, r3, #20
 800c0f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c100:	4299      	cmp	r1, r3
 800c102:	d119      	bne.n	800c138 <_strtod_l+0x8d0>
 800c104:	4b96      	ldr	r3, [pc, #600]	@ (800c360 <_strtod_l+0xaf8>)
 800c106:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c108:	429a      	cmp	r2, r3
 800c10a:	d102      	bne.n	800c112 <_strtod_l+0x8aa>
 800c10c:	3101      	adds	r1, #1
 800c10e:	f43f adca 	beq.w	800bca6 <_strtod_l+0x43e>
 800c112:	4b92      	ldr	r3, [pc, #584]	@ (800c35c <_strtod_l+0xaf4>)
 800c114:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c116:	401a      	ands	r2, r3
 800c118:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c11c:	f04f 0a00 	mov.w	sl, #0
 800c120:	9b08      	ldr	r3, [sp, #32]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1b8      	bne.n	800c098 <_strtod_l+0x830>
 800c126:	e5c9      	b.n	800bcbc <_strtod_l+0x454>
 800c128:	f04f 33ff 	mov.w	r3, #4294967295
 800c12c:	e7e8      	b.n	800c100 <_strtod_l+0x898>
 800c12e:	4613      	mov	r3, r2
 800c130:	e7e6      	b.n	800c100 <_strtod_l+0x898>
 800c132:	ea53 030a 	orrs.w	r3, r3, sl
 800c136:	d0a1      	beq.n	800c07c <_strtod_l+0x814>
 800c138:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c13a:	b1db      	cbz	r3, 800c174 <_strtod_l+0x90c>
 800c13c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c13e:	4213      	tst	r3, r2
 800c140:	d0ee      	beq.n	800c120 <_strtod_l+0x8b8>
 800c142:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c144:	9a08      	ldr	r2, [sp, #32]
 800c146:	4650      	mov	r0, sl
 800c148:	4659      	mov	r1, fp
 800c14a:	b1bb      	cbz	r3, 800c17c <_strtod_l+0x914>
 800c14c:	f7ff fb6e 	bl	800b82c <sulp>
 800c150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c154:	ec53 2b10 	vmov	r2, r3, d0
 800c158:	f7f4 f898 	bl	800028c <__adddf3>
 800c15c:	4682      	mov	sl, r0
 800c15e:	468b      	mov	fp, r1
 800c160:	e7de      	b.n	800c120 <_strtod_l+0x8b8>
 800c162:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c166:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c16a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c16e:	f04f 3aff 	mov.w	sl, #4294967295
 800c172:	e7d5      	b.n	800c120 <_strtod_l+0x8b8>
 800c174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c176:	ea13 0f0a 	tst.w	r3, sl
 800c17a:	e7e1      	b.n	800c140 <_strtod_l+0x8d8>
 800c17c:	f7ff fb56 	bl	800b82c <sulp>
 800c180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c184:	ec53 2b10 	vmov	r2, r3, d0
 800c188:	f7f4 f87e 	bl	8000288 <__aeabi_dsub>
 800c18c:	2200      	movs	r2, #0
 800c18e:	2300      	movs	r3, #0
 800c190:	4682      	mov	sl, r0
 800c192:	468b      	mov	fp, r1
 800c194:	f7f4 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d0c1      	beq.n	800c120 <_strtod_l+0x8b8>
 800c19c:	e619      	b.n	800bdd2 <_strtod_l+0x56a>
 800c19e:	4641      	mov	r1, r8
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f7ff facd 	bl	800b740 <__ratio>
 800c1a6:	ec57 6b10 	vmov	r6, r7, d0
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	f7f4 fc9c 	bl	8000af0 <__aeabi_dcmple>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d06f      	beq.n	800c29c <_strtod_l+0xa34>
 800c1bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d17a      	bne.n	800c2b8 <_strtod_l+0xa50>
 800c1c2:	f1ba 0f00 	cmp.w	sl, #0
 800c1c6:	d158      	bne.n	800c27a <_strtod_l+0xa12>
 800c1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d15a      	bne.n	800c288 <_strtod_l+0xa20>
 800c1d2:	4b64      	ldr	r3, [pc, #400]	@ (800c364 <_strtod_l+0xafc>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	4639      	mov	r1, r7
 800c1da:	f7f4 fc7f 	bl	8000adc <__aeabi_dcmplt>
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d159      	bne.n	800c296 <_strtod_l+0xa2e>
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	4b60      	ldr	r3, [pc, #384]	@ (800c368 <_strtod_l+0xb00>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f7f4 fa05 	bl	80005f8 <__aeabi_dmul>
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	460f      	mov	r7, r1
 800c1f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c1f6:	9606      	str	r6, [sp, #24]
 800c1f8:	9307      	str	r3, [sp, #28]
 800c1fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1fe:	4d57      	ldr	r5, [pc, #348]	@ (800c35c <_strtod_l+0xaf4>)
 800c200:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c206:	401d      	ands	r5, r3
 800c208:	4b58      	ldr	r3, [pc, #352]	@ (800c36c <_strtod_l+0xb04>)
 800c20a:	429d      	cmp	r5, r3
 800c20c:	f040 80b2 	bne.w	800c374 <_strtod_l+0xb0c>
 800c210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c212:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c216:	ec4b ab10 	vmov	d0, sl, fp
 800c21a:	f7ff f9c9 	bl	800b5b0 <__ulp>
 800c21e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c222:	ec51 0b10 	vmov	r0, r1, d0
 800c226:	f7f4 f9e7 	bl	80005f8 <__aeabi_dmul>
 800c22a:	4652      	mov	r2, sl
 800c22c:	465b      	mov	r3, fp
 800c22e:	f7f4 f82d 	bl	800028c <__adddf3>
 800c232:	460b      	mov	r3, r1
 800c234:	4949      	ldr	r1, [pc, #292]	@ (800c35c <_strtod_l+0xaf4>)
 800c236:	4a4e      	ldr	r2, [pc, #312]	@ (800c370 <_strtod_l+0xb08>)
 800c238:	4019      	ands	r1, r3
 800c23a:	4291      	cmp	r1, r2
 800c23c:	4682      	mov	sl, r0
 800c23e:	d942      	bls.n	800c2c6 <_strtod_l+0xa5e>
 800c240:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c242:	4b47      	ldr	r3, [pc, #284]	@ (800c360 <_strtod_l+0xaf8>)
 800c244:	429a      	cmp	r2, r3
 800c246:	d103      	bne.n	800c250 <_strtod_l+0x9e8>
 800c248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c24a:	3301      	adds	r3, #1
 800c24c:	f43f ad2b 	beq.w	800bca6 <_strtod_l+0x43e>
 800c250:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c360 <_strtod_l+0xaf8>
 800c254:	f04f 3aff 	mov.w	sl, #4294967295
 800c258:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c25a:	9805      	ldr	r0, [sp, #20]
 800c25c:	f7fe fe74 	bl	800af48 <_Bfree>
 800c260:	9805      	ldr	r0, [sp, #20]
 800c262:	4649      	mov	r1, r9
 800c264:	f7fe fe70 	bl	800af48 <_Bfree>
 800c268:	9805      	ldr	r0, [sp, #20]
 800c26a:	4641      	mov	r1, r8
 800c26c:	f7fe fe6c 	bl	800af48 <_Bfree>
 800c270:	9805      	ldr	r0, [sp, #20]
 800c272:	4621      	mov	r1, r4
 800c274:	f7fe fe68 	bl	800af48 <_Bfree>
 800c278:	e618      	b.n	800beac <_strtod_l+0x644>
 800c27a:	f1ba 0f01 	cmp.w	sl, #1
 800c27e:	d103      	bne.n	800c288 <_strtod_l+0xa20>
 800c280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c282:	2b00      	cmp	r3, #0
 800c284:	f43f ada5 	beq.w	800bdd2 <_strtod_l+0x56a>
 800c288:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c338 <_strtod_l+0xad0>
 800c28c:	4f35      	ldr	r7, [pc, #212]	@ (800c364 <_strtod_l+0xafc>)
 800c28e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c292:	2600      	movs	r6, #0
 800c294:	e7b1      	b.n	800c1fa <_strtod_l+0x992>
 800c296:	4f34      	ldr	r7, [pc, #208]	@ (800c368 <_strtod_l+0xb00>)
 800c298:	2600      	movs	r6, #0
 800c29a:	e7aa      	b.n	800c1f2 <_strtod_l+0x98a>
 800c29c:	4b32      	ldr	r3, [pc, #200]	@ (800c368 <_strtod_l+0xb00>)
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f7f4 f9a8 	bl	80005f8 <__aeabi_dmul>
 800c2a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	460f      	mov	r7, r1
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d09f      	beq.n	800c1f2 <_strtod_l+0x98a>
 800c2b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c2b6:	e7a0      	b.n	800c1fa <_strtod_l+0x992>
 800c2b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c340 <_strtod_l+0xad8>
 800c2bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2c0:	ec57 6b17 	vmov	r6, r7, d7
 800c2c4:	e799      	b.n	800c1fa <_strtod_l+0x992>
 800c2c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c2ca:	9b08      	ldr	r3, [sp, #32]
 800c2cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1c1      	bne.n	800c258 <_strtod_l+0x9f0>
 800c2d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2d8:	0d1b      	lsrs	r3, r3, #20
 800c2da:	051b      	lsls	r3, r3, #20
 800c2dc:	429d      	cmp	r5, r3
 800c2de:	d1bb      	bne.n	800c258 <_strtod_l+0x9f0>
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	f7f4 fce8 	bl	8000cb8 <__aeabi_d2lz>
 800c2e8:	f7f4 f958 	bl	800059c <__aeabi_l2d>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	f7f3 ffc8 	bl	8000288 <__aeabi_dsub>
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c300:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c306:	ea46 060a 	orr.w	r6, r6, sl
 800c30a:	431e      	orrs	r6, r3
 800c30c:	d06f      	beq.n	800c3ee <_strtod_l+0xb86>
 800c30e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c348 <_strtod_l+0xae0>)
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	f7f4 fbe2 	bl	8000adc <__aeabi_dcmplt>
 800c318:	2800      	cmp	r0, #0
 800c31a:	f47f accf 	bne.w	800bcbc <_strtod_l+0x454>
 800c31e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c350 <_strtod_l+0xae8>)
 800c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c324:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c328:	f7f4 fbf6 	bl	8000b18 <__aeabi_dcmpgt>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d093      	beq.n	800c258 <_strtod_l+0x9f0>
 800c330:	e4c4      	b.n	800bcbc <_strtod_l+0x454>
 800c332:	bf00      	nop
 800c334:	f3af 8000 	nop.w
 800c338:	00000000 	.word	0x00000000
 800c33c:	bff00000 	.word	0xbff00000
 800c340:	00000000 	.word	0x00000000
 800c344:	3ff00000 	.word	0x3ff00000
 800c348:	94a03595 	.word	0x94a03595
 800c34c:	3fdfffff 	.word	0x3fdfffff
 800c350:	35afe535 	.word	0x35afe535
 800c354:	3fe00000 	.word	0x3fe00000
 800c358:	000fffff 	.word	0x000fffff
 800c35c:	7ff00000 	.word	0x7ff00000
 800c360:	7fefffff 	.word	0x7fefffff
 800c364:	3ff00000 	.word	0x3ff00000
 800c368:	3fe00000 	.word	0x3fe00000
 800c36c:	7fe00000 	.word	0x7fe00000
 800c370:	7c9fffff 	.word	0x7c9fffff
 800c374:	9b08      	ldr	r3, [sp, #32]
 800c376:	b323      	cbz	r3, 800c3c2 <_strtod_l+0xb5a>
 800c378:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c37c:	d821      	bhi.n	800c3c2 <_strtod_l+0xb5a>
 800c37e:	a328      	add	r3, pc, #160	@ (adr r3, 800c420 <_strtod_l+0xbb8>)
 800c380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c384:	4630      	mov	r0, r6
 800c386:	4639      	mov	r1, r7
 800c388:	f7f4 fbb2 	bl	8000af0 <__aeabi_dcmple>
 800c38c:	b1a0      	cbz	r0, 800c3b8 <_strtod_l+0xb50>
 800c38e:	4639      	mov	r1, r7
 800c390:	4630      	mov	r0, r6
 800c392:	f7f4 fc09 	bl	8000ba8 <__aeabi_d2uiz>
 800c396:	2801      	cmp	r0, #1
 800c398:	bf38      	it	cc
 800c39a:	2001      	movcc	r0, #1
 800c39c:	f7f4 f8b2 	bl	8000504 <__aeabi_ui2d>
 800c3a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	460f      	mov	r7, r1
 800c3a6:	b9fb      	cbnz	r3, 800c3e8 <_strtod_l+0xb80>
 800c3a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c3ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800c3ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800c3b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c3b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c3b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c3be:	1b5b      	subs	r3, r3, r5
 800c3c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c3c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c3c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c3ca:	f7ff f8f1 	bl	800b5b0 <__ulp>
 800c3ce:	4650      	mov	r0, sl
 800c3d0:	ec53 2b10 	vmov	r2, r3, d0
 800c3d4:	4659      	mov	r1, fp
 800c3d6:	f7f4 f90f 	bl	80005f8 <__aeabi_dmul>
 800c3da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c3de:	f7f3 ff55 	bl	800028c <__adddf3>
 800c3e2:	4682      	mov	sl, r0
 800c3e4:	468b      	mov	fp, r1
 800c3e6:	e770      	b.n	800c2ca <_strtod_l+0xa62>
 800c3e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c3ec:	e7e0      	b.n	800c3b0 <_strtod_l+0xb48>
 800c3ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800c428 <_strtod_l+0xbc0>)
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	f7f4 fb72 	bl	8000adc <__aeabi_dcmplt>
 800c3f8:	e798      	b.n	800c32c <_strtod_l+0xac4>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c400:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c402:	6013      	str	r3, [r2, #0]
 800c404:	f7ff ba6d 	b.w	800b8e2 <_strtod_l+0x7a>
 800c408:	2a65      	cmp	r2, #101	@ 0x65
 800c40a:	f43f ab66 	beq.w	800bada <_strtod_l+0x272>
 800c40e:	2a45      	cmp	r2, #69	@ 0x45
 800c410:	f43f ab63 	beq.w	800bada <_strtod_l+0x272>
 800c414:	2301      	movs	r3, #1
 800c416:	f7ff bb9e 	b.w	800bb56 <_strtod_l+0x2ee>
 800c41a:	bf00      	nop
 800c41c:	f3af 8000 	nop.w
 800c420:	ffc00000 	.word	0xffc00000
 800c424:	41dfffff 	.word	0x41dfffff
 800c428:	94a03595 	.word	0x94a03595
 800c42c:	3fcfffff 	.word	0x3fcfffff

0800c430 <_strtod_r>:
 800c430:	4b01      	ldr	r3, [pc, #4]	@ (800c438 <_strtod_r+0x8>)
 800c432:	f7ff ba19 	b.w	800b868 <_strtod_l>
 800c436:	bf00      	nop
 800c438:	20000090 	.word	0x20000090

0800c43c <_strtol_l.constprop.0>:
 800c43c:	2b24      	cmp	r3, #36	@ 0x24
 800c43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c442:	4686      	mov	lr, r0
 800c444:	4690      	mov	r8, r2
 800c446:	d801      	bhi.n	800c44c <_strtol_l.constprop.0+0x10>
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d106      	bne.n	800c45a <_strtol_l.constprop.0+0x1e>
 800c44c:	f7fd fdac 	bl	8009fa8 <__errno>
 800c450:	2316      	movs	r3, #22
 800c452:	6003      	str	r3, [r0, #0]
 800c454:	2000      	movs	r0, #0
 800c456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c45a:	4834      	ldr	r0, [pc, #208]	@ (800c52c <_strtol_l.constprop.0+0xf0>)
 800c45c:	460d      	mov	r5, r1
 800c45e:	462a      	mov	r2, r5
 800c460:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c464:	5d06      	ldrb	r6, [r0, r4]
 800c466:	f016 0608 	ands.w	r6, r6, #8
 800c46a:	d1f8      	bne.n	800c45e <_strtol_l.constprop.0+0x22>
 800c46c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c46e:	d12d      	bne.n	800c4cc <_strtol_l.constprop.0+0x90>
 800c470:	782c      	ldrb	r4, [r5, #0]
 800c472:	2601      	movs	r6, #1
 800c474:	1c95      	adds	r5, r2, #2
 800c476:	f033 0210 	bics.w	r2, r3, #16
 800c47a:	d109      	bne.n	800c490 <_strtol_l.constprop.0+0x54>
 800c47c:	2c30      	cmp	r4, #48	@ 0x30
 800c47e:	d12a      	bne.n	800c4d6 <_strtol_l.constprop.0+0x9a>
 800c480:	782a      	ldrb	r2, [r5, #0]
 800c482:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c486:	2a58      	cmp	r2, #88	@ 0x58
 800c488:	d125      	bne.n	800c4d6 <_strtol_l.constprop.0+0x9a>
 800c48a:	786c      	ldrb	r4, [r5, #1]
 800c48c:	2310      	movs	r3, #16
 800c48e:	3502      	adds	r5, #2
 800c490:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c494:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c498:	2200      	movs	r2, #0
 800c49a:	fbbc f9f3 	udiv	r9, ip, r3
 800c49e:	4610      	mov	r0, r2
 800c4a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c4a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c4a8:	2f09      	cmp	r7, #9
 800c4aa:	d81b      	bhi.n	800c4e4 <_strtol_l.constprop.0+0xa8>
 800c4ac:	463c      	mov	r4, r7
 800c4ae:	42a3      	cmp	r3, r4
 800c4b0:	dd27      	ble.n	800c502 <_strtol_l.constprop.0+0xc6>
 800c4b2:	1c57      	adds	r7, r2, #1
 800c4b4:	d007      	beq.n	800c4c6 <_strtol_l.constprop.0+0x8a>
 800c4b6:	4581      	cmp	r9, r0
 800c4b8:	d320      	bcc.n	800c4fc <_strtol_l.constprop.0+0xc0>
 800c4ba:	d101      	bne.n	800c4c0 <_strtol_l.constprop.0+0x84>
 800c4bc:	45a2      	cmp	sl, r4
 800c4be:	db1d      	blt.n	800c4fc <_strtol_l.constprop.0+0xc0>
 800c4c0:	fb00 4003 	mla	r0, r0, r3, r4
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4ca:	e7eb      	b.n	800c4a4 <_strtol_l.constprop.0+0x68>
 800c4cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800c4ce:	bf04      	itt	eq
 800c4d0:	782c      	ldrbeq	r4, [r5, #0]
 800c4d2:	1c95      	addeq	r5, r2, #2
 800c4d4:	e7cf      	b.n	800c476 <_strtol_l.constprop.0+0x3a>
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1da      	bne.n	800c490 <_strtol_l.constprop.0+0x54>
 800c4da:	2c30      	cmp	r4, #48	@ 0x30
 800c4dc:	bf0c      	ite	eq
 800c4de:	2308      	moveq	r3, #8
 800c4e0:	230a      	movne	r3, #10
 800c4e2:	e7d5      	b.n	800c490 <_strtol_l.constprop.0+0x54>
 800c4e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c4e8:	2f19      	cmp	r7, #25
 800c4ea:	d801      	bhi.n	800c4f0 <_strtol_l.constprop.0+0xb4>
 800c4ec:	3c37      	subs	r4, #55	@ 0x37
 800c4ee:	e7de      	b.n	800c4ae <_strtol_l.constprop.0+0x72>
 800c4f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c4f4:	2f19      	cmp	r7, #25
 800c4f6:	d804      	bhi.n	800c502 <_strtol_l.constprop.0+0xc6>
 800c4f8:	3c57      	subs	r4, #87	@ 0x57
 800c4fa:	e7d8      	b.n	800c4ae <_strtol_l.constprop.0+0x72>
 800c4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c500:	e7e1      	b.n	800c4c6 <_strtol_l.constprop.0+0x8a>
 800c502:	1c53      	adds	r3, r2, #1
 800c504:	d108      	bne.n	800c518 <_strtol_l.constprop.0+0xdc>
 800c506:	2322      	movs	r3, #34	@ 0x22
 800c508:	f8ce 3000 	str.w	r3, [lr]
 800c50c:	4660      	mov	r0, ip
 800c50e:	f1b8 0f00 	cmp.w	r8, #0
 800c512:	d0a0      	beq.n	800c456 <_strtol_l.constprop.0+0x1a>
 800c514:	1e69      	subs	r1, r5, #1
 800c516:	e006      	b.n	800c526 <_strtol_l.constprop.0+0xea>
 800c518:	b106      	cbz	r6, 800c51c <_strtol_l.constprop.0+0xe0>
 800c51a:	4240      	negs	r0, r0
 800c51c:	f1b8 0f00 	cmp.w	r8, #0
 800c520:	d099      	beq.n	800c456 <_strtol_l.constprop.0+0x1a>
 800c522:	2a00      	cmp	r2, #0
 800c524:	d1f6      	bne.n	800c514 <_strtol_l.constprop.0+0xd8>
 800c526:	f8c8 1000 	str.w	r1, [r8]
 800c52a:	e794      	b.n	800c456 <_strtol_l.constprop.0+0x1a>
 800c52c:	0800dad1 	.word	0x0800dad1

0800c530 <_strtol_r>:
 800c530:	f7ff bf84 	b.w	800c43c <_strtol_l.constprop.0>

0800c534 <__ssputs_r>:
 800c534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c538:	688e      	ldr	r6, [r1, #8]
 800c53a:	461f      	mov	r7, r3
 800c53c:	42be      	cmp	r6, r7
 800c53e:	680b      	ldr	r3, [r1, #0]
 800c540:	4682      	mov	sl, r0
 800c542:	460c      	mov	r4, r1
 800c544:	4690      	mov	r8, r2
 800c546:	d82d      	bhi.n	800c5a4 <__ssputs_r+0x70>
 800c548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c54c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c550:	d026      	beq.n	800c5a0 <__ssputs_r+0x6c>
 800c552:	6965      	ldr	r5, [r4, #20]
 800c554:	6909      	ldr	r1, [r1, #16]
 800c556:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c55a:	eba3 0901 	sub.w	r9, r3, r1
 800c55e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c562:	1c7b      	adds	r3, r7, #1
 800c564:	444b      	add	r3, r9
 800c566:	106d      	asrs	r5, r5, #1
 800c568:	429d      	cmp	r5, r3
 800c56a:	bf38      	it	cc
 800c56c:	461d      	movcc	r5, r3
 800c56e:	0553      	lsls	r3, r2, #21
 800c570:	d527      	bpl.n	800c5c2 <__ssputs_r+0x8e>
 800c572:	4629      	mov	r1, r5
 800c574:	f7fe fc1c 	bl	800adb0 <_malloc_r>
 800c578:	4606      	mov	r6, r0
 800c57a:	b360      	cbz	r0, 800c5d6 <__ssputs_r+0xa2>
 800c57c:	6921      	ldr	r1, [r4, #16]
 800c57e:	464a      	mov	r2, r9
 800c580:	f7fd fd3f 	bl	800a002 <memcpy>
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c58e:	81a3      	strh	r3, [r4, #12]
 800c590:	6126      	str	r6, [r4, #16]
 800c592:	6165      	str	r5, [r4, #20]
 800c594:	444e      	add	r6, r9
 800c596:	eba5 0509 	sub.w	r5, r5, r9
 800c59a:	6026      	str	r6, [r4, #0]
 800c59c:	60a5      	str	r5, [r4, #8]
 800c59e:	463e      	mov	r6, r7
 800c5a0:	42be      	cmp	r6, r7
 800c5a2:	d900      	bls.n	800c5a6 <__ssputs_r+0x72>
 800c5a4:	463e      	mov	r6, r7
 800c5a6:	6820      	ldr	r0, [r4, #0]
 800c5a8:	4632      	mov	r2, r6
 800c5aa:	4641      	mov	r1, r8
 800c5ac:	f000 fb9e 	bl	800ccec <memmove>
 800c5b0:	68a3      	ldr	r3, [r4, #8]
 800c5b2:	1b9b      	subs	r3, r3, r6
 800c5b4:	60a3      	str	r3, [r4, #8]
 800c5b6:	6823      	ldr	r3, [r4, #0]
 800c5b8:	4433      	add	r3, r6
 800c5ba:	6023      	str	r3, [r4, #0]
 800c5bc:	2000      	movs	r0, #0
 800c5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c2:	462a      	mov	r2, r5
 800c5c4:	f000 ff75 	bl	800d4b2 <_realloc_r>
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d1e0      	bne.n	800c590 <__ssputs_r+0x5c>
 800c5ce:	6921      	ldr	r1, [r4, #16]
 800c5d0:	4650      	mov	r0, sl
 800c5d2:	f7fe fb79 	bl	800acc8 <_free_r>
 800c5d6:	230c      	movs	r3, #12
 800c5d8:	f8ca 3000 	str.w	r3, [sl]
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e8:	e7e9      	b.n	800c5be <__ssputs_r+0x8a>
	...

0800c5ec <_svfiprintf_r>:
 800c5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f0:	4698      	mov	r8, r3
 800c5f2:	898b      	ldrh	r3, [r1, #12]
 800c5f4:	061b      	lsls	r3, r3, #24
 800c5f6:	b09d      	sub	sp, #116	@ 0x74
 800c5f8:	4607      	mov	r7, r0
 800c5fa:	460d      	mov	r5, r1
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	d510      	bpl.n	800c622 <_svfiprintf_r+0x36>
 800c600:	690b      	ldr	r3, [r1, #16]
 800c602:	b973      	cbnz	r3, 800c622 <_svfiprintf_r+0x36>
 800c604:	2140      	movs	r1, #64	@ 0x40
 800c606:	f7fe fbd3 	bl	800adb0 <_malloc_r>
 800c60a:	6028      	str	r0, [r5, #0]
 800c60c:	6128      	str	r0, [r5, #16]
 800c60e:	b930      	cbnz	r0, 800c61e <_svfiprintf_r+0x32>
 800c610:	230c      	movs	r3, #12
 800c612:	603b      	str	r3, [r7, #0]
 800c614:	f04f 30ff 	mov.w	r0, #4294967295
 800c618:	b01d      	add	sp, #116	@ 0x74
 800c61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61e:	2340      	movs	r3, #64	@ 0x40
 800c620:	616b      	str	r3, [r5, #20]
 800c622:	2300      	movs	r3, #0
 800c624:	9309      	str	r3, [sp, #36]	@ 0x24
 800c626:	2320      	movs	r3, #32
 800c628:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c62c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c630:	2330      	movs	r3, #48	@ 0x30
 800c632:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c7d0 <_svfiprintf_r+0x1e4>
 800c636:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c63a:	f04f 0901 	mov.w	r9, #1
 800c63e:	4623      	mov	r3, r4
 800c640:	469a      	mov	sl, r3
 800c642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c646:	b10a      	cbz	r2, 800c64c <_svfiprintf_r+0x60>
 800c648:	2a25      	cmp	r2, #37	@ 0x25
 800c64a:	d1f9      	bne.n	800c640 <_svfiprintf_r+0x54>
 800c64c:	ebba 0b04 	subs.w	fp, sl, r4
 800c650:	d00b      	beq.n	800c66a <_svfiprintf_r+0x7e>
 800c652:	465b      	mov	r3, fp
 800c654:	4622      	mov	r2, r4
 800c656:	4629      	mov	r1, r5
 800c658:	4638      	mov	r0, r7
 800c65a:	f7ff ff6b 	bl	800c534 <__ssputs_r>
 800c65e:	3001      	adds	r0, #1
 800c660:	f000 80a7 	beq.w	800c7b2 <_svfiprintf_r+0x1c6>
 800c664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c666:	445a      	add	r2, fp
 800c668:	9209      	str	r2, [sp, #36]	@ 0x24
 800c66a:	f89a 3000 	ldrb.w	r3, [sl]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 809f 	beq.w	800c7b2 <_svfiprintf_r+0x1c6>
 800c674:	2300      	movs	r3, #0
 800c676:	f04f 32ff 	mov.w	r2, #4294967295
 800c67a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c67e:	f10a 0a01 	add.w	sl, sl, #1
 800c682:	9304      	str	r3, [sp, #16]
 800c684:	9307      	str	r3, [sp, #28]
 800c686:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c68a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c68c:	4654      	mov	r4, sl
 800c68e:	2205      	movs	r2, #5
 800c690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c694:	484e      	ldr	r0, [pc, #312]	@ (800c7d0 <_svfiprintf_r+0x1e4>)
 800c696:	f7f3 fd9b 	bl	80001d0 <memchr>
 800c69a:	9a04      	ldr	r2, [sp, #16]
 800c69c:	b9d8      	cbnz	r0, 800c6d6 <_svfiprintf_r+0xea>
 800c69e:	06d0      	lsls	r0, r2, #27
 800c6a0:	bf44      	itt	mi
 800c6a2:	2320      	movmi	r3, #32
 800c6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6a8:	0711      	lsls	r1, r2, #28
 800c6aa:	bf44      	itt	mi
 800c6ac:	232b      	movmi	r3, #43	@ 0x2b
 800c6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6b8:	d015      	beq.n	800c6e6 <_svfiprintf_r+0xfa>
 800c6ba:	9a07      	ldr	r2, [sp, #28]
 800c6bc:	4654      	mov	r4, sl
 800c6be:	2000      	movs	r0, #0
 800c6c0:	f04f 0c0a 	mov.w	ip, #10
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6ca:	3b30      	subs	r3, #48	@ 0x30
 800c6cc:	2b09      	cmp	r3, #9
 800c6ce:	d94b      	bls.n	800c768 <_svfiprintf_r+0x17c>
 800c6d0:	b1b0      	cbz	r0, 800c700 <_svfiprintf_r+0x114>
 800c6d2:	9207      	str	r2, [sp, #28]
 800c6d4:	e014      	b.n	800c700 <_svfiprintf_r+0x114>
 800c6d6:	eba0 0308 	sub.w	r3, r0, r8
 800c6da:	fa09 f303 	lsl.w	r3, r9, r3
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	9304      	str	r3, [sp, #16]
 800c6e2:	46a2      	mov	sl, r4
 800c6e4:	e7d2      	b.n	800c68c <_svfiprintf_r+0xa0>
 800c6e6:	9b03      	ldr	r3, [sp, #12]
 800c6e8:	1d19      	adds	r1, r3, #4
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	9103      	str	r1, [sp, #12]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	bfbb      	ittet	lt
 800c6f2:	425b      	neglt	r3, r3
 800c6f4:	f042 0202 	orrlt.w	r2, r2, #2
 800c6f8:	9307      	strge	r3, [sp, #28]
 800c6fa:	9307      	strlt	r3, [sp, #28]
 800c6fc:	bfb8      	it	lt
 800c6fe:	9204      	strlt	r2, [sp, #16]
 800c700:	7823      	ldrb	r3, [r4, #0]
 800c702:	2b2e      	cmp	r3, #46	@ 0x2e
 800c704:	d10a      	bne.n	800c71c <_svfiprintf_r+0x130>
 800c706:	7863      	ldrb	r3, [r4, #1]
 800c708:	2b2a      	cmp	r3, #42	@ 0x2a
 800c70a:	d132      	bne.n	800c772 <_svfiprintf_r+0x186>
 800c70c:	9b03      	ldr	r3, [sp, #12]
 800c70e:	1d1a      	adds	r2, r3, #4
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	9203      	str	r2, [sp, #12]
 800c714:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c718:	3402      	adds	r4, #2
 800c71a:	9305      	str	r3, [sp, #20]
 800c71c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c7e0 <_svfiprintf_r+0x1f4>
 800c720:	7821      	ldrb	r1, [r4, #0]
 800c722:	2203      	movs	r2, #3
 800c724:	4650      	mov	r0, sl
 800c726:	f7f3 fd53 	bl	80001d0 <memchr>
 800c72a:	b138      	cbz	r0, 800c73c <_svfiprintf_r+0x150>
 800c72c:	9b04      	ldr	r3, [sp, #16]
 800c72e:	eba0 000a 	sub.w	r0, r0, sl
 800c732:	2240      	movs	r2, #64	@ 0x40
 800c734:	4082      	lsls	r2, r0
 800c736:	4313      	orrs	r3, r2
 800c738:	3401      	adds	r4, #1
 800c73a:	9304      	str	r3, [sp, #16]
 800c73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c740:	4824      	ldr	r0, [pc, #144]	@ (800c7d4 <_svfiprintf_r+0x1e8>)
 800c742:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c746:	2206      	movs	r2, #6
 800c748:	f7f3 fd42 	bl	80001d0 <memchr>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d036      	beq.n	800c7be <_svfiprintf_r+0x1d2>
 800c750:	4b21      	ldr	r3, [pc, #132]	@ (800c7d8 <_svfiprintf_r+0x1ec>)
 800c752:	bb1b      	cbnz	r3, 800c79c <_svfiprintf_r+0x1b0>
 800c754:	9b03      	ldr	r3, [sp, #12]
 800c756:	3307      	adds	r3, #7
 800c758:	f023 0307 	bic.w	r3, r3, #7
 800c75c:	3308      	adds	r3, #8
 800c75e:	9303      	str	r3, [sp, #12]
 800c760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c762:	4433      	add	r3, r6
 800c764:	9309      	str	r3, [sp, #36]	@ 0x24
 800c766:	e76a      	b.n	800c63e <_svfiprintf_r+0x52>
 800c768:	fb0c 3202 	mla	r2, ip, r2, r3
 800c76c:	460c      	mov	r4, r1
 800c76e:	2001      	movs	r0, #1
 800c770:	e7a8      	b.n	800c6c4 <_svfiprintf_r+0xd8>
 800c772:	2300      	movs	r3, #0
 800c774:	3401      	adds	r4, #1
 800c776:	9305      	str	r3, [sp, #20]
 800c778:	4619      	mov	r1, r3
 800c77a:	f04f 0c0a 	mov.w	ip, #10
 800c77e:	4620      	mov	r0, r4
 800c780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c784:	3a30      	subs	r2, #48	@ 0x30
 800c786:	2a09      	cmp	r2, #9
 800c788:	d903      	bls.n	800c792 <_svfiprintf_r+0x1a6>
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d0c6      	beq.n	800c71c <_svfiprintf_r+0x130>
 800c78e:	9105      	str	r1, [sp, #20]
 800c790:	e7c4      	b.n	800c71c <_svfiprintf_r+0x130>
 800c792:	fb0c 2101 	mla	r1, ip, r1, r2
 800c796:	4604      	mov	r4, r0
 800c798:	2301      	movs	r3, #1
 800c79a:	e7f0      	b.n	800c77e <_svfiprintf_r+0x192>
 800c79c:	ab03      	add	r3, sp, #12
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	462a      	mov	r2, r5
 800c7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800c7dc <_svfiprintf_r+0x1f0>)
 800c7a4:	a904      	add	r1, sp, #16
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	f7fc fbae 	bl	8008f08 <_printf_float>
 800c7ac:	1c42      	adds	r2, r0, #1
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	d1d6      	bne.n	800c760 <_svfiprintf_r+0x174>
 800c7b2:	89ab      	ldrh	r3, [r5, #12]
 800c7b4:	065b      	lsls	r3, r3, #25
 800c7b6:	f53f af2d 	bmi.w	800c614 <_svfiprintf_r+0x28>
 800c7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7bc:	e72c      	b.n	800c618 <_svfiprintf_r+0x2c>
 800c7be:	ab03      	add	r3, sp, #12
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	4b05      	ldr	r3, [pc, #20]	@ (800c7dc <_svfiprintf_r+0x1f0>)
 800c7c6:	a904      	add	r1, sp, #16
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f7fc fe35 	bl	8009438 <_printf_i>
 800c7ce:	e7ed      	b.n	800c7ac <_svfiprintf_r+0x1c0>
 800c7d0:	0800dbd1 	.word	0x0800dbd1
 800c7d4:	0800dbdb 	.word	0x0800dbdb
 800c7d8:	08008f09 	.word	0x08008f09
 800c7dc:	0800c535 	.word	0x0800c535
 800c7e0:	0800dbd7 	.word	0x0800dbd7

0800c7e4 <__sfputc_r>:
 800c7e4:	6893      	ldr	r3, [r2, #8]
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	b410      	push	{r4}
 800c7ec:	6093      	str	r3, [r2, #8]
 800c7ee:	da08      	bge.n	800c802 <__sfputc_r+0x1e>
 800c7f0:	6994      	ldr	r4, [r2, #24]
 800c7f2:	42a3      	cmp	r3, r4
 800c7f4:	db01      	blt.n	800c7fa <__sfputc_r+0x16>
 800c7f6:	290a      	cmp	r1, #10
 800c7f8:	d103      	bne.n	800c802 <__sfputc_r+0x1e>
 800c7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7fe:	f7fd baec 	b.w	8009dda <__swbuf_r>
 800c802:	6813      	ldr	r3, [r2, #0]
 800c804:	1c58      	adds	r0, r3, #1
 800c806:	6010      	str	r0, [r2, #0]
 800c808:	7019      	strb	r1, [r3, #0]
 800c80a:	4608      	mov	r0, r1
 800c80c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <__sfputs_r>:
 800c812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c814:	4606      	mov	r6, r0
 800c816:	460f      	mov	r7, r1
 800c818:	4614      	mov	r4, r2
 800c81a:	18d5      	adds	r5, r2, r3
 800c81c:	42ac      	cmp	r4, r5
 800c81e:	d101      	bne.n	800c824 <__sfputs_r+0x12>
 800c820:	2000      	movs	r0, #0
 800c822:	e007      	b.n	800c834 <__sfputs_r+0x22>
 800c824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c828:	463a      	mov	r2, r7
 800c82a:	4630      	mov	r0, r6
 800c82c:	f7ff ffda 	bl	800c7e4 <__sfputc_r>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d1f3      	bne.n	800c81c <__sfputs_r+0xa>
 800c834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c838 <_vfiprintf_r>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	460d      	mov	r5, r1
 800c83e:	b09d      	sub	sp, #116	@ 0x74
 800c840:	4614      	mov	r4, r2
 800c842:	4698      	mov	r8, r3
 800c844:	4606      	mov	r6, r0
 800c846:	b118      	cbz	r0, 800c850 <_vfiprintf_r+0x18>
 800c848:	6a03      	ldr	r3, [r0, #32]
 800c84a:	b90b      	cbnz	r3, 800c850 <_vfiprintf_r+0x18>
 800c84c:	f7fd f9b4 	bl	8009bb8 <__sinit>
 800c850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c852:	07d9      	lsls	r1, r3, #31
 800c854:	d405      	bmi.n	800c862 <_vfiprintf_r+0x2a>
 800c856:	89ab      	ldrh	r3, [r5, #12]
 800c858:	059a      	lsls	r2, r3, #22
 800c85a:	d402      	bmi.n	800c862 <_vfiprintf_r+0x2a>
 800c85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c85e:	f7fd fbce 	bl	8009ffe <__retarget_lock_acquire_recursive>
 800c862:	89ab      	ldrh	r3, [r5, #12]
 800c864:	071b      	lsls	r3, r3, #28
 800c866:	d501      	bpl.n	800c86c <_vfiprintf_r+0x34>
 800c868:	692b      	ldr	r3, [r5, #16]
 800c86a:	b99b      	cbnz	r3, 800c894 <_vfiprintf_r+0x5c>
 800c86c:	4629      	mov	r1, r5
 800c86e:	4630      	mov	r0, r6
 800c870:	f7fd faf2 	bl	8009e58 <__swsetup_r>
 800c874:	b170      	cbz	r0, 800c894 <_vfiprintf_r+0x5c>
 800c876:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c878:	07dc      	lsls	r4, r3, #31
 800c87a:	d504      	bpl.n	800c886 <_vfiprintf_r+0x4e>
 800c87c:	f04f 30ff 	mov.w	r0, #4294967295
 800c880:	b01d      	add	sp, #116	@ 0x74
 800c882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c886:	89ab      	ldrh	r3, [r5, #12]
 800c888:	0598      	lsls	r0, r3, #22
 800c88a:	d4f7      	bmi.n	800c87c <_vfiprintf_r+0x44>
 800c88c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c88e:	f7fd fbb7 	bl	800a000 <__retarget_lock_release_recursive>
 800c892:	e7f3      	b.n	800c87c <_vfiprintf_r+0x44>
 800c894:	2300      	movs	r3, #0
 800c896:	9309      	str	r3, [sp, #36]	@ 0x24
 800c898:	2320      	movs	r3, #32
 800c89a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c89e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8a2:	2330      	movs	r3, #48	@ 0x30
 800c8a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca54 <_vfiprintf_r+0x21c>
 800c8a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8ac:	f04f 0901 	mov.w	r9, #1
 800c8b0:	4623      	mov	r3, r4
 800c8b2:	469a      	mov	sl, r3
 800c8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8b8:	b10a      	cbz	r2, 800c8be <_vfiprintf_r+0x86>
 800c8ba:	2a25      	cmp	r2, #37	@ 0x25
 800c8bc:	d1f9      	bne.n	800c8b2 <_vfiprintf_r+0x7a>
 800c8be:	ebba 0b04 	subs.w	fp, sl, r4
 800c8c2:	d00b      	beq.n	800c8dc <_vfiprintf_r+0xa4>
 800c8c4:	465b      	mov	r3, fp
 800c8c6:	4622      	mov	r2, r4
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f7ff ffa1 	bl	800c812 <__sfputs_r>
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	f000 80a7 	beq.w	800ca24 <_vfiprintf_r+0x1ec>
 800c8d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8d8:	445a      	add	r2, fp
 800c8da:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f000 809f 	beq.w	800ca24 <_vfiprintf_r+0x1ec>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8f0:	f10a 0a01 	add.w	sl, sl, #1
 800c8f4:	9304      	str	r3, [sp, #16]
 800c8f6:	9307      	str	r3, [sp, #28]
 800c8f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8fe:	4654      	mov	r4, sl
 800c900:	2205      	movs	r2, #5
 800c902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c906:	4853      	ldr	r0, [pc, #332]	@ (800ca54 <_vfiprintf_r+0x21c>)
 800c908:	f7f3 fc62 	bl	80001d0 <memchr>
 800c90c:	9a04      	ldr	r2, [sp, #16]
 800c90e:	b9d8      	cbnz	r0, 800c948 <_vfiprintf_r+0x110>
 800c910:	06d1      	lsls	r1, r2, #27
 800c912:	bf44      	itt	mi
 800c914:	2320      	movmi	r3, #32
 800c916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c91a:	0713      	lsls	r3, r2, #28
 800c91c:	bf44      	itt	mi
 800c91e:	232b      	movmi	r3, #43	@ 0x2b
 800c920:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c924:	f89a 3000 	ldrb.w	r3, [sl]
 800c928:	2b2a      	cmp	r3, #42	@ 0x2a
 800c92a:	d015      	beq.n	800c958 <_vfiprintf_r+0x120>
 800c92c:	9a07      	ldr	r2, [sp, #28]
 800c92e:	4654      	mov	r4, sl
 800c930:	2000      	movs	r0, #0
 800c932:	f04f 0c0a 	mov.w	ip, #10
 800c936:	4621      	mov	r1, r4
 800c938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c93c:	3b30      	subs	r3, #48	@ 0x30
 800c93e:	2b09      	cmp	r3, #9
 800c940:	d94b      	bls.n	800c9da <_vfiprintf_r+0x1a2>
 800c942:	b1b0      	cbz	r0, 800c972 <_vfiprintf_r+0x13a>
 800c944:	9207      	str	r2, [sp, #28]
 800c946:	e014      	b.n	800c972 <_vfiprintf_r+0x13a>
 800c948:	eba0 0308 	sub.w	r3, r0, r8
 800c94c:	fa09 f303 	lsl.w	r3, r9, r3
 800c950:	4313      	orrs	r3, r2
 800c952:	9304      	str	r3, [sp, #16]
 800c954:	46a2      	mov	sl, r4
 800c956:	e7d2      	b.n	800c8fe <_vfiprintf_r+0xc6>
 800c958:	9b03      	ldr	r3, [sp, #12]
 800c95a:	1d19      	adds	r1, r3, #4
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	9103      	str	r1, [sp, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	bfbb      	ittet	lt
 800c964:	425b      	neglt	r3, r3
 800c966:	f042 0202 	orrlt.w	r2, r2, #2
 800c96a:	9307      	strge	r3, [sp, #28]
 800c96c:	9307      	strlt	r3, [sp, #28]
 800c96e:	bfb8      	it	lt
 800c970:	9204      	strlt	r2, [sp, #16]
 800c972:	7823      	ldrb	r3, [r4, #0]
 800c974:	2b2e      	cmp	r3, #46	@ 0x2e
 800c976:	d10a      	bne.n	800c98e <_vfiprintf_r+0x156>
 800c978:	7863      	ldrb	r3, [r4, #1]
 800c97a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c97c:	d132      	bne.n	800c9e4 <_vfiprintf_r+0x1ac>
 800c97e:	9b03      	ldr	r3, [sp, #12]
 800c980:	1d1a      	adds	r2, r3, #4
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	9203      	str	r2, [sp, #12]
 800c986:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c98a:	3402      	adds	r4, #2
 800c98c:	9305      	str	r3, [sp, #20]
 800c98e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca64 <_vfiprintf_r+0x22c>
 800c992:	7821      	ldrb	r1, [r4, #0]
 800c994:	2203      	movs	r2, #3
 800c996:	4650      	mov	r0, sl
 800c998:	f7f3 fc1a 	bl	80001d0 <memchr>
 800c99c:	b138      	cbz	r0, 800c9ae <_vfiprintf_r+0x176>
 800c99e:	9b04      	ldr	r3, [sp, #16]
 800c9a0:	eba0 000a 	sub.w	r0, r0, sl
 800c9a4:	2240      	movs	r2, #64	@ 0x40
 800c9a6:	4082      	lsls	r2, r0
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	3401      	adds	r4, #1
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b2:	4829      	ldr	r0, [pc, #164]	@ (800ca58 <_vfiprintf_r+0x220>)
 800c9b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9b8:	2206      	movs	r2, #6
 800c9ba:	f7f3 fc09 	bl	80001d0 <memchr>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d03f      	beq.n	800ca42 <_vfiprintf_r+0x20a>
 800c9c2:	4b26      	ldr	r3, [pc, #152]	@ (800ca5c <_vfiprintf_r+0x224>)
 800c9c4:	bb1b      	cbnz	r3, 800ca0e <_vfiprintf_r+0x1d6>
 800c9c6:	9b03      	ldr	r3, [sp, #12]
 800c9c8:	3307      	adds	r3, #7
 800c9ca:	f023 0307 	bic.w	r3, r3, #7
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	9303      	str	r3, [sp, #12]
 800c9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9d4:	443b      	add	r3, r7
 800c9d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9d8:	e76a      	b.n	800c8b0 <_vfiprintf_r+0x78>
 800c9da:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9de:	460c      	mov	r4, r1
 800c9e0:	2001      	movs	r0, #1
 800c9e2:	e7a8      	b.n	800c936 <_vfiprintf_r+0xfe>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	3401      	adds	r4, #1
 800c9e8:	9305      	str	r3, [sp, #20]
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	f04f 0c0a 	mov.w	ip, #10
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9f6:	3a30      	subs	r2, #48	@ 0x30
 800c9f8:	2a09      	cmp	r2, #9
 800c9fa:	d903      	bls.n	800ca04 <_vfiprintf_r+0x1cc>
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0c6      	beq.n	800c98e <_vfiprintf_r+0x156>
 800ca00:	9105      	str	r1, [sp, #20]
 800ca02:	e7c4      	b.n	800c98e <_vfiprintf_r+0x156>
 800ca04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca08:	4604      	mov	r4, r0
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e7f0      	b.n	800c9f0 <_vfiprintf_r+0x1b8>
 800ca0e:	ab03      	add	r3, sp, #12
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	462a      	mov	r2, r5
 800ca14:	4b12      	ldr	r3, [pc, #72]	@ (800ca60 <_vfiprintf_r+0x228>)
 800ca16:	a904      	add	r1, sp, #16
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f7fc fa75 	bl	8008f08 <_printf_float>
 800ca1e:	4607      	mov	r7, r0
 800ca20:	1c78      	adds	r0, r7, #1
 800ca22:	d1d6      	bne.n	800c9d2 <_vfiprintf_r+0x19a>
 800ca24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca26:	07d9      	lsls	r1, r3, #31
 800ca28:	d405      	bmi.n	800ca36 <_vfiprintf_r+0x1fe>
 800ca2a:	89ab      	ldrh	r3, [r5, #12]
 800ca2c:	059a      	lsls	r2, r3, #22
 800ca2e:	d402      	bmi.n	800ca36 <_vfiprintf_r+0x1fe>
 800ca30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca32:	f7fd fae5 	bl	800a000 <__retarget_lock_release_recursive>
 800ca36:	89ab      	ldrh	r3, [r5, #12]
 800ca38:	065b      	lsls	r3, r3, #25
 800ca3a:	f53f af1f 	bmi.w	800c87c <_vfiprintf_r+0x44>
 800ca3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca40:	e71e      	b.n	800c880 <_vfiprintf_r+0x48>
 800ca42:	ab03      	add	r3, sp, #12
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	462a      	mov	r2, r5
 800ca48:	4b05      	ldr	r3, [pc, #20]	@ (800ca60 <_vfiprintf_r+0x228>)
 800ca4a:	a904      	add	r1, sp, #16
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f7fc fcf3 	bl	8009438 <_printf_i>
 800ca52:	e7e4      	b.n	800ca1e <_vfiprintf_r+0x1e6>
 800ca54:	0800dbd1 	.word	0x0800dbd1
 800ca58:	0800dbdb 	.word	0x0800dbdb
 800ca5c:	08008f09 	.word	0x08008f09
 800ca60:	0800c813 	.word	0x0800c813
 800ca64:	0800dbd7 	.word	0x0800dbd7

0800ca68 <__sflush_r>:
 800ca68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca70:	0716      	lsls	r6, r2, #28
 800ca72:	4605      	mov	r5, r0
 800ca74:	460c      	mov	r4, r1
 800ca76:	d454      	bmi.n	800cb22 <__sflush_r+0xba>
 800ca78:	684b      	ldr	r3, [r1, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	dc02      	bgt.n	800ca84 <__sflush_r+0x1c>
 800ca7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	dd48      	ble.n	800cb16 <__sflush_r+0xae>
 800ca84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca86:	2e00      	cmp	r6, #0
 800ca88:	d045      	beq.n	800cb16 <__sflush_r+0xae>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca90:	682f      	ldr	r7, [r5, #0]
 800ca92:	6a21      	ldr	r1, [r4, #32]
 800ca94:	602b      	str	r3, [r5, #0]
 800ca96:	d030      	beq.n	800cafa <__sflush_r+0x92>
 800ca98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	0759      	lsls	r1, r3, #29
 800ca9e:	d505      	bpl.n	800caac <__sflush_r+0x44>
 800caa0:	6863      	ldr	r3, [r4, #4]
 800caa2:	1ad2      	subs	r2, r2, r3
 800caa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800caa6:	b10b      	cbz	r3, 800caac <__sflush_r+0x44>
 800caa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800caaa:	1ad2      	subs	r2, r2, r3
 800caac:	2300      	movs	r3, #0
 800caae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cab0:	6a21      	ldr	r1, [r4, #32]
 800cab2:	4628      	mov	r0, r5
 800cab4:	47b0      	blx	r6
 800cab6:	1c43      	adds	r3, r0, #1
 800cab8:	89a3      	ldrh	r3, [r4, #12]
 800caba:	d106      	bne.n	800caca <__sflush_r+0x62>
 800cabc:	6829      	ldr	r1, [r5, #0]
 800cabe:	291d      	cmp	r1, #29
 800cac0:	d82b      	bhi.n	800cb1a <__sflush_r+0xb2>
 800cac2:	4a2a      	ldr	r2, [pc, #168]	@ (800cb6c <__sflush_r+0x104>)
 800cac4:	410a      	asrs	r2, r1
 800cac6:	07d6      	lsls	r6, r2, #31
 800cac8:	d427      	bmi.n	800cb1a <__sflush_r+0xb2>
 800caca:	2200      	movs	r2, #0
 800cacc:	6062      	str	r2, [r4, #4]
 800cace:	04d9      	lsls	r1, r3, #19
 800cad0:	6922      	ldr	r2, [r4, #16]
 800cad2:	6022      	str	r2, [r4, #0]
 800cad4:	d504      	bpl.n	800cae0 <__sflush_r+0x78>
 800cad6:	1c42      	adds	r2, r0, #1
 800cad8:	d101      	bne.n	800cade <__sflush_r+0x76>
 800cada:	682b      	ldr	r3, [r5, #0]
 800cadc:	b903      	cbnz	r3, 800cae0 <__sflush_r+0x78>
 800cade:	6560      	str	r0, [r4, #84]	@ 0x54
 800cae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cae2:	602f      	str	r7, [r5, #0]
 800cae4:	b1b9      	cbz	r1, 800cb16 <__sflush_r+0xae>
 800cae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800caea:	4299      	cmp	r1, r3
 800caec:	d002      	beq.n	800caf4 <__sflush_r+0x8c>
 800caee:	4628      	mov	r0, r5
 800caf0:	f7fe f8ea 	bl	800acc8 <_free_r>
 800caf4:	2300      	movs	r3, #0
 800caf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800caf8:	e00d      	b.n	800cb16 <__sflush_r+0xae>
 800cafa:	2301      	movs	r3, #1
 800cafc:	4628      	mov	r0, r5
 800cafe:	47b0      	blx	r6
 800cb00:	4602      	mov	r2, r0
 800cb02:	1c50      	adds	r0, r2, #1
 800cb04:	d1c9      	bne.n	800ca9a <__sflush_r+0x32>
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d0c6      	beq.n	800ca9a <__sflush_r+0x32>
 800cb0c:	2b1d      	cmp	r3, #29
 800cb0e:	d001      	beq.n	800cb14 <__sflush_r+0xac>
 800cb10:	2b16      	cmp	r3, #22
 800cb12:	d11e      	bne.n	800cb52 <__sflush_r+0xea>
 800cb14:	602f      	str	r7, [r5, #0]
 800cb16:	2000      	movs	r0, #0
 800cb18:	e022      	b.n	800cb60 <__sflush_r+0xf8>
 800cb1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb1e:	b21b      	sxth	r3, r3
 800cb20:	e01b      	b.n	800cb5a <__sflush_r+0xf2>
 800cb22:	690f      	ldr	r7, [r1, #16]
 800cb24:	2f00      	cmp	r7, #0
 800cb26:	d0f6      	beq.n	800cb16 <__sflush_r+0xae>
 800cb28:	0793      	lsls	r3, r2, #30
 800cb2a:	680e      	ldr	r6, [r1, #0]
 800cb2c:	bf08      	it	eq
 800cb2e:	694b      	ldreq	r3, [r1, #20]
 800cb30:	600f      	str	r7, [r1, #0]
 800cb32:	bf18      	it	ne
 800cb34:	2300      	movne	r3, #0
 800cb36:	eba6 0807 	sub.w	r8, r6, r7
 800cb3a:	608b      	str	r3, [r1, #8]
 800cb3c:	f1b8 0f00 	cmp.w	r8, #0
 800cb40:	dde9      	ble.n	800cb16 <__sflush_r+0xae>
 800cb42:	6a21      	ldr	r1, [r4, #32]
 800cb44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb46:	4643      	mov	r3, r8
 800cb48:	463a      	mov	r2, r7
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	47b0      	blx	r6
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	dc08      	bgt.n	800cb64 <__sflush_r+0xfc>
 800cb52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb5a:	81a3      	strh	r3, [r4, #12]
 800cb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb64:	4407      	add	r7, r0
 800cb66:	eba8 0800 	sub.w	r8, r8, r0
 800cb6a:	e7e7      	b.n	800cb3c <__sflush_r+0xd4>
 800cb6c:	dfbffffe 	.word	0xdfbffffe

0800cb70 <_fflush_r>:
 800cb70:	b538      	push	{r3, r4, r5, lr}
 800cb72:	690b      	ldr	r3, [r1, #16]
 800cb74:	4605      	mov	r5, r0
 800cb76:	460c      	mov	r4, r1
 800cb78:	b913      	cbnz	r3, 800cb80 <_fflush_r+0x10>
 800cb7a:	2500      	movs	r5, #0
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	bd38      	pop	{r3, r4, r5, pc}
 800cb80:	b118      	cbz	r0, 800cb8a <_fflush_r+0x1a>
 800cb82:	6a03      	ldr	r3, [r0, #32]
 800cb84:	b90b      	cbnz	r3, 800cb8a <_fflush_r+0x1a>
 800cb86:	f7fd f817 	bl	8009bb8 <__sinit>
 800cb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0f3      	beq.n	800cb7a <_fflush_r+0xa>
 800cb92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb94:	07d0      	lsls	r0, r2, #31
 800cb96:	d404      	bmi.n	800cba2 <_fflush_r+0x32>
 800cb98:	0599      	lsls	r1, r3, #22
 800cb9a:	d402      	bmi.n	800cba2 <_fflush_r+0x32>
 800cb9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb9e:	f7fd fa2e 	bl	8009ffe <__retarget_lock_acquire_recursive>
 800cba2:	4628      	mov	r0, r5
 800cba4:	4621      	mov	r1, r4
 800cba6:	f7ff ff5f 	bl	800ca68 <__sflush_r>
 800cbaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbac:	07da      	lsls	r2, r3, #31
 800cbae:	4605      	mov	r5, r0
 800cbb0:	d4e4      	bmi.n	800cb7c <_fflush_r+0xc>
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	059b      	lsls	r3, r3, #22
 800cbb6:	d4e1      	bmi.n	800cb7c <_fflush_r+0xc>
 800cbb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbba:	f7fd fa21 	bl	800a000 <__retarget_lock_release_recursive>
 800cbbe:	e7dd      	b.n	800cb7c <_fflush_r+0xc>

0800cbc0 <__swhatbuf_r>:
 800cbc0:	b570      	push	{r4, r5, r6, lr}
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc8:	2900      	cmp	r1, #0
 800cbca:	b096      	sub	sp, #88	@ 0x58
 800cbcc:	4615      	mov	r5, r2
 800cbce:	461e      	mov	r6, r3
 800cbd0:	da0d      	bge.n	800cbee <__swhatbuf_r+0x2e>
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbd8:	f04f 0100 	mov.w	r1, #0
 800cbdc:	bf14      	ite	ne
 800cbde:	2340      	movne	r3, #64	@ 0x40
 800cbe0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	6031      	str	r1, [r6, #0]
 800cbe8:	602b      	str	r3, [r5, #0]
 800cbea:	b016      	add	sp, #88	@ 0x58
 800cbec:	bd70      	pop	{r4, r5, r6, pc}
 800cbee:	466a      	mov	r2, sp
 800cbf0:	f000 f8a8 	bl	800cd44 <_fstat_r>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	dbec      	blt.n	800cbd2 <__swhatbuf_r+0x12>
 800cbf8:	9901      	ldr	r1, [sp, #4]
 800cbfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc02:	4259      	negs	r1, r3
 800cc04:	4159      	adcs	r1, r3
 800cc06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc0a:	e7eb      	b.n	800cbe4 <__swhatbuf_r+0x24>

0800cc0c <__smakebuf_r>:
 800cc0c:	898b      	ldrh	r3, [r1, #12]
 800cc0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc10:	079d      	lsls	r5, r3, #30
 800cc12:	4606      	mov	r6, r0
 800cc14:	460c      	mov	r4, r1
 800cc16:	d507      	bpl.n	800cc28 <__smakebuf_r+0x1c>
 800cc18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	6123      	str	r3, [r4, #16]
 800cc20:	2301      	movs	r3, #1
 800cc22:	6163      	str	r3, [r4, #20]
 800cc24:	b003      	add	sp, #12
 800cc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc28:	ab01      	add	r3, sp, #4
 800cc2a:	466a      	mov	r2, sp
 800cc2c:	f7ff ffc8 	bl	800cbc0 <__swhatbuf_r>
 800cc30:	9f00      	ldr	r7, [sp, #0]
 800cc32:	4605      	mov	r5, r0
 800cc34:	4639      	mov	r1, r7
 800cc36:	4630      	mov	r0, r6
 800cc38:	f7fe f8ba 	bl	800adb0 <_malloc_r>
 800cc3c:	b948      	cbnz	r0, 800cc52 <__smakebuf_r+0x46>
 800cc3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc42:	059a      	lsls	r2, r3, #22
 800cc44:	d4ee      	bmi.n	800cc24 <__smakebuf_r+0x18>
 800cc46:	f023 0303 	bic.w	r3, r3, #3
 800cc4a:	f043 0302 	orr.w	r3, r3, #2
 800cc4e:	81a3      	strh	r3, [r4, #12]
 800cc50:	e7e2      	b.n	800cc18 <__smakebuf_r+0xc>
 800cc52:	89a3      	ldrh	r3, [r4, #12]
 800cc54:	6020      	str	r0, [r4, #0]
 800cc56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	9b01      	ldr	r3, [sp, #4]
 800cc5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc62:	b15b      	cbz	r3, 800cc7c <__smakebuf_r+0x70>
 800cc64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc68:	4630      	mov	r0, r6
 800cc6a:	f000 f87d 	bl	800cd68 <_isatty_r>
 800cc6e:	b128      	cbz	r0, 800cc7c <__smakebuf_r+0x70>
 800cc70:	89a3      	ldrh	r3, [r4, #12]
 800cc72:	f023 0303 	bic.w	r3, r3, #3
 800cc76:	f043 0301 	orr.w	r3, r3, #1
 800cc7a:	81a3      	strh	r3, [r4, #12]
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	431d      	orrs	r5, r3
 800cc80:	81a5      	strh	r5, [r4, #12]
 800cc82:	e7cf      	b.n	800cc24 <__smakebuf_r+0x18>

0800cc84 <_putc_r>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	460d      	mov	r5, r1
 800cc88:	4614      	mov	r4, r2
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	b118      	cbz	r0, 800cc96 <_putc_r+0x12>
 800cc8e:	6a03      	ldr	r3, [r0, #32]
 800cc90:	b90b      	cbnz	r3, 800cc96 <_putc_r+0x12>
 800cc92:	f7fc ff91 	bl	8009bb8 <__sinit>
 800cc96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc98:	07d8      	lsls	r0, r3, #31
 800cc9a:	d405      	bmi.n	800cca8 <_putc_r+0x24>
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	0599      	lsls	r1, r3, #22
 800cca0:	d402      	bmi.n	800cca8 <_putc_r+0x24>
 800cca2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cca4:	f7fd f9ab 	bl	8009ffe <__retarget_lock_acquire_recursive>
 800cca8:	68a3      	ldr	r3, [r4, #8]
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	60a3      	str	r3, [r4, #8]
 800ccb0:	da05      	bge.n	800ccbe <_putc_r+0x3a>
 800ccb2:	69a2      	ldr	r2, [r4, #24]
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	db12      	blt.n	800ccde <_putc_r+0x5a>
 800ccb8:	b2eb      	uxtb	r3, r5
 800ccba:	2b0a      	cmp	r3, #10
 800ccbc:	d00f      	beq.n	800ccde <_putc_r+0x5a>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	6022      	str	r2, [r4, #0]
 800ccc4:	701d      	strb	r5, [r3, #0]
 800ccc6:	b2ed      	uxtb	r5, r5
 800ccc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccca:	07da      	lsls	r2, r3, #31
 800cccc:	d405      	bmi.n	800ccda <_putc_r+0x56>
 800ccce:	89a3      	ldrh	r3, [r4, #12]
 800ccd0:	059b      	lsls	r3, r3, #22
 800ccd2:	d402      	bmi.n	800ccda <_putc_r+0x56>
 800ccd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccd6:	f7fd f993 	bl	800a000 <__retarget_lock_release_recursive>
 800ccda:	4628      	mov	r0, r5
 800ccdc:	bd70      	pop	{r4, r5, r6, pc}
 800ccde:	4629      	mov	r1, r5
 800cce0:	4622      	mov	r2, r4
 800cce2:	4630      	mov	r0, r6
 800cce4:	f7fd f879 	bl	8009dda <__swbuf_r>
 800cce8:	4605      	mov	r5, r0
 800ccea:	e7ed      	b.n	800ccc8 <_putc_r+0x44>

0800ccec <memmove>:
 800ccec:	4288      	cmp	r0, r1
 800ccee:	b510      	push	{r4, lr}
 800ccf0:	eb01 0402 	add.w	r4, r1, r2
 800ccf4:	d902      	bls.n	800ccfc <memmove+0x10>
 800ccf6:	4284      	cmp	r4, r0
 800ccf8:	4623      	mov	r3, r4
 800ccfa:	d807      	bhi.n	800cd0c <memmove+0x20>
 800ccfc:	1e43      	subs	r3, r0, #1
 800ccfe:	42a1      	cmp	r1, r4
 800cd00:	d008      	beq.n	800cd14 <memmove+0x28>
 800cd02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd0a:	e7f8      	b.n	800ccfe <memmove+0x12>
 800cd0c:	4402      	add	r2, r0
 800cd0e:	4601      	mov	r1, r0
 800cd10:	428a      	cmp	r2, r1
 800cd12:	d100      	bne.n	800cd16 <memmove+0x2a>
 800cd14:	bd10      	pop	{r4, pc}
 800cd16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd1e:	e7f7      	b.n	800cd10 <memmove+0x24>

0800cd20 <strncmp>:
 800cd20:	b510      	push	{r4, lr}
 800cd22:	b16a      	cbz	r2, 800cd40 <strncmp+0x20>
 800cd24:	3901      	subs	r1, #1
 800cd26:	1884      	adds	r4, r0, r2
 800cd28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d103      	bne.n	800cd3c <strncmp+0x1c>
 800cd34:	42a0      	cmp	r0, r4
 800cd36:	d001      	beq.n	800cd3c <strncmp+0x1c>
 800cd38:	2a00      	cmp	r2, #0
 800cd3a:	d1f5      	bne.n	800cd28 <strncmp+0x8>
 800cd3c:	1ad0      	subs	r0, r2, r3
 800cd3e:	bd10      	pop	{r4, pc}
 800cd40:	4610      	mov	r0, r2
 800cd42:	e7fc      	b.n	800cd3e <strncmp+0x1e>

0800cd44 <_fstat_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	4d07      	ldr	r5, [pc, #28]	@ (800cd64 <_fstat_r+0x20>)
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	4611      	mov	r1, r2
 800cd50:	602b      	str	r3, [r5, #0]
 800cd52:	f7f5 f889 	bl	8001e68 <_fstat>
 800cd56:	1c43      	adds	r3, r0, #1
 800cd58:	d102      	bne.n	800cd60 <_fstat_r+0x1c>
 800cd5a:	682b      	ldr	r3, [r5, #0]
 800cd5c:	b103      	cbz	r3, 800cd60 <_fstat_r+0x1c>
 800cd5e:	6023      	str	r3, [r4, #0]
 800cd60:	bd38      	pop	{r3, r4, r5, pc}
 800cd62:	bf00      	nop
 800cd64:	2000526c 	.word	0x2000526c

0800cd68 <_isatty_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4d06      	ldr	r5, [pc, #24]	@ (800cd84 <_isatty_r+0x1c>)
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	4604      	mov	r4, r0
 800cd70:	4608      	mov	r0, r1
 800cd72:	602b      	str	r3, [r5, #0]
 800cd74:	f7f5 f888 	bl	8001e88 <_isatty>
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	d102      	bne.n	800cd82 <_isatty_r+0x1a>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	b103      	cbz	r3, 800cd82 <_isatty_r+0x1a>
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	2000526c 	.word	0x2000526c

0800cd88 <_sbrk_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4d06      	ldr	r5, [pc, #24]	@ (800cda4 <_sbrk_r+0x1c>)
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	4604      	mov	r4, r0
 800cd90:	4608      	mov	r0, r1
 800cd92:	602b      	str	r3, [r5, #0]
 800cd94:	f7f5 f890 	bl	8001eb8 <_sbrk>
 800cd98:	1c43      	adds	r3, r0, #1
 800cd9a:	d102      	bne.n	800cda2 <_sbrk_r+0x1a>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	b103      	cbz	r3, 800cda2 <_sbrk_r+0x1a>
 800cda0:	6023      	str	r3, [r4, #0]
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	2000526c 	.word	0x2000526c

0800cda8 <nan>:
 800cda8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cdb0 <nan+0x8>
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	00000000 	.word	0x00000000
 800cdb4:	7ff80000 	.word	0x7ff80000

0800cdb8 <__assert_func>:
 800cdb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdba:	4614      	mov	r4, r2
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	4b09      	ldr	r3, [pc, #36]	@ (800cde4 <__assert_func+0x2c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	68d8      	ldr	r0, [r3, #12]
 800cdc6:	b954      	cbnz	r4, 800cdde <__assert_func+0x26>
 800cdc8:	4b07      	ldr	r3, [pc, #28]	@ (800cde8 <__assert_func+0x30>)
 800cdca:	461c      	mov	r4, r3
 800cdcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdd0:	9100      	str	r1, [sp, #0]
 800cdd2:	462b      	mov	r3, r5
 800cdd4:	4905      	ldr	r1, [pc, #20]	@ (800cdec <__assert_func+0x34>)
 800cdd6:	f000 fba7 	bl	800d528 <fiprintf>
 800cdda:	f000 fbb7 	bl	800d54c <abort>
 800cdde:	4b04      	ldr	r3, [pc, #16]	@ (800cdf0 <__assert_func+0x38>)
 800cde0:	e7f4      	b.n	800cdcc <__assert_func+0x14>
 800cde2:	bf00      	nop
 800cde4:	20000040 	.word	0x20000040
 800cde8:	0800dc25 	.word	0x0800dc25
 800cdec:	0800dbf7 	.word	0x0800dbf7
 800cdf0:	0800dbea 	.word	0x0800dbea

0800cdf4 <_calloc_r>:
 800cdf4:	b570      	push	{r4, r5, r6, lr}
 800cdf6:	fba1 5402 	umull	r5, r4, r1, r2
 800cdfa:	b93c      	cbnz	r4, 800ce0c <_calloc_r+0x18>
 800cdfc:	4629      	mov	r1, r5
 800cdfe:	f7fd ffd7 	bl	800adb0 <_malloc_r>
 800ce02:	4606      	mov	r6, r0
 800ce04:	b928      	cbnz	r0, 800ce12 <_calloc_r+0x1e>
 800ce06:	2600      	movs	r6, #0
 800ce08:	4630      	mov	r0, r6
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	220c      	movs	r2, #12
 800ce0e:	6002      	str	r2, [r0, #0]
 800ce10:	e7f9      	b.n	800ce06 <_calloc_r+0x12>
 800ce12:	462a      	mov	r2, r5
 800ce14:	4621      	mov	r1, r4
 800ce16:	f7fd f875 	bl	8009f04 <memset>
 800ce1a:	e7f5      	b.n	800ce08 <_calloc_r+0x14>

0800ce1c <rshift>:
 800ce1c:	6903      	ldr	r3, [r0, #16]
 800ce1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce2a:	f100 0414 	add.w	r4, r0, #20
 800ce2e:	dd45      	ble.n	800cebc <rshift+0xa0>
 800ce30:	f011 011f 	ands.w	r1, r1, #31
 800ce34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce3c:	d10c      	bne.n	800ce58 <rshift+0x3c>
 800ce3e:	f100 0710 	add.w	r7, r0, #16
 800ce42:	4629      	mov	r1, r5
 800ce44:	42b1      	cmp	r1, r6
 800ce46:	d334      	bcc.n	800ceb2 <rshift+0x96>
 800ce48:	1a9b      	subs	r3, r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	1eea      	subs	r2, r5, #3
 800ce4e:	4296      	cmp	r6, r2
 800ce50:	bf38      	it	cc
 800ce52:	2300      	movcc	r3, #0
 800ce54:	4423      	add	r3, r4
 800ce56:	e015      	b.n	800ce84 <rshift+0x68>
 800ce58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce5c:	f1c1 0820 	rsb	r8, r1, #32
 800ce60:	40cf      	lsrs	r7, r1
 800ce62:	f105 0e04 	add.w	lr, r5, #4
 800ce66:	46a1      	mov	r9, r4
 800ce68:	4576      	cmp	r6, lr
 800ce6a:	46f4      	mov	ip, lr
 800ce6c:	d815      	bhi.n	800ce9a <rshift+0x7e>
 800ce6e:	1a9a      	subs	r2, r3, r2
 800ce70:	0092      	lsls	r2, r2, #2
 800ce72:	3a04      	subs	r2, #4
 800ce74:	3501      	adds	r5, #1
 800ce76:	42ae      	cmp	r6, r5
 800ce78:	bf38      	it	cc
 800ce7a:	2200      	movcc	r2, #0
 800ce7c:	18a3      	adds	r3, r4, r2
 800ce7e:	50a7      	str	r7, [r4, r2]
 800ce80:	b107      	cbz	r7, 800ce84 <rshift+0x68>
 800ce82:	3304      	adds	r3, #4
 800ce84:	1b1a      	subs	r2, r3, r4
 800ce86:	42a3      	cmp	r3, r4
 800ce88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce8c:	bf08      	it	eq
 800ce8e:	2300      	moveq	r3, #0
 800ce90:	6102      	str	r2, [r0, #16]
 800ce92:	bf08      	it	eq
 800ce94:	6143      	streq	r3, [r0, #20]
 800ce96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce9a:	f8dc c000 	ldr.w	ip, [ip]
 800ce9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cea2:	ea4c 0707 	orr.w	r7, ip, r7
 800cea6:	f849 7b04 	str.w	r7, [r9], #4
 800ceaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ceae:	40cf      	lsrs	r7, r1
 800ceb0:	e7da      	b.n	800ce68 <rshift+0x4c>
 800ceb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ceb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ceba:	e7c3      	b.n	800ce44 <rshift+0x28>
 800cebc:	4623      	mov	r3, r4
 800cebe:	e7e1      	b.n	800ce84 <rshift+0x68>

0800cec0 <__hexdig_fun>:
 800cec0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cec4:	2b09      	cmp	r3, #9
 800cec6:	d802      	bhi.n	800cece <__hexdig_fun+0xe>
 800cec8:	3820      	subs	r0, #32
 800ceca:	b2c0      	uxtb	r0, r0
 800cecc:	4770      	bx	lr
 800cece:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ced2:	2b05      	cmp	r3, #5
 800ced4:	d801      	bhi.n	800ceda <__hexdig_fun+0x1a>
 800ced6:	3847      	subs	r0, #71	@ 0x47
 800ced8:	e7f7      	b.n	800ceca <__hexdig_fun+0xa>
 800ceda:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d801      	bhi.n	800cee6 <__hexdig_fun+0x26>
 800cee2:	3827      	subs	r0, #39	@ 0x27
 800cee4:	e7f1      	b.n	800ceca <__hexdig_fun+0xa>
 800cee6:	2000      	movs	r0, #0
 800cee8:	4770      	bx	lr
	...

0800ceec <__gethex>:
 800ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef0:	b085      	sub	sp, #20
 800cef2:	468a      	mov	sl, r1
 800cef4:	9302      	str	r3, [sp, #8]
 800cef6:	680b      	ldr	r3, [r1, #0]
 800cef8:	9001      	str	r0, [sp, #4]
 800cefa:	4690      	mov	r8, r2
 800cefc:	1c9c      	adds	r4, r3, #2
 800cefe:	46a1      	mov	r9, r4
 800cf00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cf04:	2830      	cmp	r0, #48	@ 0x30
 800cf06:	d0fa      	beq.n	800cefe <__gethex+0x12>
 800cf08:	eba9 0303 	sub.w	r3, r9, r3
 800cf0c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cf10:	f7ff ffd6 	bl	800cec0 <__hexdig_fun>
 800cf14:	4605      	mov	r5, r0
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d168      	bne.n	800cfec <__gethex+0x100>
 800cf1a:	49a0      	ldr	r1, [pc, #640]	@ (800d19c <__gethex+0x2b0>)
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	4648      	mov	r0, r9
 800cf20:	f7ff fefe 	bl	800cd20 <strncmp>
 800cf24:	4607      	mov	r7, r0
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d167      	bne.n	800cffa <__gethex+0x10e>
 800cf2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cf2e:	4626      	mov	r6, r4
 800cf30:	f7ff ffc6 	bl	800cec0 <__hexdig_fun>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d062      	beq.n	800cffe <__gethex+0x112>
 800cf38:	4623      	mov	r3, r4
 800cf3a:	7818      	ldrb	r0, [r3, #0]
 800cf3c:	2830      	cmp	r0, #48	@ 0x30
 800cf3e:	4699      	mov	r9, r3
 800cf40:	f103 0301 	add.w	r3, r3, #1
 800cf44:	d0f9      	beq.n	800cf3a <__gethex+0x4e>
 800cf46:	f7ff ffbb 	bl	800cec0 <__hexdig_fun>
 800cf4a:	fab0 f580 	clz	r5, r0
 800cf4e:	096d      	lsrs	r5, r5, #5
 800cf50:	f04f 0b01 	mov.w	fp, #1
 800cf54:	464a      	mov	r2, r9
 800cf56:	4616      	mov	r6, r2
 800cf58:	3201      	adds	r2, #1
 800cf5a:	7830      	ldrb	r0, [r6, #0]
 800cf5c:	f7ff ffb0 	bl	800cec0 <__hexdig_fun>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d1f8      	bne.n	800cf56 <__gethex+0x6a>
 800cf64:	498d      	ldr	r1, [pc, #564]	@ (800d19c <__gethex+0x2b0>)
 800cf66:	2201      	movs	r2, #1
 800cf68:	4630      	mov	r0, r6
 800cf6a:	f7ff fed9 	bl	800cd20 <strncmp>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d13f      	bne.n	800cff2 <__gethex+0x106>
 800cf72:	b944      	cbnz	r4, 800cf86 <__gethex+0x9a>
 800cf74:	1c74      	adds	r4, r6, #1
 800cf76:	4622      	mov	r2, r4
 800cf78:	4616      	mov	r6, r2
 800cf7a:	3201      	adds	r2, #1
 800cf7c:	7830      	ldrb	r0, [r6, #0]
 800cf7e:	f7ff ff9f 	bl	800cec0 <__hexdig_fun>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d1f8      	bne.n	800cf78 <__gethex+0x8c>
 800cf86:	1ba4      	subs	r4, r4, r6
 800cf88:	00a7      	lsls	r7, r4, #2
 800cf8a:	7833      	ldrb	r3, [r6, #0]
 800cf8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cf90:	2b50      	cmp	r3, #80	@ 0x50
 800cf92:	d13e      	bne.n	800d012 <__gethex+0x126>
 800cf94:	7873      	ldrb	r3, [r6, #1]
 800cf96:	2b2b      	cmp	r3, #43	@ 0x2b
 800cf98:	d033      	beq.n	800d002 <__gethex+0x116>
 800cf9a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cf9c:	d034      	beq.n	800d008 <__gethex+0x11c>
 800cf9e:	1c71      	adds	r1, r6, #1
 800cfa0:	2400      	movs	r4, #0
 800cfa2:	7808      	ldrb	r0, [r1, #0]
 800cfa4:	f7ff ff8c 	bl	800cec0 <__hexdig_fun>
 800cfa8:	1e43      	subs	r3, r0, #1
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b18      	cmp	r3, #24
 800cfae:	d830      	bhi.n	800d012 <__gethex+0x126>
 800cfb0:	f1a0 0210 	sub.w	r2, r0, #16
 800cfb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfb8:	f7ff ff82 	bl	800cec0 <__hexdig_fun>
 800cfbc:	f100 3cff 	add.w	ip, r0, #4294967295
 800cfc0:	fa5f fc8c 	uxtb.w	ip, ip
 800cfc4:	f1bc 0f18 	cmp.w	ip, #24
 800cfc8:	f04f 030a 	mov.w	r3, #10
 800cfcc:	d91e      	bls.n	800d00c <__gethex+0x120>
 800cfce:	b104      	cbz	r4, 800cfd2 <__gethex+0xe6>
 800cfd0:	4252      	negs	r2, r2
 800cfd2:	4417      	add	r7, r2
 800cfd4:	f8ca 1000 	str.w	r1, [sl]
 800cfd8:	b1ed      	cbz	r5, 800d016 <__gethex+0x12a>
 800cfda:	f1bb 0f00 	cmp.w	fp, #0
 800cfde:	bf0c      	ite	eq
 800cfe0:	2506      	moveq	r5, #6
 800cfe2:	2500      	movne	r5, #0
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	b005      	add	sp, #20
 800cfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfec:	2500      	movs	r5, #0
 800cfee:	462c      	mov	r4, r5
 800cff0:	e7b0      	b.n	800cf54 <__gethex+0x68>
 800cff2:	2c00      	cmp	r4, #0
 800cff4:	d1c7      	bne.n	800cf86 <__gethex+0x9a>
 800cff6:	4627      	mov	r7, r4
 800cff8:	e7c7      	b.n	800cf8a <__gethex+0x9e>
 800cffa:	464e      	mov	r6, r9
 800cffc:	462f      	mov	r7, r5
 800cffe:	2501      	movs	r5, #1
 800d000:	e7c3      	b.n	800cf8a <__gethex+0x9e>
 800d002:	2400      	movs	r4, #0
 800d004:	1cb1      	adds	r1, r6, #2
 800d006:	e7cc      	b.n	800cfa2 <__gethex+0xb6>
 800d008:	2401      	movs	r4, #1
 800d00a:	e7fb      	b.n	800d004 <__gethex+0x118>
 800d00c:	fb03 0002 	mla	r0, r3, r2, r0
 800d010:	e7ce      	b.n	800cfb0 <__gethex+0xc4>
 800d012:	4631      	mov	r1, r6
 800d014:	e7de      	b.n	800cfd4 <__gethex+0xe8>
 800d016:	eba6 0309 	sub.w	r3, r6, r9
 800d01a:	3b01      	subs	r3, #1
 800d01c:	4629      	mov	r1, r5
 800d01e:	2b07      	cmp	r3, #7
 800d020:	dc0a      	bgt.n	800d038 <__gethex+0x14c>
 800d022:	9801      	ldr	r0, [sp, #4]
 800d024:	f7fd ff50 	bl	800aec8 <_Balloc>
 800d028:	4604      	mov	r4, r0
 800d02a:	b940      	cbnz	r0, 800d03e <__gethex+0x152>
 800d02c:	4b5c      	ldr	r3, [pc, #368]	@ (800d1a0 <__gethex+0x2b4>)
 800d02e:	4602      	mov	r2, r0
 800d030:	21e4      	movs	r1, #228	@ 0xe4
 800d032:	485c      	ldr	r0, [pc, #368]	@ (800d1a4 <__gethex+0x2b8>)
 800d034:	f7ff fec0 	bl	800cdb8 <__assert_func>
 800d038:	3101      	adds	r1, #1
 800d03a:	105b      	asrs	r3, r3, #1
 800d03c:	e7ef      	b.n	800d01e <__gethex+0x132>
 800d03e:	f100 0a14 	add.w	sl, r0, #20
 800d042:	2300      	movs	r3, #0
 800d044:	4655      	mov	r5, sl
 800d046:	469b      	mov	fp, r3
 800d048:	45b1      	cmp	r9, r6
 800d04a:	d337      	bcc.n	800d0bc <__gethex+0x1d0>
 800d04c:	f845 bb04 	str.w	fp, [r5], #4
 800d050:	eba5 050a 	sub.w	r5, r5, sl
 800d054:	10ad      	asrs	r5, r5, #2
 800d056:	6125      	str	r5, [r4, #16]
 800d058:	4658      	mov	r0, fp
 800d05a:	f7fe f827 	bl	800b0ac <__hi0bits>
 800d05e:	016d      	lsls	r5, r5, #5
 800d060:	f8d8 6000 	ldr.w	r6, [r8]
 800d064:	1a2d      	subs	r5, r5, r0
 800d066:	42b5      	cmp	r5, r6
 800d068:	dd54      	ble.n	800d114 <__gethex+0x228>
 800d06a:	1bad      	subs	r5, r5, r6
 800d06c:	4629      	mov	r1, r5
 800d06e:	4620      	mov	r0, r4
 800d070:	f7fe fbbb 	bl	800b7ea <__any_on>
 800d074:	4681      	mov	r9, r0
 800d076:	b178      	cbz	r0, 800d098 <__gethex+0x1ac>
 800d078:	1e6b      	subs	r3, r5, #1
 800d07a:	1159      	asrs	r1, r3, #5
 800d07c:	f003 021f 	and.w	r2, r3, #31
 800d080:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d084:	f04f 0901 	mov.w	r9, #1
 800d088:	fa09 f202 	lsl.w	r2, r9, r2
 800d08c:	420a      	tst	r2, r1
 800d08e:	d003      	beq.n	800d098 <__gethex+0x1ac>
 800d090:	454b      	cmp	r3, r9
 800d092:	dc36      	bgt.n	800d102 <__gethex+0x216>
 800d094:	f04f 0902 	mov.w	r9, #2
 800d098:	4629      	mov	r1, r5
 800d09a:	4620      	mov	r0, r4
 800d09c:	f7ff febe 	bl	800ce1c <rshift>
 800d0a0:	442f      	add	r7, r5
 800d0a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0a6:	42bb      	cmp	r3, r7
 800d0a8:	da42      	bge.n	800d130 <__gethex+0x244>
 800d0aa:	9801      	ldr	r0, [sp, #4]
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f7fd ff4b 	bl	800af48 <_Bfree>
 800d0b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	6013      	str	r3, [r2, #0]
 800d0b8:	25a3      	movs	r5, #163	@ 0xa3
 800d0ba:	e793      	b.n	800cfe4 <__gethex+0xf8>
 800d0bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d0c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d0c2:	d012      	beq.n	800d0ea <__gethex+0x1fe>
 800d0c4:	2b20      	cmp	r3, #32
 800d0c6:	d104      	bne.n	800d0d2 <__gethex+0x1e6>
 800d0c8:	f845 bb04 	str.w	fp, [r5], #4
 800d0cc:	f04f 0b00 	mov.w	fp, #0
 800d0d0:	465b      	mov	r3, fp
 800d0d2:	7830      	ldrb	r0, [r6, #0]
 800d0d4:	9303      	str	r3, [sp, #12]
 800d0d6:	f7ff fef3 	bl	800cec0 <__hexdig_fun>
 800d0da:	9b03      	ldr	r3, [sp, #12]
 800d0dc:	f000 000f 	and.w	r0, r0, #15
 800d0e0:	4098      	lsls	r0, r3
 800d0e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	e7ae      	b.n	800d048 <__gethex+0x15c>
 800d0ea:	45b1      	cmp	r9, r6
 800d0ec:	d8ea      	bhi.n	800d0c4 <__gethex+0x1d8>
 800d0ee:	492b      	ldr	r1, [pc, #172]	@ (800d19c <__gethex+0x2b0>)
 800d0f0:	9303      	str	r3, [sp, #12]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f7ff fe13 	bl	800cd20 <strncmp>
 800d0fa:	9b03      	ldr	r3, [sp, #12]
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d1e1      	bne.n	800d0c4 <__gethex+0x1d8>
 800d100:	e7a2      	b.n	800d048 <__gethex+0x15c>
 800d102:	1ea9      	subs	r1, r5, #2
 800d104:	4620      	mov	r0, r4
 800d106:	f7fe fb70 	bl	800b7ea <__any_on>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d0c2      	beq.n	800d094 <__gethex+0x1a8>
 800d10e:	f04f 0903 	mov.w	r9, #3
 800d112:	e7c1      	b.n	800d098 <__gethex+0x1ac>
 800d114:	da09      	bge.n	800d12a <__gethex+0x23e>
 800d116:	1b75      	subs	r5, r6, r5
 800d118:	4621      	mov	r1, r4
 800d11a:	9801      	ldr	r0, [sp, #4]
 800d11c:	462a      	mov	r2, r5
 800d11e:	f7fe f92b 	bl	800b378 <__lshift>
 800d122:	1b7f      	subs	r7, r7, r5
 800d124:	4604      	mov	r4, r0
 800d126:	f100 0a14 	add.w	sl, r0, #20
 800d12a:	f04f 0900 	mov.w	r9, #0
 800d12e:	e7b8      	b.n	800d0a2 <__gethex+0x1b6>
 800d130:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d134:	42bd      	cmp	r5, r7
 800d136:	dd6f      	ble.n	800d218 <__gethex+0x32c>
 800d138:	1bed      	subs	r5, r5, r7
 800d13a:	42ae      	cmp	r6, r5
 800d13c:	dc34      	bgt.n	800d1a8 <__gethex+0x2bc>
 800d13e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d142:	2b02      	cmp	r3, #2
 800d144:	d022      	beq.n	800d18c <__gethex+0x2a0>
 800d146:	2b03      	cmp	r3, #3
 800d148:	d024      	beq.n	800d194 <__gethex+0x2a8>
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d115      	bne.n	800d17a <__gethex+0x28e>
 800d14e:	42ae      	cmp	r6, r5
 800d150:	d113      	bne.n	800d17a <__gethex+0x28e>
 800d152:	2e01      	cmp	r6, #1
 800d154:	d10b      	bne.n	800d16e <__gethex+0x282>
 800d156:	9a02      	ldr	r2, [sp, #8]
 800d158:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d15c:	6013      	str	r3, [r2, #0]
 800d15e:	2301      	movs	r3, #1
 800d160:	6123      	str	r3, [r4, #16]
 800d162:	f8ca 3000 	str.w	r3, [sl]
 800d166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d168:	2562      	movs	r5, #98	@ 0x62
 800d16a:	601c      	str	r4, [r3, #0]
 800d16c:	e73a      	b.n	800cfe4 <__gethex+0xf8>
 800d16e:	1e71      	subs	r1, r6, #1
 800d170:	4620      	mov	r0, r4
 800d172:	f7fe fb3a 	bl	800b7ea <__any_on>
 800d176:	2800      	cmp	r0, #0
 800d178:	d1ed      	bne.n	800d156 <__gethex+0x26a>
 800d17a:	9801      	ldr	r0, [sp, #4]
 800d17c:	4621      	mov	r1, r4
 800d17e:	f7fd fee3 	bl	800af48 <_Bfree>
 800d182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d184:	2300      	movs	r3, #0
 800d186:	6013      	str	r3, [r2, #0]
 800d188:	2550      	movs	r5, #80	@ 0x50
 800d18a:	e72b      	b.n	800cfe4 <__gethex+0xf8>
 800d18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1f3      	bne.n	800d17a <__gethex+0x28e>
 800d192:	e7e0      	b.n	800d156 <__gethex+0x26a>
 800d194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1dd      	bne.n	800d156 <__gethex+0x26a>
 800d19a:	e7ee      	b.n	800d17a <__gethex+0x28e>
 800d19c:	0800da78 	.word	0x0800da78
 800d1a0:	0800d911 	.word	0x0800d911
 800d1a4:	0800dc26 	.word	0x0800dc26
 800d1a8:	1e6f      	subs	r7, r5, #1
 800d1aa:	f1b9 0f00 	cmp.w	r9, #0
 800d1ae:	d130      	bne.n	800d212 <__gethex+0x326>
 800d1b0:	b127      	cbz	r7, 800d1bc <__gethex+0x2d0>
 800d1b2:	4639      	mov	r1, r7
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f7fe fb18 	bl	800b7ea <__any_on>
 800d1ba:	4681      	mov	r9, r0
 800d1bc:	117a      	asrs	r2, r7, #5
 800d1be:	2301      	movs	r3, #1
 800d1c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d1c4:	f007 071f 	and.w	r7, r7, #31
 800d1c8:	40bb      	lsls	r3, r7
 800d1ca:	4213      	tst	r3, r2
 800d1cc:	4629      	mov	r1, r5
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	bf18      	it	ne
 800d1d2:	f049 0902 	orrne.w	r9, r9, #2
 800d1d6:	f7ff fe21 	bl	800ce1c <rshift>
 800d1da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d1de:	1b76      	subs	r6, r6, r5
 800d1e0:	2502      	movs	r5, #2
 800d1e2:	f1b9 0f00 	cmp.w	r9, #0
 800d1e6:	d047      	beq.n	800d278 <__gethex+0x38c>
 800d1e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d015      	beq.n	800d21c <__gethex+0x330>
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d017      	beq.n	800d224 <__gethex+0x338>
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d109      	bne.n	800d20c <__gethex+0x320>
 800d1f8:	f019 0f02 	tst.w	r9, #2
 800d1fc:	d006      	beq.n	800d20c <__gethex+0x320>
 800d1fe:	f8da 3000 	ldr.w	r3, [sl]
 800d202:	ea49 0903 	orr.w	r9, r9, r3
 800d206:	f019 0f01 	tst.w	r9, #1
 800d20a:	d10e      	bne.n	800d22a <__gethex+0x33e>
 800d20c:	f045 0510 	orr.w	r5, r5, #16
 800d210:	e032      	b.n	800d278 <__gethex+0x38c>
 800d212:	f04f 0901 	mov.w	r9, #1
 800d216:	e7d1      	b.n	800d1bc <__gethex+0x2d0>
 800d218:	2501      	movs	r5, #1
 800d21a:	e7e2      	b.n	800d1e2 <__gethex+0x2f6>
 800d21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d21e:	f1c3 0301 	rsb	r3, r3, #1
 800d222:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d226:	2b00      	cmp	r3, #0
 800d228:	d0f0      	beq.n	800d20c <__gethex+0x320>
 800d22a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d22e:	f104 0314 	add.w	r3, r4, #20
 800d232:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d236:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d23a:	f04f 0c00 	mov.w	ip, #0
 800d23e:	4618      	mov	r0, r3
 800d240:	f853 2b04 	ldr.w	r2, [r3], #4
 800d244:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d248:	d01b      	beq.n	800d282 <__gethex+0x396>
 800d24a:	3201      	adds	r2, #1
 800d24c:	6002      	str	r2, [r0, #0]
 800d24e:	2d02      	cmp	r5, #2
 800d250:	f104 0314 	add.w	r3, r4, #20
 800d254:	d13c      	bne.n	800d2d0 <__gethex+0x3e4>
 800d256:	f8d8 2000 	ldr.w	r2, [r8]
 800d25a:	3a01      	subs	r2, #1
 800d25c:	42b2      	cmp	r2, r6
 800d25e:	d109      	bne.n	800d274 <__gethex+0x388>
 800d260:	1171      	asrs	r1, r6, #5
 800d262:	2201      	movs	r2, #1
 800d264:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d268:	f006 061f 	and.w	r6, r6, #31
 800d26c:	fa02 f606 	lsl.w	r6, r2, r6
 800d270:	421e      	tst	r6, r3
 800d272:	d13a      	bne.n	800d2ea <__gethex+0x3fe>
 800d274:	f045 0520 	orr.w	r5, r5, #32
 800d278:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d27a:	601c      	str	r4, [r3, #0]
 800d27c:	9b02      	ldr	r3, [sp, #8]
 800d27e:	601f      	str	r7, [r3, #0]
 800d280:	e6b0      	b.n	800cfe4 <__gethex+0xf8>
 800d282:	4299      	cmp	r1, r3
 800d284:	f843 cc04 	str.w	ip, [r3, #-4]
 800d288:	d8d9      	bhi.n	800d23e <__gethex+0x352>
 800d28a:	68a3      	ldr	r3, [r4, #8]
 800d28c:	459b      	cmp	fp, r3
 800d28e:	db17      	blt.n	800d2c0 <__gethex+0x3d4>
 800d290:	6861      	ldr	r1, [r4, #4]
 800d292:	9801      	ldr	r0, [sp, #4]
 800d294:	3101      	adds	r1, #1
 800d296:	f7fd fe17 	bl	800aec8 <_Balloc>
 800d29a:	4681      	mov	r9, r0
 800d29c:	b918      	cbnz	r0, 800d2a6 <__gethex+0x3ba>
 800d29e:	4b1a      	ldr	r3, [pc, #104]	@ (800d308 <__gethex+0x41c>)
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	2184      	movs	r1, #132	@ 0x84
 800d2a4:	e6c5      	b.n	800d032 <__gethex+0x146>
 800d2a6:	6922      	ldr	r2, [r4, #16]
 800d2a8:	3202      	adds	r2, #2
 800d2aa:	f104 010c 	add.w	r1, r4, #12
 800d2ae:	0092      	lsls	r2, r2, #2
 800d2b0:	300c      	adds	r0, #12
 800d2b2:	f7fc fea6 	bl	800a002 <memcpy>
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	9801      	ldr	r0, [sp, #4]
 800d2ba:	f7fd fe45 	bl	800af48 <_Bfree>
 800d2be:	464c      	mov	r4, r9
 800d2c0:	6923      	ldr	r3, [r4, #16]
 800d2c2:	1c5a      	adds	r2, r3, #1
 800d2c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2c8:	6122      	str	r2, [r4, #16]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	615a      	str	r2, [r3, #20]
 800d2ce:	e7be      	b.n	800d24e <__gethex+0x362>
 800d2d0:	6922      	ldr	r2, [r4, #16]
 800d2d2:	455a      	cmp	r2, fp
 800d2d4:	dd0b      	ble.n	800d2ee <__gethex+0x402>
 800d2d6:	2101      	movs	r1, #1
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f7ff fd9f 	bl	800ce1c <rshift>
 800d2de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2e2:	3701      	adds	r7, #1
 800d2e4:	42bb      	cmp	r3, r7
 800d2e6:	f6ff aee0 	blt.w	800d0aa <__gethex+0x1be>
 800d2ea:	2501      	movs	r5, #1
 800d2ec:	e7c2      	b.n	800d274 <__gethex+0x388>
 800d2ee:	f016 061f 	ands.w	r6, r6, #31
 800d2f2:	d0fa      	beq.n	800d2ea <__gethex+0x3fe>
 800d2f4:	4453      	add	r3, sl
 800d2f6:	f1c6 0620 	rsb	r6, r6, #32
 800d2fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d2fe:	f7fd fed5 	bl	800b0ac <__hi0bits>
 800d302:	42b0      	cmp	r0, r6
 800d304:	dbe7      	blt.n	800d2d6 <__gethex+0x3ea>
 800d306:	e7f0      	b.n	800d2ea <__gethex+0x3fe>
 800d308:	0800d911 	.word	0x0800d911

0800d30c <L_shift>:
 800d30c:	f1c2 0208 	rsb	r2, r2, #8
 800d310:	0092      	lsls	r2, r2, #2
 800d312:	b570      	push	{r4, r5, r6, lr}
 800d314:	f1c2 0620 	rsb	r6, r2, #32
 800d318:	6843      	ldr	r3, [r0, #4]
 800d31a:	6804      	ldr	r4, [r0, #0]
 800d31c:	fa03 f506 	lsl.w	r5, r3, r6
 800d320:	432c      	orrs	r4, r5
 800d322:	40d3      	lsrs	r3, r2
 800d324:	6004      	str	r4, [r0, #0]
 800d326:	f840 3f04 	str.w	r3, [r0, #4]!
 800d32a:	4288      	cmp	r0, r1
 800d32c:	d3f4      	bcc.n	800d318 <L_shift+0xc>
 800d32e:	bd70      	pop	{r4, r5, r6, pc}

0800d330 <__match>:
 800d330:	b530      	push	{r4, r5, lr}
 800d332:	6803      	ldr	r3, [r0, #0]
 800d334:	3301      	adds	r3, #1
 800d336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d33a:	b914      	cbnz	r4, 800d342 <__match+0x12>
 800d33c:	6003      	str	r3, [r0, #0]
 800d33e:	2001      	movs	r0, #1
 800d340:	bd30      	pop	{r4, r5, pc}
 800d342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d346:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d34a:	2d19      	cmp	r5, #25
 800d34c:	bf98      	it	ls
 800d34e:	3220      	addls	r2, #32
 800d350:	42a2      	cmp	r2, r4
 800d352:	d0f0      	beq.n	800d336 <__match+0x6>
 800d354:	2000      	movs	r0, #0
 800d356:	e7f3      	b.n	800d340 <__match+0x10>

0800d358 <__hexnan>:
 800d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	680b      	ldr	r3, [r1, #0]
 800d35e:	6801      	ldr	r1, [r0, #0]
 800d360:	115e      	asrs	r6, r3, #5
 800d362:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d366:	f013 031f 	ands.w	r3, r3, #31
 800d36a:	b087      	sub	sp, #28
 800d36c:	bf18      	it	ne
 800d36e:	3604      	addne	r6, #4
 800d370:	2500      	movs	r5, #0
 800d372:	1f37      	subs	r7, r6, #4
 800d374:	4682      	mov	sl, r0
 800d376:	4690      	mov	r8, r2
 800d378:	9301      	str	r3, [sp, #4]
 800d37a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d37e:	46b9      	mov	r9, r7
 800d380:	463c      	mov	r4, r7
 800d382:	9502      	str	r5, [sp, #8]
 800d384:	46ab      	mov	fp, r5
 800d386:	784a      	ldrb	r2, [r1, #1]
 800d388:	1c4b      	adds	r3, r1, #1
 800d38a:	9303      	str	r3, [sp, #12]
 800d38c:	b342      	cbz	r2, 800d3e0 <__hexnan+0x88>
 800d38e:	4610      	mov	r0, r2
 800d390:	9105      	str	r1, [sp, #20]
 800d392:	9204      	str	r2, [sp, #16]
 800d394:	f7ff fd94 	bl	800cec0 <__hexdig_fun>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d151      	bne.n	800d440 <__hexnan+0xe8>
 800d39c:	9a04      	ldr	r2, [sp, #16]
 800d39e:	9905      	ldr	r1, [sp, #20]
 800d3a0:	2a20      	cmp	r2, #32
 800d3a2:	d818      	bhi.n	800d3d6 <__hexnan+0x7e>
 800d3a4:	9b02      	ldr	r3, [sp, #8]
 800d3a6:	459b      	cmp	fp, r3
 800d3a8:	dd13      	ble.n	800d3d2 <__hexnan+0x7a>
 800d3aa:	454c      	cmp	r4, r9
 800d3ac:	d206      	bcs.n	800d3bc <__hexnan+0x64>
 800d3ae:	2d07      	cmp	r5, #7
 800d3b0:	dc04      	bgt.n	800d3bc <__hexnan+0x64>
 800d3b2:	462a      	mov	r2, r5
 800d3b4:	4649      	mov	r1, r9
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f7ff ffa8 	bl	800d30c <L_shift>
 800d3bc:	4544      	cmp	r4, r8
 800d3be:	d952      	bls.n	800d466 <__hexnan+0x10e>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f1a4 0904 	sub.w	r9, r4, #4
 800d3c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3ca:	f8cd b008 	str.w	fp, [sp, #8]
 800d3ce:	464c      	mov	r4, r9
 800d3d0:	461d      	mov	r5, r3
 800d3d2:	9903      	ldr	r1, [sp, #12]
 800d3d4:	e7d7      	b.n	800d386 <__hexnan+0x2e>
 800d3d6:	2a29      	cmp	r2, #41	@ 0x29
 800d3d8:	d157      	bne.n	800d48a <__hexnan+0x132>
 800d3da:	3102      	adds	r1, #2
 800d3dc:	f8ca 1000 	str.w	r1, [sl]
 800d3e0:	f1bb 0f00 	cmp.w	fp, #0
 800d3e4:	d051      	beq.n	800d48a <__hexnan+0x132>
 800d3e6:	454c      	cmp	r4, r9
 800d3e8:	d206      	bcs.n	800d3f8 <__hexnan+0xa0>
 800d3ea:	2d07      	cmp	r5, #7
 800d3ec:	dc04      	bgt.n	800d3f8 <__hexnan+0xa0>
 800d3ee:	462a      	mov	r2, r5
 800d3f0:	4649      	mov	r1, r9
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f7ff ff8a 	bl	800d30c <L_shift>
 800d3f8:	4544      	cmp	r4, r8
 800d3fa:	d936      	bls.n	800d46a <__hexnan+0x112>
 800d3fc:	f1a8 0204 	sub.w	r2, r8, #4
 800d400:	4623      	mov	r3, r4
 800d402:	f853 1b04 	ldr.w	r1, [r3], #4
 800d406:	f842 1f04 	str.w	r1, [r2, #4]!
 800d40a:	429f      	cmp	r7, r3
 800d40c:	d2f9      	bcs.n	800d402 <__hexnan+0xaa>
 800d40e:	1b3b      	subs	r3, r7, r4
 800d410:	f023 0303 	bic.w	r3, r3, #3
 800d414:	3304      	adds	r3, #4
 800d416:	3401      	adds	r4, #1
 800d418:	3e03      	subs	r6, #3
 800d41a:	42b4      	cmp	r4, r6
 800d41c:	bf88      	it	hi
 800d41e:	2304      	movhi	r3, #4
 800d420:	4443      	add	r3, r8
 800d422:	2200      	movs	r2, #0
 800d424:	f843 2b04 	str.w	r2, [r3], #4
 800d428:	429f      	cmp	r7, r3
 800d42a:	d2fb      	bcs.n	800d424 <__hexnan+0xcc>
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	b91b      	cbnz	r3, 800d438 <__hexnan+0xe0>
 800d430:	4547      	cmp	r7, r8
 800d432:	d128      	bne.n	800d486 <__hexnan+0x12e>
 800d434:	2301      	movs	r3, #1
 800d436:	603b      	str	r3, [r7, #0]
 800d438:	2005      	movs	r0, #5
 800d43a:	b007      	add	sp, #28
 800d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d440:	3501      	adds	r5, #1
 800d442:	2d08      	cmp	r5, #8
 800d444:	f10b 0b01 	add.w	fp, fp, #1
 800d448:	dd06      	ble.n	800d458 <__hexnan+0x100>
 800d44a:	4544      	cmp	r4, r8
 800d44c:	d9c1      	bls.n	800d3d2 <__hexnan+0x7a>
 800d44e:	2300      	movs	r3, #0
 800d450:	f844 3c04 	str.w	r3, [r4, #-4]
 800d454:	2501      	movs	r5, #1
 800d456:	3c04      	subs	r4, #4
 800d458:	6822      	ldr	r2, [r4, #0]
 800d45a:	f000 000f 	and.w	r0, r0, #15
 800d45e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d462:	6020      	str	r0, [r4, #0]
 800d464:	e7b5      	b.n	800d3d2 <__hexnan+0x7a>
 800d466:	2508      	movs	r5, #8
 800d468:	e7b3      	b.n	800d3d2 <__hexnan+0x7a>
 800d46a:	9b01      	ldr	r3, [sp, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d0dd      	beq.n	800d42c <__hexnan+0xd4>
 800d470:	f1c3 0320 	rsb	r3, r3, #32
 800d474:	f04f 32ff 	mov.w	r2, #4294967295
 800d478:	40da      	lsrs	r2, r3
 800d47a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d47e:	4013      	ands	r3, r2
 800d480:	f846 3c04 	str.w	r3, [r6, #-4]
 800d484:	e7d2      	b.n	800d42c <__hexnan+0xd4>
 800d486:	3f04      	subs	r7, #4
 800d488:	e7d0      	b.n	800d42c <__hexnan+0xd4>
 800d48a:	2004      	movs	r0, #4
 800d48c:	e7d5      	b.n	800d43a <__hexnan+0xe2>

0800d48e <__ascii_mbtowc>:
 800d48e:	b082      	sub	sp, #8
 800d490:	b901      	cbnz	r1, 800d494 <__ascii_mbtowc+0x6>
 800d492:	a901      	add	r1, sp, #4
 800d494:	b142      	cbz	r2, 800d4a8 <__ascii_mbtowc+0x1a>
 800d496:	b14b      	cbz	r3, 800d4ac <__ascii_mbtowc+0x1e>
 800d498:	7813      	ldrb	r3, [r2, #0]
 800d49a:	600b      	str	r3, [r1, #0]
 800d49c:	7812      	ldrb	r2, [r2, #0]
 800d49e:	1e10      	subs	r0, r2, #0
 800d4a0:	bf18      	it	ne
 800d4a2:	2001      	movne	r0, #1
 800d4a4:	b002      	add	sp, #8
 800d4a6:	4770      	bx	lr
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	e7fb      	b.n	800d4a4 <__ascii_mbtowc+0x16>
 800d4ac:	f06f 0001 	mvn.w	r0, #1
 800d4b0:	e7f8      	b.n	800d4a4 <__ascii_mbtowc+0x16>

0800d4b2 <_realloc_r>:
 800d4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b6:	4680      	mov	r8, r0
 800d4b8:	4615      	mov	r5, r2
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	b921      	cbnz	r1, 800d4c8 <_realloc_r+0x16>
 800d4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	f7fd bc74 	b.w	800adb0 <_malloc_r>
 800d4c8:	b92a      	cbnz	r2, 800d4d6 <_realloc_r+0x24>
 800d4ca:	f7fd fbfd 	bl	800acc8 <_free_r>
 800d4ce:	2400      	movs	r4, #0
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d6:	f000 f840 	bl	800d55a <_malloc_usable_size_r>
 800d4da:	4285      	cmp	r5, r0
 800d4dc:	4606      	mov	r6, r0
 800d4de:	d802      	bhi.n	800d4e6 <_realloc_r+0x34>
 800d4e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d4e4:	d8f4      	bhi.n	800d4d0 <_realloc_r+0x1e>
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	4640      	mov	r0, r8
 800d4ea:	f7fd fc61 	bl	800adb0 <_malloc_r>
 800d4ee:	4607      	mov	r7, r0
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d0ec      	beq.n	800d4ce <_realloc_r+0x1c>
 800d4f4:	42b5      	cmp	r5, r6
 800d4f6:	462a      	mov	r2, r5
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	bf28      	it	cs
 800d4fc:	4632      	movcs	r2, r6
 800d4fe:	f7fc fd80 	bl	800a002 <memcpy>
 800d502:	4621      	mov	r1, r4
 800d504:	4640      	mov	r0, r8
 800d506:	f7fd fbdf 	bl	800acc8 <_free_r>
 800d50a:	463c      	mov	r4, r7
 800d50c:	e7e0      	b.n	800d4d0 <_realloc_r+0x1e>

0800d50e <__ascii_wctomb>:
 800d50e:	4603      	mov	r3, r0
 800d510:	4608      	mov	r0, r1
 800d512:	b141      	cbz	r1, 800d526 <__ascii_wctomb+0x18>
 800d514:	2aff      	cmp	r2, #255	@ 0xff
 800d516:	d904      	bls.n	800d522 <__ascii_wctomb+0x14>
 800d518:	228a      	movs	r2, #138	@ 0x8a
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	f04f 30ff 	mov.w	r0, #4294967295
 800d520:	4770      	bx	lr
 800d522:	700a      	strb	r2, [r1, #0]
 800d524:	2001      	movs	r0, #1
 800d526:	4770      	bx	lr

0800d528 <fiprintf>:
 800d528:	b40e      	push	{r1, r2, r3}
 800d52a:	b503      	push	{r0, r1, lr}
 800d52c:	4601      	mov	r1, r0
 800d52e:	ab03      	add	r3, sp, #12
 800d530:	4805      	ldr	r0, [pc, #20]	@ (800d548 <fiprintf+0x20>)
 800d532:	f853 2b04 	ldr.w	r2, [r3], #4
 800d536:	6800      	ldr	r0, [r0, #0]
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	f7ff f97d 	bl	800c838 <_vfiprintf_r>
 800d53e:	b002      	add	sp, #8
 800d540:	f85d eb04 	ldr.w	lr, [sp], #4
 800d544:	b003      	add	sp, #12
 800d546:	4770      	bx	lr
 800d548:	20000040 	.word	0x20000040

0800d54c <abort>:
 800d54c:	b508      	push	{r3, lr}
 800d54e:	2006      	movs	r0, #6
 800d550:	f000 f834 	bl	800d5bc <raise>
 800d554:	2001      	movs	r0, #1
 800d556:	f7f4 fc37 	bl	8001dc8 <_exit>

0800d55a <_malloc_usable_size_r>:
 800d55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d55e:	1f18      	subs	r0, r3, #4
 800d560:	2b00      	cmp	r3, #0
 800d562:	bfbc      	itt	lt
 800d564:	580b      	ldrlt	r3, [r1, r0]
 800d566:	18c0      	addlt	r0, r0, r3
 800d568:	4770      	bx	lr

0800d56a <_raise_r>:
 800d56a:	291f      	cmp	r1, #31
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4605      	mov	r5, r0
 800d570:	460c      	mov	r4, r1
 800d572:	d904      	bls.n	800d57e <_raise_r+0x14>
 800d574:	2316      	movs	r3, #22
 800d576:	6003      	str	r3, [r0, #0]
 800d578:	f04f 30ff 	mov.w	r0, #4294967295
 800d57c:	bd38      	pop	{r3, r4, r5, pc}
 800d57e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d580:	b112      	cbz	r2, 800d588 <_raise_r+0x1e>
 800d582:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d586:	b94b      	cbnz	r3, 800d59c <_raise_r+0x32>
 800d588:	4628      	mov	r0, r5
 800d58a:	f000 f831 	bl	800d5f0 <_getpid_r>
 800d58e:	4622      	mov	r2, r4
 800d590:	4601      	mov	r1, r0
 800d592:	4628      	mov	r0, r5
 800d594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d598:	f000 b818 	b.w	800d5cc <_kill_r>
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d00a      	beq.n	800d5b6 <_raise_r+0x4c>
 800d5a0:	1c59      	adds	r1, r3, #1
 800d5a2:	d103      	bne.n	800d5ac <_raise_r+0x42>
 800d5a4:	2316      	movs	r3, #22
 800d5a6:	6003      	str	r3, [r0, #0]
 800d5a8:	2001      	movs	r0, #1
 800d5aa:	e7e7      	b.n	800d57c <_raise_r+0x12>
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	4798      	blx	r3
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	e7e0      	b.n	800d57c <_raise_r+0x12>
	...

0800d5bc <raise>:
 800d5bc:	4b02      	ldr	r3, [pc, #8]	@ (800d5c8 <raise+0xc>)
 800d5be:	4601      	mov	r1, r0
 800d5c0:	6818      	ldr	r0, [r3, #0]
 800d5c2:	f7ff bfd2 	b.w	800d56a <_raise_r>
 800d5c6:	bf00      	nop
 800d5c8:	20000040 	.word	0x20000040

0800d5cc <_kill_r>:
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	4d07      	ldr	r5, [pc, #28]	@ (800d5ec <_kill_r+0x20>)
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	4608      	mov	r0, r1
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	602b      	str	r3, [r5, #0]
 800d5da:	f7f4 fbe5 	bl	8001da8 <_kill>
 800d5de:	1c43      	adds	r3, r0, #1
 800d5e0:	d102      	bne.n	800d5e8 <_kill_r+0x1c>
 800d5e2:	682b      	ldr	r3, [r5, #0]
 800d5e4:	b103      	cbz	r3, 800d5e8 <_kill_r+0x1c>
 800d5e6:	6023      	str	r3, [r4, #0]
 800d5e8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ea:	bf00      	nop
 800d5ec:	2000526c 	.word	0x2000526c

0800d5f0 <_getpid_r>:
 800d5f0:	f7f4 bbd2 	b.w	8001d98 <_getpid>

0800d5f4 <_init>:
 800d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f6:	bf00      	nop
 800d5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5fa:	bc08      	pop	{r3}
 800d5fc:	469e      	mov	lr, r3
 800d5fe:	4770      	bx	lr

0800d600 <_fini>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	bf00      	nop
 800d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d606:	bc08      	pop	{r3}
 800d608:	469e      	mov	lr, r3
 800d60a:	4770      	bx	lr
